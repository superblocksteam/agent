package main

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"

	superblocksv1 "github.com/superblocksteam/agent/types/gen/go/superblocks/v1"
)

func generate(gen *protogen.Plugin, file *protogen.File) error {
	for _, message := range file.Messages {
		options, ok := message.Desc.Options().(*descriptorpb.MessageOptions)
		if !ok {
			continue
		}

		integration, ok := proto.GetExtension(options, superblocksv1.E_Integrations).(*superblocksv1.Integrations)
		if !ok {
			continue
		}

		if integration == nil || !integration.Registry {
			continue
		}

		if len(message.Oneofs) != 1 {
			continue
		}

		g := gen.NewGeneratedFile(file.GeneratedFilenamePrefix+".pb.superblocks.go", file.GoImportPath)

		g.P("// Code generated by protoc-gen-superblocks. DO NOT EDIT.")
		g.P("// source: ", file.Desc.Path())
		g.P()
		g.P("package ", file.GoPackageName)
		g.P()
		g.P("import (")
		g.P(`	"bytes"`)
		g.P(`	"encoding/json"`)
		g.P()
		g.P(`	"github.com/golang/protobuf/jsonpb"`)
		g.P(")")
		g.P()
		g.P("var marshaler = &jsonpb.Marshaler{EmitDefaults: true}")
		g.P()

		for _, plugin := range message.Oneofs[0].Fields {
			var pluginType string
			var pluginName string
			{
				pluginName = strings.ToLower(plugin.GoName)
				pluginType = pluginName

				if opts := plugin.Desc.Options(); opts != nil {
					options, ok := opts.(*descriptorpb.FieldOptions)
					if !ok {
						continue
					}
					if opts, ok := proto.GetExtension(options, superblocksv1.E_IntegrationOptions).(*superblocksv1.IntegrationOptions); ok && opts != nil && opts.PluginType != "" {
						pluginType = opts.PluginType
					}
				}
			}

			g.P()
			g.P(fmt.Sprintf(`func (*%s) Name() string { return "%s" }`, plugin.GoIdent.GoName, pluginName))
			g.P()
			g.P(fmt.Sprintf(`func (*%s) Type() string { return "%s" }`, plugin.GoIdent.GoName, pluginType))
			g.P()
			g.P(fmt.Sprintf("func (plugin *%s) Build() (map[string]any, error) {", plugin.GoIdent.GoName))
			g.P("var buf bytes.Buffer")
			g.P(fmt.Sprintf("if err := marshaler.Marshal(&buf, plugin.%s); err != nil { return nil, err }", plugin.GoName))
			g.P("var obj map[string]any")
			g.P("if err := json.Unmarshal(buf.Bytes(), &obj); err != nil { return nil, err }")
			g.P("return obj, nil")
			g.P("}")
		}
	}

	return nil
}

func main() {
	protogen.Options{}.Run(func(p *protogen.Plugin) error {
		for _, f := range p.Files {
			if f.Generate {
				if err := generate(p, f); err != nil {
					return err
				}
			}
		}

		return nil
	})
}
