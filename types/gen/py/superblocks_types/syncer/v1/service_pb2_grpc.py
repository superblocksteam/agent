# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from superblocks_types.event.v1 import service_pb2 as event_dot_v1_dot_service__pb2
from superblocks_types.syncer.v1 import service_pb2 as syncer_dot_v1_dot_service__pb2


class IntakeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpsertMetadata = channel.unary_unary(
                '/syncer.v1.IntakeService/UpsertMetadata',
                request_serializer=syncer_dot_v1_dot_service__pb2.UpsertMetadataRequest.SerializeToString,
                response_deserializer=syncer_dot_v1_dot_service__pb2.UpsertMetadataResponse.FromString,
                _registered_method=True)
        self.DeleteMetadata = channel.unary_unary(
                '/syncer.v1.IntakeService/DeleteMetadata',
                request_serializer=syncer_dot_v1_dot_service__pb2.DeleteMetadataRequest.SerializeToString,
                response_deserializer=syncer_dot_v1_dot_service__pb2.DeleteMetadataResponse.FromString,
                _registered_method=True)
        self.IngestEvent = channel.unary_unary(
                '/syncer.v1.IntakeService/IngestEvent',
                request_serializer=event_dot_v1_dot_service__pb2.IngestEventRequest.SerializeToString,
                response_deserializer=event_dot_v1_dot_service__pb2.IngestEventResponse.FromString,
                _registered_method=True)


class IntakeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UpsertMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IngestEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IntakeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpsertMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertMetadata,
                    request_deserializer=syncer_dot_v1_dot_service__pb2.UpsertMetadataRequest.FromString,
                    response_serializer=syncer_dot_v1_dot_service__pb2.UpsertMetadataResponse.SerializeToString,
            ),
            'DeleteMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMetadata,
                    request_deserializer=syncer_dot_v1_dot_service__pb2.DeleteMetadataRequest.FromString,
                    response_serializer=syncer_dot_v1_dot_service__pb2.DeleteMetadataResponse.SerializeToString,
            ),
            'IngestEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.IngestEvent,
                    request_deserializer=event_dot_v1_dot_service__pb2.IngestEventRequest.FromString,
                    response_serializer=event_dot_v1_dot_service__pb2.IngestEventResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'syncer.v1.IntakeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('syncer.v1.IntakeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class IntakeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UpsertMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/syncer.v1.IntakeService/UpsertMetadata',
            syncer_dot_v1_dot_service__pb2.UpsertMetadataRequest.SerializeToString,
            syncer_dot_v1_dot_service__pb2.UpsertMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/syncer.v1.IntakeService/DeleteMetadata',
            syncer_dot_v1_dot_service__pb2.DeleteMetadataRequest.SerializeToString,
            syncer_dot_v1_dot_service__pb2.DeleteMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IngestEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/syncer.v1.IntakeService/IngestEvent',
            event_dot_v1_dot_service__pb2.IngestEventRequest.SerializeToString,
            event_dot_v1_dot_service__pb2.IngestEventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SyncerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Sync = channel.unary_unary(
                '/syncer.v1.SyncerService/Sync',
                request_serializer=syncer_dot_v1_dot_service__pb2.SyncRequest.SerializeToString,
                response_deserializer=syncer_dot_v1_dot_service__pb2.SyncResponse.FromString,
                _registered_method=True)


class SyncerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Sync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SyncerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Sync': grpc.unary_unary_rpc_method_handler(
                    servicer.Sync,
                    request_deserializer=syncer_dot_v1_dot_service__pb2.SyncRequest.FromString,
                    response_serializer=syncer_dot_v1_dot_service__pb2.SyncResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'syncer.v1.SyncerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('syncer.v1.SyncerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SyncerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Sync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/syncer.v1.SyncerService/Sync',
            syncer_dot_v1_dot_service__pb2.SyncRequest.SerializeToString,
            syncer_dot_v1_dot_service__pb2.SyncResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class IntegrationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetConfigurationMetadata = channel.unary_unary(
                '/syncer.v1.IntegrationService/GetConfigurationMetadata',
                request_serializer=syncer_dot_v1_dot_service__pb2.GetConfigurationMetadataRequest.SerializeToString,
                response_deserializer=syncer_dot_v1_dot_service__pb2.GetConfigurationMetadataResponse.FromString,
                _registered_method=True)


class IntegrationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetConfigurationMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IntegrationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetConfigurationMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConfigurationMetadata,
                    request_deserializer=syncer_dot_v1_dot_service__pb2.GetConfigurationMetadataRequest.FromString,
                    response_serializer=syncer_dot_v1_dot_service__pb2.GetConfigurationMetadataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'syncer.v1.IntegrationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('syncer.v1.IntegrationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class IntegrationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetConfigurationMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/syncer.v1.IntegrationService/GetConfigurationMetadata',
            syncer_dot_v1_dot_service__pb2.GetConfigurationMetadataRequest.SerializeToString,
            syncer_dot_v1_dot_service__pb2.GetConfigurationMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
