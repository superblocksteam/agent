// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/superblocksteam/agent/types/gen/go/transport/v1"

	workerv1 "github.com/superblocksteam/agent/types/gen/go/worker/v1"
)

// StepExecutorServiceClient is an autogenerated mock type for the StepExecutorServiceClient type
type StepExecutorServiceClient struct {
	mock.Mock
}

// DeleteDatasource provides a mock function with given fields: ctx, in, opts
func (_m *StepExecutorServiceClient) DeleteDatasource(ctx context.Context, in *v1.Request, opts ...grpc.CallOption) (*v1.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Request, ...grpc.CallOption) (*v1.Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Request, ...grpc.CallOption) *v1.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Execute provides a mock function with given fields: ctx, in, opts
func (_m *StepExecutorServiceClient) Execute(ctx context.Context, in *v1.Request, opts ...grpc.CallOption) (*v1.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Request, ...grpc.CallOption) (*v1.Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Request, ...grpc.CallOption) *v1.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Metadata provides a mock function with given fields: ctx, in, opts
func (_m *StepExecutorServiceClient) Metadata(ctx context.Context, in *v1.Request, opts ...grpc.CallOption) (*v1.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Request, ...grpc.CallOption) (*v1.Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Request, ...grpc.CallOption) *v1.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stream provides a mock function with given fields: ctx, in, opts
func (_m *StepExecutorServiceClient) Stream(ctx context.Context, in *v1.Request, opts ...grpc.CallOption) (workerv1.StepExecutorService_StreamClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 workerv1.StepExecutorService_StreamClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Request, ...grpc.CallOption) (workerv1.StepExecutorService_StreamClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Request, ...grpc.CallOption) workerv1.StepExecutorService_StreamClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workerv1.StepExecutorService_StreamClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestConnection provides a mock function with given fields: ctx, in, opts
func (_m *StepExecutorServiceClient) TestConnection(ctx context.Context, in *v1.Request, opts ...grpc.CallOption) (*v1.Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Request, ...grpc.CallOption) (*v1.Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Request, ...grpc.CallOption) *v1.Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStepExecutorServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewStepExecutorServiceClient creates a new instance of StepExecutorServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStepExecutorServiceClient(t mockConstructorTestingTNewStepExecutorServiceClient) *StepExecutorServiceClient {
	mock := &StepExecutorServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
