// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: worker/v1/step_executor.proto

package v1

import (
	context "context"
	v1 "github.com/superblocksteam/agent/types/gen/go/transport/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StepExecutorService_Stream_FullMethodName           = "/worker.v1.StepExecutorService/Stream"
	StepExecutorService_Execute_FullMethodName          = "/worker.v1.StepExecutorService/Execute"
	StepExecutorService_Metadata_FullMethodName         = "/worker.v1.StepExecutorService/Metadata"
	StepExecutorService_TestConnection_FullMethodName   = "/worker.v1.StepExecutorService/TestConnection"
	StepExecutorService_DeleteDatasource_FullMethodName = "/worker.v1.StepExecutorService/DeleteDatasource"
)

// StepExecutorServiceClient is the client API for StepExecutorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StepExecutorServiceClient interface {
	Stream(ctx context.Context, in *v1.Request, opts ...grpc.CallOption) (StepExecutorService_StreamClient, error)
	Execute(ctx context.Context, in *v1.Request, opts ...grpc.CallOption) (*v1.Response, error)
	Metadata(ctx context.Context, in *v1.Request, opts ...grpc.CallOption) (*v1.Response, error)
	TestConnection(ctx context.Context, in *v1.Request, opts ...grpc.CallOption) (*v1.Response, error)
	DeleteDatasource(ctx context.Context, in *v1.Request, opts ...grpc.CallOption) (*v1.Response, error)
}

type stepExecutorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStepExecutorServiceClient(cc grpc.ClientConnInterface) StepExecutorServiceClient {
	return &stepExecutorServiceClient{cc}
}

func (c *stepExecutorServiceClient) Stream(ctx context.Context, in *v1.Request, opts ...grpc.CallOption) (StepExecutorService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StepExecutorService_ServiceDesc.Streams[0], StepExecutorService_Stream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stepExecutorServiceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StepExecutorService_StreamClient interface {
	Recv() (*StringValue, error)
	grpc.ClientStream
}

type stepExecutorServiceStreamClient struct {
	grpc.ClientStream
}

func (x *stepExecutorServiceStreamClient) Recv() (*StringValue, error) {
	m := new(StringValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stepExecutorServiceClient) Execute(ctx context.Context, in *v1.Request, opts ...grpc.CallOption) (*v1.Response, error) {
	out := new(v1.Response)
	err := c.cc.Invoke(ctx, StepExecutorService_Execute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepExecutorServiceClient) Metadata(ctx context.Context, in *v1.Request, opts ...grpc.CallOption) (*v1.Response, error) {
	out := new(v1.Response)
	err := c.cc.Invoke(ctx, StepExecutorService_Metadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepExecutorServiceClient) TestConnection(ctx context.Context, in *v1.Request, opts ...grpc.CallOption) (*v1.Response, error) {
	out := new(v1.Response)
	err := c.cc.Invoke(ctx, StepExecutorService_TestConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepExecutorServiceClient) DeleteDatasource(ctx context.Context, in *v1.Request, opts ...grpc.CallOption) (*v1.Response, error) {
	out := new(v1.Response)
	err := c.cc.Invoke(ctx, StepExecutorService_DeleteDatasource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StepExecutorServiceServer is the server API for StepExecutorService service.
// All implementations should embed UnimplementedStepExecutorServiceServer
// for forward compatibility
type StepExecutorServiceServer interface {
	Stream(*v1.Request, StepExecutorService_StreamServer) error
	Execute(context.Context, *v1.Request) (*v1.Response, error)
	Metadata(context.Context, *v1.Request) (*v1.Response, error)
	TestConnection(context.Context, *v1.Request) (*v1.Response, error)
	DeleteDatasource(context.Context, *v1.Request) (*v1.Response, error)
}

// UnimplementedStepExecutorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStepExecutorServiceServer struct {
}

func (UnimplementedStepExecutorServiceServer) Stream(*v1.Request, StepExecutorService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedStepExecutorServiceServer) Execute(context.Context, *v1.Request) (*v1.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedStepExecutorServiceServer) Metadata(context.Context, *v1.Request) (*v1.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metadata not implemented")
}
func (UnimplementedStepExecutorServiceServer) TestConnection(context.Context, *v1.Request) (*v1.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestConnection not implemented")
}
func (UnimplementedStepExecutorServiceServer) DeleteDatasource(context.Context, *v1.Request) (*v1.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasource not implemented")
}

// UnsafeStepExecutorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StepExecutorServiceServer will
// result in compilation errors.
type UnsafeStepExecutorServiceServer interface {
	mustEmbedUnimplementedStepExecutorServiceServer()
}

func RegisterStepExecutorServiceServer(s grpc.ServiceRegistrar, srv StepExecutorServiceServer) {
	s.RegisterService(&StepExecutorService_ServiceDesc, srv)
}

func _StepExecutorService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StepExecutorServiceServer).Stream(m, &stepExecutorServiceStreamServer{stream})
}

type StepExecutorService_StreamServer interface {
	Send(*StringValue) error
	grpc.ServerStream
}

type stepExecutorServiceStreamServer struct {
	grpc.ServerStream
}

func (x *stepExecutorServiceStreamServer) Send(m *StringValue) error {
	return x.ServerStream.SendMsg(m)
}

func _StepExecutorService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepExecutorServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StepExecutorService_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepExecutorServiceServer).Execute(ctx, req.(*v1.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StepExecutorService_Metadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepExecutorServiceServer).Metadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StepExecutorService_Metadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepExecutorServiceServer).Metadata(ctx, req.(*v1.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StepExecutorService_TestConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepExecutorServiceServer).TestConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StepExecutorService_TestConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepExecutorServiceServer).TestConnection(ctx, req.(*v1.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StepExecutorService_DeleteDatasource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepExecutorServiceServer).DeleteDatasource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StepExecutorService_DeleteDatasource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepExecutorServiceServer).DeleteDatasource(ctx, req.(*v1.Request))
	}
	return interceptor(ctx, in, info, handler)
}

// StepExecutorService_ServiceDesc is the grpc.ServiceDesc for StepExecutorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StepExecutorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "worker.v1.StepExecutorService",
	HandlerType: (*StepExecutorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _StepExecutorService_Execute_Handler,
		},
		{
			MethodName: "Metadata",
			Handler:    _StepExecutorService_Metadata_Handler,
		},
		{
			MethodName: "TestConnection",
			Handler:    _StepExecutorService_TestConnection_Handler,
		},
		{
			MethodName: "DeleteDatasource",
			Handler:    _StepExecutorService_DeleteDatasource_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _StepExecutorService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "worker/v1/step_executor.proto",
}
