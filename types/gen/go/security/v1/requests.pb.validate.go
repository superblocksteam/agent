// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: security/v1/requests.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ResourcesToResignRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourcesToResignRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourcesToResignRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourcesToResignRequestMultiError, or nil if none found.
func (m *ResourcesToResignRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourcesToResignRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClaimedBy

	// no validation rules for Limit

	if len(errors) > 0 {
		return ResourcesToResignRequestMultiError(errors)
	}

	return nil
}

// ResourcesToResignRequestMultiError is an error wrapping multiple validation
// errors returned by ResourcesToResignRequest.ValidateAll() if the designated
// constraints aren't met.
type ResourcesToResignRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourcesToResignRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourcesToResignRequestMultiError) AllErrors() []error { return m }

// ResourcesToResignRequestValidationError is the validation error returned by
// ResourcesToResignRequest.Validate if the designated constraints aren't met.
type ResourcesToResignRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourcesToResignRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourcesToResignRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourcesToResignRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourcesToResignRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourcesToResignRequestValidationError) ErrorName() string {
	return "ResourcesToResignRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResourcesToResignRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourcesToResignRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourcesToResignRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourcesToResignRequestValidationError{}

// Validate checks the field values on ResourcesToResignResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourcesToResignResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourcesToResignResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourcesToResignResponseMultiError, or nil if none found.
func (m *ResourcesToResignResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourcesToResignResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourcesToResignResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourcesToResignResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourcesToResignResponseValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourcesToResignResponseMultiError(errors)
	}

	return nil
}

// ResourcesToResignResponseMultiError is an error wrapping multiple validation
// errors returned by ResourcesToResignResponse.ValidateAll() if the
// designated constraints aren't met.
type ResourcesToResignResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourcesToResignResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourcesToResignResponseMultiError) AllErrors() []error { return m }

// ResourcesToResignResponseValidationError is the validation error returned by
// ResourcesToResignResponse.Validate if the designated constraints aren't met.
type ResourcesToResignResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourcesToResignResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourcesToResignResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourcesToResignResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourcesToResignResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourcesToResignResponseValidationError) ErrorName() string {
	return "ResourcesToResignResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResourcesToResignResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourcesToResignResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourcesToResignResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourcesToResignResponseValidationError{}

// Validate checks the field values on KeyRotation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KeyRotation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KeyRotation with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KeyRotationMultiError, or
// nil if none found.
func (m *KeyRotation) ValidateAll() error {
	return m.validate(true)
}

func (m *KeyRotation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	// no validation rules for ResourcesCompleted

	// no validation rules for ResourcesTotal

	// no validation rules for SigningKeyId

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KeyRotationValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KeyRotationValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KeyRotationValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KeyRotationValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KeyRotationValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KeyRotationValidationError{
				field:  "Updated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompleted()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KeyRotationValidationError{
					field:  "Completed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KeyRotationValidationError{
					field:  "Completed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompleted()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KeyRotationValidationError{
				field:  "Completed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return KeyRotationMultiError(errors)
	}

	return nil
}

// KeyRotationMultiError is an error wrapping multiple validation errors
// returned by KeyRotation.ValidateAll() if the designated constraints aren't met.
type KeyRotationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KeyRotationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KeyRotationMultiError) AllErrors() []error { return m }

// KeyRotationValidationError is the validation error returned by
// KeyRotation.Validate if the designated constraints aren't met.
type KeyRotationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyRotationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyRotationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyRotationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyRotationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyRotationValidationError) ErrorName() string { return "KeyRotationValidationError" }

// Error satisfies the builtin error interface
func (e KeyRotationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeyRotation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyRotationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyRotationValidationError{}

// Validate checks the field values on KeyRotationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KeyRotationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KeyRotationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KeyRotationsResponseMultiError, or nil if none found.
func (m *KeyRotationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *KeyRotationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetKeyRotations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, KeyRotationsResponseValidationError{
						field:  fmt.Sprintf("KeyRotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, KeyRotationsResponseValidationError{
						field:  fmt.Sprintf("KeyRotations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return KeyRotationsResponseValidationError{
					field:  fmt.Sprintf("KeyRotations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return KeyRotationsResponseMultiError(errors)
	}

	return nil
}

// KeyRotationsResponseMultiError is an error wrapping multiple validation
// errors returned by KeyRotationsResponse.ValidateAll() if the designated
// constraints aren't met.
type KeyRotationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KeyRotationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KeyRotationsResponseMultiError) AllErrors() []error { return m }

// KeyRotationsResponseValidationError is the validation error returned by
// KeyRotationsResponse.Validate if the designated constraints aren't met.
type KeyRotationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyRotationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyRotationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyRotationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyRotationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyRotationsResponseValidationError) ErrorName() string {
	return "KeyRotationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e KeyRotationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeyRotationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyRotationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyRotationsResponseValidationError{}
