// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/v1/plugin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Property with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Property) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Property with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PropertyMultiError, or nil
// if none found.
func (m *Property) ValidateAll() error {
	return m.validate(true)
}

func (m *Property) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Key != nil {
		// no validation rules for Key
	}

	if m.Value != nil {
		// no validation rules for Value
	}

	if m.Editable != nil {
		// no validation rules for Editable
	}

	if m.Internal != nil {
		// no validation rules for Internal
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Mandatory != nil {
		// no validation rules for Mandatory
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.DefaultValue != nil {
		// no validation rules for DefaultValue
	}

	if m.MinRange != nil {
		// no validation rules for MinRange
	}

	if m.MaxRange != nil {
		// no validation rules for MaxRange
	}

	if m.System != nil {
		// no validation rules for System
	}

	if m.File != nil {

		if all {
			switch v := interface{}(m.GetFile()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PropertyValidationError{
						field:  "File",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PropertyValidationError{
						field:  "File",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PropertyValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PropertyMultiError(errors)
	}

	return nil
}

// PropertyMultiError is an error wrapping multiple validation errors returned
// by Property.ValidateAll() if the designated constraints aren't met.
type PropertyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropertyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropertyMultiError) AllErrors() []error { return m }

// PropertyValidationError is the validation error returned by
// Property.Validate if the designated constraints aren't met.
type PropertyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropertyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropertyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropertyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropertyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropertyValidationError) ErrorName() string { return "PropertyValidationError" }

// Error satisfies the builtin error interface
func (e PropertyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProperty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropertyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropertyValidationError{}

// Validate checks the field values on SuperblocksMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuperblocksMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuperblocksMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuperblocksMetadataMultiError, or nil if none found.
func (m *SuperblocksMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *SuperblocksMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PluginVersion

	if len(errors) > 0 {
		return SuperblocksMetadataMultiError(errors)
	}

	return nil
}

// SuperblocksMetadataMultiError is an error wrapping multiple validation
// errors returned by SuperblocksMetadata.ValidateAll() if the designated
// constraints aren't met.
type SuperblocksMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuperblocksMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuperblocksMetadataMultiError) AllErrors() []error { return m }

// SuperblocksMetadataValidationError is the validation error returned by
// SuperblocksMetadata.Validate if the designated constraints aren't met.
type SuperblocksMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuperblocksMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuperblocksMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuperblocksMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuperblocksMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuperblocksMetadataValidationError) ErrorName() string {
	return "SuperblocksMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e SuperblocksMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuperblocksMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuperblocksMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuperblocksMetadataValidationError{}

// Validate checks the field values on HttpParameters with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HttpParameters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HttpParameters with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HttpParametersMultiError,
// or nil if none found.
func (m *HttpParameters) ValidateAll() error {
	return m.validate(true)
}

func (m *HttpParameters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetQuery()))
		i := 0
		for key := range m.GetQuery() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetQuery()[key]
			_ = val

			// no validation rules for Query[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, HttpParametersValidationError{
							field:  fmt.Sprintf("Query[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, HttpParametersValidationError{
							field:  fmt.Sprintf("Query[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return HttpParametersValidationError{
						field:  fmt.Sprintf("Query[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetBody()))
		i := 0
		for key := range m.GetBody() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetBody()[key]
			_ = val

			// no validation rules for Body[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, HttpParametersValidationError{
							field:  fmt.Sprintf("Body[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, HttpParametersValidationError{
							field:  fmt.Sprintf("Body[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return HttpParametersValidationError{
						field:  fmt.Sprintf("Body[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return HttpParametersMultiError(errors)
	}

	return nil
}

// HttpParametersMultiError is an error wrapping multiple validation errors
// returned by HttpParameters.ValidateAll() if the designated constraints
// aren't met.
type HttpParametersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HttpParametersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HttpParametersMultiError) AllErrors() []error { return m }

// HttpParametersValidationError is the validation error returned by
// HttpParameters.Validate if the designated constraints aren't met.
type HttpParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpParametersValidationError) ErrorName() string { return "HttpParametersValidationError" }

// Error satisfies the builtin error interface
func (e HttpParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpParametersValidationError{}

// Validate checks the field values on FileMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileMetadataMultiError, or
// nil if none found.
func (m *FileMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *FileMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Filename

	if len(errors) > 0 {
		return FileMetadataMultiError(errors)
	}

	return nil
}

// FileMetadataMultiError is an error wrapping multiple validation errors
// returned by FileMetadata.ValidateAll() if the designated constraints aren't met.
type FileMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileMetadataMultiError) AllErrors() []error { return m }

// FileMetadataValidationError is the validation error returned by
// FileMetadata.Validate if the designated constraints aren't met.
type FileMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileMetadataValidationError) ErrorName() string { return "FileMetadataValidationError" }

// Error satisfies the builtin error interface
func (e FileMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileMetadataValidationError{}
