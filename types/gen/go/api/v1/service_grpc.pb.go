// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/service.proto

package v1

import (
	context "context"
	v1 "github.com/superblocksteam/agent/types/gen/go/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetadataService_Health_FullMethodName = "/api.v1.MetadataService/Health"
)

// MetadataServiceClient is the client API for MetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetadataServiceClient interface {
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*v1.HealthResponse, error)
}

type metadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataServiceClient(cc grpc.ClientConnInterface) MetadataServiceClient {
	return &metadataServiceClient{cc}
}

func (c *metadataServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*v1.HealthResponse, error) {
	out := new(v1.HealthResponse)
	err := c.cc.Invoke(ctx, MetadataService_Health_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServiceServer is the server API for MetadataService service.
// All implementations should embed UnimplementedMetadataServiceServer
// for forward compatibility
type MetadataServiceServer interface {
	Health(context.Context, *HealthRequest) (*v1.HealthResponse, error)
}

// UnimplementedMetadataServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMetadataServiceServer struct {
}

func (UnimplementedMetadataServiceServer) Health(context.Context, *HealthRequest) (*v1.HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}

// UnsafeMetadataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataServiceServer will
// result in compilation errors.
type UnsafeMetadataServiceServer interface {
	mustEmbedUnimplementedMetadataServiceServer()
}

func RegisterMetadataServiceServer(s grpc.ServiceRegistrar, srv MetadataServiceServer) {
	s.RegisterService(&MetadataService_ServiceDesc, srv)
}

func _MetadataService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetadataService_ServiceDesc is the grpc.ServiceDesc for MetadataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetadataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.MetadataService",
	HandlerType: (*MetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _MetadataService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/service.proto",
}

const (
	DeprecatedService_Workflow_FullMethodName = "/api.v1.DeprecatedService/Workflow"
)

// DeprecatedServiceClient is the client API for DeprecatedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeprecatedServiceClient interface {
	Workflow(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*WorkflowResponse, error)
}

type deprecatedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeprecatedServiceClient(cc grpc.ClientConnInterface) DeprecatedServiceClient {
	return &deprecatedServiceClient{cc}
}

func (c *deprecatedServiceClient) Workflow(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*WorkflowResponse, error) {
	out := new(WorkflowResponse)
	err := c.cc.Invoke(ctx, DeprecatedService_Workflow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeprecatedServiceServer is the server API for DeprecatedService service.
// All implementations should embed UnimplementedDeprecatedServiceServer
// for forward compatibility
type DeprecatedServiceServer interface {
	Workflow(context.Context, *ExecuteRequest) (*WorkflowResponse, error)
}

// UnimplementedDeprecatedServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeprecatedServiceServer struct {
}

func (UnimplementedDeprecatedServiceServer) Workflow(context.Context, *ExecuteRequest) (*WorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Workflow not implemented")
}

// UnsafeDeprecatedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeprecatedServiceServer will
// result in compilation errors.
type UnsafeDeprecatedServiceServer interface {
	mustEmbedUnimplementedDeprecatedServiceServer()
}

func RegisterDeprecatedServiceServer(s grpc.ServiceRegistrar, srv DeprecatedServiceServer) {
	s.RegisterService(&DeprecatedService_ServiceDesc, srv)
}

func _DeprecatedService_Workflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeprecatedServiceServer).Workflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeprecatedService_Workflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeprecatedServiceServer).Workflow(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeprecatedService_ServiceDesc is the grpc.ServiceDesc for DeprecatedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeprecatedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.DeprecatedService",
	HandlerType: (*DeprecatedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Workflow",
			Handler:    _DeprecatedService_Workflow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/service.proto",
}

const (
	ExecutorService_Await_FullMethodName              = "/api.v1.ExecutorService/Await"
	ExecutorService_TwoWayStream_FullMethodName       = "/api.v1.ExecutorService/TwoWayStream"
	ExecutorService_MetadataDeprecated_FullMethodName = "/api.v1.ExecutorService/MetadataDeprecated"
	ExecutorService_Metadata_FullMethodName           = "/api.v1.ExecutorService/Metadata"
	ExecutorService_Test_FullMethodName               = "/api.v1.ExecutorService/Test"
	ExecutorService_Delete_FullMethodName             = "/api.v1.ExecutorService/Delete"
	ExecutorService_Async_FullMethodName              = "/api.v1.ExecutorService/Async"
	ExecutorService_Stream_FullMethodName             = "/api.v1.ExecutorService/Stream"
	ExecutorService_Status_FullMethodName             = "/api.v1.ExecutorService/Status"
	ExecutorService_Output_FullMethodName             = "/api.v1.ExecutorService/Output"
	ExecutorService_Download_FullMethodName           = "/api.v1.ExecutorService/Download"
	ExecutorService_Cancel_FullMethodName             = "/api.v1.ExecutorService/Cancel"
	ExecutorService_Validate_FullMethodName           = "/api.v1.ExecutorService/Validate"
)

// ExecutorServiceClient is the client API for ExecutorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecutorServiceClient interface {
	Await(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*AwaitResponse, error)
	TwoWayStream(ctx context.Context, opts ...grpc.CallOption) (ExecutorService_TwoWayStreamClient, error)
	MetadataDeprecated(ctx context.Context, in *MetadataRequestDeprecated, opts ...grpc.CallOption) (*MetadataResponse, error)
	Metadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error)
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Async(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*AsyncResponse, error)
	Stream(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (ExecutorService_StreamClient, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*AwaitResponse, error)
	Output(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (*OutputResponse, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (ExecutorService_DownloadClient, error)
	Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error)
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type executorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutorServiceClient(cc grpc.ClientConnInterface) ExecutorServiceClient {
	return &executorServiceClient{cc}
}

func (c *executorServiceClient) Await(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*AwaitResponse, error) {
	out := new(AwaitResponse)
	err := c.cc.Invoke(ctx, ExecutorService_Await_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorServiceClient) TwoWayStream(ctx context.Context, opts ...grpc.CallOption) (ExecutorService_TwoWayStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExecutorService_ServiceDesc.Streams[0], ExecutorService_TwoWayStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &executorServiceTwoWayStreamClient{stream}
	return x, nil
}

type ExecutorService_TwoWayStreamClient interface {
	Send(*TwoWayRequest) error
	Recv() (*TwoWayResponse, error)
	grpc.ClientStream
}

type executorServiceTwoWayStreamClient struct {
	grpc.ClientStream
}

func (x *executorServiceTwoWayStreamClient) Send(m *TwoWayRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *executorServiceTwoWayStreamClient) Recv() (*TwoWayResponse, error) {
	m := new(TwoWayResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *executorServiceClient) MetadataDeprecated(ctx context.Context, in *MetadataRequestDeprecated, opts ...grpc.CallOption) (*MetadataResponse, error) {
	out := new(MetadataResponse)
	err := c.cc.Invoke(ctx, ExecutorService_MetadataDeprecated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorServiceClient) Metadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error) {
	out := new(MetadataResponse)
	err := c.cc.Invoke(ctx, ExecutorService_Metadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorServiceClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, ExecutorService_Test_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, ExecutorService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorServiceClient) Async(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*AsyncResponse, error) {
	out := new(AsyncResponse)
	err := c.cc.Invoke(ctx, ExecutorService_Async_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorServiceClient) Stream(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (ExecutorService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExecutorService_ServiceDesc.Streams[1], ExecutorService_Stream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &executorServiceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExecutorService_StreamClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type executorServiceStreamClient struct {
	grpc.ClientStream
}

func (x *executorServiceStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *executorServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*AwaitResponse, error) {
	out := new(AwaitResponse)
	err := c.cc.Invoke(ctx, ExecutorService_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorServiceClient) Output(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (*OutputResponse, error) {
	out := new(OutputResponse)
	err := c.cc.Invoke(ctx, ExecutorService_Output_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorServiceClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (ExecutorService_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExecutorService_ServiceDesc.Streams[2], ExecutorService_Download_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &executorServiceDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExecutorService_DownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type executorServiceDownloadClient struct {
	grpc.ClientStream
}

func (x *executorServiceDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *executorServiceClient) Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error) {
	out := new(CancelResponse)
	err := c.cc.Invoke(ctx, ExecutorService_Cancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorServiceClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ExecutorService_Validate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutorServiceServer is the server API for ExecutorService service.
// All implementations should embed UnimplementedExecutorServiceServer
// for forward compatibility
type ExecutorServiceServer interface {
	Await(context.Context, *ExecuteRequest) (*AwaitResponse, error)
	TwoWayStream(ExecutorService_TwoWayStreamServer) error
	MetadataDeprecated(context.Context, *MetadataRequestDeprecated) (*MetadataResponse, error)
	Metadata(context.Context, *MetadataRequest) (*MetadataResponse, error)
	Test(context.Context, *TestRequest) (*TestResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Async(context.Context, *ExecuteRequest) (*AsyncResponse, error)
	Stream(*ExecuteRequest, ExecutorService_StreamServer) error
	Status(context.Context, *StatusRequest) (*AwaitResponse, error)
	Output(context.Context, *OutputRequest) (*OutputResponse, error)
	Download(*DownloadRequest, ExecutorService_DownloadServer) error
	Cancel(context.Context, *CancelRequest) (*CancelResponse, error)
	Validate(context.Context, *ValidateRequest) (*emptypb.Empty, error)
}

// UnimplementedExecutorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedExecutorServiceServer struct {
}

func (UnimplementedExecutorServiceServer) Await(context.Context, *ExecuteRequest) (*AwaitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Await not implemented")
}
func (UnimplementedExecutorServiceServer) TwoWayStream(ExecutorService_TwoWayStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TwoWayStream not implemented")
}
func (UnimplementedExecutorServiceServer) MetadataDeprecated(context.Context, *MetadataRequestDeprecated) (*MetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetadataDeprecated not implemented")
}
func (UnimplementedExecutorServiceServer) Metadata(context.Context, *MetadataRequest) (*MetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metadata not implemented")
}
func (UnimplementedExecutorServiceServer) Test(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedExecutorServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedExecutorServiceServer) Async(context.Context, *ExecuteRequest) (*AsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Async not implemented")
}
func (UnimplementedExecutorServiceServer) Stream(*ExecuteRequest, ExecutorService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedExecutorServiceServer) Status(context.Context, *StatusRequest) (*AwaitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedExecutorServiceServer) Output(context.Context, *OutputRequest) (*OutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Output not implemented")
}
func (UnimplementedExecutorServiceServer) Download(*DownloadRequest, ExecutorService_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedExecutorServiceServer) Cancel(context.Context, *CancelRequest) (*CancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedExecutorServiceServer) Validate(context.Context, *ValidateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}

// UnsafeExecutorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecutorServiceServer will
// result in compilation errors.
type UnsafeExecutorServiceServer interface {
	mustEmbedUnimplementedExecutorServiceServer()
}

func RegisterExecutorServiceServer(s grpc.ServiceRegistrar, srv ExecutorServiceServer) {
	s.RegisterService(&ExecutorService_ServiceDesc, srv)
}

func _ExecutorService_Await_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServiceServer).Await(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutorService_Await_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServiceServer).Await(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutorService_TwoWayStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExecutorServiceServer).TwoWayStream(&executorServiceTwoWayStreamServer{stream})
}

type ExecutorService_TwoWayStreamServer interface {
	Send(*TwoWayResponse) error
	Recv() (*TwoWayRequest, error)
	grpc.ServerStream
}

type executorServiceTwoWayStreamServer struct {
	grpc.ServerStream
}

func (x *executorServiceTwoWayStreamServer) Send(m *TwoWayResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *executorServiceTwoWayStreamServer) Recv() (*TwoWayRequest, error) {
	m := new(TwoWayRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExecutorService_MetadataDeprecated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequestDeprecated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServiceServer).MetadataDeprecated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutorService_MetadataDeprecated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServiceServer).MetadataDeprecated(ctx, req.(*MetadataRequestDeprecated))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutorService_Metadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServiceServer).Metadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutorService_Metadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServiceServer).Metadata(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutorService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutorService_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServiceServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutorService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutorService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutorService_Async_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServiceServer).Async(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutorService_Async_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServiceServer).Async(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutorService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecuteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecutorServiceServer).Stream(m, &executorServiceStreamServer{stream})
}

type ExecutorService_StreamServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type executorServiceStreamServer struct {
	grpc.ServerStream
}

func (x *executorServiceStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExecutorService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutorService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutorService_Output_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServiceServer).Output(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutorService_Output_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServiceServer).Output(ctx, req.(*OutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutorService_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecutorServiceServer).Download(m, &executorServiceDownloadServer{stream})
}

type ExecutorService_DownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type executorServiceDownloadServer struct {
	grpc.ServerStream
}

func (x *executorServiceDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExecutorService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutorService_Cancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServiceServer).Cancel(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutorService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutorService_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServiceServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExecutorService_ServiceDesc is the grpc.ServiceDesc for ExecutorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecutorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.ExecutorService",
	HandlerType: (*ExecutorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Await",
			Handler:    _ExecutorService_Await_Handler,
		},
		{
			MethodName: "MetadataDeprecated",
			Handler:    _ExecutorService_MetadataDeprecated_Handler,
		},
		{
			MethodName: "Metadata",
			Handler:    _ExecutorService_Metadata_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _ExecutorService_Test_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ExecutorService_Delete_Handler,
		},
		{
			MethodName: "Async",
			Handler:    _ExecutorService_Async_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _ExecutorService_Status_Handler,
		},
		{
			MethodName: "Output",
			Handler:    _ExecutorService_Output_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _ExecutorService_Cancel_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _ExecutorService_Validate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TwoWayStream",
			Handler:       _ExecutorService_TwoWayStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Stream",
			Handler:       _ExecutorService_Stream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _ExecutorService_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/service.proto",
}
