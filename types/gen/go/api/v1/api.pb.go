// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: api/v1/api.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	v1 "github.com/superblocksteam/agent/types/gen/go/common/v1"
	v130 "github.com/superblocksteam/agent/types/gen/go/plugins/adls/v1"
	v126 "github.com/superblocksteam/agent/types/gen/go/plugins/athena/v1"
	v13 "github.com/superblocksteam/agent/types/gen/go/plugins/bigquery/v1"
	v125 "github.com/superblocksteam/agent/types/gen/go/plugins/cockroachdb/v1"
	v132 "github.com/superblocksteam/agent/types/gen/go/plugins/cosmosdb/v1"
	v135 "github.com/superblocksteam/agent/types/gen/go/plugins/couchbase/v1"
	v136 "github.com/superblocksteam/agent/types/gen/go/plugins/custom/v1"
	v134 "github.com/superblocksteam/agent/types/gen/go/plugins/databricks/v1"
	v14 "github.com/superblocksteam/agent/types/gen/go/plugins/dynamodb/v1"
	v15 "github.com/superblocksteam/agent/types/gen/go/plugins/email/v1"
	v121 "github.com/superblocksteam/agent/types/gen/go/plugins/gcs/v1"
	v16 "github.com/superblocksteam/agent/types/gen/go/plugins/graphql/v1"
	v17 "github.com/superblocksteam/agent/types/gen/go/plugins/gsheets/v1"
	v119 "github.com/superblocksteam/agent/types/gen/go/plugins/javascript/v1"
	v124 "github.com/superblocksteam/agent/types/gen/go/plugins/kafka/v1"
	v18 "github.com/superblocksteam/agent/types/gen/go/plugins/mariadb/v1"
	v120 "github.com/superblocksteam/agent/types/gen/go/plugins/mongodb/v1"
	v19 "github.com/superblocksteam/agent/types/gen/go/plugins/mssql/v1"
	v110 "github.com/superblocksteam/agent/types/gen/go/plugins/mysql/v1"
	v123 "github.com/superblocksteam/agent/types/gen/go/plugins/ocr/v1"
	v122 "github.com/superblocksteam/agent/types/gen/go/plugins/openai/v1"
	v133 "github.com/superblocksteam/agent/types/gen/go/plugins/oracledb/v1"
	v131 "github.com/superblocksteam/agent/types/gen/go/plugins/pinecone/v1"
	v111 "github.com/superblocksteam/agent/types/gen/go/plugins/postgresql/v1"
	v12 "github.com/superblocksteam/agent/types/gen/go/plugins/python/v1"
	v127 "github.com/superblocksteam/agent/types/gen/go/plugins/redis/v1"
	v112 "github.com/superblocksteam/agent/types/gen/go/plugins/redshift/v1"
	v113 "github.com/superblocksteam/agent/types/gen/go/plugins/restapi/v1"
	v114 "github.com/superblocksteam/agent/types/gen/go/plugins/restapiintegration/v1"
	v115 "github.com/superblocksteam/agent/types/gen/go/plugins/rockset/v1"
	v116 "github.com/superblocksteam/agent/types/gen/go/plugins/s3/v1"
	v129 "github.com/superblocksteam/agent/types/gen/go/plugins/salesforce/v1"
	v128 "github.com/superblocksteam/agent/types/gen/go/plugins/smtp/v1"
	v117 "github.com/superblocksteam/agent/types/gen/go/plugins/snowflake/v1"
	v118 "github.com/superblocksteam/agent/types/gen/go/plugins/workflow/v1"
	_ "github.com/superblocksteam/agent/types/gen/go/superblocks/v1"
	v11 "github.com/superblocksteam/agent/types/gen/go/utils/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Trigger_Job_Interval int32

const (
	Trigger_Job_INTERVAL_UNSPECIFIED Trigger_Job_Interval = 0
	Trigger_Job_INTERVAL_MINUTE      Trigger_Job_Interval = 1
	Trigger_Job_INTERVAL_HOUR        Trigger_Job_Interval = 2
	Trigger_Job_INTERVAL_DAY         Trigger_Job_Interval = 3
	Trigger_Job_INTERVAL_WEEK        Trigger_Job_Interval = 4
	Trigger_Job_INTERVAL_MONTH       Trigger_Job_Interval = 5
)

// Enum value maps for Trigger_Job_Interval.
var (
	Trigger_Job_Interval_name = map[int32]string{
		0: "INTERVAL_UNSPECIFIED",
		1: "INTERVAL_MINUTE",
		2: "INTERVAL_HOUR",
		3: "INTERVAL_DAY",
		4: "INTERVAL_WEEK",
		5: "INTERVAL_MONTH",
	}
	Trigger_Job_Interval_value = map[string]int32{
		"INTERVAL_UNSPECIFIED": 0,
		"INTERVAL_MINUTE":      1,
		"INTERVAL_HOUR":        2,
		"INTERVAL_DAY":         3,
		"INTERVAL_WEEK":        4,
		"INTERVAL_MONTH":       5,
	}
)

func (x Trigger_Job_Interval) Enum() *Trigger_Job_Interval {
	p := new(Trigger_Job_Interval)
	*p = x
	return p
}

func (x Trigger_Job_Interval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trigger_Job_Interval) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_api_proto_enumTypes[0].Descriptor()
}

func (Trigger_Job_Interval) Type() protoreflect.EnumType {
	return &file_api_v1_api_proto_enumTypes[0]
}

func (x Trigger_Job_Interval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trigger_Job_Interval.Descriptor instead.
func (Trigger_Job_Interval) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{2, 2, 0}
}

type Block_Parallel_Wait int32

const (
	Block_Parallel_WAIT_UNSPECIFIED Block_Parallel_Wait = 0
	// Wait for every thread to complete.
	Block_Parallel_WAIT_ALL Block_Parallel_Wait = 1
	// Do not wait for any thread to complete.
	Block_Parallel_WAIT_NONE Block_Parallel_Wait = 2
)

// Enum value maps for Block_Parallel_Wait.
var (
	Block_Parallel_Wait_name = map[int32]string{
		0: "WAIT_UNSPECIFIED",
		1: "WAIT_ALL",
		2: "WAIT_NONE",
	}
	Block_Parallel_Wait_value = map[string]int32{
		"WAIT_UNSPECIFIED": 0,
		"WAIT_ALL":         1,
		"WAIT_NONE":        2,
	}
)

func (x Block_Parallel_Wait) Enum() *Block_Parallel_Wait {
	p := new(Block_Parallel_Wait)
	*p = x
	return p
}

func (x Block_Parallel_Wait) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Block_Parallel_Wait) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_api_proto_enumTypes[1].Descriptor()
}

func (Block_Parallel_Wait) Type() protoreflect.EnumType {
	return &file_api_v1_api_proto_enumTypes[1]
}

func (x Block_Parallel_Wait) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Block_Parallel_Wait.Descriptor instead.
func (Block_Parallel_Wait) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4, 0, 0}
}

type Block_Loop_Type int32

const (
	Block_Loop_TYPE_UNSPECIFIED Block_Loop_Type = 0
	Block_Loop_TYPE_FOR         Block_Loop_Type = 1
	Block_Loop_TYPE_FOREACH     Block_Loop_Type = 2
	Block_Loop_TYPE_WHILE       Block_Loop_Type = 3
)

// Enum value maps for Block_Loop_Type.
var (
	Block_Loop_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_FOR",
		2: "TYPE_FOREACH",
		3: "TYPE_WHILE",
	}
	Block_Loop_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_FOR":         1,
		"TYPE_FOREACH":     2,
		"TYPE_WHILE":       3,
	}
)

func (x Block_Loop_Type) Enum() *Block_Loop_Type {
	p := new(Block_Loop_Type)
	*p = x
	return p
}

func (x Block_Loop_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Block_Loop_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1_api_proto_enumTypes[2].Descriptor()
}

func (Block_Loop_Type) Type() protoreflect.EnumType {
	return &file_api_v1_api_proto_enumTypes[2]
}

func (x Block_Loop_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Block_Loop_Type.Descriptor instead.
func (Block_Loop_Type) EnumDescriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4, 2, 0}
}

type Api struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata  *v1.Metadata   `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Blocks    []*Block       `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
	Trigger   *Trigger       `protobuf:"bytes,3,opt,name=trigger,proto3" json:"trigger,omitempty"`
	Signature *v11.Signature `protobuf:"bytes,4,opt,name=signature,proto3,oneof" json:"signature,omitempty"`
}

func (x *Api) Reset() {
	*x = Api{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Api) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Api) ProtoMessage() {}

func (x *Api) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Api.ProtoReflect.Descriptor instead.
func (*Api) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{0}
}

func (x *Api) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Api) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *Api) GetTrigger() *Trigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *Api) GetSignature() *v11.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Profiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modes *Profiles_Modes `protobuf:"bytes,1,opt,name=modes,proto3" json:"modes,omitempty"`
}

func (x *Profiles) Reset() {
	*x = Profiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profiles) ProtoMessage() {}

func (x *Profiles) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profiles.ProtoReflect.Descriptor instead.
func (*Profiles) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{1}
}

func (x *Profiles) GetModes() *Profiles_Modes {
	if x != nil {
		return x.Modes
	}
	return nil
}

type Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*Trigger_Application_
	//	*Trigger_Workflow_
	//	*Trigger_Job_
	Config isTrigger_Config `protobuf_oneof:"config"`
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{2}
}

func (m *Trigger) GetConfig() isTrigger_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *Trigger) GetApplication() *Trigger_Application {
	if x, ok := x.GetConfig().(*Trigger_Application_); ok {
		return x.Application
	}
	return nil
}

func (x *Trigger) GetWorkflow() *Trigger_Workflow {
	if x, ok := x.GetConfig().(*Trigger_Workflow_); ok {
		return x.Workflow
	}
	return nil
}

func (x *Trigger) GetJob() *Trigger_Job {
	if x, ok := x.GetConfig().(*Trigger_Job_); ok {
		return x.Job
	}
	return nil
}

type isTrigger_Config interface {
	isTrigger_Config()
}

type Trigger_Application_ struct {
	Application *Trigger_Application `protobuf:"bytes,1,opt,name=application,proto3,oneof"`
}

type Trigger_Workflow_ struct {
	Workflow *Trigger_Workflow `protobuf:"bytes,2,opt,name=workflow,proto3,oneof"`
}

type Trigger_Job_ struct {
	Job *Trigger_Job `protobuf:"bytes,3,opt,name=job,proto3,oneof"`
}

func (*Trigger_Application_) isTrigger_Config() {}

func (*Trigger_Workflow_) isTrigger_Config() {}

func (*Trigger_Job_) isTrigger_Config() {}

type Blocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*Block `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *Blocks) Reset() {
	*x = Blocks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blocks) ProtoMessage() {}

func (x *Blocks) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blocks.ProtoReflect.Descriptor instead.
func (*Blocks) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{3}
}

func (x *Blocks) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Config:
	//
	//	*Block_Break_
	//	*Block_Return_
	//	*Block_Wait_
	//	*Block_Parallel_
	//	*Block_Conditional_
	//	*Block_Loop_
	//	*Block_TryCatch_
	//	*Block_Step
	//	*Block_Variables
	//	*Block_Throw_
	//	*Block_Stream_
	//	*Block_Send_
	Config isBlock_Config `protobuf_oneof:"config"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4}
}

func (x *Block) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Block) GetConfig() isBlock_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *Block) GetBreak() *Block_Break {
	if x, ok := x.GetConfig().(*Block_Break_); ok {
		return x.Break
	}
	return nil
}

func (x *Block) GetReturn() *Block_Return {
	if x, ok := x.GetConfig().(*Block_Return_); ok {
		return x.Return
	}
	return nil
}

func (x *Block) GetWait() *Block_Wait {
	if x, ok := x.GetConfig().(*Block_Wait_); ok {
		return x.Wait
	}
	return nil
}

func (x *Block) GetParallel() *Block_Parallel {
	if x, ok := x.GetConfig().(*Block_Parallel_); ok {
		return x.Parallel
	}
	return nil
}

func (x *Block) GetConditional() *Block_Conditional {
	if x, ok := x.GetConfig().(*Block_Conditional_); ok {
		return x.Conditional
	}
	return nil
}

func (x *Block) GetLoop() *Block_Loop {
	if x, ok := x.GetConfig().(*Block_Loop_); ok {
		return x.Loop
	}
	return nil
}

func (x *Block) GetTryCatch() *Block_TryCatch {
	if x, ok := x.GetConfig().(*Block_TryCatch_); ok {
		return x.TryCatch
	}
	return nil
}

func (x *Block) GetStep() *Step {
	if x, ok := x.GetConfig().(*Block_Step); ok {
		return x.Step
	}
	return nil
}

func (x *Block) GetVariables() *Variables {
	if x, ok := x.GetConfig().(*Block_Variables); ok {
		return x.Variables
	}
	return nil
}

func (x *Block) GetThrow() *Block_Throw {
	if x, ok := x.GetConfig().(*Block_Throw_); ok {
		return x.Throw
	}
	return nil
}

func (x *Block) GetStream() *Block_Stream {
	if x, ok := x.GetConfig().(*Block_Stream_); ok {
		return x.Stream
	}
	return nil
}

func (x *Block) GetSend() *Block_Send {
	if x, ok := x.GetConfig().(*Block_Send_); ok {
		return x.Send
	}
	return nil
}

type isBlock_Config interface {
	isBlock_Config()
}

type Block_Break_ struct {
	Break *Block_Break `protobuf:"bytes,2,opt,name=break,proto3,oneof"`
}

type Block_Return_ struct {
	Return *Block_Return `protobuf:"bytes,3,opt,name=return,proto3,oneof"`
}

type Block_Wait_ struct {
	Wait *Block_Wait `protobuf:"bytes,4,opt,name=wait,proto3,oneof"`
}

type Block_Parallel_ struct {
	Parallel *Block_Parallel `protobuf:"bytes,5,opt,name=parallel,proto3,oneof"`
}

type Block_Conditional_ struct {
	Conditional *Block_Conditional `protobuf:"bytes,6,opt,name=conditional,proto3,oneof"`
}

type Block_Loop_ struct {
	Loop *Block_Loop `protobuf:"bytes,7,opt,name=loop,proto3,oneof"`
}

type Block_TryCatch_ struct {
	TryCatch *Block_TryCatch `protobuf:"bytes,8,opt,name=try_catch,json=tryCatch,proto3,oneof"`
}

type Block_Step struct {
	Step *Step `protobuf:"bytes,9,opt,name=step,proto3,oneof"`
}

type Block_Variables struct {
	Variables *Variables `protobuf:"bytes,10,opt,name=variables,proto3,oneof"`
}

type Block_Throw_ struct {
	Throw *Block_Throw `protobuf:"bytes,11,opt,name=throw,proto3,oneof"`
}

type Block_Stream_ struct {
	Stream *Block_Stream `protobuf:"bytes,12,opt,name=stream,proto3,oneof"`
}

type Block_Send_ struct {
	Send *Block_Send `protobuf:"bytes,13,opt,name=send,proto3,oneof"`
}

func (*Block_Break_) isBlock_Config() {}

func (*Block_Return_) isBlock_Config() {}

func (*Block_Wait_) isBlock_Config() {}

func (*Block_Parallel_) isBlock_Config() {}

func (*Block_Conditional_) isBlock_Config() {}

func (*Block_Loop_) isBlock_Config() {}

func (*Block_TryCatch_) isBlock_Config() {}

func (*Block_Step) isBlock_Config() {}

func (*Block_Variables) isBlock_Config() {}

func (*Block_Throw_) isBlock_Config() {}

func (*Block_Stream_) isBlock_Config() {}

func (*Block_Send_) isBlock_Config() {}

type Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Important: integration means integration id
	Integration string `protobuf:"bytes,1,opt,name=integration,proto3" json:"integration,omitempty"`
	// Types that are assignable to Config:
	//
	//	*Step_Python
	//	*Step_Bigquery
	//	*Step_Dynamodb
	//	*Step_Email
	//	*Step_Graphql
	//	*Step_Graphqlintegration
	//	*Step_Gsheets
	//	*Step_Mariadb
	//	*Step_Mssql
	//	*Step_Mysql
	//	*Step_Postgres
	//	*Step_Redshift
	//	*Step_Restapi
	//	*Step_Restapiintegration
	//	*Step_Rockset
	//	*Step_S3
	//	*Step_Snowflake
	//	*Step_Workflow
	//	*Step_Javascript
	//	*Step_Mongodb
	//	*Step_Gcs
	//	*Step_Openai
	//	*Step_Ocr
	//	*Step_Kafka
	//	*Step_Confluent
	//	*Step_Msk
	//	*Step_Redpanda
	//	*Step_Aivenkafka
	//	*Step_Cockroachdb
	//	*Step_Airtable
	//	*Step_Notion
	//	*Step_Pagerduty
	//	*Step_Sendgrid
	//	*Step_Slack
	//	*Step_Athena
	//	*Step_Redis
	//	*Step_Asana
	//	*Step_Github
	//	*Step_Smtp
	//	*Step_Salesforce
	//	*Step_Bitbucket
	//	*Step_Circleci
	//	*Step_Front
	//	*Step_Intercom
	//	*Step_Segment
	//	*Step_Launchdarkly
	//	*Step_Dropbox
	//	*Step_Twilio
	//	*Step_Googledrive
	//	*Step_Googleanalytics
	//	*Step_Box
	//	*Step_Hubspot
	//	*Step_Stripe
	//	*Step_Zoom
	//	*Step_Jira
	//	*Step_Zendesk
	//	*Step_Adls
	//	*Step_Pinecone
	//	*Step_Cosmosdb
	//	*Step_Datadog
	//	*Step_Xero
	//	*Step_Oracledb
	//	*Step_Elasticsearch
	//	*Step_Databricks
	//	*Step_Couchbase
	//	*Step_Custom
	//	*Step_Anthropic
	//	*Step_Cohere
	//	*Step_Fireworks
	//	*Step_Mistral
	//	*Step_Groq
	//	*Step_Perplexity
	//	*Step_Stabilityai
	//	*Step_Gemini
	Config isStep_Config `protobuf_oneof:"config"`
}

func (x *Step) Reset() {
	*x = Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step) ProtoMessage() {}

func (x *Step) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step.ProtoReflect.Descriptor instead.
func (*Step) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{5}
}

func (x *Step) GetIntegration() string {
	if x != nil {
		return x.Integration
	}
	return ""
}

func (m *Step) GetConfig() isStep_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *Step) GetPython() *v12.Plugin {
	if x, ok := x.GetConfig().(*Step_Python); ok {
		return x.Python
	}
	return nil
}

func (x *Step) GetBigquery() *v13.Plugin {
	if x, ok := x.GetConfig().(*Step_Bigquery); ok {
		return x.Bigquery
	}
	return nil
}

func (x *Step) GetDynamodb() *v14.Plugin {
	if x, ok := x.GetConfig().(*Step_Dynamodb); ok {
		return x.Dynamodb
	}
	return nil
}

func (x *Step) GetEmail() *v15.Plugin {
	if x, ok := x.GetConfig().(*Step_Email); ok {
		return x.Email
	}
	return nil
}

func (x *Step) GetGraphql() *v16.Plugin {
	if x, ok := x.GetConfig().(*Step_Graphql); ok {
		return x.Graphql
	}
	return nil
}

func (x *Step) GetGraphqlintegration() *v16.Plugin {
	if x, ok := x.GetConfig().(*Step_Graphqlintegration); ok {
		return x.Graphqlintegration
	}
	return nil
}

func (x *Step) GetGsheets() *v17.Plugin {
	if x, ok := x.GetConfig().(*Step_Gsheets); ok {
		return x.Gsheets
	}
	return nil
}

func (x *Step) GetMariadb() *v18.Plugin {
	if x, ok := x.GetConfig().(*Step_Mariadb); ok {
		return x.Mariadb
	}
	return nil
}

func (x *Step) GetMssql() *v19.Plugin {
	if x, ok := x.GetConfig().(*Step_Mssql); ok {
		return x.Mssql
	}
	return nil
}

func (x *Step) GetMysql() *v110.Plugin {
	if x, ok := x.GetConfig().(*Step_Mysql); ok {
		return x.Mysql
	}
	return nil
}

func (x *Step) GetPostgres() *v111.Plugin {
	if x, ok := x.GetConfig().(*Step_Postgres); ok {
		return x.Postgres
	}
	return nil
}

func (x *Step) GetRedshift() *v112.Plugin {
	if x, ok := x.GetConfig().(*Step_Redshift); ok {
		return x.Redshift
	}
	return nil
}

func (x *Step) GetRestapi() *v113.Plugin {
	if x, ok := x.GetConfig().(*Step_Restapi); ok {
		return x.Restapi
	}
	return nil
}

func (x *Step) GetRestapiintegration() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Restapiintegration); ok {
		return x.Restapiintegration
	}
	return nil
}

func (x *Step) GetRockset() *v115.Plugin {
	if x, ok := x.GetConfig().(*Step_Rockset); ok {
		return x.Rockset
	}
	return nil
}

func (x *Step) GetS3() *v116.Plugin {
	if x, ok := x.GetConfig().(*Step_S3); ok {
		return x.S3
	}
	return nil
}

func (x *Step) GetSnowflake() *v117.Plugin {
	if x, ok := x.GetConfig().(*Step_Snowflake); ok {
		return x.Snowflake
	}
	return nil
}

func (x *Step) GetWorkflow() *v118.Plugin {
	if x, ok := x.GetConfig().(*Step_Workflow); ok {
		return x.Workflow
	}
	return nil
}

func (x *Step) GetJavascript() *v119.Plugin {
	if x, ok := x.GetConfig().(*Step_Javascript); ok {
		return x.Javascript
	}
	return nil
}

func (x *Step) GetMongodb() *v120.Plugin {
	if x, ok := x.GetConfig().(*Step_Mongodb); ok {
		return x.Mongodb
	}
	return nil
}

func (x *Step) GetGcs() *v121.Plugin {
	if x, ok := x.GetConfig().(*Step_Gcs); ok {
		return x.Gcs
	}
	return nil
}

func (x *Step) GetOpenai() *v122.Plugin {
	if x, ok := x.GetConfig().(*Step_Openai); ok {
		return x.Openai
	}
	return nil
}

func (x *Step) GetOcr() *v123.Plugin {
	if x, ok := x.GetConfig().(*Step_Ocr); ok {
		return x.Ocr
	}
	return nil
}

func (x *Step) GetKafka() *v124.Plugin {
	if x, ok := x.GetConfig().(*Step_Kafka); ok {
		return x.Kafka
	}
	return nil
}

func (x *Step) GetConfluent() *v124.Plugin {
	if x, ok := x.GetConfig().(*Step_Confluent); ok {
		return x.Confluent
	}
	return nil
}

func (x *Step) GetMsk() *v124.Plugin {
	if x, ok := x.GetConfig().(*Step_Msk); ok {
		return x.Msk
	}
	return nil
}

func (x *Step) GetRedpanda() *v124.Plugin {
	if x, ok := x.GetConfig().(*Step_Redpanda); ok {
		return x.Redpanda
	}
	return nil
}

func (x *Step) GetAivenkafka() *v124.Plugin {
	if x, ok := x.GetConfig().(*Step_Aivenkafka); ok {
		return x.Aivenkafka
	}
	return nil
}

func (x *Step) GetCockroachdb() *v125.Plugin {
	if x, ok := x.GetConfig().(*Step_Cockroachdb); ok {
		return x.Cockroachdb
	}
	return nil
}

func (x *Step) GetAirtable() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Airtable); ok {
		return x.Airtable
	}
	return nil
}

func (x *Step) GetNotion() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Notion); ok {
		return x.Notion
	}
	return nil
}

func (x *Step) GetPagerduty() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Pagerduty); ok {
		return x.Pagerduty
	}
	return nil
}

func (x *Step) GetSendgrid() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Sendgrid); ok {
		return x.Sendgrid
	}
	return nil
}

func (x *Step) GetSlack() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Slack); ok {
		return x.Slack
	}
	return nil
}

func (x *Step) GetAthena() *v126.Plugin {
	if x, ok := x.GetConfig().(*Step_Athena); ok {
		return x.Athena
	}
	return nil
}

func (x *Step) GetRedis() *v127.Plugin {
	if x, ok := x.GetConfig().(*Step_Redis); ok {
		return x.Redis
	}
	return nil
}

func (x *Step) GetAsana() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Asana); ok {
		return x.Asana
	}
	return nil
}

func (x *Step) GetGithub() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Github); ok {
		return x.Github
	}
	return nil
}

func (x *Step) GetSmtp() *v128.Plugin {
	if x, ok := x.GetConfig().(*Step_Smtp); ok {
		return x.Smtp
	}
	return nil
}

func (x *Step) GetSalesforce() *v129.Plugin {
	if x, ok := x.GetConfig().(*Step_Salesforce); ok {
		return x.Salesforce
	}
	return nil
}

func (x *Step) GetBitbucket() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Bitbucket); ok {
		return x.Bitbucket
	}
	return nil
}

func (x *Step) GetCircleci() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Circleci); ok {
		return x.Circleci
	}
	return nil
}

func (x *Step) GetFront() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Front); ok {
		return x.Front
	}
	return nil
}

func (x *Step) GetIntercom() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Intercom); ok {
		return x.Intercom
	}
	return nil
}

func (x *Step) GetSegment() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Segment); ok {
		return x.Segment
	}
	return nil
}

func (x *Step) GetLaunchdarkly() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Launchdarkly); ok {
		return x.Launchdarkly
	}
	return nil
}

func (x *Step) GetDropbox() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Dropbox); ok {
		return x.Dropbox
	}
	return nil
}

func (x *Step) GetTwilio() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Twilio); ok {
		return x.Twilio
	}
	return nil
}

func (x *Step) GetGoogledrive() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Googledrive); ok {
		return x.Googledrive
	}
	return nil
}

func (x *Step) GetGoogleanalytics() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Googleanalytics); ok {
		return x.Googleanalytics
	}
	return nil
}

func (x *Step) GetBox() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Box); ok {
		return x.Box
	}
	return nil
}

func (x *Step) GetHubspot() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Hubspot); ok {
		return x.Hubspot
	}
	return nil
}

func (x *Step) GetStripe() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Stripe); ok {
		return x.Stripe
	}
	return nil
}

func (x *Step) GetZoom() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Zoom); ok {
		return x.Zoom
	}
	return nil
}

func (x *Step) GetJira() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Jira); ok {
		return x.Jira
	}
	return nil
}

func (x *Step) GetZendesk() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Zendesk); ok {
		return x.Zendesk
	}
	return nil
}

func (x *Step) GetAdls() *v130.Plugin {
	if x, ok := x.GetConfig().(*Step_Adls); ok {
		return x.Adls
	}
	return nil
}

func (x *Step) GetPinecone() *v131.Plugin {
	if x, ok := x.GetConfig().(*Step_Pinecone); ok {
		return x.Pinecone
	}
	return nil
}

func (x *Step) GetCosmosdb() *v132.Plugin {
	if x, ok := x.GetConfig().(*Step_Cosmosdb); ok {
		return x.Cosmosdb
	}
	return nil
}

func (x *Step) GetDatadog() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Datadog); ok {
		return x.Datadog
	}
	return nil
}

func (x *Step) GetXero() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Xero); ok {
		return x.Xero
	}
	return nil
}

func (x *Step) GetOracledb() *v133.Plugin {
	if x, ok := x.GetConfig().(*Step_Oracledb); ok {
		return x.Oracledb
	}
	return nil
}

func (x *Step) GetElasticsearch() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Elasticsearch); ok {
		return x.Elasticsearch
	}
	return nil
}

func (x *Step) GetDatabricks() *v134.Plugin {
	if x, ok := x.GetConfig().(*Step_Databricks); ok {
		return x.Databricks
	}
	return nil
}

func (x *Step) GetCouchbase() *v135.Plugin {
	if x, ok := x.GetConfig().(*Step_Couchbase); ok {
		return x.Couchbase
	}
	return nil
}

func (x *Step) GetCustom() *v136.Plugin {
	if x, ok := x.GetConfig().(*Step_Custom); ok {
		return x.Custom
	}
	return nil
}

func (x *Step) GetAnthropic() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Anthropic); ok {
		return x.Anthropic
	}
	return nil
}

func (x *Step) GetCohere() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Cohere); ok {
		return x.Cohere
	}
	return nil
}

func (x *Step) GetFireworks() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Fireworks); ok {
		return x.Fireworks
	}
	return nil
}

func (x *Step) GetMistral() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Mistral); ok {
		return x.Mistral
	}
	return nil
}

func (x *Step) GetGroq() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Groq); ok {
		return x.Groq
	}
	return nil
}

func (x *Step) GetPerplexity() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Perplexity); ok {
		return x.Perplexity
	}
	return nil
}

func (x *Step) GetStabilityai() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Stabilityai); ok {
		return x.Stabilityai
	}
	return nil
}

func (x *Step) GetGemini() *v114.Plugin {
	if x, ok := x.GetConfig().(*Step_Gemini); ok {
		return x.Gemini
	}
	return nil
}

type isStep_Config interface {
	isStep_Config()
}

type Step_Python struct {
	Python *v12.Plugin `protobuf:"bytes,2,opt,name=python,proto3,oneof"`
}

type Step_Bigquery struct {
	Bigquery *v13.Plugin `protobuf:"bytes,3,opt,name=bigquery,proto3,oneof"`
}

type Step_Dynamodb struct {
	Dynamodb *v14.Plugin `protobuf:"bytes,4,opt,name=dynamodb,proto3,oneof"`
}

type Step_Email struct {
	Email *v15.Plugin `protobuf:"bytes,5,opt,name=email,proto3,oneof"`
}

type Step_Graphql struct {
	Graphql *v16.Plugin `protobuf:"bytes,6,opt,name=graphql,proto3,oneof"`
}

type Step_Graphqlintegration struct {
	Graphqlintegration *v16.Plugin `protobuf:"bytes,7,opt,name=graphqlintegration,proto3,oneof"`
}

type Step_Gsheets struct {
	Gsheets *v17.Plugin `protobuf:"bytes,8,opt,name=gsheets,proto3,oneof"`
}

type Step_Mariadb struct {
	Mariadb *v18.Plugin `protobuf:"bytes,9,opt,name=mariadb,proto3,oneof"`
}

type Step_Mssql struct {
	Mssql *v19.Plugin `protobuf:"bytes,10,opt,name=mssql,proto3,oneof"`
}

type Step_Mysql struct {
	Mysql *v110.Plugin `protobuf:"bytes,11,opt,name=mysql,proto3,oneof"`
}

type Step_Postgres struct {
	Postgres *v111.Plugin `protobuf:"bytes,12,opt,name=postgres,proto3,oneof"`
}

type Step_Redshift struct {
	Redshift *v112.Plugin `protobuf:"bytes,13,opt,name=redshift,proto3,oneof"`
}

type Step_Restapi struct {
	Restapi *v113.Plugin `protobuf:"bytes,14,opt,name=restapi,proto3,oneof"`
}

type Step_Restapiintegration struct {
	Restapiintegration *v114.Plugin `protobuf:"bytes,15,opt,name=restapiintegration,proto3,oneof"`
}

type Step_Rockset struct {
	Rockset *v115.Plugin `protobuf:"bytes,16,opt,name=rockset,proto3,oneof"`
}

type Step_S3 struct {
	S3 *v116.Plugin `protobuf:"bytes,17,opt,name=s3,proto3,oneof"`
}

type Step_Snowflake struct {
	Snowflake *v117.Plugin `protobuf:"bytes,18,opt,name=snowflake,proto3,oneof"`
}

type Step_Workflow struct {
	Workflow *v118.Plugin `protobuf:"bytes,19,opt,name=workflow,proto3,oneof"`
}

type Step_Javascript struct {
	Javascript *v119.Plugin `protobuf:"bytes,20,opt,name=javascript,proto3,oneof"`
}

type Step_Mongodb struct {
	Mongodb *v120.Plugin `protobuf:"bytes,21,opt,name=mongodb,proto3,oneof"`
}

type Step_Gcs struct {
	Gcs *v121.Plugin `protobuf:"bytes,22,opt,name=gcs,proto3,oneof"`
}

type Step_Openai struct {
	Openai *v122.Plugin `protobuf:"bytes,23,opt,name=openai,proto3,oneof"`
}

type Step_Ocr struct {
	// Remapped due to proto not allowing dashes in field names
	Ocr *v123.Plugin `protobuf:"bytes,24,opt,name=ocr,json=superblocks-ocr,proto3,oneof"`
}

type Step_Kafka struct {
	Kafka *v124.Plugin `protobuf:"bytes,25,opt,name=kafka,proto3,oneof"`
}

type Step_Confluent struct {
	Confluent *v124.Plugin `protobuf:"bytes,26,opt,name=confluent,proto3,oneof"`
}

type Step_Msk struct {
	Msk *v124.Plugin `protobuf:"bytes,27,opt,name=msk,proto3,oneof"`
}

type Step_Redpanda struct {
	Redpanda *v124.Plugin `protobuf:"bytes,28,opt,name=redpanda,proto3,oneof"`
}

type Step_Aivenkafka struct {
	Aivenkafka *v124.Plugin `protobuf:"bytes,29,opt,name=aivenkafka,proto3,oneof"` // There's also aiven(postgres|opensearch|redis|mysql|cassandra)
}

type Step_Cockroachdb struct {
	Cockroachdb *v125.Plugin `protobuf:"bytes,30,opt,name=cockroachdb,proto3,oneof"`
}

type Step_Airtable struct {
	Airtable *v114.Plugin `protobuf:"bytes,31,opt,name=airtable,proto3,oneof"`
}

type Step_Notion struct {
	Notion *v114.Plugin `protobuf:"bytes,32,opt,name=notion,proto3,oneof"`
}

type Step_Pagerduty struct {
	Pagerduty *v114.Plugin `protobuf:"bytes,33,opt,name=pagerduty,proto3,oneof"`
}

type Step_Sendgrid struct {
	Sendgrid *v114.Plugin `protobuf:"bytes,34,opt,name=sendgrid,proto3,oneof"`
}

type Step_Slack struct {
	Slack *v114.Plugin `protobuf:"bytes,35,opt,name=slack,proto3,oneof"`
}

type Step_Athena struct {
	Athena *v126.Plugin `protobuf:"bytes,36,opt,name=athena,proto3,oneof"`
}

type Step_Redis struct {
	Redis *v127.Plugin `protobuf:"bytes,37,opt,name=redis,proto3,oneof"`
}

type Step_Asana struct {
	Asana *v114.Plugin `protobuf:"bytes,38,opt,name=asana,proto3,oneof"`
}

type Step_Github struct {
	Github *v114.Plugin `protobuf:"bytes,39,opt,name=github,proto3,oneof"`
}

type Step_Smtp struct {
	Smtp *v128.Plugin `protobuf:"bytes,40,opt,name=smtp,proto3,oneof"`
}

type Step_Salesforce struct {
	Salesforce *v129.Plugin `protobuf:"bytes,41,opt,name=salesforce,proto3,oneof"`
}

type Step_Bitbucket struct {
	Bitbucket *v114.Plugin `protobuf:"bytes,42,opt,name=bitbucket,proto3,oneof"`
}

type Step_Circleci struct {
	Circleci *v114.Plugin `protobuf:"bytes,43,opt,name=circleci,proto3,oneof"`
}

type Step_Front struct {
	Front *v114.Plugin `protobuf:"bytes,44,opt,name=front,proto3,oneof"`
}

type Step_Intercom struct {
	Intercom *v114.Plugin `protobuf:"bytes,45,opt,name=intercom,proto3,oneof"`
}

type Step_Segment struct {
	Segment *v114.Plugin `protobuf:"bytes,46,opt,name=segment,proto3,oneof"`
}

type Step_Launchdarkly struct {
	Launchdarkly *v114.Plugin `protobuf:"bytes,47,opt,name=launchdarkly,proto3,oneof"`
}

type Step_Dropbox struct {
	Dropbox *v114.Plugin `protobuf:"bytes,48,opt,name=dropbox,proto3,oneof"`
}

type Step_Twilio struct {
	Twilio *v114.Plugin `protobuf:"bytes,49,opt,name=twilio,proto3,oneof"`
}

type Step_Googledrive struct {
	Googledrive *v114.Plugin `protobuf:"bytes,50,opt,name=googledrive,proto3,oneof"`
}

type Step_Googleanalytics struct {
	Googleanalytics *v114.Plugin `protobuf:"bytes,51,opt,name=googleanalytics,proto3,oneof"`
}

type Step_Box struct {
	Box *v114.Plugin `protobuf:"bytes,52,opt,name=box,proto3,oneof"`
}

type Step_Hubspot struct {
	Hubspot *v114.Plugin `protobuf:"bytes,53,opt,name=hubspot,proto3,oneof"`
}

type Step_Stripe struct {
	Stripe *v114.Plugin `protobuf:"bytes,54,opt,name=stripe,proto3,oneof"`
}

type Step_Zoom struct {
	Zoom *v114.Plugin `protobuf:"bytes,55,opt,name=zoom,proto3,oneof"`
}

type Step_Jira struct {
	Jira *v114.Plugin `protobuf:"bytes,56,opt,name=jira,proto3,oneof"`
}

type Step_Zendesk struct {
	Zendesk *v114.Plugin `protobuf:"bytes,57,opt,name=zendesk,proto3,oneof"`
}

type Step_Adls struct {
	Adls *v130.Plugin `protobuf:"bytes,58,opt,name=adls,proto3,oneof"`
}

type Step_Pinecone struct {
	Pinecone *v131.Plugin `protobuf:"bytes,59,opt,name=pinecone,proto3,oneof"`
}

type Step_Cosmosdb struct {
	Cosmosdb *v132.Plugin `protobuf:"bytes,60,opt,name=cosmosdb,proto3,oneof"`
}

type Step_Datadog struct {
	Datadog *v114.Plugin `protobuf:"bytes,61,opt,name=datadog,proto3,oneof"`
}

type Step_Xero struct {
	Xero *v114.Plugin `protobuf:"bytes,62,opt,name=xero,proto3,oneof"`
}

type Step_Oracledb struct {
	Oracledb *v133.Plugin `protobuf:"bytes,63,opt,name=oracledb,proto3,oneof"`
}

type Step_Elasticsearch struct {
	Elasticsearch *v114.Plugin `protobuf:"bytes,64,opt,name=elasticsearch,proto3,oneof"`
}

type Step_Databricks struct {
	Databricks *v134.Plugin `protobuf:"bytes,65,opt,name=databricks,proto3,oneof"`
}

type Step_Couchbase struct {
	Couchbase *v135.Plugin `protobuf:"bytes,66,opt,name=couchbase,proto3,oneof"`
}

type Step_Custom struct {
	Custom *v136.Plugin `protobuf:"bytes,67,opt,name=custom,proto3,oneof"`
}

type Step_Anthropic struct {
	Anthropic *v114.Plugin `protobuf:"bytes,68,opt,name=anthropic,proto3,oneof"`
}

type Step_Cohere struct {
	Cohere *v114.Plugin `protobuf:"bytes,69,opt,name=cohere,proto3,oneof"`
}

type Step_Fireworks struct {
	Fireworks *v114.Plugin `protobuf:"bytes,70,opt,name=fireworks,proto3,oneof"`
}

type Step_Mistral struct {
	Mistral *v114.Plugin `protobuf:"bytes,71,opt,name=mistral,proto3,oneof"`
}

type Step_Groq struct {
	Groq *v114.Plugin `protobuf:"bytes,72,opt,name=groq,proto3,oneof"`
}

type Step_Perplexity struct {
	Perplexity *v114.Plugin `protobuf:"bytes,73,opt,name=perplexity,proto3,oneof"`
}

type Step_Stabilityai struct {
	Stabilityai *v114.Plugin `protobuf:"bytes,74,opt,name=stabilityai,proto3,oneof"`
}

type Step_Gemini struct {
	Gemini *v114.Plugin `protobuf:"bytes,75,opt,name=gemini,proto3,oneof"`
}

func (*Step_Python) isStep_Config() {}

func (*Step_Bigquery) isStep_Config() {}

func (*Step_Dynamodb) isStep_Config() {}

func (*Step_Email) isStep_Config() {}

func (*Step_Graphql) isStep_Config() {}

func (*Step_Graphqlintegration) isStep_Config() {}

func (*Step_Gsheets) isStep_Config() {}

func (*Step_Mariadb) isStep_Config() {}

func (*Step_Mssql) isStep_Config() {}

func (*Step_Mysql) isStep_Config() {}

func (*Step_Postgres) isStep_Config() {}

func (*Step_Redshift) isStep_Config() {}

func (*Step_Restapi) isStep_Config() {}

func (*Step_Restapiintegration) isStep_Config() {}

func (*Step_Rockset) isStep_Config() {}

func (*Step_S3) isStep_Config() {}

func (*Step_Snowflake) isStep_Config() {}

func (*Step_Workflow) isStep_Config() {}

func (*Step_Javascript) isStep_Config() {}

func (*Step_Mongodb) isStep_Config() {}

func (*Step_Gcs) isStep_Config() {}

func (*Step_Openai) isStep_Config() {}

func (*Step_Ocr) isStep_Config() {}

func (*Step_Kafka) isStep_Config() {}

func (*Step_Confluent) isStep_Config() {}

func (*Step_Msk) isStep_Config() {}

func (*Step_Redpanda) isStep_Config() {}

func (*Step_Aivenkafka) isStep_Config() {}

func (*Step_Cockroachdb) isStep_Config() {}

func (*Step_Airtable) isStep_Config() {}

func (*Step_Notion) isStep_Config() {}

func (*Step_Pagerduty) isStep_Config() {}

func (*Step_Sendgrid) isStep_Config() {}

func (*Step_Slack) isStep_Config() {}

func (*Step_Athena) isStep_Config() {}

func (*Step_Redis) isStep_Config() {}

func (*Step_Asana) isStep_Config() {}

func (*Step_Github) isStep_Config() {}

func (*Step_Smtp) isStep_Config() {}

func (*Step_Salesforce) isStep_Config() {}

func (*Step_Bitbucket) isStep_Config() {}

func (*Step_Circleci) isStep_Config() {}

func (*Step_Front) isStep_Config() {}

func (*Step_Intercom) isStep_Config() {}

func (*Step_Segment) isStep_Config() {}

func (*Step_Launchdarkly) isStep_Config() {}

func (*Step_Dropbox) isStep_Config() {}

func (*Step_Twilio) isStep_Config() {}

func (*Step_Googledrive) isStep_Config() {}

func (*Step_Googleanalytics) isStep_Config() {}

func (*Step_Box) isStep_Config() {}

func (*Step_Hubspot) isStep_Config() {}

func (*Step_Stripe) isStep_Config() {}

func (*Step_Zoom) isStep_Config() {}

func (*Step_Jira) isStep_Config() {}

func (*Step_Zendesk) isStep_Config() {}

func (*Step_Adls) isStep_Config() {}

func (*Step_Pinecone) isStep_Config() {}

func (*Step_Cosmosdb) isStep_Config() {}

func (*Step_Datadog) isStep_Config() {}

func (*Step_Xero) isStep_Config() {}

func (*Step_Oracledb) isStep_Config() {}

func (*Step_Elasticsearch) isStep_Config() {}

func (*Step_Databricks) isStep_Config() {}

func (*Step_Couchbase) isStep_Config() {}

func (*Step_Custom) isStep_Config() {}

func (*Step_Anthropic) isStep_Config() {}

func (*Step_Cohere) isStep_Config() {}

func (*Step_Fireworks) isStep_Config() {}

func (*Step_Mistral) isStep_Config() {}

func (*Step_Groq) isStep_Config() {}

func (*Step_Perplexity) isStep_Config() {}

func (*Step_Stabilityai) isStep_Config() {}

func (*Step_Gemini) isStep_Config() {}

type Profiles_Modes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Editor   *Profiles_Modes_Settings `protobuf:"bytes,1,opt,name=editor,proto3" json:"editor,omitempty"`
	Preview  *Profiles_Modes_Settings `protobuf:"bytes,2,opt,name=preview,proto3" json:"preview,omitempty"`
	Deployed *Profiles_Modes_Settings `protobuf:"bytes,3,opt,name=deployed,proto3" json:"deployed,omitempty"`
}

func (x *Profiles_Modes) Reset() {
	*x = Profiles_Modes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profiles_Modes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profiles_Modes) ProtoMessage() {}

func (x *Profiles_Modes) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profiles_Modes.ProtoReflect.Descriptor instead.
func (*Profiles_Modes) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Profiles_Modes) GetEditor() *Profiles_Modes_Settings {
	if x != nil {
		return x.Editor
	}
	return nil
}

func (x *Profiles_Modes) GetPreview() *Profiles_Modes_Settings {
	if x != nil {
		return x.Preview
	}
	return nil
}

func (x *Profiles_Modes) GetDeployed() *Profiles_Modes_Settings {
	if x != nil {
		return x.Deployed
	}
	return nil
}

type Profiles_Modes_Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Default   string   `protobuf:"bytes,1,opt,name=default,proto3" json:"default,omitempty"`
	Available []string `protobuf:"bytes,2,rep,name=available,proto3" json:"available,omitempty"`
}

func (x *Profiles_Modes_Settings) Reset() {
	*x = Profiles_Modes_Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profiles_Modes_Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profiles_Modes_Settings) ProtoMessage() {}

func (x *Profiles_Modes_Settings) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profiles_Modes_Settings.ProtoReflect.Descriptor instead.
func (*Profiles_Modes_Settings) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *Profiles_Modes_Settings) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *Profiles_Modes_Settings) GetAvailable() []string {
	if x != nil {
		return x.Available
	}
	return nil
}

type Trigger_Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options *Trigger_Application_Options `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	Id      string                       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	PageId  *string                      `protobuf:"bytes,3,opt,name=page_id,json=pageId,proto3,oneof" json:"page_id,omitempty"`
}

func (x *Trigger_Application) Reset() {
	*x = Trigger_Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger_Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_Application) ProtoMessage() {}

func (x *Trigger_Application) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger_Application.ProtoReflect.Descriptor instead.
func (*Trigger_Application) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Trigger_Application) GetOptions() *Trigger_Application_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Trigger_Application) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Trigger_Application) GetPageId() string {
	if x != nil && x.PageId != nil {
		return *x.PageId
	}
	return ""
}

type Trigger_Workflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options    *Trigger_Workflow_Options    `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	Parameters *Trigger_Workflow_Parameters `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *Trigger_Workflow) Reset() {
	*x = Trigger_Workflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger_Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_Workflow) ProtoMessage() {}

func (x *Trigger_Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger_Workflow.ProtoReflect.Descriptor instead.
func (*Trigger_Workflow) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Trigger_Workflow) GetOptions() *Trigger_Workflow_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Trigger_Workflow) GetParameters() *Trigger_Workflow_Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type Trigger_Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options        *Trigger_Job_Options   `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	Frequency      int32                  `protobuf:"varint,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Interval       Trigger_Job_Interval   `protobuf:"varint,3,opt,name=interval,proto3,enum=api.v1.Trigger_Job_Interval" json:"interval,omitempty"`
	DayOfMonth     int32                  `protobuf:"varint,4,opt,name=day_of_month,json=dayOfMonth,proto3" json:"day_of_month,omitempty"`
	Days           *Trigger_Job_Days      `protobuf:"bytes,5,opt,name=days,proto3" json:"days,omitempty"`
	Time           *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
	TimezoneLocale string                 `protobuf:"bytes,8,opt,name=timezone_locale,json=timezoneLocale,proto3" json:"timezone_locale,omitempty"`
}

func (x *Trigger_Job) Reset() {
	*x = Trigger_Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger_Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_Job) ProtoMessage() {}

func (x *Trigger_Job) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger_Job.ProtoReflect.Descriptor instead.
func (*Trigger_Job) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Trigger_Job) GetOptions() *Trigger_Job_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Trigger_Job) GetFrequency() int32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *Trigger_Job) GetInterval() Trigger_Job_Interval {
	if x != nil {
		return x.Interval
	}
	return Trigger_Job_INTERVAL_UNSPECIFIED
}

func (x *Trigger_Job) GetDayOfMonth() int32 {
	if x != nil {
		return x.DayOfMonth
	}
	return 0
}

func (x *Trigger_Job) GetDays() *Trigger_Job_Days {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *Trigger_Job) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Trigger_Job) GetTimezoneLocale() string {
	if x != nil {
		return x.TimezoneLocale
	}
	return ""
}

type Trigger_Application_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecuteOnPageLoad *bool `protobuf:"varint,1,opt,name=execute_on_page_load,json=executeOnPageLoad,proto3,oneof" json:"execute_on_page_load,omitempty"`
}

func (x *Trigger_Application_Options) Reset() {
	*x = Trigger_Application_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger_Application_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_Application_Options) ProtoMessage() {}

func (x *Trigger_Application_Options) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger_Application_Options.ProtoReflect.Descriptor instead.
func (*Trigger_Application_Options) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *Trigger_Application_Options) GetExecuteOnPageLoad() bool {
	if x != nil && x.ExecuteOnPageLoad != nil {
		return *x.ExecuteOnPageLoad
	}
	return false
}

type Trigger_Workflow_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profiles         *Profiles `protobuf:"bytes,1,opt,name=profiles,proto3" json:"profiles,omitempty"`
	DeployedCommitId *string   `protobuf:"bytes,2,opt,name=deployedCommitId,proto3,oneof" json:"deployedCommitId,omitempty"`
}

func (x *Trigger_Workflow_Options) Reset() {
	*x = Trigger_Workflow_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger_Workflow_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_Workflow_Options) ProtoMessage() {}

func (x *Trigger_Workflow_Options) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger_Workflow_Options.ProtoReflect.Descriptor instead.
func (*Trigger_Workflow_Options) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (x *Trigger_Workflow_Options) GetProfiles() *Profiles {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *Trigger_Workflow_Options) GetDeployedCommitId() string {
	if x != nil && x.DeployedCommitId != nil {
		return *x.DeployedCommitId
	}
	return ""
}

type Trigger_Workflow_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query map[string]*Trigger_Workflow_Parameters_QueryParam `protobuf:"bytes,1,rep,name=query,proto3" json:"query,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body  map[string]*structpb.Value                         `protobuf:"bytes,2,rep,name=body,proto3" json:"body,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Trigger_Workflow_Parameters) Reset() {
	*x = Trigger_Workflow_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger_Workflow_Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_Workflow_Parameters) ProtoMessage() {}

func (x *Trigger_Workflow_Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger_Workflow_Parameters.ProtoReflect.Descriptor instead.
func (*Trigger_Workflow_Parameters) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{2, 1, 1}
}

func (x *Trigger_Workflow_Parameters) GetQuery() map[string]*Trigger_Workflow_Parameters_QueryParam {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *Trigger_Workflow_Parameters) GetBody() map[string]*structpb.Value {
	if x != nil {
		return x.Body
	}
	return nil
}

// You can specify multiple values for a single query parameter in a URL
type Trigger_Workflow_Parameters_QueryParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Trigger_Workflow_Parameters_QueryParam) Reset() {
	*x = Trigger_Workflow_Parameters_QueryParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger_Workflow_Parameters_QueryParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_Workflow_Parameters_QueryParam) ProtoMessage() {}

func (x *Trigger_Workflow_Parameters_QueryParam) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger_Workflow_Parameters_QueryParam.ProtoReflect.Descriptor instead.
func (*Trigger_Workflow_Parameters_QueryParam) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{2, 1, 1, 0}
}

func (x *Trigger_Workflow_Parameters_QueryParam) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type Trigger_Job_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profiles           *Profiles `protobuf:"bytes,1,opt,name=profiles,proto3" json:"profiles,omitempty"`
	SendEmailOnFailure bool      `protobuf:"varint,2,opt,name=send_email_on_failure,json=sendEmailOnFailure,proto3" json:"send_email_on_failure,omitempty"`
	DeployedCommitId   *string   `protobuf:"bytes,3,opt,name=deployedCommitId,proto3,oneof" json:"deployedCommitId,omitempty"`
}

func (x *Trigger_Job_Options) Reset() {
	*x = Trigger_Job_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger_Job_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_Job_Options) ProtoMessage() {}

func (x *Trigger_Job_Options) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger_Job_Options.ProtoReflect.Descriptor instead.
func (*Trigger_Job_Options) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{2, 2, 0}
}

func (x *Trigger_Job_Options) GetProfiles() *Profiles {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *Trigger_Job_Options) GetSendEmailOnFailure() bool {
	if x != nil {
		return x.SendEmailOnFailure
	}
	return false
}

func (x *Trigger_Job_Options) GetDeployedCommitId() string {
	if x != nil && x.DeployedCommitId != nil {
		return *x.DeployedCommitId
	}
	return ""
}

type Trigger_Job_Days struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sunday    bool `protobuf:"varint,1,opt,name=sunday,proto3" json:"sunday,omitempty"`
	Monday    bool `protobuf:"varint,2,opt,name=monday,proto3" json:"monday,omitempty"`
	Tuesday   bool `protobuf:"varint,3,opt,name=tuesday,proto3" json:"tuesday,omitempty"`
	Wednesday bool `protobuf:"varint,4,opt,name=wednesday,proto3" json:"wednesday,omitempty"`
	Thursday  bool `protobuf:"varint,5,opt,name=thursday,proto3" json:"thursday,omitempty"`
	Friday    bool `protobuf:"varint,6,opt,name=friday,proto3" json:"friday,omitempty"`
	Saturday  bool `protobuf:"varint,7,opt,name=saturday,proto3" json:"saturday,omitempty"`
}

func (x *Trigger_Job_Days) Reset() {
	*x = Trigger_Job_Days{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger_Job_Days) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger_Job_Days) ProtoMessage() {}

func (x *Trigger_Job_Days) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger_Job_Days.ProtoReflect.Descriptor instead.
func (*Trigger_Job_Days) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{2, 2, 1}
}

func (x *Trigger_Job_Days) GetSunday() bool {
	if x != nil {
		return x.Sunday
	}
	return false
}

func (x *Trigger_Job_Days) GetMonday() bool {
	if x != nil {
		return x.Monday
	}
	return false
}

func (x *Trigger_Job_Days) GetTuesday() bool {
	if x != nil {
		return x.Tuesday
	}
	return false
}

func (x *Trigger_Job_Days) GetWednesday() bool {
	if x != nil {
		return x.Wednesday
	}
	return false
}

func (x *Trigger_Job_Days) GetThursday() bool {
	if x != nil {
		return x.Thursday
	}
	return false
}

func (x *Trigger_Job_Days) GetFriday() bool {
	if x != nil {
		return x.Friday
	}
	return false
}

func (x *Trigger_Job_Days) GetSaturday() bool {
	if x != nil {
		return x.Saturday
	}
	return false
}

type Block_Parallel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*Block_Parallel_Static_
	//	*Block_Parallel_Dynamic_
	Config   isBlock_Parallel_Config `protobuf_oneof:"config"`
	Wait     Block_Parallel_Wait     `protobuf:"varint,3,opt,name=wait,proto3,enum=api.v1.Block_Parallel_Wait" json:"wait,omitempty"`
	PoolSize *int32                  `protobuf:"varint,4,opt,name=pool_size,json=poolSize,proto3,oneof" json:"pool_size,omitempty"`
}

func (x *Block_Parallel) Reset() {
	*x = Block_Parallel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Parallel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Parallel) ProtoMessage() {}

func (x *Block_Parallel) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Parallel.ProtoReflect.Descriptor instead.
func (*Block_Parallel) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4, 0}
}

func (m *Block_Parallel) GetConfig() isBlock_Parallel_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *Block_Parallel) GetStatic() *Block_Parallel_Static {
	if x, ok := x.GetConfig().(*Block_Parallel_Static_); ok {
		return x.Static
	}
	return nil
}

func (x *Block_Parallel) GetDynamic() *Block_Parallel_Dynamic {
	if x, ok := x.GetConfig().(*Block_Parallel_Dynamic_); ok {
		return x.Dynamic
	}
	return nil
}

func (x *Block_Parallel) GetWait() Block_Parallel_Wait {
	if x != nil {
		return x.Wait
	}
	return Block_Parallel_WAIT_UNSPECIFIED
}

func (x *Block_Parallel) GetPoolSize() int32 {
	if x != nil && x.PoolSize != nil {
		return *x.PoolSize
	}
	return 0
}

type isBlock_Parallel_Config interface {
	isBlock_Parallel_Config()
}

type Block_Parallel_Static_ struct {
	Static *Block_Parallel_Static `protobuf:"bytes,1,opt,name=static,proto3,oneof"`
}

type Block_Parallel_Dynamic_ struct {
	Dynamic *Block_Parallel_Dynamic `protobuf:"bytes,2,opt,name=dynamic,proto3,oneof"`
}

func (*Block_Parallel_Static_) isBlock_Parallel_Config() {}

func (*Block_Parallel_Dynamic_) isBlock_Parallel_Config() {}

type Block_Conditional struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	If     *Block_Conditional_Condition   `protobuf:"bytes,1,opt,name=if,proto3" json:"if,omitempty"`
	ElseIf []*Block_Conditional_Condition `protobuf:"bytes,2,rep,name=else_if,json=elseIf,proto3" json:"else_if,omitempty"`
	Else   *Blocks                        `protobuf:"bytes,3,opt,name=else,proto3" json:"else,omitempty"`
}

func (x *Block_Conditional) Reset() {
	*x = Block_Conditional{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Conditional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Conditional) ProtoMessage() {}

func (x *Block_Conditional) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Conditional.ProtoReflect.Descriptor instead.
func (*Block_Conditional) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Block_Conditional) GetIf() *Block_Conditional_Condition {
	if x != nil {
		return x.If
	}
	return nil
}

func (x *Block_Conditional) GetElseIf() []*Block_Conditional_Condition {
	if x != nil {
		return x.ElseIf
	}
	return nil
}

func (x *Block_Conditional) GetElse() *Blocks {
	if x != nil {
		return x.Else
	}
	return nil
}

type Block_Loop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// This can be a binding that evaluates to one of three things:
	//  1. An integer           IF type if TYPE_FOR.
	//  2. A JSON encoded list  IF type is TYPE_FOREACH.
	//  3. A boolean            IF type is TYPE_WHILE. NOTE that this expressition will be re-evaluated on each iteration.
	Range     string                `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	Type      Block_Loop_Type       `protobuf:"varint,2,opt,name=type,proto3,enum=api.v1.Block_Loop_Type" json:"type,omitempty"`
	Variables *Block_Loop_Variables `protobuf:"bytes,3,opt,name=variables,proto3" json:"variables,omitempty"`
	Blocks    []*Block              `protobuf:"bytes,4,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *Block_Loop) Reset() {
	*x = Block_Loop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Loop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Loop) ProtoMessage() {}

func (x *Block_Loop) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Loop.ProtoReflect.Descriptor instead.
func (*Block_Loop) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4, 2}
}

func (x *Block_Loop) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *Block_Loop) GetType() Block_Loop_Type {
	if x != nil {
		return x.Type
	}
	return Block_Loop_TYPE_UNSPECIFIED
}

func (x *Block_Loop) GetVariables() *Block_Loop_Variables {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *Block_Loop) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type Block_TryCatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Try       *Blocks                   `protobuf:"bytes,1,opt,name=try,proto3" json:"try,omitempty"`
	Catch     *Blocks                   `protobuf:"bytes,2,opt,name=catch,proto3" json:"catch,omitempty"`
	Finally   *Blocks                   `protobuf:"bytes,3,opt,name=finally,proto3" json:"finally,omitempty"`
	Variables *Block_TryCatch_Variables `protobuf:"bytes,4,opt,name=variables,proto3" json:"variables,omitempty"`
}

func (x *Block_TryCatch) Reset() {
	*x = Block_TryCatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_TryCatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_TryCatch) ProtoMessage() {}

func (x *Block_TryCatch) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_TryCatch.ProtoReflect.Descriptor instead.
func (*Block_TryCatch) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4, 3}
}

func (x *Block_TryCatch) GetTry() *Blocks {
	if x != nil {
		return x.Try
	}
	return nil
}

func (x *Block_TryCatch) GetCatch() *Blocks {
	if x != nil {
		return x.Catch
	}
	return nil
}

func (x *Block_TryCatch) GetFinally() *Blocks {
	if x != nil {
		return x.Finally
	}
	return nil
}

func (x *Block_TryCatch) GetVariables() *Block_TryCatch_Variables {
	if x != nil {
		return x.Variables
	}
	return nil
}

type Block_Break struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition string `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *Block_Break) Reset() {
	*x = Block_Break{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Break) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Break) ProtoMessage() {}

func (x *Block_Break) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Break.ProtoReflect.Descriptor instead.
func (*Block_Break) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4, 4}
}

func (x *Block_Break) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

type Block_Return struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Block_Return) Reset() {
	*x = Block_Return{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Return) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Return) ProtoMessage() {}

func (x *Block_Return) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Return.ProtoReflect.Descriptor instead.
func (*Block_Return) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4, 5}
}

func (x *Block_Return) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type Block_Throw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Block_Throw) Reset() {
	*x = Block_Throw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Throw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Throw) ProtoMessage() {}

func (x *Block_Throw) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Throw.ProtoReflect.Descriptor instead.
func (*Block_Throw) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4, 6}
}

func (x *Block_Throw) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type Block_Wait struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition string `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *Block_Wait) Reset() {
	*x = Block_Wait{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Wait) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Wait) ProtoMessage() {}

func (x *Block_Wait) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Wait.ProtoReflect.Descriptor instead.
func (*Block_Wait) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4, 7}
}

func (x *Block_Wait) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

type Block_Stream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trigger   *Block_Stream_Trigger   `protobuf:"bytes,1,opt,name=trigger,proto3" json:"trigger,omitempty"`
	Process   *Blocks                 `protobuf:"bytes,2,opt,name=process,proto3" json:"process,omitempty"`
	Variables *Block_Stream_Variables `protobuf:"bytes,3,opt,name=variables,proto3" json:"variables,omitempty"`
	Options   *Block_Stream_Options   `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *Block_Stream) Reset() {
	*x = Block_Stream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Stream) ProtoMessage() {}

func (x *Block_Stream) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Stream.ProtoReflect.Descriptor instead.
func (*Block_Stream) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4, 8}
}

func (x *Block_Stream) GetTrigger() *Block_Stream_Trigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *Block_Stream) GetProcess() *Blocks {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *Block_Stream) GetVariables() *Block_Stream_Variables {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *Block_Stream) GetOptions() *Block_Stream_Options {
	if x != nil {
		return x.Options
	}
	return nil
}

type Block_Send struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Block_Send) Reset() {
	*x = Block_Send{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Send) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Send) ProtoMessage() {}

func (x *Block_Send) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Send.ProtoReflect.Descriptor instead.
func (*Block_Send) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4, 9}
}

func (x *Block_Send) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Block_Parallel_Static struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths map[string]*Blocks `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Block_Parallel_Static) Reset() {
	*x = Block_Parallel_Static{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Parallel_Static) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Parallel_Static) ProtoMessage() {}

func (x *Block_Parallel_Static) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Parallel_Static.ProtoReflect.Descriptor instead.
func (*Block_Parallel_Static) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *Block_Parallel_Static) GetPaths() map[string]*Blocks {
	if x != nil {
		return x.Paths
	}
	return nil
}

type Block_Parallel_Dynamic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths     string                            `protobuf:"bytes,1,opt,name=paths,proto3" json:"paths,omitempty"`
	Variables *Block_Parallel_Dynamic_Variables `protobuf:"bytes,2,opt,name=variables,proto3" json:"variables,omitempty"`
	Blocks    []*Block                          `protobuf:"bytes,3,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *Block_Parallel_Dynamic) Reset() {
	*x = Block_Parallel_Dynamic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Parallel_Dynamic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Parallel_Dynamic) ProtoMessage() {}

func (x *Block_Parallel_Dynamic) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Parallel_Dynamic.ProtoReflect.Descriptor instead.
func (*Block_Parallel_Dynamic) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4, 0, 1}
}

func (x *Block_Parallel_Dynamic) GetPaths() string {
	if x != nil {
		return x.Paths
	}
	return ""
}

func (x *Block_Parallel_Dynamic) GetVariables() *Block_Parallel_Dynamic_Variables {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *Block_Parallel_Dynamic) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type Block_Parallel_Dynamic_Variables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item string `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *Block_Parallel_Dynamic_Variables) Reset() {
	*x = Block_Parallel_Dynamic_Variables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Parallel_Dynamic_Variables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Parallel_Dynamic_Variables) ProtoMessage() {}

func (x *Block_Parallel_Dynamic_Variables) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Parallel_Dynamic_Variables.ProtoReflect.Descriptor instead.
func (*Block_Parallel_Dynamic_Variables) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4, 0, 1, 0}
}

func (x *Block_Parallel_Dynamic_Variables) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

type Block_Conditional_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition string   `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Blocks    []*Block `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *Block_Conditional_Condition) Reset() {
	*x = Block_Conditional_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Conditional_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Conditional_Condition) ProtoMessage() {}

func (x *Block_Conditional_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Conditional_Condition.ProtoReflect.Descriptor instead.
func (*Block_Conditional_Condition) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4, 1, 0}
}

func (x *Block_Conditional_Condition) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *Block_Conditional_Condition) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type Block_Loop_Variables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of the loop.
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	// The current item; index if none.
	Item string `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *Block_Loop_Variables) Reset() {
	*x = Block_Loop_Variables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Loop_Variables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Loop_Variables) ProtoMessage() {}

func (x *Block_Loop_Variables) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Loop_Variables.ProtoReflect.Descriptor instead.
func (*Block_Loop_Variables) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4, 2, 0}
}

func (x *Block_Loop_Variables) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *Block_Loop_Variables) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

type Block_TryCatch_Variables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error inside of the catch block.
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Block_TryCatch_Variables) Reset() {
	*x = Block_TryCatch_Variables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_TryCatch_Variables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_TryCatch_Variables) ProtoMessage() {}

func (x *Block_TryCatch_Variables) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_TryCatch_Variables.ProtoReflect.Descriptor instead.
func (*Block_TryCatch_Variables) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4, 3, 0}
}

func (x *Block_TryCatch_Variables) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type Block_Stream_Variables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item string `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *Block_Stream_Variables) Reset() {
	*x = Block_Stream_Variables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Stream_Variables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Stream_Variables) ProtoMessage() {}

func (x *Block_Stream_Variables) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Stream_Variables.ProtoReflect.Descriptor instead.
func (*Block_Stream_Variables) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4, 8, 0}
}

func (x *Block_Stream_Variables) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

type Block_Stream_Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The UI has "auto send" but we need the default to be false
	// So our name here needs to be the opposite.
	DisableAutoSend bool `protobuf:"varint,1,opt,name=disable_auto_send,json=disableAutoSend,proto3" json:"disable_auto_send,omitempty"`
}

func (x *Block_Stream_Options) Reset() {
	*x = Block_Stream_Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Stream_Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Stream_Options) ProtoMessage() {}

func (x *Block_Stream_Options) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Stream_Options.ProtoReflect.Descriptor instead.
func (*Block_Stream_Options) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4, 8, 1}
}

func (x *Block_Stream_Options) GetDisableAutoSend() bool {
	if x != nil {
		return x.DisableAutoSend
	}
	return false
}

type Block_Stream_Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Step *Step  `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
}

func (x *Block_Stream_Trigger) Reset() {
	*x = Block_Stream_Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_Stream_Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_Stream_Trigger) ProtoMessage() {}

func (x *Block_Stream_Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_Stream_Trigger.ProtoReflect.Descriptor instead.
func (*Block_Stream_Trigger) Descriptor() ([]byte, []int) {
	return file_api_v1_api_proto_rawDescGZIP(), []int{4, 8, 2}
}

func (x *Block_Stream_Trigger) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Block_Stream_Trigger) GetStep() *Step {
	if x != nil {
		return x.Step
	}
	return nil
}

var File_api_v1_api_proto protoreflect.FileDescriptor

var file_api_v1_api_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x13, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x61, 0x64, 0x6c,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x61, 0x74, 0x68, 0x65, 0x6e,
	0x61, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x63,
	0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x64, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x64, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x6f, 0x64, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x67, 0x63, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x67, 0x73, 0x68, 0x65, 0x65, 0x74,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x22, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x6d, 0x61,
	0x72, 0x69, 0x61, 0x64, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f,
	0x6d, 0x73, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x6d,
	0x79, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x6f, 0x63,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x64, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x70, 0x69, 0x6e,
	0x65, 0x63, 0x6f, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x70,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2f, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2f, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2f, 0x73, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2f, 0x73, 0x6d, 0x74, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f,
	0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x75, 0x74, 0x69, 0x6c, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x01, 0x0a, 0x03, 0x41, 0x70, 0x69,
	0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0e, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x25, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x73, 0x1a, 0xfc, 0x01, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x37,
	0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x06, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x1a,
	0x42, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0x8e, 0x0f, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x3f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x27, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x03, 0x6a, 0x6f,
	0x62, 0x1a, 0xe0, 0x01, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3d, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x58,
	0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x14, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x4f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x1a, 0x83, 0x05, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x12, 0x3a, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x1a, 0x7d, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x10, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x64, 0x1a, 0xf6, 0x02, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x44, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x24, 0x0a, 0x0a, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a,
	0x68, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x09, 0x42, 0x6f, 0x64,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xed, 0x06, 0x0a, 0x03, 0x4a,
	0x6f, 0x62, 0x12, 0x35, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xfa, 0x42,
	0x04, 0x1a, 0x02, 0x28, 0x01, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x28, 0x01, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x34, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x20,
	0x28, 0x01, 0xba, 0x48, 0x06, 0x1a, 0x04, 0x18, 0x20, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x61, 0x79,
	0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x44, 0x61, 0x79, 0x73, 0x52,
	0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x1a, 0xb0,
	0x01, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x10, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x64, 0x1a, 0xbe, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75,
	0x6e, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x75, 0x6e, 0x64,
	0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x75,
	0x65, 0x73, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x75, 0x65,
	0x73, 0x64, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64,
	0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x72, 0x69, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x66, 0x72, 0x69, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64,
	0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64,
	0x61, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x18, 0x0a, 0x14, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x44, 0x41,
	0x59, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f,
	0x57, 0x45, 0x45, 0x4b, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56,
	0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x52, 0x08, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x75, 0x74, 0x63, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x2f, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x25,
	0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0xfe, 0x16, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x12, 0x28, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x57, 0x61,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6c, 0x6c, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0x28, 0x0a, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x4c, 0x6f, 0x6f,
	0x70, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x12, 0x35, 0x0a, 0x09, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x79, 0x43,
	0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x79, 0x43, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x22, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x48, 0x00, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x12, 0x31, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x09, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x68, 0x72, 0x6f, 0x77,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x05, 0x74,
	0x68, 0x72, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x1a, 0xa2,
	0x05, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x12, 0x3a, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x2e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x48, 0x00, 0x52, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x12, 0x42, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x42, 0x11, 0xfa, 0x42, 0x05,
	0x82, 0x01, 0x02, 0x20, 0x00, 0xba, 0x48, 0x06, 0x82, 0x01, 0x03, 0x22, 0x01, 0x00, 0x52, 0x04,
	0x77, 0x61, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x28, 0x01,
	0x48, 0x01, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x1a,
	0x92, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x48, 0x0a, 0x0a, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0xbf, 0x01, 0x0a, 0x07, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x25,
	0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x1a, 0x2f, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0e, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x39, 0x0a, 0x04, 0x57, 0x61, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x10, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x41, 0x4c, 0x4c,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x02, 0x42, 0x12, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x08, 0xf8, 0x42, 0x01,
	0xba, 0x48, 0x02, 0x08, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x1a, 0x92, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x02, 0x69, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x69, 0x66, 0x12, 0x3c, 0x0a, 0x07, 0x65, 0x6c, 0x73, 0x65,
	0x5f, 0x69, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x65, 0x6c, 0x73, 0x65, 0x49, 0x66, 0x12, 0x22, 0x0a, 0x04, 0x65, 0x6c, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x52, 0x04, 0x65, 0x6c, 0x73, 0x65, 0x1a, 0x6c, 0x0a, 0x09, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa, 0x42, 0x0a, 0x72,
	0x08, 0x3a, 0x02, 0x7b, 0x7b, 0x42, 0x02, 0x7d, 0x7d, 0xba, 0x48, 0x0a, 0x72, 0x08, 0x3a, 0x02,
	0x7b, 0x7b, 0x42, 0x02, 0x7d, 0x7d, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x1a, 0xed, 0x02, 0x0a, 0x04, 0x4c, 0x6f, 0x6f,
	0x70, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x3a, 0x02, 0x7b, 0x7b, 0x42, 0x02, 0x7d, 0x7d, 0xba,
	0x48, 0x0a, 0x72, 0x08, 0x3a, 0x02, 0x7b, 0x7b, 0x42, 0x02, 0x7d, 0x7d, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x3a, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x06,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x1a, 0x55, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x48, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x4c, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x4f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x57, 0x48, 0x49, 0x4c, 0x45, 0x10, 0x03, 0x1a, 0xef, 0x01, 0x0a, 0x08, 0x54, 0x72, 0x79,
	0x43, 0x61, 0x74, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x03, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x03, 0x74, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x05, 0x63, 0x61, 0x74, 0x63, 0x68, 0x12, 0x28, 0x0a,
	0x07, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x07,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x79, 0x43, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x09, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x31, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0e, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x48, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x41, 0x0a, 0x05, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x3a, 0x02, 0x7b,
	0x7b, 0x42, 0x02, 0x7d, 0x7d, 0xba, 0x48, 0x0a, 0x72, 0x08, 0x3a, 0x02, 0x7b, 0x7b, 0x42, 0x02,
	0x7d, 0x7d, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x38, 0x0a,
	0x06, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x3a, 0x02, 0x7b, 0x7b,
	0x42, 0x02, 0x7d, 0x7d, 0xba, 0x48, 0x0a, 0x72, 0x08, 0x3a, 0x02, 0x7b, 0x7b, 0x42, 0x02, 0x7d,
	0x7d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x39, 0x0a, 0x05, 0x54, 0x68, 0x72, 0x6f, 0x77,
	0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x3a, 0x02, 0x7b, 0x7b, 0x42, 0x02, 0x7d, 0x7d, 0xba, 0x48,
	0x0a, 0x72, 0x08, 0x3a, 0x02, 0x7b, 0x7b, 0x42, 0x02, 0x7d, 0x7d, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x1a, 0x40, 0x0a, 0x04, 0x57, 0x61, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa,
	0x42, 0x0a, 0x72, 0x08, 0x3a, 0x02, 0x7b, 0x7b, 0x42, 0x02, 0x7d, 0x7d, 0xba, 0x48, 0x0a, 0x72,
	0x08, 0x3a, 0x02, 0x7b, 0x7b, 0x42, 0x02, 0x7d, 0x7d, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb9, 0x03, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x46, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x0e,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x4c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x42, 0x0e, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2f, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xba, 0x48, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x1a, 0x35, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x1a,
	0x4f, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x1a, 0x30, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x12, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x08, 0xf8, 0x42,
	0x01, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0xbd, 0x2b, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x70, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x06,
	0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x39, 0x0a, 0x08, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x12, 0x30, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x36,
	0x0a, 0x07, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x12, 0x4c, 0x0a, 0x12, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71,
	0x6c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00,
	0x52, 0x12, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x67, 0x73, 0x68, 0x65, 0x65, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x67, 0x73, 0x68, 0x65, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x48, 0x00, 0x52, 0x07, 0x67, 0x73, 0x68, 0x65, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x07,
	0x6d, 0x61, 0x72, 0x69, 0x61, 0x64, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x6d, 0x61, 0x72, 0x69, 0x61, 0x64, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x72,
	0x69, 0x61, 0x64, 0x62, 0x12, 0x30, 0x0a, 0x05, 0x6d, 0x73, 0x73, 0x71, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x6d, 0x73,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52,
	0x05, 0x6d, 0x73, 0x73, 0x71, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x6d, 0x79, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48,
	0x00, 0x52, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x72, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x64, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x12, 0x57, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x6f, 0x63,
	0x6b, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00,
	0x52, 0x07, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x73, 0x33, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x73, 0x33, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x02,
	0x73, 0x33, 0x12, 0x3c, 0x0a, 0x09, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65,
	0x12, 0x39, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x3f, 0x0a, 0x0a, 0x6a,
	0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00,
	0x52, 0x0a, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x36, 0x0a, 0x07,
	0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x12, 0x2a, 0x0a, 0x03, 0x67, 0x63, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x67, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x67, 0x63, 0x73,
	0x12, 0x33, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x69, 0x12, 0x36, 0x0a, 0x03, 0x6f, 0x63, 0x72, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x6f, 0x63, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2d, 0x6f, 0x63, 0x72, 0x12, 0x30, 0x0a,
	0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x6d, 0x73, 0x6b,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x48, 0x00, 0x52, 0x03, 0x6d, 0x73, 0x6b, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x12,
	0x3a, 0x0a, 0x0a, 0x61, 0x69, 0x76, 0x65, 0x6e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x69, 0x76, 0x65, 0x6e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x42, 0x0a, 0x0b, 0x63,
	0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x64, 0x62, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x63, 0x6b, 0x72,
	0x6f, 0x61, 0x63, 0x68, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x63, 0x6b, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x64, 0x62, 0x12,
	0x5d, 0x0a, 0x08, 0x61, 0x69, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x61, 0x69, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x59,
	0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x72, 0x64, 0x75, 0x74, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x72, 0x64, 0x75, 0x74, 0x79, 0x12, 0x5d, 0x0a, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x67, 0x72, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x08, 0x73, 0x65, 0x6e, 0x64, 0x67, 0x72, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x05, 0x73, 0x6c, 0x61,
	0x63, 0x6b, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42,
	0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x73, 0x6c, 0x61,
	0x63, 0x6b, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x61, 0x74, 0x68,
	0x65, 0x6e, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52,
	0x06, 0x61, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x12, 0x57, 0x0a, 0x05, 0x61, 0x73, 0x61,
	0x6e, 0x61, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42,
	0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x61, 0x73, 0x61,
	0x6e, 0x61, 0x12, 0x59, 0x0a, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12,
	0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x12, 0x2d, 0x0a,
	0x04, 0x73, 0x6d, 0x74, 0x70, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6d, 0x74, 0x70, 0x12, 0x3f, 0x0a, 0x0a,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48,
	0x00, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x5f, 0x0a,
	0x09, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x09, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x5d,
	0x0a, 0x08, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x63, 0x69, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x08, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x63, 0x69, 0x12, 0x57, 0x0a,
	0x05, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x05, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x6f, 0x6d, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42,
	0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x63, 0x6f, 0x6d, 0x12, 0x5b, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82,
	0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x65, 0x0a, 0x0c, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x64, 0x61, 0x72, 0x6b,
	0x6c, 0x79, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42,
	0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x64, 0x61, 0x72, 0x6b, 0x6c, 0x79, 0x12, 0x5b, 0x0a, 0x07, 0x64, 0x72, 0x6f,
	0x70, 0x62, 0x6f, 0x78, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x64,
	0x72, 0x6f, 0x70, 0x62, 0x6f, 0x78, 0x12, 0x59, 0x0a, 0x06, 0x74, 0x77, 0x69, 0x6c, 0x69, 0x6f,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82,
	0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x74, 0x77, 0x69, 0x6c, 0x69,
	0x6f, 0x12, 0x63, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82,
	0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x64, 0x72, 0x69, 0x76, 0x65, 0x12, 0x6b, 0x0a, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70,
	0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x53, 0x0a, 0x03, 0x62, 0x6f, 0x78, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x03, 0x62, 0x6f, 0x78, 0x12, 0x5b, 0x0a, 0x07, 0x68, 0x75, 0x62, 0x73,
	0x70, 0x6f, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x68, 0x75,
	0x62, 0x73, 0x70, 0x6f, 0x74, 0x12, 0x59, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6,
	0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65,
	0x12, 0x55, 0x0a, 0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x12, 0x55, 0x0a, 0x04, 0x6a, 0x69, 0x72, 0x61, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6,
	0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x69, 0x72, 0x61, 0x12, 0x5b,
	0x0a, 0x07, 0x7a, 0x65, 0x6e, 0x64, 0x65, 0x73, 0x6b, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70,
	0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x07, 0x7a, 0x65, 0x6e, 0x64, 0x65, 0x73, 0x6b, 0x12, 0x2d, 0x0a, 0x04, 0x61,
	0x64, 0x6c, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x61, 0x64, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x61, 0x64, 0x6c, 0x73, 0x12, 0x53, 0x0a, 0x08, 0x70, 0x69,
	0x6e, 0x65, 0x63, 0x6f, 0x6e, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x70, 0x69, 0x6e, 0x65, 0x63, 0x6f, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12,
	0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x70, 0x69, 0x6e, 0x65, 0x63, 0x6f, 0x6e, 0x65, 0x12,
	0x39, 0x0a, 0x08, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x64, 0x62, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00,
	0x52, 0x08, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x64, 0x62, 0x12, 0x5b, 0x0a, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x64, 0x6f, 0x67, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70,
	0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x12, 0x55, 0x0a, 0x04, 0x78, 0x65, 0x72, 0x6f, 0x18,
	0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6,
	0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x78, 0x65, 0x72, 0x6f, 0x12, 0x39,
	0x0a, 0x08, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x62, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52,
	0x08, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x62, 0x12, 0x67, 0x0a, 0x0d, 0x65, 0x6c, 0x61,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x3f, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73,
	0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x6b, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x63, 0x68, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x43, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x5f, 0x0a, 0x09, 0x61, 0x6e, 0x74, 0x68, 0x72, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6e,
	0x74, 0x68, 0x72, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x59, 0x0a, 0x06, 0x63, 0x6f, 0x68, 0x65, 0x72,
	0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18,
	0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x68, 0x65,
	0x72, 0x65, 0x12, 0x5f, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6,
	0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x72, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x12, 0x5b, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6c, 0x18, 0x47,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6, 0x1d,
	0x14, 0x12, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x74, 0x72, 0x61, 0x6c,
	0x12, 0x55, 0x0a, 0x04, 0x67, 0x72, 0x6f, 0x71, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x04, 0x67, 0x72, 0x6f, 0x71, 0x12, 0x61, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x70, 0x6c,
	0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70,
	0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a,
	0x70, 0x65, 0x72, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x63, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x61, 0x69, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70,
	0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x61, 0x69, 0x12,
	0x59, 0x0a, 0x06, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x70,
	0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x18, 0x82, 0xa6, 0x1d, 0x14, 0x12, 0x12, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x70, 0x69, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x06, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x3a, 0x06, 0x82, 0xb5, 0x18, 0x02,
	0x08, 0x01, 0x42, 0x12, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x08, 0xf8, 0x42,
	0x01, 0xba, 0x48, 0x02, 0x08, 0x01, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_api_proto_rawDescOnce sync.Once
	file_api_v1_api_proto_rawDescData = file_api_v1_api_proto_rawDesc
)

func file_api_v1_api_proto_rawDescGZIP() []byte {
	file_api_v1_api_proto_rawDescOnce.Do(func() {
		file_api_v1_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_api_proto_rawDescData)
	})
	return file_api_v1_api_proto_rawDescData
}

var file_api_v1_api_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_v1_api_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_api_v1_api_proto_goTypes = []interface{}{
	(Trigger_Job_Interval)(0),                      // 0: api.v1.Trigger.Job.Interval
	(Block_Parallel_Wait)(0),                       // 1: api.v1.Block.Parallel.Wait
	(Block_Loop_Type)(0),                           // 2: api.v1.Block.Loop.Type
	(*Api)(nil),                                    // 3: api.v1.Api
	(*Profiles)(nil),                               // 4: api.v1.Profiles
	(*Trigger)(nil),                                // 5: api.v1.Trigger
	(*Blocks)(nil),                                 // 6: api.v1.Blocks
	(*Block)(nil),                                  // 7: api.v1.Block
	(*Step)(nil),                                   // 8: api.v1.Step
	(*Profiles_Modes)(nil),                         // 9: api.v1.Profiles.Modes
	(*Profiles_Modes_Settings)(nil),                // 10: api.v1.Profiles.Modes.Settings
	(*Trigger_Application)(nil),                    // 11: api.v1.Trigger.Application
	(*Trigger_Workflow)(nil),                       // 12: api.v1.Trigger.Workflow
	(*Trigger_Job)(nil),                            // 13: api.v1.Trigger.Job
	(*Trigger_Application_Options)(nil),            // 14: api.v1.Trigger.Application.Options
	(*Trigger_Workflow_Options)(nil),               // 15: api.v1.Trigger.Workflow.Options
	(*Trigger_Workflow_Parameters)(nil),            // 16: api.v1.Trigger.Workflow.Parameters
	(*Trigger_Workflow_Parameters_QueryParam)(nil), // 17: api.v1.Trigger.Workflow.Parameters.QueryParam
	nil,                                      // 18: api.v1.Trigger.Workflow.Parameters.QueryEntry
	nil,                                      // 19: api.v1.Trigger.Workflow.Parameters.BodyEntry
	(*Trigger_Job_Options)(nil),              // 20: api.v1.Trigger.Job.Options
	(*Trigger_Job_Days)(nil),                 // 21: api.v1.Trigger.Job.Days
	(*Block_Parallel)(nil),                   // 22: api.v1.Block.Parallel
	(*Block_Conditional)(nil),                // 23: api.v1.Block.Conditional
	(*Block_Loop)(nil),                       // 24: api.v1.Block.Loop
	(*Block_TryCatch)(nil),                   // 25: api.v1.Block.TryCatch
	(*Block_Break)(nil),                      // 26: api.v1.Block.Break
	(*Block_Return)(nil),                     // 27: api.v1.Block.Return
	(*Block_Throw)(nil),                      // 28: api.v1.Block.Throw
	(*Block_Wait)(nil),                       // 29: api.v1.Block.Wait
	(*Block_Stream)(nil),                     // 30: api.v1.Block.Stream
	(*Block_Send)(nil),                       // 31: api.v1.Block.Send
	(*Block_Parallel_Static)(nil),            // 32: api.v1.Block.Parallel.Static
	(*Block_Parallel_Dynamic)(nil),           // 33: api.v1.Block.Parallel.Dynamic
	nil,                                      // 34: api.v1.Block.Parallel.Static.PathsEntry
	(*Block_Parallel_Dynamic_Variables)(nil), // 35: api.v1.Block.Parallel.Dynamic.Variables
	(*Block_Conditional_Condition)(nil),      // 36: api.v1.Block.Conditional.Condition
	(*Block_Loop_Variables)(nil),             // 37: api.v1.Block.Loop.Variables
	(*Block_TryCatch_Variables)(nil),         // 38: api.v1.Block.TryCatch.Variables
	(*Block_Stream_Variables)(nil),           // 39: api.v1.Block.Stream.Variables
	(*Block_Stream_Options)(nil),             // 40: api.v1.Block.Stream.Options
	(*Block_Stream_Trigger)(nil),             // 41: api.v1.Block.Stream.Trigger
	(*v1.Metadata)(nil),                      // 42: common.v1.Metadata
	(*v11.Signature)(nil),                    // 43: utils.v1.Signature
	(*Variables)(nil),                        // 44: api.v1.Variables
	(*v12.Plugin)(nil),                       // 45: plugins.python.v1.Plugin
	(*v13.Plugin)(nil),                       // 46: plugins.bigquery.v1.Plugin
	(*v14.Plugin)(nil),                       // 47: plugins.dynamodb.v1.Plugin
	(*v15.Plugin)(nil),                       // 48: plugins.email.v1.Plugin
	(*v16.Plugin)(nil),                       // 49: plugins.graphql.v1.Plugin
	(*v17.Plugin)(nil),                       // 50: plugins.gsheets.v1.Plugin
	(*v18.Plugin)(nil),                       // 51: plugins.mariadb.v1.Plugin
	(*v19.Plugin)(nil),                       // 52: plugins.mssql.v1.Plugin
	(*v110.Plugin)(nil),                      // 53: plugins.mysql.v1.Plugin
	(*v111.Plugin)(nil),                      // 54: plugins.postgresql.v1.Plugin
	(*v112.Plugin)(nil),                      // 55: plugins.redshift.v1.Plugin
	(*v113.Plugin)(nil),                      // 56: plugins.restapi.v1.Plugin
	(*v114.Plugin)(nil),                      // 57: plugins.restapiintegration.v1.Plugin
	(*v115.Plugin)(nil),                      // 58: plugins.rockset.v1.Plugin
	(*v116.Plugin)(nil),                      // 59: plugins.s3.v1.Plugin
	(*v117.Plugin)(nil),                      // 60: plugins.snowflake.v1.Plugin
	(*v118.Plugin)(nil),                      // 61: plugins.workflow.v1.Plugin
	(*v119.Plugin)(nil),                      // 62: plugins.javascript.v1.Plugin
	(*v120.Plugin)(nil),                      // 63: plugins.mongodb.v1.Plugin
	(*v121.Plugin)(nil),                      // 64: plugins.gcs.v1.Plugin
	(*v122.Plugin)(nil),                      // 65: plugins.openai.v1.Plugin
	(*v123.Plugin)(nil),                      // 66: plugins.ocr.v1.Plugin
	(*v124.Plugin)(nil),                      // 67: plugins.kafka.v1.Plugin
	(*v125.Plugin)(nil),                      // 68: plugins.cockroachdb.v1.Plugin
	(*v126.Plugin)(nil),                      // 69: plugins.athena.v1.Plugin
	(*v127.Plugin)(nil),                      // 70: plugins.redis.v1.Plugin
	(*v128.Plugin)(nil),                      // 71: plugins.smtp.v1.Plugin
	(*v129.Plugin)(nil),                      // 72: plugins.salesforce.v1.Plugin
	(*v130.Plugin)(nil),                      // 73: plugins.adls.v1.Plugin
	(*v131.Plugin)(nil),                      // 74: plugins.pinecone.v1.Plugin
	(*v132.Plugin)(nil),                      // 75: plugins.cosmosdb.v1.Plugin
	(*v133.Plugin)(nil),                      // 76: plugins.oracledb.v1.Plugin
	(*v134.Plugin)(nil),                      // 77: plugins.databricks.v1.Plugin
	(*v135.Plugin)(nil),                      // 78: plugins.couchbase.v1.Plugin
	(*v136.Plugin)(nil),                      // 79: plugins.custom.v1.Plugin
	(*timestamppb.Timestamp)(nil),            // 80: google.protobuf.Timestamp
	(*structpb.Value)(nil),                   // 81: google.protobuf.Value
}
var file_api_v1_api_proto_depIdxs = []int32{
	42,  // 0: api.v1.Api.metadata:type_name -> common.v1.Metadata
	7,   // 1: api.v1.Api.blocks:type_name -> api.v1.Block
	5,   // 2: api.v1.Api.trigger:type_name -> api.v1.Trigger
	43,  // 3: api.v1.Api.signature:type_name -> utils.v1.Signature
	9,   // 4: api.v1.Profiles.modes:type_name -> api.v1.Profiles.Modes
	11,  // 5: api.v1.Trigger.application:type_name -> api.v1.Trigger.Application
	12,  // 6: api.v1.Trigger.workflow:type_name -> api.v1.Trigger.Workflow
	13,  // 7: api.v1.Trigger.job:type_name -> api.v1.Trigger.Job
	7,   // 8: api.v1.Blocks.blocks:type_name -> api.v1.Block
	26,  // 9: api.v1.Block.break:type_name -> api.v1.Block.Break
	27,  // 10: api.v1.Block.return:type_name -> api.v1.Block.Return
	29,  // 11: api.v1.Block.wait:type_name -> api.v1.Block.Wait
	22,  // 12: api.v1.Block.parallel:type_name -> api.v1.Block.Parallel
	23,  // 13: api.v1.Block.conditional:type_name -> api.v1.Block.Conditional
	24,  // 14: api.v1.Block.loop:type_name -> api.v1.Block.Loop
	25,  // 15: api.v1.Block.try_catch:type_name -> api.v1.Block.TryCatch
	8,   // 16: api.v1.Block.step:type_name -> api.v1.Step
	44,  // 17: api.v1.Block.variables:type_name -> api.v1.Variables
	28,  // 18: api.v1.Block.throw:type_name -> api.v1.Block.Throw
	30,  // 19: api.v1.Block.stream:type_name -> api.v1.Block.Stream
	31,  // 20: api.v1.Block.send:type_name -> api.v1.Block.Send
	45,  // 21: api.v1.Step.python:type_name -> plugins.python.v1.Plugin
	46,  // 22: api.v1.Step.bigquery:type_name -> plugins.bigquery.v1.Plugin
	47,  // 23: api.v1.Step.dynamodb:type_name -> plugins.dynamodb.v1.Plugin
	48,  // 24: api.v1.Step.email:type_name -> plugins.email.v1.Plugin
	49,  // 25: api.v1.Step.graphql:type_name -> plugins.graphql.v1.Plugin
	49,  // 26: api.v1.Step.graphqlintegration:type_name -> plugins.graphql.v1.Plugin
	50,  // 27: api.v1.Step.gsheets:type_name -> plugins.gsheets.v1.Plugin
	51,  // 28: api.v1.Step.mariadb:type_name -> plugins.mariadb.v1.Plugin
	52,  // 29: api.v1.Step.mssql:type_name -> plugins.mssql.v1.Plugin
	53,  // 30: api.v1.Step.mysql:type_name -> plugins.mysql.v1.Plugin
	54,  // 31: api.v1.Step.postgres:type_name -> plugins.postgresql.v1.Plugin
	55,  // 32: api.v1.Step.redshift:type_name -> plugins.redshift.v1.Plugin
	56,  // 33: api.v1.Step.restapi:type_name -> plugins.restapi.v1.Plugin
	57,  // 34: api.v1.Step.restapiintegration:type_name -> plugins.restapiintegration.v1.Plugin
	58,  // 35: api.v1.Step.rockset:type_name -> plugins.rockset.v1.Plugin
	59,  // 36: api.v1.Step.s3:type_name -> plugins.s3.v1.Plugin
	60,  // 37: api.v1.Step.snowflake:type_name -> plugins.snowflake.v1.Plugin
	61,  // 38: api.v1.Step.workflow:type_name -> plugins.workflow.v1.Plugin
	62,  // 39: api.v1.Step.javascript:type_name -> plugins.javascript.v1.Plugin
	63,  // 40: api.v1.Step.mongodb:type_name -> plugins.mongodb.v1.Plugin
	64,  // 41: api.v1.Step.gcs:type_name -> plugins.gcs.v1.Plugin
	65,  // 42: api.v1.Step.openai:type_name -> plugins.openai.v1.Plugin
	66,  // 43: api.v1.Step.ocr:type_name -> plugins.ocr.v1.Plugin
	67,  // 44: api.v1.Step.kafka:type_name -> plugins.kafka.v1.Plugin
	67,  // 45: api.v1.Step.confluent:type_name -> plugins.kafka.v1.Plugin
	67,  // 46: api.v1.Step.msk:type_name -> plugins.kafka.v1.Plugin
	67,  // 47: api.v1.Step.redpanda:type_name -> plugins.kafka.v1.Plugin
	67,  // 48: api.v1.Step.aivenkafka:type_name -> plugins.kafka.v1.Plugin
	68,  // 49: api.v1.Step.cockroachdb:type_name -> plugins.cockroachdb.v1.Plugin
	57,  // 50: api.v1.Step.airtable:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 51: api.v1.Step.notion:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 52: api.v1.Step.pagerduty:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 53: api.v1.Step.sendgrid:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 54: api.v1.Step.slack:type_name -> plugins.restapiintegration.v1.Plugin
	69,  // 55: api.v1.Step.athena:type_name -> plugins.athena.v1.Plugin
	70,  // 56: api.v1.Step.redis:type_name -> plugins.redis.v1.Plugin
	57,  // 57: api.v1.Step.asana:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 58: api.v1.Step.github:type_name -> plugins.restapiintegration.v1.Plugin
	71,  // 59: api.v1.Step.smtp:type_name -> plugins.smtp.v1.Plugin
	72,  // 60: api.v1.Step.salesforce:type_name -> plugins.salesforce.v1.Plugin
	57,  // 61: api.v1.Step.bitbucket:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 62: api.v1.Step.circleci:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 63: api.v1.Step.front:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 64: api.v1.Step.intercom:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 65: api.v1.Step.segment:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 66: api.v1.Step.launchdarkly:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 67: api.v1.Step.dropbox:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 68: api.v1.Step.twilio:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 69: api.v1.Step.googledrive:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 70: api.v1.Step.googleanalytics:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 71: api.v1.Step.box:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 72: api.v1.Step.hubspot:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 73: api.v1.Step.stripe:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 74: api.v1.Step.zoom:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 75: api.v1.Step.jira:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 76: api.v1.Step.zendesk:type_name -> plugins.restapiintegration.v1.Plugin
	73,  // 77: api.v1.Step.adls:type_name -> plugins.adls.v1.Plugin
	74,  // 78: api.v1.Step.pinecone:type_name -> plugins.pinecone.v1.Plugin
	75,  // 79: api.v1.Step.cosmosdb:type_name -> plugins.cosmosdb.v1.Plugin
	57,  // 80: api.v1.Step.datadog:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 81: api.v1.Step.xero:type_name -> plugins.restapiintegration.v1.Plugin
	76,  // 82: api.v1.Step.oracledb:type_name -> plugins.oracledb.v1.Plugin
	57,  // 83: api.v1.Step.elasticsearch:type_name -> plugins.restapiintegration.v1.Plugin
	77,  // 84: api.v1.Step.databricks:type_name -> plugins.databricks.v1.Plugin
	78,  // 85: api.v1.Step.couchbase:type_name -> plugins.couchbase.v1.Plugin
	79,  // 86: api.v1.Step.custom:type_name -> plugins.custom.v1.Plugin
	57,  // 87: api.v1.Step.anthropic:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 88: api.v1.Step.cohere:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 89: api.v1.Step.fireworks:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 90: api.v1.Step.mistral:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 91: api.v1.Step.groq:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 92: api.v1.Step.perplexity:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 93: api.v1.Step.stabilityai:type_name -> plugins.restapiintegration.v1.Plugin
	57,  // 94: api.v1.Step.gemini:type_name -> plugins.restapiintegration.v1.Plugin
	10,  // 95: api.v1.Profiles.Modes.editor:type_name -> api.v1.Profiles.Modes.Settings
	10,  // 96: api.v1.Profiles.Modes.preview:type_name -> api.v1.Profiles.Modes.Settings
	10,  // 97: api.v1.Profiles.Modes.deployed:type_name -> api.v1.Profiles.Modes.Settings
	14,  // 98: api.v1.Trigger.Application.options:type_name -> api.v1.Trigger.Application.Options
	15,  // 99: api.v1.Trigger.Workflow.options:type_name -> api.v1.Trigger.Workflow.Options
	16,  // 100: api.v1.Trigger.Workflow.parameters:type_name -> api.v1.Trigger.Workflow.Parameters
	20,  // 101: api.v1.Trigger.Job.options:type_name -> api.v1.Trigger.Job.Options
	0,   // 102: api.v1.Trigger.Job.interval:type_name -> api.v1.Trigger.Job.Interval
	21,  // 103: api.v1.Trigger.Job.days:type_name -> api.v1.Trigger.Job.Days
	80,  // 104: api.v1.Trigger.Job.time:type_name -> google.protobuf.Timestamp
	4,   // 105: api.v1.Trigger.Workflow.Options.profiles:type_name -> api.v1.Profiles
	18,  // 106: api.v1.Trigger.Workflow.Parameters.query:type_name -> api.v1.Trigger.Workflow.Parameters.QueryEntry
	19,  // 107: api.v1.Trigger.Workflow.Parameters.body:type_name -> api.v1.Trigger.Workflow.Parameters.BodyEntry
	17,  // 108: api.v1.Trigger.Workflow.Parameters.QueryEntry.value:type_name -> api.v1.Trigger.Workflow.Parameters.QueryParam
	81,  // 109: api.v1.Trigger.Workflow.Parameters.BodyEntry.value:type_name -> google.protobuf.Value
	4,   // 110: api.v1.Trigger.Job.Options.profiles:type_name -> api.v1.Profiles
	32,  // 111: api.v1.Block.Parallel.static:type_name -> api.v1.Block.Parallel.Static
	33,  // 112: api.v1.Block.Parallel.dynamic:type_name -> api.v1.Block.Parallel.Dynamic
	1,   // 113: api.v1.Block.Parallel.wait:type_name -> api.v1.Block.Parallel.Wait
	36,  // 114: api.v1.Block.Conditional.if:type_name -> api.v1.Block.Conditional.Condition
	36,  // 115: api.v1.Block.Conditional.else_if:type_name -> api.v1.Block.Conditional.Condition
	6,   // 116: api.v1.Block.Conditional.else:type_name -> api.v1.Blocks
	2,   // 117: api.v1.Block.Loop.type:type_name -> api.v1.Block.Loop.Type
	37,  // 118: api.v1.Block.Loop.variables:type_name -> api.v1.Block.Loop.Variables
	7,   // 119: api.v1.Block.Loop.blocks:type_name -> api.v1.Block
	6,   // 120: api.v1.Block.TryCatch.try:type_name -> api.v1.Blocks
	6,   // 121: api.v1.Block.TryCatch.catch:type_name -> api.v1.Blocks
	6,   // 122: api.v1.Block.TryCatch.finally:type_name -> api.v1.Blocks
	38,  // 123: api.v1.Block.TryCatch.variables:type_name -> api.v1.Block.TryCatch.Variables
	41,  // 124: api.v1.Block.Stream.trigger:type_name -> api.v1.Block.Stream.Trigger
	6,   // 125: api.v1.Block.Stream.process:type_name -> api.v1.Blocks
	39,  // 126: api.v1.Block.Stream.variables:type_name -> api.v1.Block.Stream.Variables
	40,  // 127: api.v1.Block.Stream.options:type_name -> api.v1.Block.Stream.Options
	34,  // 128: api.v1.Block.Parallel.Static.paths:type_name -> api.v1.Block.Parallel.Static.PathsEntry
	35,  // 129: api.v1.Block.Parallel.Dynamic.variables:type_name -> api.v1.Block.Parallel.Dynamic.Variables
	7,   // 130: api.v1.Block.Parallel.Dynamic.blocks:type_name -> api.v1.Block
	6,   // 131: api.v1.Block.Parallel.Static.PathsEntry.value:type_name -> api.v1.Blocks
	7,   // 132: api.v1.Block.Conditional.Condition.blocks:type_name -> api.v1.Block
	8,   // 133: api.v1.Block.Stream.Trigger.step:type_name -> api.v1.Step
	134, // [134:134] is the sub-list for method output_type
	134, // [134:134] is the sub-list for method input_type
	134, // [134:134] is the sub-list for extension type_name
	134, // [134:134] is the sub-list for extension extendee
	0,   // [0:134] is the sub-list for field type_name
}

func init() { file_api_v1_api_proto_init() }
func file_api_v1_api_proto_init() {
	if File_api_v1_api_proto != nil {
		return
	}
	file_api_v1_blocks_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_v1_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Api); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blocks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profiles_Modes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profiles_Modes_Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger_Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger_Workflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger_Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger_Application_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger_Workflow_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger_Workflow_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger_Workflow_Parameters_QueryParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger_Job_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger_Job_Days); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Parallel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Conditional); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Loop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_TryCatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Break); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Return); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Throw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Wait); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Stream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Send); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Parallel_Static); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Parallel_Dynamic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Parallel_Dynamic_Variables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Conditional_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Loop_Variables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_TryCatch_Variables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Stream_Variables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Stream_Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_Stream_Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1_api_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_api_v1_api_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Trigger_Application_)(nil),
		(*Trigger_Workflow_)(nil),
		(*Trigger_Job_)(nil),
	}
	file_api_v1_api_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Block_Break_)(nil),
		(*Block_Return_)(nil),
		(*Block_Wait_)(nil),
		(*Block_Parallel_)(nil),
		(*Block_Conditional_)(nil),
		(*Block_Loop_)(nil),
		(*Block_TryCatch_)(nil),
		(*Block_Step)(nil),
		(*Block_Variables)(nil),
		(*Block_Throw_)(nil),
		(*Block_Stream_)(nil),
		(*Block_Send_)(nil),
	}
	file_api_v1_api_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Step_Python)(nil),
		(*Step_Bigquery)(nil),
		(*Step_Dynamodb)(nil),
		(*Step_Email)(nil),
		(*Step_Graphql)(nil),
		(*Step_Graphqlintegration)(nil),
		(*Step_Gsheets)(nil),
		(*Step_Mariadb)(nil),
		(*Step_Mssql)(nil),
		(*Step_Mysql)(nil),
		(*Step_Postgres)(nil),
		(*Step_Redshift)(nil),
		(*Step_Restapi)(nil),
		(*Step_Restapiintegration)(nil),
		(*Step_Rockset)(nil),
		(*Step_S3)(nil),
		(*Step_Snowflake)(nil),
		(*Step_Workflow)(nil),
		(*Step_Javascript)(nil),
		(*Step_Mongodb)(nil),
		(*Step_Gcs)(nil),
		(*Step_Openai)(nil),
		(*Step_Ocr)(nil),
		(*Step_Kafka)(nil),
		(*Step_Confluent)(nil),
		(*Step_Msk)(nil),
		(*Step_Redpanda)(nil),
		(*Step_Aivenkafka)(nil),
		(*Step_Cockroachdb)(nil),
		(*Step_Airtable)(nil),
		(*Step_Notion)(nil),
		(*Step_Pagerduty)(nil),
		(*Step_Sendgrid)(nil),
		(*Step_Slack)(nil),
		(*Step_Athena)(nil),
		(*Step_Redis)(nil),
		(*Step_Asana)(nil),
		(*Step_Github)(nil),
		(*Step_Smtp)(nil),
		(*Step_Salesforce)(nil),
		(*Step_Bitbucket)(nil),
		(*Step_Circleci)(nil),
		(*Step_Front)(nil),
		(*Step_Intercom)(nil),
		(*Step_Segment)(nil),
		(*Step_Launchdarkly)(nil),
		(*Step_Dropbox)(nil),
		(*Step_Twilio)(nil),
		(*Step_Googledrive)(nil),
		(*Step_Googleanalytics)(nil),
		(*Step_Box)(nil),
		(*Step_Hubspot)(nil),
		(*Step_Stripe)(nil),
		(*Step_Zoom)(nil),
		(*Step_Jira)(nil),
		(*Step_Zendesk)(nil),
		(*Step_Adls)(nil),
		(*Step_Pinecone)(nil),
		(*Step_Cosmosdb)(nil),
		(*Step_Datadog)(nil),
		(*Step_Xero)(nil),
		(*Step_Oracledb)(nil),
		(*Step_Elasticsearch)(nil),
		(*Step_Databricks)(nil),
		(*Step_Couchbase)(nil),
		(*Step_Custom)(nil),
		(*Step_Anthropic)(nil),
		(*Step_Cohere)(nil),
		(*Step_Fireworks)(nil),
		(*Step_Mistral)(nil),
		(*Step_Groq)(nil),
		(*Step_Perplexity)(nil),
		(*Step_Stabilityai)(nil),
		(*Step_Gemini)(nil),
	}
	file_api_v1_api_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_api_v1_api_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_api_v1_api_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_api_v1_api_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_api_v1_api_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*Block_Parallel_Static_)(nil),
		(*Block_Parallel_Dynamic_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_api_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v1_api_proto_goTypes,
		DependencyIndexes: file_api_v1_api_proto_depIdxs,
		EnumInfos:         file_api_v1_api_proto_enumTypes,
		MessageInfos:      file_api_v1_api_proto_msgTypes,
	}.Build()
	File_api_v1_api_proto = out.File
	file_api_v1_api_proto_rawDesc = nil
	file_api_v1_api_proto_goTypes = nil
	file_api_v1_api_proto_depIdxs = nil
}
