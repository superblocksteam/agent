// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/integration_auth_service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _integration_auth_service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CheckAuthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckAuthRequestMultiError, or nil if none found.
func (m *CheckAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetIntegrationId()); err != nil {
		err = CheckAuthRequestValidationError{
			field:  "IntegrationId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckAuthRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckAuthRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckAuthRequestValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CheckAuthRequestMultiError(errors)
	}

	return nil
}

func (m *CheckAuthRequest) _validateUuid(uuid string) error {
	if matched := _integration_auth_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CheckAuthRequestMultiError is an error wrapping multiple validation errors
// returned by CheckAuthRequest.ValidateAll() if the designated constraints
// aren't met.
type CheckAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAuthRequestMultiError) AllErrors() []error { return m }

// CheckAuthRequestValidationError is the validation error returned by
// CheckAuthRequest.Validate if the designated constraints aren't met.
type CheckAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAuthRequestValidationError) ErrorName() string { return "CheckAuthRequestValidationError" }

// Error satisfies the builtin error interface
func (e CheckAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAuthRequestValidationError{}

// Validate checks the field values on CheckAuthResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckAuthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckAuthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckAuthResponseMultiError, or nil if none found.
func (m *CheckAuthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAuthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Authenticated

	if len(errors) > 0 {
		return CheckAuthResponseMultiError(errors)
	}

	return nil
}

// CheckAuthResponseMultiError is an error wrapping multiple validation errors
// returned by CheckAuthResponse.ValidateAll() if the designated constraints
// aren't met.
type CheckAuthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAuthResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAuthResponseMultiError) AllErrors() []error { return m }

// CheckAuthResponseValidationError is the validation error returned by
// CheckAuthResponse.Validate if the designated constraints aren't met.
type CheckAuthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAuthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAuthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAuthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAuthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAuthResponseValidationError) ErrorName() string {
	return "CheckAuthResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckAuthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAuthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAuthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAuthResponseValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetIntegrationId()); err != nil {
		err = LoginRequestValidationError{
			field:  "IntegrationId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginRequestValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Token != nil {
		// no validation rules for Token
	}

	if m.RefreshToken != nil {
		// no validation rules for RefreshToken
	}

	if m.IdToken != nil {
		// no validation rules for IdToken
	}

	if m.ExpiryTimestamp != nil {
		// no validation rules for ExpiryTimestamp
	}

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

func (m *LoginRequest) _validateUuid(uuid string) error {
	if matched := _integration_auth_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on ExchangeOauthCodeForTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ExchangeOauthCodeForTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeOauthCodeForTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExchangeOauthCodeForTokenRequestMultiError, or nil if none found.
func (m *ExchangeOauthCodeForTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeOauthCodeForTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetIntegrationId()); err != nil {
		err = ExchangeOauthCodeForTokenRequestValidationError{
			field:  "IntegrationId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExchangeOauthCodeForTokenRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExchangeOauthCodeForTokenRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExchangeOauthCodeForTokenRequestValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AccessCode

	// no validation rules for AuthType

	if all {
		switch v := interface{}(m.GetAuthConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExchangeOauthCodeForTokenRequestValidationError{
					field:  "AuthConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExchangeOauthCodeForTokenRequestValidationError{
					field:  "AuthConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExchangeOauthCodeForTokenRequestValidationError{
				field:  "AuthConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if err := m._validateUuid(m.GetConfigurationId()); err != nil {
		err = ExchangeOauthCodeForTokenRequestValidationError{
			field:  "ConfigurationId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExchangeOauthCodeForTokenRequestMultiError(errors)
	}

	return nil
}

func (m *ExchangeOauthCodeForTokenRequest) _validateUuid(uuid string) error {
	if matched := _integration_auth_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ExchangeOauthCodeForTokenRequestMultiError is an error wrapping multiple
// validation errors returned by
// ExchangeOauthCodeForTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type ExchangeOauthCodeForTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeOauthCodeForTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeOauthCodeForTokenRequestMultiError) AllErrors() []error { return m }

// ExchangeOauthCodeForTokenRequestValidationError is the validation error
// returned by ExchangeOauthCodeForTokenRequest.Validate if the designated
// constraints aren't met.
type ExchangeOauthCodeForTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeOauthCodeForTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeOauthCodeForTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeOauthCodeForTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeOauthCodeForTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeOauthCodeForTokenRequestValidationError) ErrorName() string {
	return "ExchangeOauthCodeForTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeOauthCodeForTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeOauthCodeForTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeOauthCodeForTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeOauthCodeForTokenRequestValidationError{}

// Validate checks the field values on RequestOauthPasswordTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RequestOauthPasswordTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestOauthPasswordTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RequestOauthPasswordTokenRequestMultiError, or nil if none found.
func (m *RequestOauthPasswordTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestOauthPasswordTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetIntegrationId()); err != nil {
		err = RequestOauthPasswordTokenRequestValidationError{
			field:  "IntegrationId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequestOauthPasswordTokenRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequestOauthPasswordTokenRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestOauthPasswordTokenRequestValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return RequestOauthPasswordTokenRequestMultiError(errors)
	}

	return nil
}

func (m *RequestOauthPasswordTokenRequest) _validateUuid(uuid string) error {
	if matched := _integration_auth_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RequestOauthPasswordTokenRequestMultiError is an error wrapping multiple
// validation errors returned by
// RequestOauthPasswordTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type RequestOauthPasswordTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestOauthPasswordTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestOauthPasswordTokenRequestMultiError) AllErrors() []error { return m }

// RequestOauthPasswordTokenRequestValidationError is the validation error
// returned by RequestOauthPasswordTokenRequest.Validate if the designated
// constraints aren't met.
type RequestOauthPasswordTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestOauthPasswordTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestOauthPasswordTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestOauthPasswordTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestOauthPasswordTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestOauthPasswordTokenRequestValidationError) ErrorName() string {
	return "RequestOauthPasswordTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestOauthPasswordTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestOauthPasswordTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestOauthPasswordTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestOauthPasswordTokenRequestValidationError{}

// Validate checks the field values on RequestOauthPasswordTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RequestOauthPasswordTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestOauthPasswordTokenResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RequestOauthPasswordTokenResponseMultiError, or nil if none found.
func (m *RequestOauthPasswordTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestOauthPasswordTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	// no validation rules for ExpiryTimestamp

	if len(errors) > 0 {
		return RequestOauthPasswordTokenResponseMultiError(errors)
	}

	return nil
}

// RequestOauthPasswordTokenResponseMultiError is an error wrapping multiple
// validation errors returned by
// RequestOauthPasswordTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type RequestOauthPasswordTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestOauthPasswordTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestOauthPasswordTokenResponseMultiError) AllErrors() []error { return m }

// RequestOauthPasswordTokenResponseValidationError is the validation error
// returned by RequestOauthPasswordTokenResponse.Validate if the designated
// constraints aren't met.
type RequestOauthPasswordTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestOauthPasswordTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestOauthPasswordTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestOauthPasswordTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestOauthPasswordTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestOauthPasswordTokenResponseValidationError) ErrorName() string {
	return "RequestOauthPasswordTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestOauthPasswordTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestOauthPasswordTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestOauthPasswordTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestOauthPasswordTokenResponseValidationError{}
