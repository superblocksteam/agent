// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/event.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Resolved with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resolved) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resolved with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResolvedMultiError, or nil
// if none found.
func (m *Resolved) ValidateAll() error {
	return m.validate(true)
}

func (m *Resolved) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResolvedValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResolvedValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResolvedValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetBindings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResolvedValidationError{
						field:  fmt.Sprintf("Bindings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResolvedValidationError{
						field:  fmt.Sprintf("Bindings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResolvedValidationError{
					field:  fmt.Sprintf("Bindings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResolvedMultiError(errors)
	}

	return nil
}

// ResolvedMultiError is an error wrapping multiple validation errors returned
// by Resolved.ValidateAll() if the designated constraints aren't met.
type ResolvedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResolvedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResolvedMultiError) AllErrors() []error { return m }

// ResolvedValidationError is the validation error returned by
// Resolved.Validate if the designated constraints aren't met.
type ResolvedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolvedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResolvedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResolvedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResolvedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResolvedValidationError) ErrorName() string { return "ResolvedValidationError" }

// Error satisfies the builtin error interface
func (e ResolvedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolved.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolvedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolvedValidationError{}

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventMultiError, or nil if none found.
func (m *Event) ValidateAll() error {
	return m.validate(true)
}

func (m *Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Event.(type) {
	case *Event_Start_:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStart()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "Start",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "Start",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_End_:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEnd()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "End",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "End",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnd()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_Data_:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_Request_:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "Request",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "Request",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_Response_:
		if v == nil {
			err := EventValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetResponse()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "Response",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "Response",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if m.Parent != nil {
		// no validation rules for Parent
	}

	if m.ExecutionIndex != nil {
		// no validation rules for ExecutionIndex
	}

	if len(errors) > 0 {
		return EventMultiError(errors)
	}

	return nil
}

// EventMultiError is an error wrapping multiple validation errors returned by
// Event.ValidateAll() if the designated constraints aren't met.
type EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMultiError) AllErrors() []error { return m }

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on Performance with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Performance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Performance with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PerformanceMultiError, or
// nil if none found.
func (m *Performance) ValidateAll() error {
	return m.validate(true)
}

func (m *Performance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	// no validation rules for Finish

	// no validation rules for Total

	// no validation rules for Execution

	// no validation rules for Overhead

	// no validation rules for Custom

	if len(errors) > 0 {
		return PerformanceMultiError(errors)
	}

	return nil
}

// PerformanceMultiError is an error wrapping multiple validation errors
// returned by Performance.ValidateAll() if the designated constraints aren't met.
type PerformanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PerformanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PerformanceMultiError) AllErrors() []error { return m }

// PerformanceValidationError is the validation error returned by
// Performance.Validate if the designated constraints aren't met.
type PerformanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PerformanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PerformanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PerformanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PerformanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PerformanceValidationError) ErrorName() string { return "PerformanceValidationError" }

// Error satisfies the builtin error interface
func (e PerformanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerformance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PerformanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PerformanceValidationError{}

// Validate checks the field values on Output with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Output) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Output with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OutputMultiError, or nil if none found.
func (m *Output) ValidateAll() error {
	return m.validate(true)
}

func (m *Output) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OutputValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OutputValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OutputValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Request

	if all {
		switch v := interface{}(m.GetRequestV2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OutputValidationError{
					field:  "RequestV2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OutputValidationError{
					field:  "RequestV2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestV2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OutputValidationError{
				field:  "RequestV2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OutputMultiError(errors)
	}

	return nil
}

// OutputMultiError is an error wrapping multiple validation errors returned by
// Output.ValidateAll() if the designated constraints aren't met.
type OutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OutputMultiError) AllErrors() []error { return m }

// OutputValidationError is the validation error returned by Output.Validate if
// the designated constraints aren't met.
type OutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OutputValidationError) ErrorName() string { return "OutputValidationError" }

// Error satisfies the builtin error interface
func (e OutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OutputValidationError{}

// Validate checks the field values on OutputOld with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OutputOld) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OutputOld with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OutputOldMultiError, or nil
// if none found.
func (m *OutputOld) ValidateAll() error {
	return m.validate(true)
}

func (m *OutputOld) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOutput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OutputOldValidationError{
					field:  "Output",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OutputOldValidationError{
					field:  "Output",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OutputOldValidationError{
				field:  "Output",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Request

	if all {
		switch v := interface{}(m.GetPlaceHoldersInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OutputOldValidationError{
					field:  "PlaceHoldersInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OutputOldValidationError{
					field:  "PlaceHoldersInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlaceHoldersInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OutputOldValidationError{
				field:  "PlaceHoldersInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OutputOldMultiError(errors)
	}

	return nil
}

// OutputOldMultiError is an error wrapping multiple validation errors returned
// by OutputOld.ValidateAll() if the designated constraints aren't met.
type OutputOldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OutputOldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OutputOldMultiError) AllErrors() []error { return m }

// OutputOldValidationError is the validation error returned by
// OutputOld.Validate if the designated constraints aren't met.
type OutputOldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OutputOldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OutputOldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OutputOldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OutputOldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OutputOldValidationError) ErrorName() string { return "OutputOldValidationError" }

// Error satisfies the builtin error interface
func (e OutputOldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOutputOld.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OutputOldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OutputOldValidationError{}

// Validate checks the field values on Event_Data with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event_Data with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Event_DataMultiError, or
// nil if none found.
func (m *Event_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *Event_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Event_DataValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Event_DataValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Event_DataValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Event_DataMultiError(errors)
	}

	return nil
}

// Event_DataMultiError is an error wrapping multiple validation errors
// returned by Event_Data.ValidateAll() if the designated constraints aren't met.
type Event_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Event_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Event_DataMultiError) AllErrors() []error { return m }

// Event_DataValidationError is the validation error returned by
// Event_Data.Validate if the designated constraints aren't met.
type Event_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_DataValidationError) ErrorName() string { return "Event_DataValidationError" }

// Error satisfies the builtin error interface
func (e Event_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_DataValidationError{}

// Validate checks the field values on Event_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Event_RequestMultiError, or
// nil if none found.
func (m *Event_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Event_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Event_RequestMultiError(errors)
	}

	return nil
}

// Event_RequestMultiError is an error wrapping multiple validation errors
// returned by Event_Request.ValidateAll() if the designated constraints
// aren't met.
type Event_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Event_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Event_RequestMultiError) AllErrors() []error { return m }

// Event_RequestValidationError is the validation error returned by
// Event_Request.Validate if the designated constraints aren't met.
type Event_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_RequestValidationError) ErrorName() string { return "Event_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Event_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_RequestValidationError{}

// Validate checks the field values on Event_Response with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event_Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event_Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Event_ResponseMultiError,
// or nil if none found.
func (m *Event_Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Event_Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Last

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Event_ResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Event_ResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Event_ResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Event_ResponseMultiError(errors)
	}

	return nil
}

// Event_ResponseMultiError is an error wrapping multiple validation errors
// returned by Event_Response.ValidateAll() if the designated constraints
// aren't met.
type Event_ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Event_ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Event_ResponseMultiError) AllErrors() []error { return m }

// Event_ResponseValidationError is the validation error returned by
// Event_Response.Validate if the designated constraints aren't met.
type Event_ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_ResponseValidationError) ErrorName() string { return "Event_ResponseValidationError" }

// Error satisfies the builtin error interface
func (e Event_ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_ResponseValidationError{}

// Validate checks the field values on Event_Start with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event_Start) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event_Start with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Event_StartMultiError, or
// nil if none found.
func (m *Event_Start) ValidateAll() error {
	return m.validate(true)
}

func (m *Event_Start) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Event_StartMultiError(errors)
	}

	return nil
}

// Event_StartMultiError is an error wrapping multiple validation errors
// returned by Event_Start.ValidateAll() if the designated constraints aren't met.
type Event_StartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Event_StartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Event_StartMultiError) AllErrors() []error { return m }

// Event_StartValidationError is the validation error returned by
// Event_Start.Validate if the designated constraints aren't met.
type Event_StartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_StartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_StartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_StartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_StartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_StartValidationError) ErrorName() string { return "Event_StartValidationError" }

// Error satisfies the builtin error interface
func (e Event_StartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_Start.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_StartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_StartValidationError{}

// Validate checks the field values on Event_End with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event_End) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event_End with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Event_EndMultiError, or nil
// if none found.
func (m *Event_End) ValidateAll() error {
	return m.validate(true)
}

func (m *Event_End) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPerformance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Event_EndValidationError{
					field:  "Performance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Event_EndValidationError{
					field:  "Performance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPerformance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Event_EndValidationError{
				field:  "Performance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOutput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Event_EndValidationError{
					field:  "Output",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Event_EndValidationError{
					field:  "Output",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Event_EndValidationError{
				field:  "Output",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Event_EndValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Event_EndValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Event_EndValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _Event_End_Status_NotInLookup[m.GetStatus()]; ok {
		err := Event_EndValidationError{
			field:  "Status",
			reason: "value must not be in list [BLOCK_STATUS_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetResolved()))
		i := 0
		for key := range m.GetResolved() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetResolved()[key]
			_ = val

			// no validation rules for Resolved[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, Event_EndValidationError{
							field:  fmt.Sprintf("Resolved[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, Event_EndValidationError{
							field:  fmt.Sprintf("Resolved[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return Event_EndValidationError{
						field:  fmt.Sprintf("Resolved[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return Event_EndMultiError(errors)
	}

	return nil
}

// Event_EndMultiError is an error wrapping multiple validation errors returned
// by Event_End.ValidateAll() if the designated constraints aren't met.
type Event_EndMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Event_EndMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Event_EndMultiError) AllErrors() []error { return m }

// Event_EndValidationError is the validation error returned by
// Event_End.Validate if the designated constraints aren't met.
type Event_EndValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Event_EndValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Event_EndValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Event_EndValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Event_EndValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Event_EndValidationError) ErrorName() string { return "Event_EndValidationError" }

// Error satisfies the builtin error interface
func (e Event_EndValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent_End.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Event_EndValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Event_EndValidationError{}

var _Event_End_Status_NotInLookup = map[BlockStatus]struct{}{
	0: {},
}

// Validate checks the field values on Output_Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Output_Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Output_Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Output_RequestMultiError,
// or nil if none found.
func (m *Output_Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Output_Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Summary

	if m.Metadata != nil {

		if all {
			switch v := interface{}(m.GetMetadata()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Output_RequestValidationError{
						field:  "Metadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Output_RequestValidationError{
						field:  "Metadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Output_RequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Output_RequestMultiError(errors)
	}

	return nil
}

// Output_RequestMultiError is an error wrapping multiple validation errors
// returned by Output_Request.ValidateAll() if the designated constraints
// aren't met.
type Output_RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Output_RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Output_RequestMultiError) AllErrors() []error { return m }

// Output_RequestValidationError is the validation error returned by
// Output_Request.Validate if the designated constraints aren't met.
type Output_RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Output_RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Output_RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Output_RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Output_RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Output_RequestValidationError) ErrorName() string { return "Output_RequestValidationError" }

// Error satisfies the builtin error interface
func (e Output_RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOutput_Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Output_RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Output_RequestValidationError{}
