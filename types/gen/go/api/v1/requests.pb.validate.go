// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/requests.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PatchApi with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PatchApi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchApi with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PatchApiMultiError, or nil
// if none found.
func (m *PatchApi) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchApi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchApiValidationError{
					field:  "Api",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchApiValidationError{
					field:  "Api",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchApiValidationError{
				field:  "Api",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.GitRef.(type) {
	case *PatchApi_CommitId:
		if v == nil {
			err := PatchApiValidationError{
				field:  "GitRef",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for CommitId
	case *PatchApi_BranchName:
		if v == nil {
			err := PatchApiValidationError{
				field:  "GitRef",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for BranchName
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PatchApiMultiError(errors)
	}

	return nil
}

// PatchApiMultiError is an error wrapping multiple validation errors returned
// by PatchApi.ValidateAll() if the designated constraints aren't met.
type PatchApiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchApiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchApiMultiError) AllErrors() []error { return m }

// PatchApiValidationError is the validation error returned by
// PatchApi.Validate if the designated constraints aren't met.
type PatchApiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchApiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchApiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchApiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchApiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchApiValidationError) ErrorName() string { return "PatchApiValidationError" }

// Error satisfies the builtin error interface
func (e PatchApiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchApi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchApiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchApiValidationError{}

// Validate checks the field values on PatchApisRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PatchApisRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchApisRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchApisRequestMultiError, or nil if none found.
func (m *PatchApisRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchApisRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPatches() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PatchApisRequestValidationError{
						field:  fmt.Sprintf("Patches[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PatchApisRequestValidationError{
						field:  fmt.Sprintf("Patches[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PatchApisRequestValidationError{
					field:  fmt.Sprintf("Patches[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PatchApisRequestMultiError(errors)
	}

	return nil
}

// PatchApisRequestMultiError is an error wrapping multiple validation errors
// returned by PatchApisRequest.ValidateAll() if the designated constraints
// aren't met.
type PatchApisRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchApisRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchApisRequestMultiError) AllErrors() []error { return m }

// PatchApisRequestValidationError is the validation error returned by
// PatchApisRequest.Validate if the designated constraints aren't met.
type PatchApisRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchApisRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchApisRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchApisRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchApisRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchApisRequestValidationError) ErrorName() string { return "PatchApisRequestValidationError" }

// Error satisfies the builtin error interface
func (e PatchApisRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchApisRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchApisRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchApisRequestValidationError{}

// Validate checks the field values on PatchApisResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PatchApisResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchApisResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchApisResponseMultiError, or nil if none found.
func (m *PatchApisResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchApisResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStatuses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PatchApisResponseValidationError{
						field:  fmt.Sprintf("Statuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PatchApisResponseValidationError{
						field:  fmt.Sprintf("Statuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PatchApisResponseValidationError{
					field:  fmt.Sprintf("Statuses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]string, len(m.GetLinks()))
		i := 0
		for key := range m.GetLinks() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLinks()[key]
			_ = val

			// no validation rules for Links[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PatchApisResponseValidationError{
							field:  fmt.Sprintf("Links[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PatchApisResponseValidationError{
							field:  fmt.Sprintf("Links[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PatchApisResponseValidationError{
						field:  fmt.Sprintf("Links[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return PatchApisResponseMultiError(errors)
	}

	return nil
}

// PatchApisResponseMultiError is an error wrapping multiple validation errors
// returned by PatchApisResponse.ValidateAll() if the designated constraints
// aren't met.
type PatchApisResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchApisResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchApisResponseMultiError) AllErrors() []error { return m }

// PatchApisResponseValidationError is the validation error returned by
// PatchApisResponse.Validate if the designated constraints aren't met.
type PatchApisResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchApisResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchApisResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchApisResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchApisResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchApisResponseValidationError) ErrorName() string {
	return "PatchApisResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PatchApisResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchApisResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchApisResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchApisResponseValidationError{}

// Validate checks the field values on UpdateApplicationSignature with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateApplicationSignature) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApplicationSignature with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateApplicationSignatureMultiError, or nil if none found.
func (m *UpdateApplicationSignature) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApplicationSignature) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationId

	if all {
		switch v := interface{}(m.GetSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateApplicationSignatureValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateApplicationSignatureValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateApplicationSignatureValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateApplicationSignatureValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateApplicationSignatureValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateApplicationSignatureValidationError{
				field:  "Updated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageVersion

	switch v := m.GitRef.(type) {
	case *UpdateApplicationSignature_CommitId:
		if v == nil {
			err := UpdateApplicationSignatureValidationError{
				field:  "GitRef",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for CommitId
	case *UpdateApplicationSignature_BranchName:
		if v == nil {
			err := UpdateApplicationSignatureValidationError{
				field:  "GitRef",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for BranchName
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateApplicationSignatureMultiError(errors)
	}

	return nil
}

// UpdateApplicationSignatureMultiError is an error wrapping multiple
// validation errors returned by UpdateApplicationSignature.ValidateAll() if
// the designated constraints aren't met.
type UpdateApplicationSignatureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApplicationSignatureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApplicationSignatureMultiError) AllErrors() []error { return m }

// UpdateApplicationSignatureValidationError is the validation error returned
// by UpdateApplicationSignature.Validate if the designated constraints aren't met.
type UpdateApplicationSignatureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationSignatureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationSignatureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationSignatureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationSignatureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationSignatureValidationError) ErrorName() string {
	return "UpdateApplicationSignatureValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationSignatureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationSignature.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationSignatureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationSignatureValidationError{}

// Validate checks the field values on UpdateApplicationSignaturesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateApplicationSignaturesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApplicationSignaturesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateApplicationSignaturesRequestMultiError, or nil if none found.
func (m *UpdateApplicationSignaturesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApplicationSignaturesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUpdates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateApplicationSignaturesRequestValidationError{
						field:  fmt.Sprintf("Updates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateApplicationSignaturesRequestValidationError{
						field:  fmt.Sprintf("Updates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateApplicationSignaturesRequestValidationError{
					field:  fmt.Sprintf("Updates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateApplicationSignaturesRequestMultiError(errors)
	}

	return nil
}

// UpdateApplicationSignaturesRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateApplicationSignaturesRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateApplicationSignaturesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApplicationSignaturesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApplicationSignaturesRequestMultiError) AllErrors() []error { return m }

// UpdateApplicationSignaturesRequestValidationError is the validation error
// returned by UpdateApplicationSignaturesRequest.Validate if the designated
// constraints aren't met.
type UpdateApplicationSignaturesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationSignaturesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationSignaturesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationSignaturesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationSignaturesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationSignaturesRequestValidationError) ErrorName() string {
	return "UpdateApplicationSignaturesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationSignaturesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationSignaturesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationSignaturesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationSignaturesRequestValidationError{}

// Validate checks the field values on UpdateApplicationSignaturesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateApplicationSignaturesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApplicationSignaturesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateApplicationSignaturesResponseMultiError, or nil if none found.
func (m *UpdateApplicationSignaturesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApplicationSignaturesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStatuses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateApplicationSignaturesResponseValidationError{
						field:  fmt.Sprintf("Statuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateApplicationSignaturesResponseValidationError{
						field:  fmt.Sprintf("Statuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateApplicationSignaturesResponseValidationError{
					field:  fmt.Sprintf("Statuses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]string, len(m.GetLinks()))
		i := 0
		for key := range m.GetLinks() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLinks()[key]
			_ = val

			// no validation rules for Links[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, UpdateApplicationSignaturesResponseValidationError{
							field:  fmt.Sprintf("Links[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, UpdateApplicationSignaturesResponseValidationError{
							field:  fmt.Sprintf("Links[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return UpdateApplicationSignaturesResponseValidationError{
						field:  fmt.Sprintf("Links[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return UpdateApplicationSignaturesResponseMultiError(errors)
	}

	return nil
}

// UpdateApplicationSignaturesResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateApplicationSignaturesResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateApplicationSignaturesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApplicationSignaturesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApplicationSignaturesResponseMultiError) AllErrors() []error { return m }

// UpdateApplicationSignaturesResponseValidationError is the validation error
// returned by UpdateApplicationSignaturesResponse.Validate if the designated
// constraints aren't met.
type UpdateApplicationSignaturesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationSignaturesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationSignaturesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationSignaturesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationSignaturesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationSignaturesResponseValidationError) ErrorName() string {
	return "UpdateApplicationSignaturesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationSignaturesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationSignaturesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationSignaturesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationSignaturesResponseValidationError{}

// Validate checks the field values on GenericBatch with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenericBatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenericBatch with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GenericBatchMultiError, or
// nil if none found.
func (m *GenericBatch) ValidateAll() error {
	return m.validate(true)
}

func (m *GenericBatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenericBatchValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenericBatchValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenericBatchValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenericBatchMultiError(errors)
	}

	return nil
}

// GenericBatchMultiError is an error wrapping multiple validation errors
// returned by GenericBatch.ValidateAll() if the designated constraints aren't met.
type GenericBatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenericBatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenericBatchMultiError) AllErrors() []error { return m }

// GenericBatchValidationError is the validation error returned by
// GenericBatch.Validate if the designated constraints aren't met.
type GenericBatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenericBatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenericBatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenericBatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenericBatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenericBatchValidationError) ErrorName() string { return "GenericBatchValidationError" }

// Error satisfies the builtin error interface
func (e GenericBatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenericBatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenericBatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenericBatchValidationError{}

// Validate checks the field values on GenericBatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenericBatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenericBatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenericBatchResponseMultiError, or nil if none found.
func (m *GenericBatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenericBatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenericBatchResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenericBatchResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenericBatchResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenericBatchResponseMultiError(errors)
	}

	return nil
}

// GenericBatchResponseMultiError is an error wrapping multiple validation
// errors returned by GenericBatchResponse.ValidateAll() if the designated
// constraints aren't met.
type GenericBatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenericBatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenericBatchResponseMultiError) AllErrors() []error { return m }

// GenericBatchResponseValidationError is the validation error returned by
// GenericBatchResponse.Validate if the designated constraints aren't met.
type GenericBatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenericBatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenericBatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenericBatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenericBatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenericBatchResponseValidationError) ErrorName() string {
	return "GenericBatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenericBatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenericBatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenericBatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenericBatchResponseValidationError{}

// Validate checks the field values on PatchApisResponse_Status with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchApisResponse_Status) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchApisResponse_Status with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchApisResponse_StatusMultiError, or nil if none found.
func (m *PatchApisResponse_Status) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchApisResponse_Status) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiId

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchApisResponse_StatusValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchApisResponse_StatusValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchApisResponse_StatusValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PatchApisResponse_StatusMultiError(errors)
	}

	return nil
}

// PatchApisResponse_StatusMultiError is an error wrapping multiple validation
// errors returned by PatchApisResponse_Status.ValidateAll() if the designated
// constraints aren't met.
type PatchApisResponse_StatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchApisResponse_StatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchApisResponse_StatusMultiError) AllErrors() []error { return m }

// PatchApisResponse_StatusValidationError is the validation error returned by
// PatchApisResponse_Status.Validate if the designated constraints aren't met.
type PatchApisResponse_StatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchApisResponse_StatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchApisResponse_StatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchApisResponse_StatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchApisResponse_StatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchApisResponse_StatusValidationError) ErrorName() string {
	return "PatchApisResponse_StatusValidationError"
}

// Error satisfies the builtin error interface
func (e PatchApisResponse_StatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchApisResponse_Status.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchApisResponse_StatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchApisResponse_StatusValidationError{}

// Validate checks the field values on
// UpdateApplicationSignaturesResponse_Status with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateApplicationSignaturesResponse_Status) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateApplicationSignaturesResponse_Status with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateApplicationSignaturesResponse_StatusMultiError, or nil if none found.
func (m *UpdateApplicationSignaturesResponse_Status) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApplicationSignaturesResponse_Status) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationId

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateApplicationSignaturesResponse_StatusValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateApplicationSignaturesResponse_StatusValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateApplicationSignaturesResponse_StatusValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.GitRef.(type) {
	case *UpdateApplicationSignaturesResponse_Status_CommitId:
		if v == nil {
			err := UpdateApplicationSignaturesResponse_StatusValidationError{
				field:  "GitRef",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for CommitId
	case *UpdateApplicationSignaturesResponse_Status_BranchName:
		if v == nil {
			err := UpdateApplicationSignaturesResponse_StatusValidationError{
				field:  "GitRef",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for BranchName
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateApplicationSignaturesResponse_StatusMultiError(errors)
	}

	return nil
}

// UpdateApplicationSignaturesResponse_StatusMultiError is an error wrapping
// multiple validation errors returned by
// UpdateApplicationSignaturesResponse_Status.ValidateAll() if the designated
// constraints aren't met.
type UpdateApplicationSignaturesResponse_StatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApplicationSignaturesResponse_StatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApplicationSignaturesResponse_StatusMultiError) AllErrors() []error { return m }

// UpdateApplicationSignaturesResponse_StatusValidationError is the validation
// error returned by UpdateApplicationSignaturesResponse_Status.Validate if
// the designated constraints aren't met.
type UpdateApplicationSignaturesResponse_StatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationSignaturesResponse_StatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationSignaturesResponse_StatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationSignaturesResponse_StatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationSignaturesResponse_StatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationSignaturesResponse_StatusValidationError) ErrorName() string {
	return "UpdateApplicationSignaturesResponse_StatusValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationSignaturesResponse_StatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationSignaturesResponse_Status.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationSignaturesResponse_StatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationSignaturesResponse_StatusValidationError{}

// Validate checks the field values on GenericBatch_Items with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenericBatch_Items) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenericBatch_Items with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenericBatch_ItemsMultiError, or nil if none found.
func (m *GenericBatch_Items) ValidateAll() error {
	return m.validate(true)
}

func (m *GenericBatch_Items) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GenericBatch_ItemsValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GenericBatch_ItemsValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GenericBatch_ItemsValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GenericBatch_ItemsMultiError(errors)
	}

	return nil
}

// GenericBatch_ItemsMultiError is an error wrapping multiple validation errors
// returned by GenericBatch_Items.ValidateAll() if the designated constraints
// aren't met.
type GenericBatch_ItemsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenericBatch_ItemsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenericBatch_ItemsMultiError) AllErrors() []error { return m }

// GenericBatch_ItemsValidationError is the validation error returned by
// GenericBatch_Items.Validate if the designated constraints aren't met.
type GenericBatch_ItemsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenericBatch_ItemsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenericBatch_ItemsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenericBatch_ItemsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenericBatch_ItemsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenericBatch_ItemsValidationError) ErrorName() string {
	return "GenericBatch_ItemsValidationError"
}

// Error satisfies the builtin error interface
func (e GenericBatch_ItemsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenericBatch_Items.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenericBatch_ItemsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenericBatch_ItemsValidationError{}
