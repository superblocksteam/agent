// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/integration_auth_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IntegrationAuthService_CheckAuth_FullMethodName                 = "/api.v1.IntegrationAuthService/CheckAuth"
	IntegrationAuthService_Login_FullMethodName                     = "/api.v1.IntegrationAuthService/Login"
	IntegrationAuthService_Logout_FullMethodName                    = "/api.v1.IntegrationAuthService/Logout"
	IntegrationAuthService_ExchangeOauthCodeForToken_FullMethodName = "/api.v1.IntegrationAuthService/ExchangeOauthCodeForToken"
	IntegrationAuthService_RequestOauthPasswordToken_FullMethodName = "/api.v1.IntegrationAuthService/RequestOauthPasswordToken"
)

// IntegrationAuthServiceClient is the client API for IntegrationAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegrationAuthServiceClient interface {
	CheckAuth(ctx context.Context, in *CheckAuthRequest, opts ...grpc.CallOption) (*CheckAuthResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ExchangeOauthCodeForToken(ctx context.Context, in *ExchangeOauthCodeForTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RequestOauthPasswordToken(ctx context.Context, in *RequestOauthPasswordTokenRequest, opts ...grpc.CallOption) (*RequestOauthPasswordTokenResponse, error)
}

type integrationAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationAuthServiceClient(cc grpc.ClientConnInterface) IntegrationAuthServiceClient {
	return &integrationAuthServiceClient{cc}
}

func (c *integrationAuthServiceClient) CheckAuth(ctx context.Context, in *CheckAuthRequest, opts ...grpc.CallOption) (*CheckAuthResponse, error) {
	out := new(CheckAuthResponse)
	err := c.cc.Invoke(ctx, IntegrationAuthService_CheckAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationAuthServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, IntegrationAuthService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationAuthServiceClient) Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IntegrationAuthService_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationAuthServiceClient) ExchangeOauthCodeForToken(ctx context.Context, in *ExchangeOauthCodeForTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IntegrationAuthService_ExchangeOauthCodeForToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationAuthServiceClient) RequestOauthPasswordToken(ctx context.Context, in *RequestOauthPasswordTokenRequest, opts ...grpc.CallOption) (*RequestOauthPasswordTokenResponse, error) {
	out := new(RequestOauthPasswordTokenResponse)
	err := c.cc.Invoke(ctx, IntegrationAuthService_RequestOauthPasswordToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationAuthServiceServer is the server API for IntegrationAuthService service.
// All implementations should embed UnimplementedIntegrationAuthServiceServer
// for forward compatibility
type IntegrationAuthServiceServer interface {
	CheckAuth(context.Context, *CheckAuthRequest) (*CheckAuthResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ExchangeOauthCodeForToken(context.Context, *ExchangeOauthCodeForTokenRequest) (*emptypb.Empty, error)
	RequestOauthPasswordToken(context.Context, *RequestOauthPasswordTokenRequest) (*RequestOauthPasswordTokenResponse, error)
}

// UnimplementedIntegrationAuthServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIntegrationAuthServiceServer struct {
}

func (UnimplementedIntegrationAuthServiceServer) CheckAuth(context.Context, *CheckAuthRequest) (*CheckAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuth not implemented")
}
func (UnimplementedIntegrationAuthServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedIntegrationAuthServiceServer) Logout(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedIntegrationAuthServiceServer) ExchangeOauthCodeForToken(context.Context, *ExchangeOauthCodeForTokenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeOauthCodeForToken not implemented")
}
func (UnimplementedIntegrationAuthServiceServer) RequestOauthPasswordToken(context.Context, *RequestOauthPasswordTokenRequest) (*RequestOauthPasswordTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestOauthPasswordToken not implemented")
}

// UnsafeIntegrationAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrationAuthServiceServer will
// result in compilation errors.
type UnsafeIntegrationAuthServiceServer interface {
	mustEmbedUnimplementedIntegrationAuthServiceServer()
}

func RegisterIntegrationAuthServiceServer(s grpc.ServiceRegistrar, srv IntegrationAuthServiceServer) {
	s.RegisterService(&IntegrationAuthService_ServiceDesc, srv)
}

func _IntegrationAuthService_CheckAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationAuthServiceServer).CheckAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationAuthService_CheckAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationAuthServiceServer).CheckAuth(ctx, req.(*CheckAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationAuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationAuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationAuthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationAuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationAuthService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationAuthServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationAuthService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationAuthServiceServer).Logout(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationAuthService_ExchangeOauthCodeForToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeOauthCodeForTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationAuthServiceServer).ExchangeOauthCodeForToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationAuthService_ExchangeOauthCodeForToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationAuthServiceServer).ExchangeOauthCodeForToken(ctx, req.(*ExchangeOauthCodeForTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationAuthService_RequestOauthPasswordToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestOauthPasswordTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationAuthServiceServer).RequestOauthPasswordToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationAuthService_RequestOauthPasswordToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationAuthServiceServer).RequestOauthPasswordToken(ctx, req.(*RequestOauthPasswordTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntegrationAuthService_ServiceDesc is the grpc.ServiceDesc for IntegrationAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntegrationAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.IntegrationAuthService",
	HandlerType: (*IntegrationAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAuth",
			Handler:    _IntegrationAuthService_CheckAuth_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _IntegrationAuthService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _IntegrationAuthService_Logout_Handler,
		},
		{
			MethodName: "ExchangeOauthCodeForToken",
			Handler:    _IntegrationAuthService_ExchangeOauthCodeForToken_Handler,
		},
		{
			MethodName: "RequestOauthPasswordToken",
			Handler:    _IntegrationAuthService_RequestOauthPasswordToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/integration_auth_service.proto",
}
