// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugins/pinecone/v1/plugin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Plugin with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plugin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PluginMultiError, or nil if none found.
func (m *Plugin) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConnection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PluginValidationError{
				field:  "Connection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Action.(type) {
	case *Plugin_ListIndexes_:
		if v == nil {
			err := PluginValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetListIndexes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "ListIndexes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "ListIndexes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListIndexes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "ListIndexes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Plugin_CreateIndex_:
		if v == nil {
			err := PluginValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCreateIndex()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "CreateIndex",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "CreateIndex",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreateIndex()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "CreateIndex",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Plugin_UpsertVector_:
		if v == nil {
			err := PluginValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUpsertVector()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "UpsertVector",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "UpsertVector",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpsertVector()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "UpsertVector",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Plugin_Query_:
		if v == nil {
			err := PluginValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQuery()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Query",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Query",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.DynamicWorkflowConfiguration != nil {

		if all {
			switch v := interface{}(m.GetDynamicWorkflowConfiguration()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DynamicWorkflowConfiguration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DynamicWorkflowConfiguration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDynamicWorkflowConfiguration()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "DynamicWorkflowConfiguration",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PluginMultiError(errors)
	}

	return nil
}

// PluginMultiError is an error wrapping multiple validation errors returned by
// Plugin.ValidateAll() if the designated constraints aren't met.
type PluginMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PluginMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PluginMultiError) AllErrors() []error { return m }

// PluginValidationError is the validation error returned by Plugin.Validate if
// the designated constraints aren't met.
type PluginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginValidationError) ErrorName() string { return "PluginValidationError" }

// Error satisfies the builtin error interface
func (e PluginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginValidationError{}

// Validate checks the field values on Plugin_Connection with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Plugin_Connection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_Connection with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_ConnectionMultiError, or nil if none found.
func (m *Plugin_Connection) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_Connection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Environment

	// no validation rules for ApiKey

	if len(errors) > 0 {
		return Plugin_ConnectionMultiError(errors)
	}

	return nil
}

// Plugin_ConnectionMultiError is an error wrapping multiple validation errors
// returned by Plugin_Connection.ValidateAll() if the designated constraints
// aren't met.
type Plugin_ConnectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_ConnectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_ConnectionMultiError) AllErrors() []error { return m }

// Plugin_ConnectionValidationError is the validation error returned by
// Plugin_Connection.Validate if the designated constraints aren't met.
type Plugin_ConnectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_ConnectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_ConnectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_ConnectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_ConnectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_ConnectionValidationError) ErrorName() string {
	return "Plugin_ConnectionValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_ConnectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_Connection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_ConnectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_ConnectionValidationError{}

// Validate checks the field values on Plugin_ListIndexes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_ListIndexes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_ListIndexes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_ListIndexesMultiError, or nil if none found.
func (m *Plugin_ListIndexes) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_ListIndexes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Plugin_ListIndexesMultiError(errors)
	}

	return nil
}

// Plugin_ListIndexesMultiError is an error wrapping multiple validation errors
// returned by Plugin_ListIndexes.ValidateAll() if the designated constraints
// aren't met.
type Plugin_ListIndexesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_ListIndexesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_ListIndexesMultiError) AllErrors() []error { return m }

// Plugin_ListIndexesValidationError is the validation error returned by
// Plugin_ListIndexes.Validate if the designated constraints aren't met.
type Plugin_ListIndexesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_ListIndexesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_ListIndexesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_ListIndexesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_ListIndexesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_ListIndexesValidationError) ErrorName() string {
	return "Plugin_ListIndexesValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_ListIndexesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_ListIndexes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_ListIndexesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_ListIndexesValidationError{}

// Validate checks the field values on Plugin_CreateIndex with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_CreateIndex) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_CreateIndex with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_CreateIndexMultiError, or nil if none found.
func (m *Plugin_CreateIndex) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_CreateIndex) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return Plugin_CreateIndexMultiError(errors)
	}

	return nil
}

// Plugin_CreateIndexMultiError is an error wrapping multiple validation errors
// returned by Plugin_CreateIndex.ValidateAll() if the designated constraints
// aren't met.
type Plugin_CreateIndexMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_CreateIndexMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_CreateIndexMultiError) AllErrors() []error { return m }

// Plugin_CreateIndexValidationError is the validation error returned by
// Plugin_CreateIndex.Validate if the designated constraints aren't met.
type Plugin_CreateIndexValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_CreateIndexValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_CreateIndexValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_CreateIndexValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_CreateIndexValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_CreateIndexValidationError) ErrorName() string {
	return "Plugin_CreateIndexValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_CreateIndexValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_CreateIndex.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_CreateIndexValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_CreateIndexValidationError{}

// Validate checks the field values on Plugin_UpsertVector with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_UpsertVector) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_UpsertVector with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_UpsertVectorMultiError, or nil if none found.
func (m *Plugin_UpsertVector) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_UpsertVector) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Data.(type) {
	case *Plugin_UpsertVector_Raw:
		if v == nil {
			err := Plugin_UpsertVectorValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Raw
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return Plugin_UpsertVectorMultiError(errors)
	}

	return nil
}

// Plugin_UpsertVectorMultiError is an error wrapping multiple validation
// errors returned by Plugin_UpsertVector.ValidateAll() if the designated
// constraints aren't met.
type Plugin_UpsertVectorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_UpsertVectorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_UpsertVectorMultiError) AllErrors() []error { return m }

// Plugin_UpsertVectorValidationError is the validation error returned by
// Plugin_UpsertVector.Validate if the designated constraints aren't met.
type Plugin_UpsertVectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_UpsertVectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_UpsertVectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_UpsertVectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_UpsertVectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_UpsertVectorValidationError) ErrorName() string {
	return "Plugin_UpsertVectorValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_UpsertVectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_UpsertVector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_UpsertVectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_UpsertVectorValidationError{}

// Validate checks the field values on Plugin_Query with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plugin_Query) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_Query with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Plugin_QueryMultiError, or
// nil if none found.
func (m *Plugin_Query) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_Query) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vector

	if m.TopK != nil {
		// no validation rules for TopK
	}

	if len(errors) > 0 {
		return Plugin_QueryMultiError(errors)
	}

	return nil
}

// Plugin_QueryMultiError is an error wrapping multiple validation errors
// returned by Plugin_Query.ValidateAll() if the designated constraints aren't met.
type Plugin_QueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_QueryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_QueryMultiError) AllErrors() []error { return m }

// Plugin_QueryValidationError is the validation error returned by
// Plugin_Query.Validate if the designated constraints aren't met.
type Plugin_QueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_QueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_QueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_QueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_QueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_QueryValidationError) ErrorName() string { return "Plugin_QueryValidationError" }

// Error satisfies the builtin error interface
func (e Plugin_QueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_Query.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_QueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_QueryValidationError{}
