// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugins/common/v1/auth.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OAuthCommon with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OAuthCommon) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuthCommon with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OAuthCommonMultiError, or
// nil if none found.
func (m *OAuthCommon) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuthCommon) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	// no validation rules for TokenUrl

	// no validation rules for Audience

	// no validation rules for Scope

	if len(errors) > 0 {
		return OAuthCommonMultiError(errors)
	}

	return nil
}

// OAuthCommonMultiError is an error wrapping multiple validation errors
// returned by OAuthCommon.ValidateAll() if the designated constraints aren't met.
type OAuthCommonMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthCommonMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthCommonMultiError) AllErrors() []error { return m }

// OAuthCommonValidationError is the validation error returned by
// OAuthCommon.Validate if the designated constraints aren't met.
type OAuthCommonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthCommonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthCommonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthCommonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthCommonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthCommonValidationError) ErrorName() string { return "OAuthCommonValidationError" }

// Error satisfies the builtin error interface
func (e OAuthCommonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthCommon.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthCommonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthCommonValidationError{}

// Validate checks the field values on OAuth with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OAuth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuth with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OAuthMultiError, or nil if none found.
func (m *OAuth) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OAuthMultiError(errors)
	}

	return nil
}

// OAuthMultiError is an error wrapping multiple validation errors returned by
// OAuth.ValidateAll() if the designated constraints aren't met.
type OAuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthMultiError) AllErrors() []error { return m }

// OAuthValidationError is the validation error returned by OAuth.Validate if
// the designated constraints aren't met.
type OAuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthValidationError) ErrorName() string { return "OAuthValidationError" }

// Error satisfies the builtin error interface
func (e OAuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthValidationError{}

// Validate checks the field values on Basic with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Basic) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Basic with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BasicMultiError, or nil if none found.
func (m *Basic) ValidateAll() error {
	return m.validate(true)
}

func (m *Basic) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return BasicMultiError(errors)
	}

	return nil
}

// BasicMultiError is an error wrapping multiple validation errors returned by
// Basic.ValidateAll() if the designated constraints aren't met.
type BasicMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BasicMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BasicMultiError) AllErrors() []error { return m }

// BasicValidationError is the validation error returned by Basic.Validate if
// the designated constraints aren't met.
type BasicValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BasicValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BasicValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BasicValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BasicValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BasicValidationError) ErrorName() string { return "BasicValidationError" }

// Error satisfies the builtin error interface
func (e BasicValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBasic.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BasicValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BasicValidationError{}

// Validate checks the field values on Azure with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Azure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Azure with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AzureMultiError, or nil if none found.
func (m *Azure) ValidateAll() error {
	return m.validate(true)
}

func (m *Azure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Config.(type) {
	case *Azure_Key_:
		if v == nil {
			err := AzureValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetKey()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AzureValidationError{
						field:  "Key",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AzureValidationError{
						field:  "Key",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AzureValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Azure_ClientCredentials_:
		if v == nil {
			err := AzureValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetClientCredentials()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AzureValidationError{
						field:  "ClientCredentials",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AzureValidationError{
						field:  "ClientCredentials",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetClientCredentials()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AzureValidationError{
					field:  "ClientCredentials",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AzureMultiError(errors)
	}

	return nil
}

// AzureMultiError is an error wrapping multiple validation errors returned by
// Azure.ValidateAll() if the designated constraints aren't met.
type AzureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AzureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AzureMultiError) AllErrors() []error { return m }

// AzureValidationError is the validation error returned by Azure.Validate if
// the designated constraints aren't met.
type AzureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AzureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AzureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AzureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AzureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AzureValidationError) ErrorName() string { return "AzureValidationError" }

// Error satisfies the builtin error interface
func (e AzureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAzure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AzureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AzureValidationError{}

// Validate checks the field values on AwsAuth with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AwsAuth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AwsAuth with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AwsAuthMultiError, or nil if none found.
func (m *AwsAuth) ValidateAll() error {
	return m.validate(true)
}

func (m *AwsAuth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	switch v := m.Config.(type) {
	case *AwsAuth_Static_:
		if v == nil {
			err := AwsAuthValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStatic()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AwsAuthValidationError{
						field:  "Static",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AwsAuthValidationError{
						field:  "Static",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStatic()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AwsAuthValidationError{
					field:  "Static",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AwsAuth_AssumeRole_:
		if v == nil {
			err := AwsAuthValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAssumeRole()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AwsAuthValidationError{
						field:  "AssumeRole",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AwsAuthValidationError{
						field:  "AssumeRole",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAssumeRole()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AwsAuthValidationError{
					field:  "AssumeRole",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AwsAuthMultiError(errors)
	}

	return nil
}

// AwsAuthMultiError is an error wrapping multiple validation errors returned
// by AwsAuth.ValidateAll() if the designated constraints aren't met.
type AwsAuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AwsAuthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AwsAuthMultiError) AllErrors() []error { return m }

// AwsAuthValidationError is the validation error returned by AwsAuth.Validate
// if the designated constraints aren't met.
type AwsAuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AwsAuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AwsAuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AwsAuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AwsAuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AwsAuthValidationError) ErrorName() string { return "AwsAuthValidationError" }

// Error satisfies the builtin error interface
func (e AwsAuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAwsAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AwsAuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AwsAuthValidationError{}

// Validate checks the field values on GcpAuth with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GcpAuth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GcpAuth with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GcpAuthMultiError, or nil if none found.
func (m *GcpAuth) ValidateAll() error {
	return m.validate(true)
}

func (m *GcpAuth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Config.(type) {
	case *GcpAuth_ServiceAccount:
		if v == nil {
			err := GcpAuthValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ServiceAccount
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GcpAuthMultiError(errors)
	}

	return nil
}

// GcpAuthMultiError is an error wrapping multiple validation errors returned
// by GcpAuth.ValidateAll() if the designated constraints aren't met.
type GcpAuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GcpAuthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GcpAuthMultiError) AllErrors() []error { return m }

// GcpAuthValidationError is the validation error returned by GcpAuth.Validate
// if the designated constraints aren't met.
type GcpAuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GcpAuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GcpAuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GcpAuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GcpAuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GcpAuthValidationError) ErrorName() string { return "GcpAuthValidationError" }

// Error satisfies the builtin error interface
func (e GcpAuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGcpAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GcpAuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GcpAuthValidationError{}

// Validate checks the field values on AkeylessAuth with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AkeylessAuth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AkeylessAuth with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AkeylessAuthMultiError, or
// nil if none found.
func (m *AkeylessAuth) ValidateAll() error {
	return m.validate(true)
}

func (m *AkeylessAuth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Config.(type) {
	case *AkeylessAuth_ApiKey_:
		if v == nil {
			err := AkeylessAuthValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetApiKey()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AkeylessAuthValidationError{
						field:  "ApiKey",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AkeylessAuthValidationError{
						field:  "ApiKey",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetApiKey()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AkeylessAuthValidationError{
					field:  "ApiKey",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AkeylessAuth_Email_:
		if v == nil {
			err := AkeylessAuthValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEmail()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AkeylessAuthValidationError{
						field:  "Email",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AkeylessAuthValidationError{
						field:  "Email",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEmail()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AkeylessAuthValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AkeylessAuthMultiError(errors)
	}

	return nil
}

// AkeylessAuthMultiError is an error wrapping multiple validation errors
// returned by AkeylessAuth.ValidateAll() if the designated constraints aren't met.
type AkeylessAuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AkeylessAuthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AkeylessAuthMultiError) AllErrors() []error { return m }

// AkeylessAuthValidationError is the validation error returned by
// AkeylessAuth.Validate if the designated constraints aren't met.
type AkeylessAuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AkeylessAuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AkeylessAuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AkeylessAuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AkeylessAuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AkeylessAuthValidationError) ErrorName() string { return "AkeylessAuthValidationError" }

// Error satisfies the builtin error interface
func (e AkeylessAuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAkeylessAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AkeylessAuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AkeylessAuthValidationError{}

// Validate checks the field values on Auth with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Auth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Auth with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AuthMultiError, or nil if none found.
func (m *Auth) ValidateAll() error {
	return m.validate(true)
}

func (m *Auth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Method.(type) {
	case *Auth_PasswordGrantFlow:
		if v == nil {
			err := AuthValidationError{
				field:  "Method",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPasswordGrantFlow()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthValidationError{
						field:  "PasswordGrantFlow",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthValidationError{
						field:  "PasswordGrantFlow",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPasswordGrantFlow()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthValidationError{
					field:  "PasswordGrantFlow",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Auth_AuthorizationCodeFlow:
		if v == nil {
			err := AuthValidationError{
				field:  "Method",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAuthorizationCodeFlow()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthValidationError{
						field:  "AuthorizationCodeFlow",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthValidationError{
						field:  "AuthorizationCodeFlow",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAuthorizationCodeFlow()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthValidationError{
					field:  "AuthorizationCodeFlow",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Auth_Basic:
		if v == nil {
			err := AuthValidationError{
				field:  "Method",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBasic()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthValidationError{
						field:  "Basic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthValidationError{
						field:  "Basic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBasic()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthValidationError{
					field:  "Basic",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Auth_ClientCredentialsFlow:
		if v == nil {
			err := AuthValidationError{
				field:  "Method",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetClientCredentialsFlow()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthValidationError{
						field:  "ClientCredentialsFlow",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthValidationError{
						field:  "ClientCredentialsFlow",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetClientCredentialsFlow()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthValidationError{
					field:  "ClientCredentialsFlow",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Auth_Key:
		if v == nil {
			err := AuthValidationError{
				field:  "Method",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetKey()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthValidationError{
						field:  "Key",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthValidationError{
						field:  "Key",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AuthMultiError(errors)
	}

	return nil
}

// AuthMultiError is an error wrapping multiple validation errors returned by
// Auth.ValidateAll() if the designated constraints aren't met.
type AuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthMultiError) AllErrors() []error { return m }

// AuthValidationError is the validation error returned by Auth.Validate if the
// designated constraints aren't met.
type AuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthValidationError) ErrorName() string { return "AuthValidationError" }

// Error satisfies the builtin error interface
func (e AuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthValidationError{}

// Validate checks the field values on OAuth_PasswordGrantFlow with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OAuth_PasswordGrantFlow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuth_PasswordGrantFlow with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OAuth_PasswordGrantFlowMultiError, or nil if none found.
func (m *OAuth_PasswordGrantFlow) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuth_PasswordGrantFlow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	// no validation rules for TokenUrl

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Audience

	// no validation rules for Scope

	if len(errors) > 0 {
		return OAuth_PasswordGrantFlowMultiError(errors)
	}

	return nil
}

// OAuth_PasswordGrantFlowMultiError is an error wrapping multiple validation
// errors returned by OAuth_PasswordGrantFlow.ValidateAll() if the designated
// constraints aren't met.
type OAuth_PasswordGrantFlowMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuth_PasswordGrantFlowMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuth_PasswordGrantFlowMultiError) AllErrors() []error { return m }

// OAuth_PasswordGrantFlowValidationError is the validation error returned by
// OAuth_PasswordGrantFlow.Validate if the designated constraints aren't met.
type OAuth_PasswordGrantFlowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuth_PasswordGrantFlowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuth_PasswordGrantFlowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuth_PasswordGrantFlowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuth_PasswordGrantFlowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuth_PasswordGrantFlowValidationError) ErrorName() string {
	return "OAuth_PasswordGrantFlowValidationError"
}

// Error satisfies the builtin error interface
func (e OAuth_PasswordGrantFlowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuth_PasswordGrantFlow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuth_PasswordGrantFlowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuth_PasswordGrantFlowValidationError{}

// Validate checks the field values on OAuth_ClientCredentialsFlow with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OAuth_ClientCredentialsFlow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuth_ClientCredentialsFlow with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OAuth_ClientCredentialsFlowMultiError, or nil if none found.
func (m *OAuth_ClientCredentialsFlow) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuth_ClientCredentialsFlow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	// no validation rules for TokenUrl

	// no validation rules for Audience

	// no validation rules for Scope

	if len(errors) > 0 {
		return OAuth_ClientCredentialsFlowMultiError(errors)
	}

	return nil
}

// OAuth_ClientCredentialsFlowMultiError is an error wrapping multiple
// validation errors returned by OAuth_ClientCredentialsFlow.ValidateAll() if
// the designated constraints aren't met.
type OAuth_ClientCredentialsFlowMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuth_ClientCredentialsFlowMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuth_ClientCredentialsFlowMultiError) AllErrors() []error { return m }

// OAuth_ClientCredentialsFlowValidationError is the validation error returned
// by OAuth_ClientCredentialsFlow.Validate if the designated constraints
// aren't met.
type OAuth_ClientCredentialsFlowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuth_ClientCredentialsFlowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuth_ClientCredentialsFlowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuth_ClientCredentialsFlowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuth_ClientCredentialsFlowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuth_ClientCredentialsFlowValidationError) ErrorName() string {
	return "OAuth_ClientCredentialsFlowValidationError"
}

// Error satisfies the builtin error interface
func (e OAuth_ClientCredentialsFlowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuth_ClientCredentialsFlow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuth_ClientCredentialsFlowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuth_ClientCredentialsFlowValidationError{}

// Validate checks the field values on OAuth_AuthorizationCodeFlow with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OAuth_AuthorizationCodeFlow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuth_AuthorizationCodeFlow with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OAuth_AuthorizationCodeFlowMultiError, or nil if none found.
func (m *OAuth_AuthorizationCodeFlow) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuth_AuthorizationCodeFlow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	// no validation rules for TokenUrl

	// no validation rules for AuthUrl

	// no validation rules for Audience

	// no validation rules for Scope

	// no validation rules for TokenScope

	// no validation rules for RefreshTokenFromServer

	// no validation rules for ClientAuthMethod

	if len(errors) > 0 {
		return OAuth_AuthorizationCodeFlowMultiError(errors)
	}

	return nil
}

// OAuth_AuthorizationCodeFlowMultiError is an error wrapping multiple
// validation errors returned by OAuth_AuthorizationCodeFlow.ValidateAll() if
// the designated constraints aren't met.
type OAuth_AuthorizationCodeFlowMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuth_AuthorizationCodeFlowMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuth_AuthorizationCodeFlowMultiError) AllErrors() []error { return m }

// OAuth_AuthorizationCodeFlowValidationError is the validation error returned
// by OAuth_AuthorizationCodeFlow.Validate if the designated constraints
// aren't met.
type OAuth_AuthorizationCodeFlowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuth_AuthorizationCodeFlowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuth_AuthorizationCodeFlowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuth_AuthorizationCodeFlowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuth_AuthorizationCodeFlowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuth_AuthorizationCodeFlowValidationError) ErrorName() string {
	return "OAuth_AuthorizationCodeFlowValidationError"
}

// Error satisfies the builtin error interface
func (e OAuth_AuthorizationCodeFlowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuth_AuthorizationCodeFlow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuth_AuthorizationCodeFlowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuth_AuthorizationCodeFlowValidationError{}

// Validate checks the field values on Azure_Key with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Azure_Key) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Azure_Key with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Azure_KeyMultiError, or nil
// if none found.
func (m *Azure_Key) ValidateAll() error {
	return m.validate(true)
}

func (m *Azure_Key) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MasterKey

	if len(errors) > 0 {
		return Azure_KeyMultiError(errors)
	}

	return nil
}

// Azure_KeyMultiError is an error wrapping multiple validation errors returned
// by Azure_Key.ValidateAll() if the designated constraints aren't met.
type Azure_KeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Azure_KeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Azure_KeyMultiError) AllErrors() []error { return m }

// Azure_KeyValidationError is the validation error returned by
// Azure_Key.Validate if the designated constraints aren't met.
type Azure_KeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Azure_KeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Azure_KeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Azure_KeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Azure_KeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Azure_KeyValidationError) ErrorName() string { return "Azure_KeyValidationError" }

// Error satisfies the builtin error interface
func (e Azure_KeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAzure_Key.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Azure_KeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Azure_KeyValidationError{}

// Validate checks the field values on Azure_ClientCredentials with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Azure_ClientCredentials) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Azure_ClientCredentials with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Azure_ClientCredentialsMultiError, or nil if none found.
func (m *Azure_ClientCredentials) ValidateAll() error {
	return m.validate(true)
}

func (m *Azure_ClientCredentials) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	if len(errors) > 0 {
		return Azure_ClientCredentialsMultiError(errors)
	}

	return nil
}

// Azure_ClientCredentialsMultiError is an error wrapping multiple validation
// errors returned by Azure_ClientCredentials.ValidateAll() if the designated
// constraints aren't met.
type Azure_ClientCredentialsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Azure_ClientCredentialsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Azure_ClientCredentialsMultiError) AllErrors() []error { return m }

// Azure_ClientCredentialsValidationError is the validation error returned by
// Azure_ClientCredentials.Validate if the designated constraints aren't met.
type Azure_ClientCredentialsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Azure_ClientCredentialsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Azure_ClientCredentialsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Azure_ClientCredentialsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Azure_ClientCredentialsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Azure_ClientCredentialsValidationError) ErrorName() string {
	return "Azure_ClientCredentialsValidationError"
}

// Error satisfies the builtin error interface
func (e Azure_ClientCredentialsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAzure_ClientCredentials.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Azure_ClientCredentialsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Azure_ClientCredentialsValidationError{}

// Validate checks the field values on AwsAuth_Static with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AwsAuth_Static) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AwsAuth_Static with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AwsAuth_StaticMultiError,
// or nil if none found.
func (m *AwsAuth_Static) ValidateAll() error {
	return m.validate(true)
}

func (m *AwsAuth_Static) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessKeyId

	// no validation rules for SecretAccessKey

	if len(errors) > 0 {
		return AwsAuth_StaticMultiError(errors)
	}

	return nil
}

// AwsAuth_StaticMultiError is an error wrapping multiple validation errors
// returned by AwsAuth_Static.ValidateAll() if the designated constraints
// aren't met.
type AwsAuth_StaticMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AwsAuth_StaticMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AwsAuth_StaticMultiError) AllErrors() []error { return m }

// AwsAuth_StaticValidationError is the validation error returned by
// AwsAuth_Static.Validate if the designated constraints aren't met.
type AwsAuth_StaticValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AwsAuth_StaticValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AwsAuth_StaticValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AwsAuth_StaticValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AwsAuth_StaticValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AwsAuth_StaticValidationError) ErrorName() string { return "AwsAuth_StaticValidationError" }

// Error satisfies the builtin error interface
func (e AwsAuth_StaticValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAwsAuth_Static.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AwsAuth_StaticValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AwsAuth_StaticValidationError{}

// Validate checks the field values on AwsAuth_AssumeRole with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AwsAuth_AssumeRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AwsAuth_AssumeRole with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AwsAuth_AssumeRoleMultiError, or nil if none found.
func (m *AwsAuth_AssumeRole) ValidateAll() error {
	return m.validate(true)
}

func (m *AwsAuth_AssumeRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleArn

	if len(errors) > 0 {
		return AwsAuth_AssumeRoleMultiError(errors)
	}

	return nil
}

// AwsAuth_AssumeRoleMultiError is an error wrapping multiple validation errors
// returned by AwsAuth_AssumeRole.ValidateAll() if the designated constraints
// aren't met.
type AwsAuth_AssumeRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AwsAuth_AssumeRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AwsAuth_AssumeRoleMultiError) AllErrors() []error { return m }

// AwsAuth_AssumeRoleValidationError is the validation error returned by
// AwsAuth_AssumeRole.Validate if the designated constraints aren't met.
type AwsAuth_AssumeRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AwsAuth_AssumeRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AwsAuth_AssumeRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AwsAuth_AssumeRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AwsAuth_AssumeRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AwsAuth_AssumeRoleValidationError) ErrorName() string {
	return "AwsAuth_AssumeRoleValidationError"
}

// Error satisfies the builtin error interface
func (e AwsAuth_AssumeRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAwsAuth_AssumeRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AwsAuth_AssumeRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AwsAuth_AssumeRoleValidationError{}

// Validate checks the field values on AkeylessAuth_ApiKey with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AkeylessAuth_ApiKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AkeylessAuth_ApiKey with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AkeylessAuth_ApiKeyMultiError, or nil if none found.
func (m *AkeylessAuth_ApiKey) ValidateAll() error {
	return m.validate(true)
}

func (m *AkeylessAuth_ApiKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessId

	// no validation rules for AccessKey

	if len(errors) > 0 {
		return AkeylessAuth_ApiKeyMultiError(errors)
	}

	return nil
}

// AkeylessAuth_ApiKeyMultiError is an error wrapping multiple validation
// errors returned by AkeylessAuth_ApiKey.ValidateAll() if the designated
// constraints aren't met.
type AkeylessAuth_ApiKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AkeylessAuth_ApiKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AkeylessAuth_ApiKeyMultiError) AllErrors() []error { return m }

// AkeylessAuth_ApiKeyValidationError is the validation error returned by
// AkeylessAuth_ApiKey.Validate if the designated constraints aren't met.
type AkeylessAuth_ApiKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AkeylessAuth_ApiKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AkeylessAuth_ApiKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AkeylessAuth_ApiKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AkeylessAuth_ApiKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AkeylessAuth_ApiKeyValidationError) ErrorName() string {
	return "AkeylessAuth_ApiKeyValidationError"
}

// Error satisfies the builtin error interface
func (e AkeylessAuth_ApiKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAkeylessAuth_ApiKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AkeylessAuth_ApiKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AkeylessAuth_ApiKeyValidationError{}

// Validate checks the field values on AkeylessAuth_Email with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AkeylessAuth_Email) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AkeylessAuth_Email with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AkeylessAuth_EmailMultiError, or nil if none found.
func (m *AkeylessAuth_Email) ValidateAll() error {
	return m.validate(true)
}

func (m *AkeylessAuth_Email) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	if len(errors) > 0 {
		return AkeylessAuth_EmailMultiError(errors)
	}

	return nil
}

// AkeylessAuth_EmailMultiError is an error wrapping multiple validation errors
// returned by AkeylessAuth_Email.ValidateAll() if the designated constraints
// aren't met.
type AkeylessAuth_EmailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AkeylessAuth_EmailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AkeylessAuth_EmailMultiError) AllErrors() []error { return m }

// AkeylessAuth_EmailValidationError is the validation error returned by
// AkeylessAuth_Email.Validate if the designated constraints aren't met.
type AkeylessAuth_EmailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AkeylessAuth_EmailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AkeylessAuth_EmailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AkeylessAuth_EmailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AkeylessAuth_EmailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AkeylessAuth_EmailValidationError) ErrorName() string {
	return "AkeylessAuth_EmailValidationError"
}

// Error satisfies the builtin error interface
func (e AkeylessAuth_EmailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAkeylessAuth_Email.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AkeylessAuth_EmailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AkeylessAuth_EmailValidationError{}
