// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugins/common/v1/metadata.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SQLMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SQLMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SQLMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SQLMetadataMultiError, or
// nil if none found.
func (m *SQLMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *SQLMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SQLMetadataMultiError(errors)
	}

	return nil
}

// SQLMetadataMultiError is an error wrapping multiple validation errors
// returned by SQLMetadata.ValidateAll() if the designated constraints aren't met.
type SQLMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SQLMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SQLMetadataMultiError) AllErrors() []error { return m }

// SQLMetadataValidationError is the validation error returned by
// SQLMetadata.Validate if the designated constraints aren't met.
type SQLMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SQLMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SQLMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SQLMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SQLMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SQLMetadataValidationError) ErrorName() string { return "SQLMetadataValidationError" }

// Error satisfies the builtin error interface
func (e SQLMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSQLMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SQLMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SQLMetadataValidationError{}

// Validate checks the field values on BucketsMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BucketsMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketsMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BucketsMetadataMultiError, or nil if none found.
func (m *BucketsMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketsMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BucketsMetadataMultiError(errors)
	}

	return nil
}

// BucketsMetadataMultiError is an error wrapping multiple validation errors
// returned by BucketsMetadata.ValidateAll() if the designated constraints
// aren't met.
type BucketsMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketsMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketsMetadataMultiError) AllErrors() []error { return m }

// BucketsMetadataValidationError is the validation error returned by
// BucketsMetadata.Validate if the designated constraints aren't met.
type BucketsMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketsMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketsMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketsMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketsMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketsMetadataValidationError) ErrorName() string { return "BucketsMetadataValidationError" }

// Error satisfies the builtin error interface
func (e BucketsMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketsMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketsMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketsMetadataValidationError{}

// Validate checks the field values on SQLMetadata_Minified with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SQLMetadata_Minified) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SQLMetadata_Minified with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SQLMetadata_MinifiedMultiError, or nil if none found.
func (m *SQLMetadata_Minified) ValidateAll() error {
	return m.validate(true)
}

func (m *SQLMetadata_Minified) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetTables()))
		i := 0
		for key := range m.GetTables() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetTables()[key]
			_ = val

			// no validation rules for Tables[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, SQLMetadata_MinifiedValidationError{
							field:  fmt.Sprintf("Tables[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, SQLMetadata_MinifiedValidationError{
							field:  fmt.Sprintf("Tables[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return SQLMetadata_MinifiedValidationError{
						field:  fmt.Sprintf("Tables[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return SQLMetadata_MinifiedMultiError(errors)
	}

	return nil
}

// SQLMetadata_MinifiedMultiError is an error wrapping multiple validation
// errors returned by SQLMetadata_Minified.ValidateAll() if the designated
// constraints aren't met.
type SQLMetadata_MinifiedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SQLMetadata_MinifiedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SQLMetadata_MinifiedMultiError) AllErrors() []error { return m }

// SQLMetadata_MinifiedValidationError is the validation error returned by
// SQLMetadata_Minified.Validate if the designated constraints aren't met.
type SQLMetadata_MinifiedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SQLMetadata_MinifiedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SQLMetadata_MinifiedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SQLMetadata_MinifiedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SQLMetadata_MinifiedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SQLMetadata_MinifiedValidationError) ErrorName() string {
	return "SQLMetadata_MinifiedValidationError"
}

// Error satisfies the builtin error interface
func (e SQLMetadata_MinifiedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSQLMetadata_Minified.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SQLMetadata_MinifiedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SQLMetadata_MinifiedValidationError{}

// Validate checks the field values on SQLMetadata_Minified_Table with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SQLMetadata_Minified_Table) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SQLMetadata_Minified_Table with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SQLMetadata_Minified_TableMultiError, or nil if none found.
func (m *SQLMetadata_Minified_Table) ValidateAll() error {
	return m.validate(true)
}

func (m *SQLMetadata_Minified_Table) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Columns

	if len(errors) > 0 {
		return SQLMetadata_Minified_TableMultiError(errors)
	}

	return nil
}

// SQLMetadata_Minified_TableMultiError is an error wrapping multiple
// validation errors returned by SQLMetadata_Minified_Table.ValidateAll() if
// the designated constraints aren't met.
type SQLMetadata_Minified_TableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SQLMetadata_Minified_TableMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SQLMetadata_Minified_TableMultiError) AllErrors() []error { return m }

// SQLMetadata_Minified_TableValidationError is the validation error returned
// by SQLMetadata_Minified_Table.Validate if the designated constraints aren't met.
type SQLMetadata_Minified_TableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SQLMetadata_Minified_TableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SQLMetadata_Minified_TableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SQLMetadata_Minified_TableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SQLMetadata_Minified_TableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SQLMetadata_Minified_TableValidationError) ErrorName() string {
	return "SQLMetadata_Minified_TableValidationError"
}

// Error satisfies the builtin error interface
func (e SQLMetadata_Minified_TableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSQLMetadata_Minified_Table.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SQLMetadata_Minified_TableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SQLMetadata_Minified_TableValidationError{}

// Validate checks the field values on BucketsMetadata_Minified with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BucketsMetadata_Minified) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketsMetadata_Minified with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BucketsMetadata_MinifiedMultiError, or nil if none found.
func (m *BucketsMetadata_Minified) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketsMetadata_Minified) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BucketsMetadata_MinifiedMultiError(errors)
	}

	return nil
}

// BucketsMetadata_MinifiedMultiError is an error wrapping multiple validation
// errors returned by BucketsMetadata_Minified.ValidateAll() if the designated
// constraints aren't met.
type BucketsMetadata_MinifiedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketsMetadata_MinifiedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketsMetadata_MinifiedMultiError) AllErrors() []error { return m }

// BucketsMetadata_MinifiedValidationError is the validation error returned by
// BucketsMetadata_Minified.Validate if the designated constraints aren't met.
type BucketsMetadata_MinifiedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketsMetadata_MinifiedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketsMetadata_MinifiedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketsMetadata_MinifiedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketsMetadata_MinifiedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketsMetadata_MinifiedValidationError) ErrorName() string {
	return "BucketsMetadata_MinifiedValidationError"
}

// Error satisfies the builtin error interface
func (e BucketsMetadata_MinifiedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketsMetadata_Minified.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketsMetadata_MinifiedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketsMetadata_MinifiedValidationError{}
