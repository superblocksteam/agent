// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugins/common/v1/plugin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DynamicWorkflowConfiguration with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DynamicWorkflowConfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DynamicWorkflowConfiguration with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DynamicWorkflowConfigurationMultiError, or nil if none found.
func (m *DynamicWorkflowConfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *DynamicWorkflowConfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.WorkflowId != nil {
		// no validation rules for WorkflowId
	}

	if len(errors) > 0 {
		return DynamicWorkflowConfigurationMultiError(errors)
	}

	return nil
}

// DynamicWorkflowConfigurationMultiError is an error wrapping multiple
// validation errors returned by DynamicWorkflowConfiguration.ValidateAll() if
// the designated constraints aren't met.
type DynamicWorkflowConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DynamicWorkflowConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DynamicWorkflowConfigurationMultiError) AllErrors() []error { return m }

// DynamicWorkflowConfigurationValidationError is the validation error returned
// by DynamicWorkflowConfiguration.Validate if the designated constraints
// aren't met.
type DynamicWorkflowConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DynamicWorkflowConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DynamicWorkflowConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DynamicWorkflowConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DynamicWorkflowConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DynamicWorkflowConfigurationValidationError) ErrorName() string {
	return "DynamicWorkflowConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e DynamicWorkflowConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDynamicWorkflowConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DynamicWorkflowConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DynamicWorkflowConfigurationValidationError{}

// Validate checks the field values on AWSConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AWSConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AWSConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AWSConfigMultiError, or nil
// if none found.
func (m *AWSConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *AWSConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Region != nil {
		// no validation rules for Region
	}

	if m.Auth != nil {

		if all {
			switch v := interface{}(m.GetAuth()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AWSConfigValidationError{
						field:  "Auth",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AWSConfigValidationError{
						field:  "Auth",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AWSConfigValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AWSConfigMultiError(errors)
	}

	return nil
}

// AWSConfigMultiError is an error wrapping multiple validation errors returned
// by AWSConfig.ValidateAll() if the designated constraints aren't met.
type AWSConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AWSConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AWSConfigMultiError) AllErrors() []error { return m }

// AWSConfigValidationError is the validation error returned by
// AWSConfig.Validate if the designated constraints aren't met.
type AWSConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AWSConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AWSConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AWSConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AWSConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AWSConfigValidationError) ErrorName() string { return "AWSConfigValidationError" }

// Error satisfies the builtin error interface
func (e AWSConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAWSConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AWSConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AWSConfigValidationError{}

// Validate checks the field values on SQLExecution with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SQLExecution) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SQLExecution with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SQLExecutionMultiError, or
// nil if none found.
func (m *SQLExecution) ValidateAll() error {
	return m.validate(true)
}

func (m *SQLExecution) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SqlBody

	// no validation rules for UseParameterized

	if len(errors) > 0 {
		return SQLExecutionMultiError(errors)
	}

	return nil
}

// SQLExecutionMultiError is an error wrapping multiple validation errors
// returned by SQLExecution.ValidateAll() if the designated constraints aren't met.
type SQLExecutionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SQLExecutionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SQLExecutionMultiError) AllErrors() []error { return m }

// SQLExecutionValidationError is the validation error returned by
// SQLExecution.Validate if the designated constraints aren't met.
type SQLExecutionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SQLExecutionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SQLExecutionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SQLExecutionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SQLExecutionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SQLExecutionValidationError) ErrorName() string { return "SQLExecutionValidationError" }

// Error satisfies the builtin error interface
func (e SQLExecutionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSQLExecution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SQLExecutionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SQLExecutionValidationError{}

// Validate checks the field values on SQLMappedColumns with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SQLMappedColumns) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SQLMappedColumns with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SQLMappedColumnsMultiError, or nil if none found.
func (m *SQLMappedColumns) ValidateAll() error {
	return m.validate(true)
}

func (m *SQLMappedColumns) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Json

	// no validation rules for Sql

	if len(errors) > 0 {
		return SQLMappedColumnsMultiError(errors)
	}

	return nil
}

// SQLMappedColumnsMultiError is an error wrapping multiple validation errors
// returned by SQLMappedColumns.ValidateAll() if the designated constraints
// aren't met.
type SQLMappedColumnsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SQLMappedColumnsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SQLMappedColumnsMultiError) AllErrors() []error { return m }

// SQLMappedColumnsValidationError is the validation error returned by
// SQLMappedColumns.Validate if the designated constraints aren't met.
type SQLMappedColumnsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SQLMappedColumnsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SQLMappedColumnsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SQLMappedColumnsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SQLMappedColumnsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SQLMappedColumnsValidationError) ErrorName() string { return "SQLMappedColumnsValidationError" }

// Error satisfies the builtin error interface
func (e SQLMappedColumnsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSQLMappedColumns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SQLMappedColumnsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SQLMappedColumnsValidationError{}

// Validate checks the field values on SSHConfiguration with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SSHConfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SSHConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SSHConfigurationMultiError, or nil if none found.
func (m *SSHConfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *SSHConfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.AuthenticationMethod != nil {
		// no validation rules for AuthenticationMethod
	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.Host != nil {
		// no validation rules for Host
	}

	if m.Passphrase != nil {
		// no validation rules for Passphrase
	}

	if m.Password != nil {
		// no validation rules for Password
	}

	if m.Port != nil {
		// no validation rules for Port
	}

	if m.PrivateKey != nil {
		// no validation rules for PrivateKey
	}

	if m.PublicKey != nil {
		// no validation rules for PublicKey
	}

	if m.Username != nil {
		// no validation rules for Username
	}

	if len(errors) > 0 {
		return SSHConfigurationMultiError(errors)
	}

	return nil
}

// SSHConfigurationMultiError is an error wrapping multiple validation errors
// returned by SSHConfiguration.ValidateAll() if the designated constraints
// aren't met.
type SSHConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SSHConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SSHConfigurationMultiError) AllErrors() []error { return m }

// SSHConfigurationValidationError is the validation error returned by
// SSHConfiguration.Validate if the designated constraints aren't met.
type SSHConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SSHConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SSHConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SSHConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SSHConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SSHConfigurationValidationError) ErrorName() string { return "SSHConfigurationValidationError" }

// Error satisfies the builtin error interface
func (e SSHConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSSHConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SSHConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SSHConfigurationValidationError{}

// Validate checks the field values on SQLBulkEdit with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SQLBulkEdit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SQLBulkEdit with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SQLBulkEditMultiError, or
// nil if none found.
func (m *SQLBulkEdit) ValidateAll() error {
	return m.validate(true)
}

func (m *SQLBulkEdit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMappedColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SQLBulkEditValidationError{
						field:  fmt.Sprintf("MappedColumns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SQLBulkEditValidationError{
						field:  fmt.Sprintf("MappedColumns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SQLBulkEditValidationError{
					field:  fmt.Sprintf("MappedColumns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.MatchingMode != nil {
		// no validation rules for MatchingMode
	}

	if m.Schema != nil {
		// no validation rules for Schema
	}

	if m.Table != nil {
		// no validation rules for Table
	}

	if m.UpdatedRows != nil {
		// no validation rules for UpdatedRows
	}

	if m.OldRows != nil {
		// no validation rules for OldRows
	}

	if m.MappingMode != nil {
		// no validation rules for MappingMode
	}

	if m.InsertedRows != nil {
		// no validation rules for InsertedRows
	}

	if m.DeletedRows != nil {
		// no validation rules for DeletedRows
	}

	if len(errors) > 0 {
		return SQLBulkEditMultiError(errors)
	}

	return nil
}

// SQLBulkEditMultiError is an error wrapping multiple validation errors
// returned by SQLBulkEdit.ValidateAll() if the designated constraints aren't met.
type SQLBulkEditMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SQLBulkEditMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SQLBulkEditMultiError) AllErrors() []error { return m }

// SQLBulkEditValidationError is the validation error returned by
// SQLBulkEdit.Validate if the designated constraints aren't met.
type SQLBulkEditValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SQLBulkEditValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SQLBulkEditValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SQLBulkEditValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SQLBulkEditValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SQLBulkEditValidationError) ErrorName() string { return "SQLBulkEditValidationError" }

// Error satisfies the builtin error interface
func (e SQLBulkEditValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSQLBulkEdit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SQLBulkEditValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SQLBulkEditValidationError{}

// Validate checks the field values on AWSConfig_Auth with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AWSConfig_Auth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AWSConfig_Auth with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AWSConfig_AuthMultiError,
// or nil if none found.
func (m *AWSConfig_Auth) ValidateAll() error {
	return m.validate(true)
}

func (m *AWSConfig_Auth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.AccessKeyId != nil {
		// no validation rules for AccessKeyId
	}

	if m.SecretKey != nil {
		// no validation rules for SecretKey
	}

	if m.IamRoleArn != nil {
		// no validation rules for IamRoleArn
	}

	if len(errors) > 0 {
		return AWSConfig_AuthMultiError(errors)
	}

	return nil
}

// AWSConfig_AuthMultiError is an error wrapping multiple validation errors
// returned by AWSConfig_Auth.ValidateAll() if the designated constraints
// aren't met.
type AWSConfig_AuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AWSConfig_AuthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AWSConfig_AuthMultiError) AllErrors() []error { return m }

// AWSConfig_AuthValidationError is the validation error returned by
// AWSConfig_Auth.Validate if the designated constraints aren't met.
type AWSConfig_AuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AWSConfig_AuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AWSConfig_AuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AWSConfig_AuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AWSConfig_AuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AWSConfig_AuthValidationError) ErrorName() string { return "AWSConfig_AuthValidationError" }

// Error satisfies the builtin error interface
func (e AWSConfig_AuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAWSConfig_Auth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AWSConfig_AuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AWSConfig_AuthValidationError{}
