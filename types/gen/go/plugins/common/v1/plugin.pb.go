// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: plugins/common/v1/plugin.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SSHAuthMethod int32

const (
	SSHAuthMethod_SSH_AUTH_METHOD_UNSPECIFIED      SSHAuthMethod = 0
	SSHAuthMethod_SSH_AUTH_METHOD_PASSWORD         SSHAuthMethod = 1
	SSHAuthMethod_SSH_AUTH_METHOD_PUB_KEY_RSA      SSHAuthMethod = 2
	SSHAuthMethod_SSH_AUTH_METHOD_PUB_KEY_ED25519  SSHAuthMethod = 3
	SSHAuthMethod_SSH_AUTH_METHOD_USER_PRIVATE_KEY SSHAuthMethod = 4
)

// Enum value maps for SSHAuthMethod.
var (
	SSHAuthMethod_name = map[int32]string{
		0: "SSH_AUTH_METHOD_UNSPECIFIED",
		1: "SSH_AUTH_METHOD_PASSWORD",
		2: "SSH_AUTH_METHOD_PUB_KEY_RSA",
		3: "SSH_AUTH_METHOD_PUB_KEY_ED25519",
		4: "SSH_AUTH_METHOD_USER_PRIVATE_KEY",
	}
	SSHAuthMethod_value = map[string]int32{
		"SSH_AUTH_METHOD_UNSPECIFIED":      0,
		"SSH_AUTH_METHOD_PASSWORD":         1,
		"SSH_AUTH_METHOD_PUB_KEY_RSA":      2,
		"SSH_AUTH_METHOD_PUB_KEY_ED25519":  3,
		"SSH_AUTH_METHOD_USER_PRIVATE_KEY": 4,
	}
)

func (x SSHAuthMethod) Enum() *SSHAuthMethod {
	p := new(SSHAuthMethod)
	*p = x
	return p
}

func (x SSHAuthMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SSHAuthMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_plugins_common_v1_plugin_proto_enumTypes[0].Descriptor()
}

func (SSHAuthMethod) Type() protoreflect.EnumType {
	return &file_plugins_common_v1_plugin_proto_enumTypes[0]
}

func (x SSHAuthMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SSHAuthMethod.Descriptor instead.
func (SSHAuthMethod) EnumDescriptor() ([]byte, []int) {
	return file_plugins_common_v1_plugin_proto_rawDescGZIP(), []int{0}
}

type SQLMappingMode int32

const (
	SQLMappingMode_SQL_MAPPING_MODE_UNSPECIFIED SQLMappingMode = 0
	SQLMappingMode_SQL_MAPPING_MODE_AUTO        SQLMappingMode = 1
	SQLMappingMode_SQL_MAPPING_MODE_MANUAL      SQLMappingMode = 2
)

// Enum value maps for SQLMappingMode.
var (
	SQLMappingMode_name = map[int32]string{
		0: "SQL_MAPPING_MODE_UNSPECIFIED",
		1: "SQL_MAPPING_MODE_AUTO",
		2: "SQL_MAPPING_MODE_MANUAL",
	}
	SQLMappingMode_value = map[string]int32{
		"SQL_MAPPING_MODE_UNSPECIFIED": 0,
		"SQL_MAPPING_MODE_AUTO":        1,
		"SQL_MAPPING_MODE_MANUAL":      2,
	}
)

func (x SQLMappingMode) Enum() *SQLMappingMode {
	p := new(SQLMappingMode)
	*p = x
	return p
}

func (x SQLMappingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SQLMappingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_plugins_common_v1_plugin_proto_enumTypes[1].Descriptor()
}

func (SQLMappingMode) Type() protoreflect.EnumType {
	return &file_plugins_common_v1_plugin_proto_enumTypes[1]
}

func (x SQLMappingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SQLMappingMode.Descriptor instead.
func (SQLMappingMode) EnumDescriptor() ([]byte, []int) {
	return file_plugins_common_v1_plugin_proto_rawDescGZIP(), []int{1}
}

type SQLMatchingMode int32

const (
	SQLMatchingMode_SQL_MATCHING_MODE_UNSPECIFIED SQLMatchingMode = 0
	SQLMatchingMode_SQL_MATCHING_MODE_AUTO        SQLMatchingMode = 1
	SQLMatchingMode_SQL_MATCHING_MODE_ADVANCED    SQLMatchingMode = 2
)

// Enum value maps for SQLMatchingMode.
var (
	SQLMatchingMode_name = map[int32]string{
		0: "SQL_MATCHING_MODE_UNSPECIFIED",
		1: "SQL_MATCHING_MODE_AUTO",
		2: "SQL_MATCHING_MODE_ADVANCED",
	}
	SQLMatchingMode_value = map[string]int32{
		"SQL_MATCHING_MODE_UNSPECIFIED": 0,
		"SQL_MATCHING_MODE_AUTO":        1,
		"SQL_MATCHING_MODE_ADVANCED":    2,
	}
)

func (x SQLMatchingMode) Enum() *SQLMatchingMode {
	p := new(SQLMatchingMode)
	*p = x
	return p
}

func (x SQLMatchingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SQLMatchingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_plugins_common_v1_plugin_proto_enumTypes[2].Descriptor()
}

func (SQLMatchingMode) Type() protoreflect.EnumType {
	return &file_plugins_common_v1_plugin_proto_enumTypes[2]
}

func (x SQLMatchingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SQLMatchingMode.Descriptor instead.
func (SQLMatchingMode) EnumDescriptor() ([]byte, []int) {
	return file_plugins_common_v1_plugin_proto_rawDescGZIP(), []int{2}
}

type SQLOperation int32

const (
	SQLOperation_SQL_OPERATION_UNSPECIFIED SQLOperation = 0
	SQLOperation_SQL_OPERATION_RUN_SQL     SQLOperation = 1
	SQLOperation_SQL_OPERATION_UPDATE_ROWS SQLOperation = 2
)

// Enum value maps for SQLOperation.
var (
	SQLOperation_name = map[int32]string{
		0: "SQL_OPERATION_UNSPECIFIED",
		1: "SQL_OPERATION_RUN_SQL",
		2: "SQL_OPERATION_UPDATE_ROWS",
	}
	SQLOperation_value = map[string]int32{
		"SQL_OPERATION_UNSPECIFIED": 0,
		"SQL_OPERATION_RUN_SQL":     1,
		"SQL_OPERATION_UPDATE_ROWS": 2,
	}
)

func (x SQLOperation) Enum() *SQLOperation {
	p := new(SQLOperation)
	*p = x
	return p
}

func (x SQLOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SQLOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_plugins_common_v1_plugin_proto_enumTypes[3].Descriptor()
}

func (SQLOperation) Type() protoreflect.EnumType {
	return &file_plugins_common_v1_plugin_proto_enumTypes[3]
}

func (x SQLOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SQLOperation.Descriptor instead.
func (SQLOperation) EnumDescriptor() ([]byte, []int) {
	return file_plugins_common_v1_plugin_proto_rawDescGZIP(), []int{3}
}

type DynamicWorkflowConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled    *bool   `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	WorkflowId *string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3,oneof" json:"workflow_id,omitempty"`
}

func (x *DynamicWorkflowConfiguration) Reset() {
	*x = DynamicWorkflowConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugins_common_v1_plugin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicWorkflowConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicWorkflowConfiguration) ProtoMessage() {}

func (x *DynamicWorkflowConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_common_v1_plugin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicWorkflowConfiguration.ProtoReflect.Descriptor instead.
func (*DynamicWorkflowConfiguration) Descriptor() ([]byte, []int) {
	return file_plugins_common_v1_plugin_proto_rawDescGZIP(), []int{0}
}

func (x *DynamicWorkflowConfiguration) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *DynamicWorkflowConfiguration) GetWorkflowId() string {
	if x != nil && x.WorkflowId != nil {
		return *x.WorkflowId
	}
	return ""
}

type AWSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region *string         `protobuf:"bytes,1,opt,name=region,proto3,oneof" json:"region,omitempty"`
	Auth   *AWSConfig_Auth `protobuf:"bytes,2,opt,name=auth,proto3,oneof" json:"auth,omitempty"`
}

func (x *AWSConfig) Reset() {
	*x = AWSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugins_common_v1_plugin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSConfig) ProtoMessage() {}

func (x *AWSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_common_v1_plugin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSConfig.ProtoReflect.Descriptor instead.
func (*AWSConfig) Descriptor() ([]byte, []int) {
	return file_plugins_common_v1_plugin_proto_rawDescGZIP(), []int{1}
}

func (x *AWSConfig) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *AWSConfig) GetAuth() *AWSConfig_Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type SQLExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SqlBody          string `protobuf:"bytes,1,opt,name=sql_body,json=sqlBody,proto3" json:"sql_body,omitempty"`
	UseParameterized bool   `protobuf:"varint,2,opt,name=use_parameterized,json=useParameterized,proto3" json:"use_parameterized,omitempty"`
}

func (x *SQLExecution) Reset() {
	*x = SQLExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugins_common_v1_plugin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLExecution) ProtoMessage() {}

func (x *SQLExecution) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_common_v1_plugin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLExecution.ProtoReflect.Descriptor instead.
func (*SQLExecution) Descriptor() ([]byte, []int) {
	return file_plugins_common_v1_plugin_proto_rawDescGZIP(), []int{2}
}

func (x *SQLExecution) GetSqlBody() string {
	if x != nil {
		return x.SqlBody
	}
	return ""
}

func (x *SQLExecution) GetUseParameterized() bool {
	if x != nil {
		return x.UseParameterized
	}
	return false
}

type SQLMappedColumns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Json string `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
	Sql  string `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
}

func (x *SQLMappedColumns) Reset() {
	*x = SQLMappedColumns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugins_common_v1_plugin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLMappedColumns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLMappedColumns) ProtoMessage() {}

func (x *SQLMappedColumns) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_common_v1_plugin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLMappedColumns.ProtoReflect.Descriptor instead.
func (*SQLMappedColumns) Descriptor() ([]byte, []int) {
	return file_plugins_common_v1_plugin_proto_rawDescGZIP(), []int{3}
}

func (x *SQLMappedColumns) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

func (x *SQLMappedColumns) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

type SSHConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthenticationMethod *SSHAuthMethod `protobuf:"varint,1,opt,name=authentication_method,json=authenticationMethod,proto3,enum=plugins.common.v1.SSHAuthMethod,oneof" json:"authentication_method,omitempty"`
	Enabled              *bool          `protobuf:"varint,2,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Host                 *string        `protobuf:"bytes,3,opt,name=host,proto3,oneof" json:"host,omitempty"`
	Passphrase           *string        `protobuf:"bytes,4,opt,name=passphrase,proto3,oneof" json:"passphrase,omitempty"`
	Password             *string        `protobuf:"bytes,5,opt,name=password,proto3,oneof" json:"password,omitempty"`
	Port                 *int32         `protobuf:"varint,6,opt,name=port,proto3,oneof" json:"port,omitempty"`
	PrivateKey           *string        `protobuf:"bytes,7,opt,name=private_key,json=privateKey,proto3,oneof" json:"private_key,omitempty"`
	PublicKey            *string        `protobuf:"bytes,8,opt,name=public_key,json=publicKey,proto3,oneof" json:"public_key,omitempty"`
	Username             *string        `protobuf:"bytes,9,opt,name=username,proto3,oneof" json:"username,omitempty"`
}

func (x *SSHConfiguration) Reset() {
	*x = SSHConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugins_common_v1_plugin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSHConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHConfiguration) ProtoMessage() {}

func (x *SSHConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_common_v1_plugin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHConfiguration.ProtoReflect.Descriptor instead.
func (*SSHConfiguration) Descriptor() ([]byte, []int) {
	return file_plugins_common_v1_plugin_proto_rawDescGZIP(), []int{4}
}

func (x *SSHConfiguration) GetAuthenticationMethod() SSHAuthMethod {
	if x != nil && x.AuthenticationMethod != nil {
		return *x.AuthenticationMethod
	}
	return SSHAuthMethod_SSH_AUTH_METHOD_UNSPECIFIED
}

func (x *SSHConfiguration) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *SSHConfiguration) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *SSHConfiguration) GetPassphrase() string {
	if x != nil && x.Passphrase != nil {
		return *x.Passphrase
	}
	return ""
}

func (x *SSHConfiguration) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *SSHConfiguration) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *SSHConfiguration) GetPrivateKey() string {
	if x != nil && x.PrivateKey != nil {
		return *x.PrivateKey
	}
	return ""
}

func (x *SSHConfiguration) GetPublicKey() string {
	if x != nil && x.PublicKey != nil {
		return *x.PublicKey
	}
	return ""
}

func (x *SSHConfiguration) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

type SQLBulkEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchingMode  *SQLMatchingMode    `protobuf:"varint,1,opt,name=matching_mode,json=matchingMode,proto3,enum=plugins.common.v1.SQLMatchingMode,oneof" json:"matching_mode,omitempty"`
	Schema        *string             `protobuf:"bytes,2,opt,name=schema,proto3,oneof" json:"schema,omitempty"`
	Table         *string             `protobuf:"bytes,3,opt,name=table,proto3,oneof" json:"table,omitempty"`
	UpdatedRows   *string             `protobuf:"bytes,4,opt,name=updated_rows,json=updatedRows,proto3,oneof" json:"updated_rows,omitempty"`
	OldRows       *string             `protobuf:"bytes,5,opt,name=old_rows,json=oldRows,proto3,oneof" json:"old_rows,omitempty"`
	FilterBy      []string            `protobuf:"bytes,6,rep,name=filter_by,json=filterBy,proto3" json:"filter_by,omitempty"`
	MappingMode   *SQLMappingMode     `protobuf:"varint,7,opt,name=mapping_mode,json=mappingMode,proto3,enum=plugins.common.v1.SQLMappingMode,oneof" json:"mapping_mode,omitempty"`
	MappedColumns []*SQLMappedColumns `protobuf:"bytes,8,rep,name=mapped_columns,json=mappedColumns,proto3" json:"mapped_columns,omitempty"`
	InsertedRows  *string             `protobuf:"bytes,9,opt,name=inserted_rows,json=insertedRows,proto3,oneof" json:"inserted_rows,omitempty"`
	DeletedRows   *string             `protobuf:"bytes,10,opt,name=deleted_rows,json=deletedRows,proto3,oneof" json:"deleted_rows,omitempty"`
}

func (x *SQLBulkEdit) Reset() {
	*x = SQLBulkEdit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugins_common_v1_plugin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLBulkEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLBulkEdit) ProtoMessage() {}

func (x *SQLBulkEdit) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_common_v1_plugin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLBulkEdit.ProtoReflect.Descriptor instead.
func (*SQLBulkEdit) Descriptor() ([]byte, []int) {
	return file_plugins_common_v1_plugin_proto_rawDescGZIP(), []int{5}
}

func (x *SQLBulkEdit) GetMatchingMode() SQLMatchingMode {
	if x != nil && x.MatchingMode != nil {
		return *x.MatchingMode
	}
	return SQLMatchingMode_SQL_MATCHING_MODE_UNSPECIFIED
}

func (x *SQLBulkEdit) GetSchema() string {
	if x != nil && x.Schema != nil {
		return *x.Schema
	}
	return ""
}

func (x *SQLBulkEdit) GetTable() string {
	if x != nil && x.Table != nil {
		return *x.Table
	}
	return ""
}

func (x *SQLBulkEdit) GetUpdatedRows() string {
	if x != nil && x.UpdatedRows != nil {
		return *x.UpdatedRows
	}
	return ""
}

func (x *SQLBulkEdit) GetOldRows() string {
	if x != nil && x.OldRows != nil {
		return *x.OldRows
	}
	return ""
}

func (x *SQLBulkEdit) GetFilterBy() []string {
	if x != nil {
		return x.FilterBy
	}
	return nil
}

func (x *SQLBulkEdit) GetMappingMode() SQLMappingMode {
	if x != nil && x.MappingMode != nil {
		return *x.MappingMode
	}
	return SQLMappingMode_SQL_MAPPING_MODE_UNSPECIFIED
}

func (x *SQLBulkEdit) GetMappedColumns() []*SQLMappedColumns {
	if x != nil {
		return x.MappedColumns
	}
	return nil
}

func (x *SQLBulkEdit) GetInsertedRows() string {
	if x != nil && x.InsertedRows != nil {
		return *x.InsertedRows
	}
	return ""
}

func (x *SQLBulkEdit) GetDeletedRows() string {
	if x != nil && x.DeletedRows != nil {
		return *x.DeletedRows
	}
	return ""
}

type AWSConfig_Auth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKeyId *string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3,oneof" json:"access_key_id,omitempty"`
	SecretKey   *string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3,oneof" json:"secret_key,omitempty"`
	IamRoleArn  *string `protobuf:"bytes,3,opt,name=iam_role_arn,json=iamRoleArn,proto3,oneof" json:"iam_role_arn,omitempty"`
}

func (x *AWSConfig_Auth) Reset() {
	*x = AWSConfig_Auth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugins_common_v1_plugin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSConfig_Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSConfig_Auth) ProtoMessage() {}

func (x *AWSConfig_Auth) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_common_v1_plugin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSConfig_Auth.ProtoReflect.Descriptor instead.
func (*AWSConfig_Auth) Descriptor() ([]byte, []int) {
	return file_plugins_common_v1_plugin_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AWSConfig_Auth) GetAccessKeyId() string {
	if x != nil && x.AccessKeyId != nil {
		return *x.AccessKeyId
	}
	return ""
}

func (x *AWSConfig_Auth) GetSecretKey() string {
	if x != nil && x.SecretKey != nil {
		return *x.SecretKey
	}
	return ""
}

func (x *AWSConfig_Auth) GetIamRoleArn() string {
	if x != nil && x.IamRoleArn != nil {
		return *x.IamRoleArn
	}
	return ""
}

var File_plugins_common_v1_plugin_proto protoreflect.FileDescriptor

var file_plugins_common_v1_plugin_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x7f, 0x0a, 0x1c, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x64, 0x22, 0xa7, 0x02, 0x0a, 0x09, 0x41, 0x57, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x57, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x48, 0x01, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x88, 0x01, 0x01, 0x1a, 0xac, 0x01, 0x0a, 0x04, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x27, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0c, 0x69, 0x61, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x69, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x41,
	0x72, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x22, 0x56, 0x0a, 0x0c, 0x53,
	0x51, 0x4c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x71, 0x6c, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x71, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x75, 0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x22, 0x38, 0x0a, 0x10, 0x53, 0x51, 0x4c, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x22, 0xf0, 0x03,
	0x0a, 0x10, 0x53, 0x53, 0x48, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x53, 0x48, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x01, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68,
	0x72, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x07, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xf6, 0x04, 0x0a, 0x0b, 0x53, 0x51, 0x4c, 0x42, 0x75, 0x6c, 0x6b, 0x45, 0x64, 0x69, 0x74,
	0x12, 0x5a, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x51, 0x4c, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0xba, 0x48, 0x09,
	0x82, 0x01, 0x06, 0x10, 0x01, 0x1a, 0x02, 0x01, 0x02, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x07, 0x6f, 0x6c, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x12, 0x57, 0x0a, 0x0c, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x51, 0x4c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x42, 0x0c, 0xba, 0x48, 0x09, 0x82, 0x01, 0x06, 0x10, 0x01, 0x1a, 0x02, 0x01, 0x02,
	0x48, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x51, 0x4c, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x52,
	0x0d, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x28,
	0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x52, 0x6f, 0x77, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x6c, 0x64,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x2a, 0xba, 0x01, 0x0a, 0x0d, 0x53, 0x53,
	0x48, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x53,
	0x53, 0x48, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x53, 0x48, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x53,
	0x48, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x55,
	0x42, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x53, 0x41, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x53,
	0x53, 0x48, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50,
	0x55, 0x42, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x44, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x03,
	0x12, 0x24, 0x0a, 0x20, 0x53, 0x53, 0x48, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x5f, 0x4b, 0x45, 0x59, 0x10, 0x04, 0x2a, 0x6a, 0x0a, 0x0e, 0x53, 0x51, 0x4c, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x51, 0x4c, 0x5f,
	0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x51,
	0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41,
	0x55, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x51, 0x4c, 0x5f, 0x4d, 0x41, 0x50,
	0x50, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c,
	0x10, 0x02, 0x2a, 0x70, 0x0a, 0x0f, 0x53, 0x51, 0x4c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x51, 0x4c, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x51, 0x4c, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x55,
	0x54, 0x4f, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x51, 0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x41, 0x4e, 0x43,
	0x45, 0x44, 0x10, 0x02, 0x2a, 0x67, 0x0a, 0x0c, 0x53, 0x51, 0x4c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x51, 0x4c, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x57, 0x53, 0x10, 0x02, 0x42, 0x41, 0x5a,
	0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plugins_common_v1_plugin_proto_rawDescOnce sync.Once
	file_plugins_common_v1_plugin_proto_rawDescData = file_plugins_common_v1_plugin_proto_rawDesc
)

func file_plugins_common_v1_plugin_proto_rawDescGZIP() []byte {
	file_plugins_common_v1_plugin_proto_rawDescOnce.Do(func() {
		file_plugins_common_v1_plugin_proto_rawDescData = protoimpl.X.CompressGZIP(file_plugins_common_v1_plugin_proto_rawDescData)
	})
	return file_plugins_common_v1_plugin_proto_rawDescData
}

var file_plugins_common_v1_plugin_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_plugins_common_v1_plugin_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_plugins_common_v1_plugin_proto_goTypes = []interface{}{
	(SSHAuthMethod)(0),                   // 0: plugins.common.v1.SSHAuthMethod
	(SQLMappingMode)(0),                  // 1: plugins.common.v1.SQLMappingMode
	(SQLMatchingMode)(0),                 // 2: plugins.common.v1.SQLMatchingMode
	(SQLOperation)(0),                    // 3: plugins.common.v1.SQLOperation
	(*DynamicWorkflowConfiguration)(nil), // 4: plugins.common.v1.DynamicWorkflowConfiguration
	(*AWSConfig)(nil),                    // 5: plugins.common.v1.AWSConfig
	(*SQLExecution)(nil),                 // 6: plugins.common.v1.SQLExecution
	(*SQLMappedColumns)(nil),             // 7: plugins.common.v1.SQLMappedColumns
	(*SSHConfiguration)(nil),             // 8: plugins.common.v1.SSHConfiguration
	(*SQLBulkEdit)(nil),                  // 9: plugins.common.v1.SQLBulkEdit
	(*AWSConfig_Auth)(nil),               // 10: plugins.common.v1.AWSConfig.Auth
}
var file_plugins_common_v1_plugin_proto_depIdxs = []int32{
	10, // 0: plugins.common.v1.AWSConfig.auth:type_name -> plugins.common.v1.AWSConfig.Auth
	0,  // 1: plugins.common.v1.SSHConfiguration.authentication_method:type_name -> plugins.common.v1.SSHAuthMethod
	2,  // 2: plugins.common.v1.SQLBulkEdit.matching_mode:type_name -> plugins.common.v1.SQLMatchingMode
	1,  // 3: plugins.common.v1.SQLBulkEdit.mapping_mode:type_name -> plugins.common.v1.SQLMappingMode
	7,  // 4: plugins.common.v1.SQLBulkEdit.mapped_columns:type_name -> plugins.common.v1.SQLMappedColumns
	5,  // [5:5] is the sub-list for method output_type
	5,  // [5:5] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_plugins_common_v1_plugin_proto_init() }
func file_plugins_common_v1_plugin_proto_init() {
	if File_plugins_common_v1_plugin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plugins_common_v1_plugin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicWorkflowConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugins_common_v1_plugin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugins_common_v1_plugin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugins_common_v1_plugin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLMappedColumns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugins_common_v1_plugin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugins_common_v1_plugin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLBulkEdit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugins_common_v1_plugin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSConfig_Auth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_plugins_common_v1_plugin_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_plugins_common_v1_plugin_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_plugins_common_v1_plugin_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_plugins_common_v1_plugin_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_plugins_common_v1_plugin_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plugins_common_v1_plugin_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plugins_common_v1_plugin_proto_goTypes,
		DependencyIndexes: file_plugins_common_v1_plugin_proto_depIdxs,
		EnumInfos:         file_plugins_common_v1_plugin_proto_enumTypes,
		MessageInfos:      file_plugins_common_v1_plugin_proto_msgTypes,
	}.Build()
	File_plugins_common_v1_plugin_proto = out.File
	file_plugins_common_v1_plugin_proto_rawDesc = nil
	file_plugins_common_v1_plugin_proto_goTypes = nil
	file_plugins_common_v1_plugin_proto_depIdxs = nil
}
