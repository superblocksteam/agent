// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugins/kafka/v1/plugin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Metadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetadataMultiError, or nil
// if none found.
func (m *Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTopics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetadataValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetadataValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetadataValidationError{
					field:  fmt.Sprintf("Topics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBrokers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetadataValidationError{
						field:  fmt.Sprintf("Brokers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetadataValidationError{
						field:  fmt.Sprintf("Brokers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetadataValidationError{
					field:  fmt.Sprintf("Brokers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MetadataMultiError(errors)
	}

	return nil
}

// MetadataMultiError is an error wrapping multiple validation errors returned
// by Metadata.ValidateAll() if the designated constraints aren't met.
type MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetadataMultiError) AllErrors() []error { return m }

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}

// Validate checks the field values on Broker with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Broker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Broker with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BrokerMultiError, or nil if none found.
func (m *Broker) ValidateAll() error {
	return m.validate(true)
}

func (m *Broker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	// no validation rules for Address

	if len(errors) > 0 {
		return BrokerMultiError(errors)
	}

	return nil
}

// BrokerMultiError is an error wrapping multiple validation errors returned by
// Broker.ValidateAll() if the designated constraints aren't met.
type BrokerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BrokerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BrokerMultiError) AllErrors() []error { return m }

// BrokerValidationError is the validation error returned by Broker.Validate if
// the designated constraints aren't met.
type BrokerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BrokerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BrokerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BrokerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BrokerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BrokerValidationError) ErrorName() string { return "BrokerValidationError" }

// Error satisfies the builtin error interface
func (e BrokerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBroker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BrokerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BrokerValidationError{}

// Validate checks the field values on Topic with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Topic) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Topic with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TopicMultiError, or nil if none found.
func (m *Topic) ValidateAll() error {
	return m.validate(true)
}

func (m *Topic) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return TopicMultiError(errors)
	}

	return nil
}

// TopicMultiError is an error wrapping multiple validation errors returned by
// Topic.ValidateAll() if the designated constraints aren't met.
type TopicMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopicMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopicMultiError) AllErrors() []error { return m }

// TopicValidationError is the validation error returned by Topic.Validate if
// the designated constraints aren't met.
type TopicValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopicValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopicValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopicValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopicValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopicValidationError) ErrorName() string { return "TopicValidationError" }

// Error satisfies the builtin error interface
func (e TopicValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopic.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopicValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopicValidationError{}

// Validate checks the field values on Messages with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Messages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Messages with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MessagesMultiError, or nil
// if none found.
func (m *Messages) ValidateAll() error {
	return m.validate(true)
}

func (m *Messages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessagesValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessagesValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessagesValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MessagesMultiError(errors)
	}

	return nil
}

// MessagesMultiError is an error wrapping multiple validation errors returned
// by Messages.ValidateAll() if the designated constraints aren't met.
type MessagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessagesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessagesMultiError) AllErrors() []error { return m }

// MessagesValidationError is the validation error returned by
// Messages.Validate if the designated constraints aren't met.
type MessagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessagesValidationError) ErrorName() string { return "MessagesValidationError" }

// Error satisfies the builtin error interface
func (e MessagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessagesValidationError{}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MessageMultiError, or nil if none found.
func (m *Message) ValidateAll() error {
	return m.validate(true)
}

func (m *Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Topic

	// no validation rules for Partition

	// no validation rules for Offset

	// no validation rules for Length

	// no validation rules for Attributes

	// no validation rules for Headers

	if m.Timestamp != nil {
		// no validation rules for Timestamp
	}

	if m.Key != nil {

		if all {
			switch v := interface{}(m.GetKey()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  "Key",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  "Key",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Value != nil {

		if all {
			switch v := interface{}(m.GetValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  "Value",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  "Value",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MessageMultiError(errors)
	}

	return nil
}

// MessageMultiError is an error wrapping multiple validation errors returned
// by Message.ValidateAll() if the designated constraints aren't met.
type MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageMultiError) AllErrors() []error { return m }

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}

// Validate checks the field values on SASL with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *SASL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SASL with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SASLMultiError, or nil if none found.
func (m *SASL) ValidateAll() error {
	return m.validate(true)
}

func (m *SASL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mechanism

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.Password != nil {
		// no validation rules for Password
	}

	if m.AccessKeyId != nil {
		// no validation rules for AccessKeyId
	}

	if m.SecretKey != nil {
		// no validation rules for SecretKey
	}

	if m.SessionToken != nil {
		// no validation rules for SessionToken
	}

	if m.AuthorizationIdentity != nil {
		// no validation rules for AuthorizationIdentity
	}

	if len(errors) > 0 {
		return SASLMultiError(errors)
	}

	return nil
}

// SASLMultiError is an error wrapping multiple validation errors returned by
// SASL.ValidateAll() if the designated constraints aren't met.
type SASLMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SASLMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SASLMultiError) AllErrors() []error { return m }

// SASLValidationError is the validation error returned by SASL.Validate if the
// designated constraints aren't met.
type SASLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SASLValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SASLValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SASLValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SASLValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SASLValidationError) ErrorName() string { return "SASLValidationError" }

// Error satisfies the builtin error interface
func (e SASLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSASL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SASLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SASLValidationError{}

// Validate checks the field values on Cluster with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Cluster) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Cluster with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ClusterMultiError, or nil if none found.
func (m *Cluster) ValidateAll() error {
	return m.validate(true)
}

func (m *Cluster) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetBrokers()) < 1 {
		err := ClusterValidationError{
			field:  "Brokers",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Ssl

	if all {
		switch v := interface{}(m.GetSasl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterValidationError{
					field:  "Sasl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterValidationError{
					field:  "Sasl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSasl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterValidationError{
				field:  "Sasl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ClusterMultiError(errors)
	}

	return nil
}

// ClusterMultiError is an error wrapping multiple validation errors returned
// by Cluster.ValidateAll() if the designated constraints aren't met.
type ClusterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterMultiError) AllErrors() []error { return m }

// ClusterValidationError is the validation error returned by Cluster.Validate
// if the designated constraints aren't met.
type ClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterValidationError) ErrorName() string { return "ClusterValidationError" }

// Error satisfies the builtin error interface
func (e ClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterValidationError{}

// Validate checks the field values on Plugin with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plugin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PluginMultiError, or nil if none found.
func (m *Plugin) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Operation

	if all {
		switch v := interface{}(m.GetProduce()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Produce",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Produce",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProduce()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PluginValidationError{
				field:  "Produce",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConsume()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Consume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Consume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsume()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PluginValidationError{
				field:  "Consume",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PluginValidationError{
				field:  "Cluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSuperblocksMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "SuperblocksMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "SuperblocksMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuperblocksMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PluginValidationError{
				field:  "SuperblocksMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.DynamicWorkflowConfiguration != nil {

		if all {
			switch v := interface{}(m.GetDynamicWorkflowConfiguration()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DynamicWorkflowConfiguration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DynamicWorkflowConfiguration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDynamicWorkflowConfiguration()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "DynamicWorkflowConfiguration",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PluginMultiError(errors)
	}

	return nil
}

// PluginMultiError is an error wrapping multiple validation errors returned by
// Plugin.ValidateAll() if the designated constraints aren't met.
type PluginMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PluginMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PluginMultiError) AllErrors() []error { return m }

// PluginValidationError is the validation error returned by Plugin.Validate if
// the designated constraints aren't met.
type PluginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginValidationError) ErrorName() string { return "PluginValidationError" }

// Error satisfies the builtin error interface
func (e PluginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginValidationError{}

// Validate checks the field values on SuperblocksMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuperblocksMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuperblocksMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuperblocksMetadataMultiError, or nil if none found.
func (m *SuperblocksMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *SuperblocksMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PluginVersion != nil {
		// no validation rules for PluginVersion
	}

	if m.SyncedFromProfileId != nil {
		// no validation rules for SyncedFromProfileId
	}

	if len(errors) > 0 {
		return SuperblocksMetadataMultiError(errors)
	}

	return nil
}

// SuperblocksMetadataMultiError is an error wrapping multiple validation
// errors returned by SuperblocksMetadata.ValidateAll() if the designated
// constraints aren't met.
type SuperblocksMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuperblocksMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuperblocksMetadataMultiError) AllErrors() []error { return m }

// SuperblocksMetadataValidationError is the validation error returned by
// SuperblocksMetadata.Validate if the designated constraints aren't met.
type SuperblocksMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuperblocksMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuperblocksMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuperblocksMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuperblocksMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuperblocksMetadataValidationError) ErrorName() string {
	return "SuperblocksMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e SuperblocksMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuperblocksMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuperblocksMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuperblocksMetadataValidationError{}

// Validate checks the field values on Metadata_Minified with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Metadata_Minified) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Metadata_Minified with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Metadata_MinifiedMultiError, or nil if none found.
func (m *Metadata_Minified) ValidateAll() error {
	return m.validate(true)
}

func (m *Metadata_Minified) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Metadata_MinifiedMultiError(errors)
	}

	return nil
}

// Metadata_MinifiedMultiError is an error wrapping multiple validation errors
// returned by Metadata_Minified.ValidateAll() if the designated constraints
// aren't met.
type Metadata_MinifiedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Metadata_MinifiedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Metadata_MinifiedMultiError) AllErrors() []error { return m }

// Metadata_MinifiedValidationError is the validation error returned by
// Metadata_Minified.Validate if the designated constraints aren't met.
type Metadata_MinifiedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Metadata_MinifiedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Metadata_MinifiedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Metadata_MinifiedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Metadata_MinifiedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Metadata_MinifiedValidationError) ErrorName() string {
	return "Metadata_MinifiedValidationError"
}

// Error satisfies the builtin error interface
func (e Metadata_MinifiedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata_Minified.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Metadata_MinifiedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Metadata_MinifiedValidationError{}

// Validate checks the field values on Plugin_Consume with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plugin_Consume) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_Consume with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Plugin_ConsumeMultiError,
// or nil if none found.
func (m *Plugin_Consume) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_Consume) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _Plugin_Consume_From_NotInLookup[m.GetFrom()]; ok {
		err := Plugin_ConsumeValidationError{
			field:  "From",
			reason: "value must not be in list [FROM_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Topic

	if all {
		switch v := interface{}(m.GetSeek()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Plugin_ConsumeValidationError{
					field:  "Seek",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Plugin_ConsumeValidationError{
					field:  "Seek",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSeek()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Plugin_ConsumeValidationError{
				field:  "Seek",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ReadUncommitted

	if m.GroupId != nil {
		// no validation rules for GroupId
	}

	if m.ClientId != nil {
		// no validation rules for ClientId
	}

	if len(errors) > 0 {
		return Plugin_ConsumeMultiError(errors)
	}

	return nil
}

// Plugin_ConsumeMultiError is an error wrapping multiple validation errors
// returned by Plugin_Consume.ValidateAll() if the designated constraints
// aren't met.
type Plugin_ConsumeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_ConsumeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_ConsumeMultiError) AllErrors() []error { return m }

// Plugin_ConsumeValidationError is the validation error returned by
// Plugin_Consume.Validate if the designated constraints aren't met.
type Plugin_ConsumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_ConsumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_ConsumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_ConsumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_ConsumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_ConsumeValidationError) ErrorName() string { return "Plugin_ConsumeValidationError" }

// Error satisfies the builtin error interface
func (e Plugin_ConsumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_Consume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_ConsumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_ConsumeValidationError{}

var _Plugin_Consume_From_NotInLookup = map[Plugin_Consume_From]struct{}{
	0: {},
}

// Validate checks the field values on Plugin_Produce with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plugin_Produce) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_Produce with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Plugin_ProduceMultiError,
// or nil if none found.
func (m *Plugin_Produce) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_Produce) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Acks

	// no validation rules for AutoCreateTopic

	// no validation rules for Idempotent

	// no validation rules for Transaction

	// no validation rules for Messages

	if m.ClientId != nil {
		// no validation rules for ClientId
	}

	if m.Timeout != nil {
		// no validation rules for Timeout
	}

	if m.Compression != nil {
		// no validation rules for Compression
	}

	if m.TransactionId != nil {
		// no validation rules for TransactionId
	}

	if len(errors) > 0 {
		return Plugin_ProduceMultiError(errors)
	}

	return nil
}

// Plugin_ProduceMultiError is an error wrapping multiple validation errors
// returned by Plugin_Produce.ValidateAll() if the designated constraints
// aren't met.
type Plugin_ProduceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_ProduceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_ProduceMultiError) AllErrors() []error { return m }

// Plugin_ProduceValidationError is the validation error returned by
// Plugin_Produce.Validate if the designated constraints aren't met.
type Plugin_ProduceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_ProduceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_ProduceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_ProduceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_ProduceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_ProduceValidationError) ErrorName() string { return "Plugin_ProduceValidationError" }

// Error satisfies the builtin error interface
func (e Plugin_ProduceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_Produce.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_ProduceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_ProduceValidationError{}

// Validate checks the field values on Plugin_Consume_Seek with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_Consume_Seek) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_Consume_Seek with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_Consume_SeekMultiError, or nil if none found.
func (m *Plugin_Consume_Seek) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_Consume_Seek) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTopic()) < 1 {
		err := Plugin_Consume_SeekValidationError{
			field:  "Topic",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Offset

	// no validation rules for Partition

	if len(errors) > 0 {
		return Plugin_Consume_SeekMultiError(errors)
	}

	return nil
}

// Plugin_Consume_SeekMultiError is an error wrapping multiple validation
// errors returned by Plugin_Consume_Seek.ValidateAll() if the designated
// constraints aren't met.
type Plugin_Consume_SeekMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_Consume_SeekMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_Consume_SeekMultiError) AllErrors() []error { return m }

// Plugin_Consume_SeekValidationError is the validation error returned by
// Plugin_Consume_Seek.Validate if the designated constraints aren't met.
type Plugin_Consume_SeekValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_Consume_SeekValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_Consume_SeekValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_Consume_SeekValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_Consume_SeekValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_Consume_SeekValidationError) ErrorName() string {
	return "Plugin_Consume_SeekValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_Consume_SeekValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_Consume_Seek.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_Consume_SeekValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_Consume_SeekValidationError{}
