// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugins/adls/v1/plugin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Plugin with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plugin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PluginMultiError, or nil if none found.
func (m *Plugin) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConnection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PluginValidationError{
				field:  "Connection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.AdlsAction.(type) {
	case *Plugin_CreateContainer_:
		if v == nil {
			err := PluginValidationError{
				field:  "AdlsAction",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCreateContainer()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "CreateContainer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "CreateContainer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreateContainer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "CreateContainer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Plugin_CreateDirectory_:
		if v == nil {
			err := PluginValidationError{
				field:  "AdlsAction",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCreateDirectory()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "CreateDirectory",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "CreateDirectory",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreateDirectory()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "CreateDirectory",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Plugin_RenameDirectory_:
		if v == nil {
			err := PluginValidationError{
				field:  "AdlsAction",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRenameDirectory()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "RenameDirectory",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "RenameDirectory",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRenameDirectory()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "RenameDirectory",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Plugin_DeleteDirectory_:
		if v == nil {
			err := PluginValidationError{
				field:  "AdlsAction",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDeleteDirectory()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DeleteDirectory",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DeleteDirectory",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeleteDirectory()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "DeleteDirectory",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Plugin_ListDirectoryContents_:
		if v == nil {
			err := PluginValidationError{
				field:  "AdlsAction",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetListDirectoryContents()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "ListDirectoryContents",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "ListDirectoryContents",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListDirectoryContents()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "ListDirectoryContents",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Plugin_UploadFile_:
		if v == nil {
			err := PluginValidationError{
				field:  "AdlsAction",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUploadFile()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "UploadFile",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "UploadFile",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUploadFile()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "UploadFile",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Plugin_DownloadFile_:
		if v == nil {
			err := PluginValidationError{
				field:  "AdlsAction",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDownloadFile()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DownloadFile",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DownloadFile",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDownloadFile()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "DownloadFile",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Plugin_DeleteFile_:
		if v == nil {
			err := PluginValidationError{
				field:  "AdlsAction",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDeleteFile()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DeleteFile",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DeleteFile",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeleteFile()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "DeleteFile",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.DynamicWorkflowConfiguration != nil {

		if all {
			switch v := interface{}(m.GetDynamicWorkflowConfiguration()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DynamicWorkflowConfiguration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DynamicWorkflowConfiguration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDynamicWorkflowConfiguration()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "DynamicWorkflowConfiguration",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PluginMultiError(errors)
	}

	return nil
}

// PluginMultiError is an error wrapping multiple validation errors returned by
// Plugin.ValidateAll() if the designated constraints aren't met.
type PluginMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PluginMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PluginMultiError) AllErrors() []error { return m }

// PluginValidationError is the validation error returned by Plugin.Validate if
// the designated constraints aren't met.
type PluginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginValidationError) ErrorName() string { return "PluginValidationError" }

// Error satisfies the builtin error interface
func (e PluginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginValidationError{}

// Validate checks the field values on Plugin_AdlsConnection with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_AdlsConnection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_AdlsConnection with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_AdlsConnectionMultiError, or nil if none found.
func (m *Plugin_AdlsConnection) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_AdlsConnection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountName

	// no validation rules for Tenant

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Plugin_AdlsConnectionValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Plugin_AdlsConnectionValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Plugin_AdlsConnectionValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Plugin_AdlsConnectionMultiError(errors)
	}

	return nil
}

// Plugin_AdlsConnectionMultiError is an error wrapping multiple validation
// errors returned by Plugin_AdlsConnection.ValidateAll() if the designated
// constraints aren't met.
type Plugin_AdlsConnectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_AdlsConnectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_AdlsConnectionMultiError) AllErrors() []error { return m }

// Plugin_AdlsConnectionValidationError is the validation error returned by
// Plugin_AdlsConnection.Validate if the designated constraints aren't met.
type Plugin_AdlsConnectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_AdlsConnectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_AdlsConnectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_AdlsConnectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_AdlsConnectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_AdlsConnectionValidationError) ErrorName() string {
	return "Plugin_AdlsConnectionValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_AdlsConnectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_AdlsConnection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_AdlsConnectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_AdlsConnectionValidationError{}

// Validate checks the field values on Plugin_CreateContainer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_CreateContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_CreateContainer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_CreateContainerMultiError, or nil if none found.
func (m *Plugin_CreateContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_CreateContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileSystem

	if len(errors) > 0 {
		return Plugin_CreateContainerMultiError(errors)
	}

	return nil
}

// Plugin_CreateContainerMultiError is an error wrapping multiple validation
// errors returned by Plugin_CreateContainer.ValidateAll() if the designated
// constraints aren't met.
type Plugin_CreateContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_CreateContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_CreateContainerMultiError) AllErrors() []error { return m }

// Plugin_CreateContainerValidationError is the validation error returned by
// Plugin_CreateContainer.Validate if the designated constraints aren't met.
type Plugin_CreateContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_CreateContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_CreateContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_CreateContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_CreateContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_CreateContainerValidationError) ErrorName() string {
	return "Plugin_CreateContainerValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_CreateContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_CreateContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_CreateContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_CreateContainerValidationError{}

// Validate checks the field values on Plugin_CreateDirectory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_CreateDirectory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_CreateDirectory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_CreateDirectoryMultiError, or nil if none found.
func (m *Plugin_CreateDirectory) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_CreateDirectory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileSystem

	// no validation rules for Path

	if len(errors) > 0 {
		return Plugin_CreateDirectoryMultiError(errors)
	}

	return nil
}

// Plugin_CreateDirectoryMultiError is an error wrapping multiple validation
// errors returned by Plugin_CreateDirectory.ValidateAll() if the designated
// constraints aren't met.
type Plugin_CreateDirectoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_CreateDirectoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_CreateDirectoryMultiError) AllErrors() []error { return m }

// Plugin_CreateDirectoryValidationError is the validation error returned by
// Plugin_CreateDirectory.Validate if the designated constraints aren't met.
type Plugin_CreateDirectoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_CreateDirectoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_CreateDirectoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_CreateDirectoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_CreateDirectoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_CreateDirectoryValidationError) ErrorName() string {
	return "Plugin_CreateDirectoryValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_CreateDirectoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_CreateDirectory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_CreateDirectoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_CreateDirectoryValidationError{}

// Validate checks the field values on Plugin_RenameDirectory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_RenameDirectory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_RenameDirectory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_RenameDirectoryMultiError, or nil if none found.
func (m *Plugin_RenameDirectory) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_RenameDirectory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileSystem

	// no validation rules for Path

	// no validation rules for NewPath

	if len(errors) > 0 {
		return Plugin_RenameDirectoryMultiError(errors)
	}

	return nil
}

// Plugin_RenameDirectoryMultiError is an error wrapping multiple validation
// errors returned by Plugin_RenameDirectory.ValidateAll() if the designated
// constraints aren't met.
type Plugin_RenameDirectoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_RenameDirectoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_RenameDirectoryMultiError) AllErrors() []error { return m }

// Plugin_RenameDirectoryValidationError is the validation error returned by
// Plugin_RenameDirectory.Validate if the designated constraints aren't met.
type Plugin_RenameDirectoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_RenameDirectoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_RenameDirectoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_RenameDirectoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_RenameDirectoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_RenameDirectoryValidationError) ErrorName() string {
	return "Plugin_RenameDirectoryValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_RenameDirectoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_RenameDirectory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_RenameDirectoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_RenameDirectoryValidationError{}

// Validate checks the field values on Plugin_DeleteDirectory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_DeleteDirectory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_DeleteDirectory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_DeleteDirectoryMultiError, or nil if none found.
func (m *Plugin_DeleteDirectory) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_DeleteDirectory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileSystem

	// no validation rules for Path

	if len(errors) > 0 {
		return Plugin_DeleteDirectoryMultiError(errors)
	}

	return nil
}

// Plugin_DeleteDirectoryMultiError is an error wrapping multiple validation
// errors returned by Plugin_DeleteDirectory.ValidateAll() if the designated
// constraints aren't met.
type Plugin_DeleteDirectoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_DeleteDirectoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_DeleteDirectoryMultiError) AllErrors() []error { return m }

// Plugin_DeleteDirectoryValidationError is the validation error returned by
// Plugin_DeleteDirectory.Validate if the designated constraints aren't met.
type Plugin_DeleteDirectoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_DeleteDirectoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_DeleteDirectoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_DeleteDirectoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_DeleteDirectoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_DeleteDirectoryValidationError) ErrorName() string {
	return "Plugin_DeleteDirectoryValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_DeleteDirectoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_DeleteDirectory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_DeleteDirectoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_DeleteDirectoryValidationError{}

// Validate checks the field values on Plugin_ListDirectoryContents with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_ListDirectoryContents) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_ListDirectoryContents with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_ListDirectoryContentsMultiError, or nil if none found.
func (m *Plugin_ListDirectoryContents) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_ListDirectoryContents) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileSystem

	// no validation rules for Path

	if len(errors) > 0 {
		return Plugin_ListDirectoryContentsMultiError(errors)
	}

	return nil
}

// Plugin_ListDirectoryContentsMultiError is an error wrapping multiple
// validation errors returned by Plugin_ListDirectoryContents.ValidateAll() if
// the designated constraints aren't met.
type Plugin_ListDirectoryContentsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_ListDirectoryContentsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_ListDirectoryContentsMultiError) AllErrors() []error { return m }

// Plugin_ListDirectoryContentsValidationError is the validation error returned
// by Plugin_ListDirectoryContents.Validate if the designated constraints
// aren't met.
type Plugin_ListDirectoryContentsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_ListDirectoryContentsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_ListDirectoryContentsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_ListDirectoryContentsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_ListDirectoryContentsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_ListDirectoryContentsValidationError) ErrorName() string {
	return "Plugin_ListDirectoryContentsValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_ListDirectoryContentsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_ListDirectoryContents.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_ListDirectoryContentsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_ListDirectoryContentsValidationError{}

// Validate checks the field values on Plugin_UploadFile with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Plugin_UploadFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_UploadFile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_UploadFileMultiError, or nil if none found.
func (m *Plugin_UploadFile) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_UploadFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileSystem

	// no validation rules for Path

	// no validation rules for Content

	if len(errors) > 0 {
		return Plugin_UploadFileMultiError(errors)
	}

	return nil
}

// Plugin_UploadFileMultiError is an error wrapping multiple validation errors
// returned by Plugin_UploadFile.ValidateAll() if the designated constraints
// aren't met.
type Plugin_UploadFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_UploadFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_UploadFileMultiError) AllErrors() []error { return m }

// Plugin_UploadFileValidationError is the validation error returned by
// Plugin_UploadFile.Validate if the designated constraints aren't met.
type Plugin_UploadFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_UploadFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_UploadFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_UploadFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_UploadFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_UploadFileValidationError) ErrorName() string {
	return "Plugin_UploadFileValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_UploadFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_UploadFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_UploadFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_UploadFileValidationError{}

// Validate checks the field values on Plugin_DownloadFile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_DownloadFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_DownloadFile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_DownloadFileMultiError, or nil if none found.
func (m *Plugin_DownloadFile) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_DownloadFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileSystem

	// no validation rules for Path

	if len(errors) > 0 {
		return Plugin_DownloadFileMultiError(errors)
	}

	return nil
}

// Plugin_DownloadFileMultiError is an error wrapping multiple validation
// errors returned by Plugin_DownloadFile.ValidateAll() if the designated
// constraints aren't met.
type Plugin_DownloadFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_DownloadFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_DownloadFileMultiError) AllErrors() []error { return m }

// Plugin_DownloadFileValidationError is the validation error returned by
// Plugin_DownloadFile.Validate if the designated constraints aren't met.
type Plugin_DownloadFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_DownloadFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_DownloadFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_DownloadFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_DownloadFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_DownloadFileValidationError) ErrorName() string {
	return "Plugin_DownloadFileValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_DownloadFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_DownloadFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_DownloadFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_DownloadFileValidationError{}

// Validate checks the field values on Plugin_DeleteFile with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Plugin_DeleteFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_DeleteFile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_DeleteFileMultiError, or nil if none found.
func (m *Plugin_DeleteFile) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_DeleteFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileSystem

	// no validation rules for Path

	if len(errors) > 0 {
		return Plugin_DeleteFileMultiError(errors)
	}

	return nil
}

// Plugin_DeleteFileMultiError is an error wrapping multiple validation errors
// returned by Plugin_DeleteFile.ValidateAll() if the designated constraints
// aren't met.
type Plugin_DeleteFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_DeleteFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_DeleteFileMultiError) AllErrors() []error { return m }

// Plugin_DeleteFileValidationError is the validation error returned by
// Plugin_DeleteFile.Validate if the designated constraints aren't met.
type Plugin_DeleteFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_DeleteFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_DeleteFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_DeleteFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_DeleteFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_DeleteFileValidationError) ErrorName() string {
	return "Plugin_DeleteFileValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_DeleteFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_DeleteFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_DeleteFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_DeleteFileValidationError{}

// Validate checks the field values on Plugin_Metadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Plugin_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_Metadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_MetadataMultiError, or nil if none found.
func (m *Plugin_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Plugin_MetadataMultiError(errors)
	}

	return nil
}

// Plugin_MetadataMultiError is an error wrapping multiple validation errors
// returned by Plugin_Metadata.ValidateAll() if the designated constraints
// aren't met.
type Plugin_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_MetadataMultiError) AllErrors() []error { return m }

// Plugin_MetadataValidationError is the validation error returned by
// Plugin_Metadata.Validate if the designated constraints aren't met.
type Plugin_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_MetadataValidationError) ErrorName() string { return "Plugin_MetadataValidationError" }

// Error satisfies the builtin error interface
func (e Plugin_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_MetadataValidationError{}
