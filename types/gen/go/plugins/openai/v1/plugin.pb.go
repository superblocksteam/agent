// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: plugins/openai/v1/plugin.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SuperblocksMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PluginVersion string `protobuf:"bytes,1,opt,name=pluginVersion,proto3" json:"pluginVersion,omitempty"`
}

func (x *SuperblocksMetadata) Reset() {
	*x = SuperblocksMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugins_openai_v1_plugin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperblocksMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperblocksMetadata) ProtoMessage() {}

func (x *SuperblocksMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_openai_v1_plugin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperblocksMetadata.ProtoReflect.Descriptor instead.
func (*SuperblocksMetadata) Descriptor() ([]byte, []int) {
	return file_plugins_openai_v1_plugin_proto_rawDescGZIP(), []int{0}
}

func (x *SuperblocksMetadata) GetPluginVersion() string {
	if x != nil {
		return x.PluginVersion
	}
	return ""
}

type Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key          string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value        int32    `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Editable     bool     `protobuf:"varint,3,opt,name=editable,proto3" json:"editable,omitempty"`
	Internal     bool     `protobuf:"varint,4,opt,name=internal,proto3" json:"internal,omitempty"`
	Description  string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Mandatory    bool     `protobuf:"varint,6,opt,name=mandatory,proto3" json:"mandatory,omitempty"`
	Type         string   `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	DefaultValue string   `protobuf:"bytes,8,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
	MinRange     string   `protobuf:"bytes,9,opt,name=minRange,proto3" json:"minRange,omitempty"`
	MaxRange     string   `protobuf:"bytes,10,opt,name=maxRange,proto3" json:"maxRange,omitempty"`
	ValueOptions []string `protobuf:"bytes,11,rep,name=valueOptions,proto3" json:"valueOptions,omitempty"`
}

func (x *Property) Reset() {
	*x = Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugins_openai_v1_plugin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_openai_v1_plugin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_plugins_openai_v1_plugin_proto_rawDescGZIP(), []int{1}
}

func (x *Property) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Property) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Property) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

func (x *Property) GetInternal() bool {
	if x != nil {
		return x.Internal
	}
	return false
}

func (x *Property) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Property) GetMandatory() bool {
	if x != nil {
		return x.Mandatory
	}
	return false
}

func (x *Property) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Property) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *Property) GetMinRange() string {
	if x != nil {
		return x.MinRange
	}
	return ""
}

func (x *Property) GetMaxRange() string {
	if x != nil {
		return x.MaxRange
	}
	return ""
}

func (x *Property) GetValueOptions() []string {
	if x != nil {
		return x.ValueOptions
	}
	return nil
}

type Custom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresignedExpiration *Property `protobuf:"bytes,1,opt,name=presignedExpiration,proto3" json:"presignedExpiration,omitempty"`
}

func (x *Custom) Reset() {
	*x = Custom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugins_openai_v1_plugin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Custom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Custom) ProtoMessage() {}

func (x *Custom) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_openai_v1_plugin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Custom.ProtoReflect.Descriptor instead.
func (*Custom) Descriptor() ([]byte, []int) {
	return file_plugins_openai_v1_plugin_proto_rawDescGZIP(), []int{2}
}

func (x *Custom) GetPresignedExpiration() *Property {
	if x != nil {
		return x.PresignedExpiration
	}
	return nil
}

type Plugin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action                                        string  `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	GenerateChatGptResponsePrompt                 *string `protobuf:"bytes,2,opt,name=generateChatGptResponsePrompt,proto3,oneof" json:"generateChatGptResponsePrompt,omitempty"`
	GenerateChatGptResponseMessageHistory         *string `protobuf:"bytes,3,opt,name=generateChatGptResponseMessageHistory,proto3,oneof" json:"generateChatGptResponseMessageHistory,omitempty"`
	GenerateChatGptResponseSystemInstruction      *string `protobuf:"bytes,4,opt,name=generateChatGptResponseSystemInstruction,proto3,oneof" json:"generateChatGptResponseSystemInstruction,omitempty"`
	GenerateTextType                              *string `protobuf:"bytes,5,opt,name=generateTextType,proto3,oneof" json:"generateTextType,omitempty"`
	GenerateTextNewTextPrompt                     *string `protobuf:"bytes,6,opt,name=generateTextNewTextPrompt,proto3,oneof" json:"generateTextNewTextPrompt,omitempty"`
	GenerateTextEditTextTextToEdit                *string `protobuf:"bytes,7,opt,name=generateTextEditTextTextToEdit,proto3,oneof" json:"generateTextEditTextTextToEdit,omitempty"`
	GenerateTextEditTextPrompt                    *string `protobuf:"bytes,8,opt,name=generateTextEditTextPrompt,proto3,oneof" json:"generateTextEditTextPrompt,omitempty"`
	GenerateCodeType                              *string `protobuf:"bytes,9,opt,name=generateCodeType,proto3,oneof" json:"generateCodeType,omitempty"`
	GenerateCodeNewCodePrompt                     *string `protobuf:"bytes,10,opt,name=generateCodeNewCodePrompt,proto3,oneof" json:"generateCodeNewCodePrompt,omitempty"`
	GenerateCodeEditCodeCodeToEdit                *string `protobuf:"bytes,11,opt,name=generateCodeEditCodeCodeToEdit,proto3,oneof" json:"generateCodeEditCodeCodeToEdit,omitempty"`
	GenerateCodeEditCodePrompt                    *string `protobuf:"bytes,12,opt,name=generateCodeEditCodePrompt,proto3,oneof" json:"generateCodeEditCodePrompt,omitempty"`
	CheckModerationText                           *string `protobuf:"bytes,13,opt,name=checkModerationText,proto3,oneof" json:"checkModerationText,omitempty"`
	EmbeddingText                                 *string `protobuf:"bytes,14,opt,name=embeddingText,proto3,oneof" json:"embeddingText,omitempty"`
	GenerateImageMethod                           *string `protobuf:"bytes,15,opt,name=generateImageMethod,proto3,oneof" json:"generateImageMethod,omitempty"`
	GenerateImageGenerateFromPromptPrompt         *string `protobuf:"bytes,16,opt,name=generateImageGenerateFromPromptPrompt,proto3,oneof" json:"generateImageGenerateFromPromptPrompt,omitempty"`
	GenerateImageGenerateFromPromptImageImageSize *string `protobuf:"bytes,17,opt,name=generateImageGenerateFromPromptImageImageSize,proto3,oneof" json:"generateImageGenerateFromPromptImageImageSize,omitempty"`
	GenerateImageEditImagePrompt                  *string `protobuf:"bytes,18,opt,name=generateImageEditImagePrompt,proto3,oneof" json:"generateImageEditImagePrompt,omitempty"`
	GenerateImageEditImageImageFileToEdit         *string `protobuf:"bytes,19,opt,name=generateImageEditImageImageFileToEdit,proto3,oneof" json:"generateImageEditImageImageFileToEdit,omitempty"`
	GenerateImageEditImageImageMask               *string `protobuf:"bytes,20,opt,name=generateImageEditImageImageMask,proto3,oneof" json:"generateImageEditImageImageMask,omitempty"`
	GenerateImageEditImageImageSizes              *string `protobuf:"bytes,21,opt,name=generateImageEditImageImageSizes,proto3,oneof" json:"generateImageEditImageImageSizes,omitempty"`
	GenerateImageVaryImageImageFile               *string `protobuf:"bytes,22,opt,name=generateImageVaryImageImageFile,proto3,oneof" json:"generateImageVaryImageImageFile,omitempty"`
	GenerateImageVaryImageImageSize               *string `protobuf:"bytes,23,opt,name=generateImageVaryImageImageSize,proto3,oneof" json:"generateImageVaryImageImageSize,omitempty"`
	TranscribeAudioToTextAudioFile                *string `protobuf:"bytes,24,opt,name=transcribeAudioToTextAudioFile,proto3,oneof" json:"transcribeAudioToTextAudioFile,omitempty"`
	TranscribeAudioToTextInputLanguage            *string `protobuf:"bytes,25,opt,name=transcribeAudioToTextInputLanguage,proto3,oneof" json:"transcribeAudioToTextInputLanguage,omitempty"`
	// This is not a string because it is not a binding! Yay!
	TranscribeAudioToTextTranslateToEnglish bool    `protobuf:"varint,26,opt,name=transcribeAudioToTextTranslateToEnglish,proto3" json:"transcribeAudioToTextTranslateToEnglish,omitempty"`
	GenerateChatGPTResponseAiModel          *string `protobuf:"bytes,27,opt,name=generateChatGPTResponseAiModel,proto3,oneof" json:"generateChatGPTResponseAiModel,omitempty"`
	GenerateTextNewTextAiModel              *string `protobuf:"bytes,28,opt,name=generateTextNewTextAiModel,proto3,oneof" json:"generateTextNewTextAiModel,omitempty"`
	GenerateTextEditTextAiModel             *string `protobuf:"bytes,29,opt,name=generateTextEditTextAiModel,proto3,oneof" json:"generateTextEditTextAiModel,omitempty"`
	GenerateCodeNewCodeAiModel              *string `protobuf:"bytes,30,opt,name=generateCodeNewCodeAiModel,proto3,oneof" json:"generateCodeNewCodeAiModel,omitempty"`
	GenerateCodeEditCodeAiModel             *string `protobuf:"bytes,31,opt,name=generateCodeEditCodeAiModel,proto3,oneof" json:"generateCodeEditCodeAiModel,omitempty"`
	CheckModerationAiModel                  *string `protobuf:"bytes,32,opt,name=checkModerationAiModel,proto3,oneof" json:"checkModerationAiModel,omitempty"`
	GenerateTextEmbeddingAiModel            *string `protobuf:"bytes,33,opt,name=generateTextEmbeddingAiModel,proto3,oneof" json:"generateTextEmbeddingAiModel,omitempty"`
	TranscribeAudioToTextAiModel            *string `protobuf:"bytes,34,opt,name=transcribeAudioToTextAiModel,proto3,oneof" json:"transcribeAudioToTextAiModel,omitempty"`
	// Super confusing - these fields might be bindings
	// Otherwise, they should be ints
	GenerateChatGptResponseMaxTokens *string              `protobuf:"bytes,35,opt,name=generateChatGptResponseMaxTokens,proto3,oneof" json:"generateChatGptResponseMaxTokens,omitempty"`
	GenerateTextNewTextMaxTokens     *string              `protobuf:"bytes,36,opt,name=generateTextNewTextMaxTokens,proto3,oneof" json:"generateTextNewTextMaxTokens,omitempty"`
	AiModel                          *string              `protobuf:"bytes,37,opt,name=aiModel,proto3,oneof" json:"aiModel,omitempty"`
	SuperblocksMetadata              *SuperblocksMetadata `protobuf:"bytes,38,opt,name=superblocksMetadata,proto3" json:"superblocksMetadata,omitempty"`
}

func (x *Plugin) Reset() {
	*x = Plugin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugins_openai_v1_plugin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plugin) ProtoMessage() {}

func (x *Plugin) ProtoReflect() protoreflect.Message {
	mi := &file_plugins_openai_v1_plugin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plugin.ProtoReflect.Descriptor instead.
func (*Plugin) Descriptor() ([]byte, []int) {
	return file_plugins_openai_v1_plugin_proto_rawDescGZIP(), []int{3}
}

func (x *Plugin) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Plugin) GetGenerateChatGptResponsePrompt() string {
	if x != nil && x.GenerateChatGptResponsePrompt != nil {
		return *x.GenerateChatGptResponsePrompt
	}
	return ""
}

func (x *Plugin) GetGenerateChatGptResponseMessageHistory() string {
	if x != nil && x.GenerateChatGptResponseMessageHistory != nil {
		return *x.GenerateChatGptResponseMessageHistory
	}
	return ""
}

func (x *Plugin) GetGenerateChatGptResponseSystemInstruction() string {
	if x != nil && x.GenerateChatGptResponseSystemInstruction != nil {
		return *x.GenerateChatGptResponseSystemInstruction
	}
	return ""
}

func (x *Plugin) GetGenerateTextType() string {
	if x != nil && x.GenerateTextType != nil {
		return *x.GenerateTextType
	}
	return ""
}

func (x *Plugin) GetGenerateTextNewTextPrompt() string {
	if x != nil && x.GenerateTextNewTextPrompt != nil {
		return *x.GenerateTextNewTextPrompt
	}
	return ""
}

func (x *Plugin) GetGenerateTextEditTextTextToEdit() string {
	if x != nil && x.GenerateTextEditTextTextToEdit != nil {
		return *x.GenerateTextEditTextTextToEdit
	}
	return ""
}

func (x *Plugin) GetGenerateTextEditTextPrompt() string {
	if x != nil && x.GenerateTextEditTextPrompt != nil {
		return *x.GenerateTextEditTextPrompt
	}
	return ""
}

func (x *Plugin) GetGenerateCodeType() string {
	if x != nil && x.GenerateCodeType != nil {
		return *x.GenerateCodeType
	}
	return ""
}

func (x *Plugin) GetGenerateCodeNewCodePrompt() string {
	if x != nil && x.GenerateCodeNewCodePrompt != nil {
		return *x.GenerateCodeNewCodePrompt
	}
	return ""
}

func (x *Plugin) GetGenerateCodeEditCodeCodeToEdit() string {
	if x != nil && x.GenerateCodeEditCodeCodeToEdit != nil {
		return *x.GenerateCodeEditCodeCodeToEdit
	}
	return ""
}

func (x *Plugin) GetGenerateCodeEditCodePrompt() string {
	if x != nil && x.GenerateCodeEditCodePrompt != nil {
		return *x.GenerateCodeEditCodePrompt
	}
	return ""
}

func (x *Plugin) GetCheckModerationText() string {
	if x != nil && x.CheckModerationText != nil {
		return *x.CheckModerationText
	}
	return ""
}

func (x *Plugin) GetEmbeddingText() string {
	if x != nil && x.EmbeddingText != nil {
		return *x.EmbeddingText
	}
	return ""
}

func (x *Plugin) GetGenerateImageMethod() string {
	if x != nil && x.GenerateImageMethod != nil {
		return *x.GenerateImageMethod
	}
	return ""
}

func (x *Plugin) GetGenerateImageGenerateFromPromptPrompt() string {
	if x != nil && x.GenerateImageGenerateFromPromptPrompt != nil {
		return *x.GenerateImageGenerateFromPromptPrompt
	}
	return ""
}

func (x *Plugin) GetGenerateImageGenerateFromPromptImageImageSize() string {
	if x != nil && x.GenerateImageGenerateFromPromptImageImageSize != nil {
		return *x.GenerateImageGenerateFromPromptImageImageSize
	}
	return ""
}

func (x *Plugin) GetGenerateImageEditImagePrompt() string {
	if x != nil && x.GenerateImageEditImagePrompt != nil {
		return *x.GenerateImageEditImagePrompt
	}
	return ""
}

func (x *Plugin) GetGenerateImageEditImageImageFileToEdit() string {
	if x != nil && x.GenerateImageEditImageImageFileToEdit != nil {
		return *x.GenerateImageEditImageImageFileToEdit
	}
	return ""
}

func (x *Plugin) GetGenerateImageEditImageImageMask() string {
	if x != nil && x.GenerateImageEditImageImageMask != nil {
		return *x.GenerateImageEditImageImageMask
	}
	return ""
}

func (x *Plugin) GetGenerateImageEditImageImageSizes() string {
	if x != nil && x.GenerateImageEditImageImageSizes != nil {
		return *x.GenerateImageEditImageImageSizes
	}
	return ""
}

func (x *Plugin) GetGenerateImageVaryImageImageFile() string {
	if x != nil && x.GenerateImageVaryImageImageFile != nil {
		return *x.GenerateImageVaryImageImageFile
	}
	return ""
}

func (x *Plugin) GetGenerateImageVaryImageImageSize() string {
	if x != nil && x.GenerateImageVaryImageImageSize != nil {
		return *x.GenerateImageVaryImageImageSize
	}
	return ""
}

func (x *Plugin) GetTranscribeAudioToTextAudioFile() string {
	if x != nil && x.TranscribeAudioToTextAudioFile != nil {
		return *x.TranscribeAudioToTextAudioFile
	}
	return ""
}

func (x *Plugin) GetTranscribeAudioToTextInputLanguage() string {
	if x != nil && x.TranscribeAudioToTextInputLanguage != nil {
		return *x.TranscribeAudioToTextInputLanguage
	}
	return ""
}

func (x *Plugin) GetTranscribeAudioToTextTranslateToEnglish() bool {
	if x != nil {
		return x.TranscribeAudioToTextTranslateToEnglish
	}
	return false
}

func (x *Plugin) GetGenerateChatGPTResponseAiModel() string {
	if x != nil && x.GenerateChatGPTResponseAiModel != nil {
		return *x.GenerateChatGPTResponseAiModel
	}
	return ""
}

func (x *Plugin) GetGenerateTextNewTextAiModel() string {
	if x != nil && x.GenerateTextNewTextAiModel != nil {
		return *x.GenerateTextNewTextAiModel
	}
	return ""
}

func (x *Plugin) GetGenerateTextEditTextAiModel() string {
	if x != nil && x.GenerateTextEditTextAiModel != nil {
		return *x.GenerateTextEditTextAiModel
	}
	return ""
}

func (x *Plugin) GetGenerateCodeNewCodeAiModel() string {
	if x != nil && x.GenerateCodeNewCodeAiModel != nil {
		return *x.GenerateCodeNewCodeAiModel
	}
	return ""
}

func (x *Plugin) GetGenerateCodeEditCodeAiModel() string {
	if x != nil && x.GenerateCodeEditCodeAiModel != nil {
		return *x.GenerateCodeEditCodeAiModel
	}
	return ""
}

func (x *Plugin) GetCheckModerationAiModel() string {
	if x != nil && x.CheckModerationAiModel != nil {
		return *x.CheckModerationAiModel
	}
	return ""
}

func (x *Plugin) GetGenerateTextEmbeddingAiModel() string {
	if x != nil && x.GenerateTextEmbeddingAiModel != nil {
		return *x.GenerateTextEmbeddingAiModel
	}
	return ""
}

func (x *Plugin) GetTranscribeAudioToTextAiModel() string {
	if x != nil && x.TranscribeAudioToTextAiModel != nil {
		return *x.TranscribeAudioToTextAiModel
	}
	return ""
}

func (x *Plugin) GetGenerateChatGptResponseMaxTokens() string {
	if x != nil && x.GenerateChatGptResponseMaxTokens != nil {
		return *x.GenerateChatGptResponseMaxTokens
	}
	return ""
}

func (x *Plugin) GetGenerateTextNewTextMaxTokens() string {
	if x != nil && x.GenerateTextNewTextMaxTokens != nil {
		return *x.GenerateTextNewTextMaxTokens
	}
	return ""
}

func (x *Plugin) GetAiModel() string {
	if x != nil && x.AiModel != nil {
		return *x.AiModel
	}
	return ""
}

func (x *Plugin) GetSuperblocksMetadata() *SuperblocksMetadata {
	if x != nil {
		return x.SuperblocksMetadata
	}
	return nil
}

var File_plugins_openai_v1_plugin_proto protoreflect.FileDescriptor

var file_plugins_openai_v1_plugin_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69,
	0x2e, 0x76, 0x31, 0x22, 0x3b, 0x0a, 0x13, 0x53, 0x75, 0x70, 0x65, 0x72, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xbe, 0x02, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x57, 0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x4d, 0x0a, 0x13, 0x70,
	0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x13, 0x70, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xae, 0x1e, 0x0a, 0x06, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a,
	0x1d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x47, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x47, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x25, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x47, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x25, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x47, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x28, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x47, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x28, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x47, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x19, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x4e, 0x65, 0x77, 0x54, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x19, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4e, 0x65, 0x77, 0x54, 0x65, 0x78, 0x74, 0x50,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x1e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x45, 0x64, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x1e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x45, 0x64, 0x69, 0x74, 0x54, 0x65, 0x78, 0x74, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x45, 0x64,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x54, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x1a, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x19, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x65, 0x77, 0x43, 0x6f,
	0x64, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x19, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x65,
	0x77, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b,
	0x0a, 0x1e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x64,
	0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x45, 0x64, 0x69, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x1e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x54, 0x6f, 0x45, 0x64, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1a, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x64, 0x69, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0a, 0x52, 0x1a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x45,
	0x64, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52,
	0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x65, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c,
	0x52, 0x0d, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0d, 0x52, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x25, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x25, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x69, 0x0a, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x2d, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x47, 0x0a, 0x1c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x45, 0x64, 0x69, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x1c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x25, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x45, 0x64, 0x69,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x25, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x45, 0x64, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x1f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x1f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x4f, 0x0a, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x20,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x1f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x56, 0x61, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x1f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x61, 0x72,
	0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x4d, 0x0a, 0x1f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x56, 0x61, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x1f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x61, 0x72, 0x79,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x4b, 0x0a, 0x1e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46,
	0x69, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x1e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x6f, 0x54, 0x65,
	0x78, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x53,
	0x0a, 0x22, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x22, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x6f, 0x54,
	0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x27, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x4b, 0x0a,
	0x1e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x47, 0x50, 0x54,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x1e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x47, 0x50, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1a, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4e, 0x65, 0x77, 0x54, 0x65, 0x78,
	0x74, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19,
	0x52, 0x1a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4e, 0x65,
	0x77, 0x54, 0x65, 0x78, 0x74, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x45, 0x0a, 0x1b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x45,
	0x64, 0x69, 0x74, 0x54, 0x65, 0x78, 0x74, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x1b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x54, 0x65, 0x78, 0x74, 0x41, 0x69, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x69, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x1a, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x64,
	0x65, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1b, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x64, 0x69, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x1c, 0x52, 0x1b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x3b, 0x0a, 0x16, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1d, 0x52, 0x16, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x47, 0x0a, 0x1c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x1c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x69,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x6f, 0x54, 0x65, 0x78,
	0x74, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1f,
	0x52, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x4f, 0x0a, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x47, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x78, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x20, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x47, 0x70, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x47, 0x0a, 0x1c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x4e, 0x65, 0x77, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x1c, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4e, 0x65, 0x77, 0x54, 0x65, 0x78, 0x74, 0x4d,
	0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61,
	0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x07,
	0x61, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x13, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x13, 0x73, 0x75, 0x70, 0x65, 0x72, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x47, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x42, 0x28, 0x0a, 0x26, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x47, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x42, 0x2b, 0x0a, 0x29, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x47, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x4e, 0x65, 0x77, 0x54, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x45, 0x64, 0x69, 0x74, 0x54, 0x65, 0x78, 0x74, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x45,
	0x64, 0x69, 0x74, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x54, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x64, 0x65, 0x50,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x54, 0x6f, 0x45, 0x64, 0x69, 0x74, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78,
	0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x28, 0x0a, 0x26, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x50, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x42, 0x30, 0x0a, 0x2e, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x42, 0x28, 0x0a, 0x26, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x45, 0x64, 0x69, 0x74,
	0x42, 0x22, 0x0a, 0x20, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x61, 0x72, 0x79, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x22, 0x0a,
	0x20, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x56,
	0x61, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x46, 0x69, 0x6c, 0x65, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x21, 0x0a, 0x1f, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x47, 0x50, 0x54, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x1d,
	0x0a, 0x1b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4e,
	0x65, 0x77, 0x54, 0x65, 0x78, 0x74, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x1e, 0x0a,
	0x1c, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x45, 0x64,
	0x69, 0x74, 0x54, 0x65, 0x78, 0x74, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x1d, 0x0a,
	0x1b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x65,
	0x77, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x1e, 0x0a, 0x1c,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x64, 0x69,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x6f, 0x54, 0x65,
	0x78, 0x74, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x47, 0x70, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x1f,
	0x0a, 0x1d, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4e,
	0x65, 0x77, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x41, 0x5a, 0x3f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plugins_openai_v1_plugin_proto_rawDescOnce sync.Once
	file_plugins_openai_v1_plugin_proto_rawDescData = file_plugins_openai_v1_plugin_proto_rawDesc
)

func file_plugins_openai_v1_plugin_proto_rawDescGZIP() []byte {
	file_plugins_openai_v1_plugin_proto_rawDescOnce.Do(func() {
		file_plugins_openai_v1_plugin_proto_rawDescData = protoimpl.X.CompressGZIP(file_plugins_openai_v1_plugin_proto_rawDescData)
	})
	return file_plugins_openai_v1_plugin_proto_rawDescData
}

var file_plugins_openai_v1_plugin_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_plugins_openai_v1_plugin_proto_goTypes = []interface{}{
	(*SuperblocksMetadata)(nil), // 0: plugins.openai.v1.SuperblocksMetadata
	(*Property)(nil),            // 1: plugins.openai.v1.Property
	(*Custom)(nil),              // 2: plugins.openai.v1.Custom
	(*Plugin)(nil),              // 3: plugins.openai.v1.Plugin
}
var file_plugins_openai_v1_plugin_proto_depIdxs = []int32{
	1, // 0: plugins.openai.v1.Custom.presignedExpiration:type_name -> plugins.openai.v1.Property
	0, // 1: plugins.openai.v1.Plugin.superblocksMetadata:type_name -> plugins.openai.v1.SuperblocksMetadata
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_plugins_openai_v1_plugin_proto_init() }
func file_plugins_openai_v1_plugin_proto_init() {
	if File_plugins_openai_v1_plugin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plugins_openai_v1_plugin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperblocksMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugins_openai_v1_plugin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugins_openai_v1_plugin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Custom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugins_openai_v1_plugin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plugin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_plugins_openai_v1_plugin_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plugins_openai_v1_plugin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plugins_openai_v1_plugin_proto_goTypes,
		DependencyIndexes: file_plugins_openai_v1_plugin_proto_depIdxs,
		MessageInfos:      file_plugins_openai_v1_plugin_proto_msgTypes,
	}.Build()
	File_plugins_openai_v1_plugin_proto = out.File
	file_plugins_openai_v1_plugin_proto_rawDesc = nil
	file_plugins_openai_v1_plugin_proto_goTypes = nil
	file_plugins_openai_v1_plugin_proto_depIdxs = nil
}
