// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugins/couchbase/v1/plugin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Plugin with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plugin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PluginMultiError, or nil if none found.
func (m *Plugin) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetConnection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PluginValidationError{
				field:  "Connection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndpoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Endpoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Endpoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndpoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PluginValidationError{
				field:  "Endpoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTunnel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Tunnel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Tunnel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTunnel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PluginValidationError{
				field:  "Tunnel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.CouchbaseAction.(type) {
	case *Plugin_RunSql:
		if v == nil {
			err := PluginValidationError{
				field:  "CouchbaseAction",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRunSql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "RunSql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "RunSql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRunSql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "RunSql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Plugin_Insert:
		if v == nil {
			err := PluginValidationError{
				field:  "CouchbaseAction",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInsert()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Insert",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Insert",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInsert()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "Insert",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Plugin_Get:
		if v == nil {
			err := PluginValidationError{
				field:  "CouchbaseAction",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGet()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Get",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Get",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGet()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "Get",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Plugin_Remove:
		if v == nil {
			err := PluginValidationError{
				field:  "CouchbaseAction",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRemove()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Remove",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Remove",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRemove()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "Remove",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if m.DynamicWorkflowConfiguration != nil {

		if all {
			switch v := interface{}(m.GetDynamicWorkflowConfiguration()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DynamicWorkflowConfiguration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DynamicWorkflowConfiguration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDynamicWorkflowConfiguration()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "DynamicWorkflowConfiguration",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PluginMultiError(errors)
	}

	return nil
}

// PluginMultiError is an error wrapping multiple validation errors returned by
// Plugin.ValidateAll() if the designated constraints aren't met.
type PluginMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PluginMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PluginMultiError) AllErrors() []error { return m }

// PluginValidationError is the validation error returned by Plugin.Validate if
// the designated constraints aren't met.
type PluginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginValidationError) ErrorName() string { return "PluginValidationError" }

// Error satisfies the builtin error interface
func (e PluginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginValidationError{}

// Validate checks the field values on Plugin_CouchbaseEndpoint with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_CouchbaseEndpoint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_CouchbaseEndpoint with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_CouchbaseEndpointMultiError, or nil if none found.
func (m *Plugin_CouchbaseEndpoint) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_CouchbaseEndpoint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	// no validation rules for Port

	if len(errors) > 0 {
		return Plugin_CouchbaseEndpointMultiError(errors)
	}

	return nil
}

// Plugin_CouchbaseEndpointMultiError is an error wrapping multiple validation
// errors returned by Plugin_CouchbaseEndpoint.ValidateAll() if the designated
// constraints aren't met.
type Plugin_CouchbaseEndpointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_CouchbaseEndpointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_CouchbaseEndpointMultiError) AllErrors() []error { return m }

// Plugin_CouchbaseEndpointValidationError is the validation error returned by
// Plugin_CouchbaseEndpoint.Validate if the designated constraints aren't met.
type Plugin_CouchbaseEndpointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_CouchbaseEndpointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_CouchbaseEndpointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_CouchbaseEndpointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_CouchbaseEndpointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_CouchbaseEndpointValidationError) ErrorName() string {
	return "Plugin_CouchbaseEndpointValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_CouchbaseEndpointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_CouchbaseEndpoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_CouchbaseEndpointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_CouchbaseEndpointValidationError{}

// Validate checks the field values on Plugin_CouchbaseIdentifier with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_CouchbaseIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_CouchbaseIdentifier with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_CouchbaseIdentifierMultiError, or nil if none found.
func (m *Plugin_CouchbaseIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_CouchbaseIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scope

	// no validation rules for Collection

	if len(errors) > 0 {
		return Plugin_CouchbaseIdentifierMultiError(errors)
	}

	return nil
}

// Plugin_CouchbaseIdentifierMultiError is an error wrapping multiple
// validation errors returned by Plugin_CouchbaseIdentifier.ValidateAll() if
// the designated constraints aren't met.
type Plugin_CouchbaseIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_CouchbaseIdentifierMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_CouchbaseIdentifierMultiError) AllErrors() []error { return m }

// Plugin_CouchbaseIdentifierValidationError is the validation error returned
// by Plugin_CouchbaseIdentifier.Validate if the designated constraints aren't met.
type Plugin_CouchbaseIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_CouchbaseIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_CouchbaseIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_CouchbaseIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_CouchbaseIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_CouchbaseIdentifierValidationError) ErrorName() string {
	return "Plugin_CouchbaseIdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_CouchbaseIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_CouchbaseIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_CouchbaseIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_CouchbaseIdentifierValidationError{}

// Validate checks the field values on Plugin_CouchbaseConnection with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_CouchbaseConnection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_CouchbaseConnection with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_CouchbaseConnectionMultiError, or nil if none found.
func (m *Plugin_CouchbaseConnection) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_CouchbaseConnection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for User

	// no validation rules for Password

	// no validation rules for Bucket

	// no validation rules for UseTls

	if m.Url != nil {
		// no validation rules for Url
	}

	if len(errors) > 0 {
		return Plugin_CouchbaseConnectionMultiError(errors)
	}

	return nil
}

// Plugin_CouchbaseConnectionMultiError is an error wrapping multiple
// validation errors returned by Plugin_CouchbaseConnection.ValidateAll() if
// the designated constraints aren't met.
type Plugin_CouchbaseConnectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_CouchbaseConnectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_CouchbaseConnectionMultiError) AllErrors() []error { return m }

// Plugin_CouchbaseConnectionValidationError is the validation error returned
// by Plugin_CouchbaseConnection.Validate if the designated constraints aren't met.
type Plugin_CouchbaseConnectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_CouchbaseConnectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_CouchbaseConnectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_CouchbaseConnectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_CouchbaseConnectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_CouchbaseConnectionValidationError) ErrorName() string {
	return "Plugin_CouchbaseConnectionValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_CouchbaseConnectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_CouchbaseConnection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_CouchbaseConnectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_CouchbaseConnectionValidationError{}

// Validate checks the field values on Plugin_CouchbaseInsert with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_CouchbaseInsert) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_CouchbaseInsert with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_CouchbaseInsertMultiError, or nil if none found.
func (m *Plugin_CouchbaseInsert) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_CouchbaseInsert) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if all {
		switch v := interface{}(m.GetIdentifier()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Plugin_CouchbaseInsertValidationError{
					field:  "Identifier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Plugin_CouchbaseInsertValidationError{
					field:  "Identifier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentifier()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Plugin_CouchbaseInsertValidationError{
				field:  "Identifier",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Plugin_CouchbaseInsertMultiError(errors)
	}

	return nil
}

// Plugin_CouchbaseInsertMultiError is an error wrapping multiple validation
// errors returned by Plugin_CouchbaseInsert.ValidateAll() if the designated
// constraints aren't met.
type Plugin_CouchbaseInsertMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_CouchbaseInsertMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_CouchbaseInsertMultiError) AllErrors() []error { return m }

// Plugin_CouchbaseInsertValidationError is the validation error returned by
// Plugin_CouchbaseInsert.Validate if the designated constraints aren't met.
type Plugin_CouchbaseInsertValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_CouchbaseInsertValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_CouchbaseInsertValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_CouchbaseInsertValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_CouchbaseInsertValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_CouchbaseInsertValidationError) ErrorName() string {
	return "Plugin_CouchbaseInsertValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_CouchbaseInsertValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_CouchbaseInsert.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_CouchbaseInsertValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_CouchbaseInsertValidationError{}

// Validate checks the field values on Plugin_CouchbaseGet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_CouchbaseGet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_CouchbaseGet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_CouchbaseGetMultiError, or nil if none found.
func (m *Plugin_CouchbaseGet) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_CouchbaseGet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if all {
		switch v := interface{}(m.GetIdentifier()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Plugin_CouchbaseGetValidationError{
					field:  "Identifier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Plugin_CouchbaseGetValidationError{
					field:  "Identifier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentifier()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Plugin_CouchbaseGetValidationError{
				field:  "Identifier",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Plugin_CouchbaseGetMultiError(errors)
	}

	return nil
}

// Plugin_CouchbaseGetMultiError is an error wrapping multiple validation
// errors returned by Plugin_CouchbaseGet.ValidateAll() if the designated
// constraints aren't met.
type Plugin_CouchbaseGetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_CouchbaseGetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_CouchbaseGetMultiError) AllErrors() []error { return m }

// Plugin_CouchbaseGetValidationError is the validation error returned by
// Plugin_CouchbaseGet.Validate if the designated constraints aren't met.
type Plugin_CouchbaseGetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_CouchbaseGetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_CouchbaseGetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_CouchbaseGetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_CouchbaseGetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_CouchbaseGetValidationError) ErrorName() string {
	return "Plugin_CouchbaseGetValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_CouchbaseGetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_CouchbaseGet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_CouchbaseGetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_CouchbaseGetValidationError{}

// Validate checks the field values on Plugin_CouchbaseRemove with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_CouchbaseRemove) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_CouchbaseRemove with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_CouchbaseRemoveMultiError, or nil if none found.
func (m *Plugin_CouchbaseRemove) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_CouchbaseRemove) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if all {
		switch v := interface{}(m.GetIdentifier()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Plugin_CouchbaseRemoveValidationError{
					field:  "Identifier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Plugin_CouchbaseRemoveValidationError{
					field:  "Identifier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentifier()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Plugin_CouchbaseRemoveValidationError{
				field:  "Identifier",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Plugin_CouchbaseRemoveMultiError(errors)
	}

	return nil
}

// Plugin_CouchbaseRemoveMultiError is an error wrapping multiple validation
// errors returned by Plugin_CouchbaseRemove.ValidateAll() if the designated
// constraints aren't met.
type Plugin_CouchbaseRemoveMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_CouchbaseRemoveMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_CouchbaseRemoveMultiError) AllErrors() []error { return m }

// Plugin_CouchbaseRemoveValidationError is the validation error returned by
// Plugin_CouchbaseRemove.Validate if the designated constraints aren't met.
type Plugin_CouchbaseRemoveValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_CouchbaseRemoveValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_CouchbaseRemoveValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_CouchbaseRemoveValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_CouchbaseRemoveValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_CouchbaseRemoveValidationError) ErrorName() string {
	return "Plugin_CouchbaseRemoveValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_CouchbaseRemoveValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_CouchbaseRemove.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_CouchbaseRemoveValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_CouchbaseRemoveValidationError{}
