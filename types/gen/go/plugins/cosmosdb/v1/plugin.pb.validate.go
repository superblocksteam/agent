// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugins/cosmosdb/v1/plugin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Plugin with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plugin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PluginMultiError, or nil if none found.
func (m *Plugin) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConnection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PluginValidationError{
				field:  "Connection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.CosmosdbAction.(type) {
	case *Plugin_Sql_:
		if v == nil {
			err := PluginValidationError{
				field:  "CosmosdbAction",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Sql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Sql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "Sql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Plugin_PointOperation_:
		if v == nil {
			err := PluginValidationError{
				field:  "CosmosdbAction",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPointOperation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "PointOperation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "PointOperation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPointOperation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "PointOperation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.DynamicWorkflowConfiguration != nil {

		if all {
			switch v := interface{}(m.GetDynamicWorkflowConfiguration()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DynamicWorkflowConfiguration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DynamicWorkflowConfiguration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDynamicWorkflowConfiguration()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "DynamicWorkflowConfiguration",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PluginMultiError(errors)
	}

	return nil
}

// PluginMultiError is an error wrapping multiple validation errors returned by
// Plugin.ValidateAll() if the designated constraints aren't met.
type PluginMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PluginMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PluginMultiError) AllErrors() []error { return m }

// PluginValidationError is the validation error returned by Plugin.Validate if
// the designated constraints aren't met.
type PluginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginValidationError) ErrorName() string { return "PluginValidationError" }

// Error satisfies the builtin error interface
func (e PluginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginValidationError{}

// Validate checks the field values on Plugin_CosmosDbConnection with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_CosmosDbConnection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_CosmosDbConnection with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_CosmosDbConnectionMultiError, or nil if none found.
func (m *Plugin_CosmosDbConnection) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_CosmosDbConnection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	// no validation rules for Port

	// no validation rules for DatabaseId

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Plugin_CosmosDbConnectionValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Plugin_CosmosDbConnectionValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Plugin_CosmosDbConnectionValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Plugin_CosmosDbConnectionMultiError(errors)
	}

	return nil
}

// Plugin_CosmosDbConnectionMultiError is an error wrapping multiple validation
// errors returned by Plugin_CosmosDbConnection.ValidateAll() if the
// designated constraints aren't met.
type Plugin_CosmosDbConnectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_CosmosDbConnectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_CosmosDbConnectionMultiError) AllErrors() []error { return m }

// Plugin_CosmosDbConnectionValidationError is the validation error returned by
// Plugin_CosmosDbConnection.Validate if the designated constraints aren't met.
type Plugin_CosmosDbConnectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_CosmosDbConnectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_CosmosDbConnectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_CosmosDbConnectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_CosmosDbConnectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_CosmosDbConnectionValidationError) ErrorName() string {
	return "Plugin_CosmosDbConnectionValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_CosmosDbConnectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_CosmosDbConnection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_CosmosDbConnectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_CosmosDbConnectionValidationError{}

// Validate checks the field values on Plugin_Metadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Plugin_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_Metadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_MetadataMultiError, or nil if none found.
func (m *Plugin_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetContainers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Plugin_MetadataValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Plugin_MetadataValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Plugin_MetadataValidationError{
					field:  fmt.Sprintf("Containers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Plugin_MetadataMultiError(errors)
	}

	return nil
}

// Plugin_MetadataMultiError is an error wrapping multiple validation errors
// returned by Plugin_Metadata.ValidateAll() if the designated constraints
// aren't met.
type Plugin_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_MetadataMultiError) AllErrors() []error { return m }

// Plugin_MetadataValidationError is the validation error returned by
// Plugin_Metadata.Validate if the designated constraints aren't met.
type Plugin_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_MetadataValidationError) ErrorName() string { return "Plugin_MetadataValidationError" }

// Error satisfies the builtin error interface
func (e Plugin_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_MetadataValidationError{}

// Validate checks the field values on Plugin_Sql with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plugin_Sql) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_Sql with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Plugin_SqlMultiError, or
// nil if none found.
func (m *Plugin_Sql) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_Sql) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Action.(type) {
	case *Plugin_Sql_Singleton_:
		if v == nil {
			err := Plugin_SqlValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSingleton()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Plugin_SqlValidationError{
						field:  "Singleton",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Plugin_SqlValidationError{
						field:  "Singleton",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSingleton()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Plugin_SqlValidationError{
					field:  "Singleton",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return Plugin_SqlMultiError(errors)
	}

	return nil
}

// Plugin_SqlMultiError is an error wrapping multiple validation errors
// returned by Plugin_Sql.ValidateAll() if the designated constraints aren't met.
type Plugin_SqlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_SqlMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_SqlMultiError) AllErrors() []error { return m }

// Plugin_SqlValidationError is the validation error returned by
// Plugin_Sql.Validate if the designated constraints aren't met.
type Plugin_SqlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_SqlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_SqlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_SqlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_SqlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_SqlValidationError) ErrorName() string { return "Plugin_SqlValidationError" }

// Error satisfies the builtin error interface
func (e Plugin_SqlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_Sql.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_SqlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_SqlValidationError{}

// Validate checks the field values on Plugin_PointOperation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_PointOperation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_PointOperation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_PointOperationMultiError, or nil if none found.
func (m *Plugin_PointOperation) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_PointOperation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContainerId

	switch v := m.Action.(type) {
	case *Plugin_PointOperation_Read_:
		if v == nil {
			err := Plugin_PointOperationValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRead()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Plugin_PointOperationValidationError{
						field:  "Read",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Plugin_PointOperationValidationError{
						field:  "Read",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRead()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Plugin_PointOperationValidationError{
					field:  "Read",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Plugin_PointOperation_Replace_:
		if v == nil {
			err := Plugin_PointOperationValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetReplace()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Plugin_PointOperationValidationError{
						field:  "Replace",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Plugin_PointOperationValidationError{
						field:  "Replace",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReplace()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Plugin_PointOperationValidationError{
					field:  "Replace",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Plugin_PointOperation_Upsert_:
		if v == nil {
			err := Plugin_PointOperationValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUpsert()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Plugin_PointOperationValidationError{
						field:  "Upsert",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Plugin_PointOperationValidationError{
						field:  "Upsert",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpsert()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Plugin_PointOperationValidationError{
					field:  "Upsert",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Plugin_PointOperation_Delete_:
		if v == nil {
			err := Plugin_PointOperationValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDelete()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Plugin_PointOperationValidationError{
						field:  "Delete",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Plugin_PointOperationValidationError{
						field:  "Delete",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDelete()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Plugin_PointOperationValidationError{
					field:  "Delete",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Plugin_PointOperation_Create_:
		if v == nil {
			err := Plugin_PointOperationValidationError{
				field:  "Action",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCreate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Plugin_PointOperationValidationError{
						field:  "Create",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Plugin_PointOperationValidationError{
						field:  "Create",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Plugin_PointOperationValidationError{
					field:  "Create",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return Plugin_PointOperationMultiError(errors)
	}

	return nil
}

// Plugin_PointOperationMultiError is an error wrapping multiple validation
// errors returned by Plugin_PointOperation.ValidateAll() if the designated
// constraints aren't met.
type Plugin_PointOperationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_PointOperationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_PointOperationMultiError) AllErrors() []error { return m }

// Plugin_PointOperationValidationError is the validation error returned by
// Plugin_PointOperation.Validate if the designated constraints aren't met.
type Plugin_PointOperationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_PointOperationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_PointOperationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_PointOperationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_PointOperationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_PointOperationValidationError) ErrorName() string {
	return "Plugin_PointOperationValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_PointOperationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_PointOperation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_PointOperationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_PointOperationValidationError{}

// Validate checks the field values on Plugin_Metadata_Container with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_Metadata_Container) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_Metadata_Container with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_Metadata_ContainerMultiError, or nil if none found.
func (m *Plugin_Metadata_Container) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_Metadata_Container) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetPartitionKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Plugin_Metadata_ContainerValidationError{
					field:  "PartitionKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Plugin_Metadata_ContainerValidationError{
					field:  "PartitionKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartitionKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Plugin_Metadata_ContainerValidationError{
				field:  "PartitionKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Plugin_Metadata_ContainerMultiError(errors)
	}

	return nil
}

// Plugin_Metadata_ContainerMultiError is an error wrapping multiple validation
// errors returned by Plugin_Metadata_Container.ValidateAll() if the
// designated constraints aren't met.
type Plugin_Metadata_ContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_Metadata_ContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_Metadata_ContainerMultiError) AllErrors() []error { return m }

// Plugin_Metadata_ContainerValidationError is the validation error returned by
// Plugin_Metadata_Container.Validate if the designated constraints aren't met.
type Plugin_Metadata_ContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_Metadata_ContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_Metadata_ContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_Metadata_ContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_Metadata_ContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_Metadata_ContainerValidationError) ErrorName() string {
	return "Plugin_Metadata_ContainerValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_Metadata_ContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_Metadata_Container.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_Metadata_ContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_Metadata_ContainerValidationError{}

// Validate checks the field values on Plugin_Metadata_Container_PartitionKey
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *Plugin_Metadata_Container_PartitionKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// Plugin_Metadata_Container_PartitionKey with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// Plugin_Metadata_Container_PartitionKeyMultiError, or nil if none found.
func (m *Plugin_Metadata_Container_PartitionKey) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_Metadata_Container_PartitionKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Kind

	if m.Version != nil {
		// no validation rules for Version
	}

	if len(errors) > 0 {
		return Plugin_Metadata_Container_PartitionKeyMultiError(errors)
	}

	return nil
}

// Plugin_Metadata_Container_PartitionKeyMultiError is an error wrapping
// multiple validation errors returned by
// Plugin_Metadata_Container_PartitionKey.ValidateAll() if the designated
// constraints aren't met.
type Plugin_Metadata_Container_PartitionKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_Metadata_Container_PartitionKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_Metadata_Container_PartitionKeyMultiError) AllErrors() []error { return m }

// Plugin_Metadata_Container_PartitionKeyValidationError is the validation
// error returned by Plugin_Metadata_Container_PartitionKey.Validate if the
// designated constraints aren't met.
type Plugin_Metadata_Container_PartitionKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_Metadata_Container_PartitionKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_Metadata_Container_PartitionKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_Metadata_Container_PartitionKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_Metadata_Container_PartitionKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_Metadata_Container_PartitionKeyValidationError) ErrorName() string {
	return "Plugin_Metadata_Container_PartitionKeyValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_Metadata_Container_PartitionKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_Metadata_Container_PartitionKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_Metadata_Container_PartitionKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_Metadata_Container_PartitionKeyValidationError{}

// Validate checks the field values on Plugin_Sql_Singleton with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_Sql_Singleton) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_Sql_Singleton with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_Sql_SingletonMultiError, or nil if none found.
func (m *Plugin_Sql_Singleton) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_Sql_Singleton) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContainerId

	// no validation rules for Query

	// no validation rules for CrossPartition

	if m.PartitionKey != nil {
		// no validation rules for PartitionKey
	}

	if len(errors) > 0 {
		return Plugin_Sql_SingletonMultiError(errors)
	}

	return nil
}

// Plugin_Sql_SingletonMultiError is an error wrapping multiple validation
// errors returned by Plugin_Sql_Singleton.ValidateAll() if the designated
// constraints aren't met.
type Plugin_Sql_SingletonMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_Sql_SingletonMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_Sql_SingletonMultiError) AllErrors() []error { return m }

// Plugin_Sql_SingletonValidationError is the validation error returned by
// Plugin_Sql_Singleton.Validate if the designated constraints aren't met.
type Plugin_Sql_SingletonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_Sql_SingletonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_Sql_SingletonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_Sql_SingletonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_Sql_SingletonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_Sql_SingletonValidationError) ErrorName() string {
	return "Plugin_Sql_SingletonValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_Sql_SingletonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_Sql_Singleton.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_Sql_SingletonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_Sql_SingletonValidationError{}

// Validate checks the field values on Plugin_PointOperation_Read with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_PointOperation_Read) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_PointOperation_Read with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_PointOperation_ReadMultiError, or nil if none found.
func (m *Plugin_PointOperation_Read) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_PointOperation_Read) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.PartitionKey != nil {
		// no validation rules for PartitionKey
	}

	if len(errors) > 0 {
		return Plugin_PointOperation_ReadMultiError(errors)
	}

	return nil
}

// Plugin_PointOperation_ReadMultiError is an error wrapping multiple
// validation errors returned by Plugin_PointOperation_Read.ValidateAll() if
// the designated constraints aren't met.
type Plugin_PointOperation_ReadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_PointOperation_ReadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_PointOperation_ReadMultiError) AllErrors() []error { return m }

// Plugin_PointOperation_ReadValidationError is the validation error returned
// by Plugin_PointOperation_Read.Validate if the designated constraints aren't met.
type Plugin_PointOperation_ReadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_PointOperation_ReadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_PointOperation_ReadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_PointOperation_ReadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_PointOperation_ReadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_PointOperation_ReadValidationError) ErrorName() string {
	return "Plugin_PointOperation_ReadValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_PointOperation_ReadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_PointOperation_Read.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_PointOperation_ReadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_PointOperation_ReadValidationError{}

// Validate checks the field values on Plugin_PointOperation_Delete with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_PointOperation_Delete) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_PointOperation_Delete with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_PointOperation_DeleteMultiError, or nil if none found.
func (m *Plugin_PointOperation_Delete) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_PointOperation_Delete) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.PartitionKey != nil {
		// no validation rules for PartitionKey
	}

	if len(errors) > 0 {
		return Plugin_PointOperation_DeleteMultiError(errors)
	}

	return nil
}

// Plugin_PointOperation_DeleteMultiError is an error wrapping multiple
// validation errors returned by Plugin_PointOperation_Delete.ValidateAll() if
// the designated constraints aren't met.
type Plugin_PointOperation_DeleteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_PointOperation_DeleteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_PointOperation_DeleteMultiError) AllErrors() []error { return m }

// Plugin_PointOperation_DeleteValidationError is the validation error returned
// by Plugin_PointOperation_Delete.Validate if the designated constraints
// aren't met.
type Plugin_PointOperation_DeleteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_PointOperation_DeleteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_PointOperation_DeleteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_PointOperation_DeleteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_PointOperation_DeleteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_PointOperation_DeleteValidationError) ErrorName() string {
	return "Plugin_PointOperation_DeleteValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_PointOperation_DeleteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_PointOperation_Delete.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_PointOperation_DeleteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_PointOperation_DeleteValidationError{}

// Validate checks the field values on Plugin_PointOperation_Replace with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_PointOperation_Replace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_PointOperation_Replace with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// Plugin_PointOperation_ReplaceMultiError, or nil if none found.
func (m *Plugin_PointOperation_Replace) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_PointOperation_Replace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Body

	if m.PartitionKey != nil {
		// no validation rules for PartitionKey
	}

	if len(errors) > 0 {
		return Plugin_PointOperation_ReplaceMultiError(errors)
	}

	return nil
}

// Plugin_PointOperation_ReplaceMultiError is an error wrapping multiple
// validation errors returned by Plugin_PointOperation_Replace.ValidateAll()
// if the designated constraints aren't met.
type Plugin_PointOperation_ReplaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_PointOperation_ReplaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_PointOperation_ReplaceMultiError) AllErrors() []error { return m }

// Plugin_PointOperation_ReplaceValidationError is the validation error
// returned by Plugin_PointOperation_Replace.Validate if the designated
// constraints aren't met.
type Plugin_PointOperation_ReplaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_PointOperation_ReplaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_PointOperation_ReplaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_PointOperation_ReplaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_PointOperation_ReplaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_PointOperation_ReplaceValidationError) ErrorName() string {
	return "Plugin_PointOperation_ReplaceValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_PointOperation_ReplaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_PointOperation_Replace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_PointOperation_ReplaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_PointOperation_ReplaceValidationError{}

// Validate checks the field values on Plugin_PointOperation_Upsert with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_PointOperation_Upsert) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_PointOperation_Upsert with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_PointOperation_UpsertMultiError, or nil if none found.
func (m *Plugin_PointOperation_Upsert) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_PointOperation_Upsert) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Body

	if m.PartitionKey != nil {
		// no validation rules for PartitionKey
	}

	if len(errors) > 0 {
		return Plugin_PointOperation_UpsertMultiError(errors)
	}

	return nil
}

// Plugin_PointOperation_UpsertMultiError is an error wrapping multiple
// validation errors returned by Plugin_PointOperation_Upsert.ValidateAll() if
// the designated constraints aren't met.
type Plugin_PointOperation_UpsertMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_PointOperation_UpsertMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_PointOperation_UpsertMultiError) AllErrors() []error { return m }

// Plugin_PointOperation_UpsertValidationError is the validation error returned
// by Plugin_PointOperation_Upsert.Validate if the designated constraints
// aren't met.
type Plugin_PointOperation_UpsertValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_PointOperation_UpsertValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_PointOperation_UpsertValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_PointOperation_UpsertValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_PointOperation_UpsertValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_PointOperation_UpsertValidationError) ErrorName() string {
	return "Plugin_PointOperation_UpsertValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_PointOperation_UpsertValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_PointOperation_Upsert.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_PointOperation_UpsertValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_PointOperation_UpsertValidationError{}

// Validate checks the field values on Plugin_PointOperation_Create with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_PointOperation_Create) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_PointOperation_Create with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_PointOperation_CreateMultiError, or nil if none found.
func (m *Plugin_PointOperation_Create) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_PointOperation_Create) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Body

	if m.PartitionKey != nil {
		// no validation rules for PartitionKey
	}

	if len(errors) > 0 {
		return Plugin_PointOperation_CreateMultiError(errors)
	}

	return nil
}

// Plugin_PointOperation_CreateMultiError is an error wrapping multiple
// validation errors returned by Plugin_PointOperation_Create.ValidateAll() if
// the designated constraints aren't met.
type Plugin_PointOperation_CreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_PointOperation_CreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_PointOperation_CreateMultiError) AllErrors() []error { return m }

// Plugin_PointOperation_CreateValidationError is the validation error returned
// by Plugin_PointOperation_Create.Validate if the designated constraints
// aren't met.
type Plugin_PointOperation_CreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_PointOperation_CreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_PointOperation_CreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_PointOperation_CreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_PointOperation_CreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_PointOperation_CreateValidationError) ErrorName() string {
	return "Plugin_PointOperation_CreateValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_PointOperation_CreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_PointOperation_Create.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_PointOperation_CreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_PointOperation_CreateValidationError{}
