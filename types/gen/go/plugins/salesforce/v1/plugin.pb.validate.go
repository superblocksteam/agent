// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugins/salesforce/v1/plugin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Plugin with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plugin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PluginMultiError, or nil if none found.
func (m *Plugin) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConnection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PluginValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PluginValidationError{
				field:  "Connection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.SalesforceAction.(type) {
	case *Plugin_Soql_:
		if v == nil {
			err := PluginValidationError{
				field:  "SalesforceAction",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSoql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Soql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Soql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSoql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "Soql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Plugin_Crud_:
		if v == nil {
			err := PluginValidationError{
				field:  "SalesforceAction",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCrud()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Crud",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Crud",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCrud()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "Crud",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Plugin_Bulk_:
		if v == nil {
			err := PluginValidationError{
				field:  "SalesforceAction",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBulk()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Bulk",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "Bulk",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBulk()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "Bulk",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.DynamicWorkflowConfiguration != nil {

		if all {
			switch v := interface{}(m.GetDynamicWorkflowConfiguration()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DynamicWorkflowConfiguration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PluginValidationError{
						field:  "DynamicWorkflowConfiguration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDynamicWorkflowConfiguration()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PluginValidationError{
					field:  "DynamicWorkflowConfiguration",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PluginMultiError(errors)
	}

	return nil
}

// PluginMultiError is an error wrapping multiple validation errors returned by
// Plugin.ValidateAll() if the designated constraints aren't met.
type PluginMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PluginMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PluginMultiError) AllErrors() []error { return m }

// PluginValidationError is the validation error returned by Plugin.Validate if
// the designated constraints aren't met.
type PluginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginValidationError) ErrorName() string { return "PluginValidationError" }

// Error satisfies the builtin error interface
func (e PluginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginValidationError{}

// Validate checks the field values on Plugin_SalesforceConnection with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_SalesforceConnection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_SalesforceConnection with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_SalesforceConnectionMultiError, or nil if none found.
func (m *Plugin_SalesforceConnection) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_SalesforceConnection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceUrl

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Plugin_SalesforceConnectionValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Plugin_SalesforceConnectionValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Plugin_SalesforceConnectionValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Plugin_SalesforceConnectionMultiError(errors)
	}

	return nil
}

// Plugin_SalesforceConnectionMultiError is an error wrapping multiple
// validation errors returned by Plugin_SalesforceConnection.ValidateAll() if
// the designated constraints aren't met.
type Plugin_SalesforceConnectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_SalesforceConnectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_SalesforceConnectionMultiError) AllErrors() []error { return m }

// Plugin_SalesforceConnectionValidationError is the validation error returned
// by Plugin_SalesforceConnection.Validate if the designated constraints
// aren't met.
type Plugin_SalesforceConnectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_SalesforceConnectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_SalesforceConnectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_SalesforceConnectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_SalesforceConnectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_SalesforceConnectionValidationError) ErrorName() string {
	return "Plugin_SalesforceConnectionValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_SalesforceConnectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_SalesforceConnection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_SalesforceConnectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_SalesforceConnectionValidationError{}

// Validate checks the field values on Plugin_Metadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Plugin_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_Metadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_MetadataMultiError, or nil if none found.
func (m *Plugin_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetObjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Plugin_MetadataValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Plugin_MetadataValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Plugin_MetadataValidationError{
					field:  fmt.Sprintf("Objects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Plugin_MetadataMultiError(errors)
	}

	return nil
}

// Plugin_MetadataMultiError is an error wrapping multiple validation errors
// returned by Plugin_Metadata.ValidateAll() if the designated constraints
// aren't met.
type Plugin_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_MetadataMultiError) AllErrors() []error { return m }

// Plugin_MetadataValidationError is the validation error returned by
// Plugin_Metadata.Validate if the designated constraints aren't met.
type Plugin_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_MetadataValidationError) ErrorName() string { return "Plugin_MetadataValidationError" }

// Error satisfies the builtin error interface
func (e Plugin_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_MetadataValidationError{}

// Validate checks the field values on Plugin_Soql with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plugin_Soql) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_Soql with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Plugin_SoqlMultiError, or
// nil if none found.
func (m *Plugin_Soql) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_Soql) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SqlBody

	// no validation rules for Action

	if len(errors) > 0 {
		return Plugin_SoqlMultiError(errors)
	}

	return nil
}

// Plugin_SoqlMultiError is an error wrapping multiple validation errors
// returned by Plugin_Soql.ValidateAll() if the designated constraints aren't met.
type Plugin_SoqlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_SoqlMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_SoqlMultiError) AllErrors() []error { return m }

// Plugin_SoqlValidationError is the validation error returned by
// Plugin_Soql.Validate if the designated constraints aren't met.
type Plugin_SoqlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_SoqlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_SoqlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_SoqlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_SoqlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_SoqlValidationError) ErrorName() string { return "Plugin_SoqlValidationError" }

// Error satisfies the builtin error interface
func (e Plugin_SoqlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_Soql.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_SoqlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_SoqlValidationError{}

// Validate checks the field values on Plugin_Crud with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plugin_Crud) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_Crud with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Plugin_CrudMultiError, or
// nil if none found.
func (m *Plugin_Crud) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_Crud) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceType

	// no validation rules for Action

	// no validation rules for ResourceBody

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return Plugin_CrudMultiError(errors)
	}

	return nil
}

// Plugin_CrudMultiError is an error wrapping multiple validation errors
// returned by Plugin_Crud.ValidateAll() if the designated constraints aren't met.
type Plugin_CrudMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_CrudMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_CrudMultiError) AllErrors() []error { return m }

// Plugin_CrudValidationError is the validation error returned by
// Plugin_Crud.Validate if the designated constraints aren't met.
type Plugin_CrudValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_CrudValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_CrudValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_CrudValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_CrudValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_CrudValidationError) ErrorName() string { return "Plugin_CrudValidationError" }

// Error satisfies the builtin error interface
func (e Plugin_CrudValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_Crud.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_CrudValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_CrudValidationError{}

// Validate checks the field values on Plugin_Bulk with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plugin_Bulk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_Bulk with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Plugin_BulkMultiError, or
// nil if none found.
func (m *Plugin_Bulk) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_Bulk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceType

	// no validation rules for Action

	// no validation rules for ResourceBody

	// no validation rules for ExternalId

	if len(errors) > 0 {
		return Plugin_BulkMultiError(errors)
	}

	return nil
}

// Plugin_BulkMultiError is an error wrapping multiple validation errors
// returned by Plugin_Bulk.ValidateAll() if the designated constraints aren't met.
type Plugin_BulkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_BulkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_BulkMultiError) AllErrors() []error { return m }

// Plugin_BulkValidationError is the validation error returned by
// Plugin_Bulk.Validate if the designated constraints aren't met.
type Plugin_BulkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_BulkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_BulkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_BulkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_BulkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_BulkValidationError) ErrorName() string { return "Plugin_BulkValidationError" }

// Error satisfies the builtin error interface
func (e Plugin_BulkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_Bulk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_BulkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_BulkValidationError{}

// Validate checks the field values on Plugin_Metadata_Object with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_Metadata_Object) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_Metadata_Object with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_Metadata_ObjectMultiError, or nil if none found.
func (m *Plugin_Metadata_Object) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_Metadata_Object) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Plugin_Metadata_ObjectValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Plugin_Metadata_ObjectValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Plugin_Metadata_ObjectValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Plugin_Metadata_ObjectMultiError(errors)
	}

	return nil
}

// Plugin_Metadata_ObjectMultiError is an error wrapping multiple validation
// errors returned by Plugin_Metadata_Object.ValidateAll() if the designated
// constraints aren't met.
type Plugin_Metadata_ObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_Metadata_ObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_Metadata_ObjectMultiError) AllErrors() []error { return m }

// Plugin_Metadata_ObjectValidationError is the validation error returned by
// Plugin_Metadata_Object.Validate if the designated constraints aren't met.
type Plugin_Metadata_ObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_Metadata_ObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_Metadata_ObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_Metadata_ObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_Metadata_ObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_Metadata_ObjectValidationError) ErrorName() string {
	return "Plugin_Metadata_ObjectValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_Metadata_ObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_Metadata_Object.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_Metadata_ObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_Metadata_ObjectValidationError{}

// Validate checks the field values on Plugin_Metadata_Object_Field with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Plugin_Metadata_Object_Field) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin_Metadata_Object_Field with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Plugin_Metadata_Object_FieldMultiError, or nil if none found.
func (m *Plugin_Metadata_Object_Field) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin_Metadata_Object_Field) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Label

	// no validation rules for Type

	if len(errors) > 0 {
		return Plugin_Metadata_Object_FieldMultiError(errors)
	}

	return nil
}

// Plugin_Metadata_Object_FieldMultiError is an error wrapping multiple
// validation errors returned by Plugin_Metadata_Object_Field.ValidateAll() if
// the designated constraints aren't met.
type Plugin_Metadata_Object_FieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Plugin_Metadata_Object_FieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Plugin_Metadata_Object_FieldMultiError) AllErrors() []error { return m }

// Plugin_Metadata_Object_FieldValidationError is the validation error returned
// by Plugin_Metadata_Object_Field.Validate if the designated constraints
// aren't met.
type Plugin_Metadata_Object_FieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Plugin_Metadata_Object_FieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Plugin_Metadata_Object_FieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Plugin_Metadata_Object_FieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Plugin_Metadata_Object_FieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Plugin_Metadata_Object_FieldValidationError) ErrorName() string {
	return "Plugin_Metadata_Object_FieldValidationError"
}

// Error satisfies the builtin error interface
func (e Plugin_Metadata_Object_FieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin_Metadata_Object_Field.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Plugin_Metadata_Object_FieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Plugin_Metadata_Object_FieldValidationError{}
