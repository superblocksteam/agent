// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: integration/v1/service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetIntegrationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIntegrationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIntegrationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIntegrationResponseMultiError, or nil if none found.
func (m *GetIntegrationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIntegrationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetIntegrationResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetIntegrationResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIntegrationResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetIntegrationResponseMultiError(errors)
	}

	return nil
}

// GetIntegrationResponseMultiError is an error wrapping multiple validation
// errors returned by GetIntegrationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetIntegrationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIntegrationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIntegrationResponseMultiError) AllErrors() []error { return m }

// GetIntegrationResponseValidationError is the validation error returned by
// GetIntegrationResponse.Validate if the designated constraints aren't met.
type GetIntegrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIntegrationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIntegrationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIntegrationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIntegrationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIntegrationResponseValidationError) ErrorName() string {
	return "GetIntegrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIntegrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIntegrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIntegrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIntegrationResponseValidationError{}

// Validate checks the field values on GetIntegrationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIntegrationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIntegrationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIntegrationsRequestMultiError, or nil if none found.
func (m *GetIntegrationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIntegrationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Profile != nil {

		if all {
			switch v := interface{}(m.GetProfile()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetIntegrationsRequestValidationError{
						field:  "Profile",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetIntegrationsRequestValidationError{
						field:  "Profile",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIntegrationsRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Kind != nil {
		// no validation rules for Kind
	}

	if m.Slug != nil {
		// no validation rules for Slug
	}

	if len(errors) > 0 {
		return GetIntegrationsRequestMultiError(errors)
	}

	return nil
}

// GetIntegrationsRequestMultiError is an error wrapping multiple validation
// errors returned by GetIntegrationsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetIntegrationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIntegrationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIntegrationsRequestMultiError) AllErrors() []error { return m }

// GetIntegrationsRequestValidationError is the validation error returned by
// GetIntegrationsRequest.Validate if the designated constraints aren't met.
type GetIntegrationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIntegrationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIntegrationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIntegrationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIntegrationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIntegrationsRequestValidationError) ErrorName() string {
	return "GetIntegrationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIntegrationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIntegrationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIntegrationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIntegrationsRequestValidationError{}

// Validate checks the field values on GetIntegrationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIntegrationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIntegrationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIntegrationsResponseMultiError, or nil if none found.
func (m *GetIntegrationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIntegrationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetIntegrationsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetIntegrationsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIntegrationsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetIntegrationsResponseMultiError(errors)
	}

	return nil
}

// GetIntegrationsResponseMultiError is an error wrapping multiple validation
// errors returned by GetIntegrationsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetIntegrationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIntegrationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIntegrationsResponseMultiError) AllErrors() []error { return m }

// GetIntegrationsResponseValidationError is the validation error returned by
// GetIntegrationsResponse.Validate if the designated constraints aren't met.
type GetIntegrationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIntegrationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIntegrationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIntegrationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIntegrationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIntegrationsResponseValidationError) ErrorName() string {
	return "GetIntegrationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIntegrationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIntegrationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIntegrationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIntegrationsResponseValidationError{}

// Validate checks the field values on Configuration with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Configuration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Configuration with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfigurationMultiError, or
// nil if none found.
func (m *Configuration) ValidateAll() error {
	return m.validate(true)
}

func (m *Configuration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Created

	// no validation rules for IntegrationId

	if all {
		switch v := interface{}(m.GetConfiguration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigurationValidationError{
					field:  "Configuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigurationValidationError{
					field:  "Configuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfiguration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigurationValidationError{
				field:  "Configuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsDefault

	if len(errors) > 0 {
		return ConfigurationMultiError(errors)
	}

	return nil
}

// ConfigurationMultiError is an error wrapping multiple validation errors
// returned by Configuration.ValidateAll() if the designated constraints
// aren't met.
type ConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigurationMultiError) AllErrors() []error { return m }

// ConfigurationValidationError is the validation error returned by
// Configuration.Validate if the designated constraints aren't met.
type ConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigurationValidationError) ErrorName() string { return "ConfigurationValidationError" }

// Error satisfies the builtin error interface
func (e ConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigurationValidationError{}

// Validate checks the field values on Integration with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Integration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Integration with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IntegrationMultiError, or
// nil if none found.
func (m *Integration) ValidateAll() error {
	return m.validate(true)
}

func (m *Integration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Created

	// no validation rules for Updated

	// no validation rules for Name

	// no validation rules for PluginId

	// no validation rules for OrganizationId

	// no validation rules for DemoIntegrationId

	for idx, item := range m.GetConfigurations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntegrationValidationError{
						field:  fmt.Sprintf("Configurations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntegrationValidationError{
						field:  fmt.Sprintf("Configurations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntegrationValidationError{
					field:  fmt.Sprintf("Configurations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsUserConfigured

	// no validation rules for Slug

	if len(errors) > 0 {
		return IntegrationMultiError(errors)
	}

	return nil
}

// IntegrationMultiError is an error wrapping multiple validation errors
// returned by Integration.ValidateAll() if the designated constraints aren't met.
type IntegrationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationMultiError) AllErrors() []error { return m }

// IntegrationValidationError is the validation error returned by
// Integration.Validate if the designated constraints aren't met.
type IntegrationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationValidationError) ErrorName() string { return "IntegrationValidationError" }

// Error satisfies the builtin error interface
func (e IntegrationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationValidationError{}
