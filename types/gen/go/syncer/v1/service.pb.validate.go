// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: syncer/v1/service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetConfigurationMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfigurationMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigurationMetadataRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetConfigurationMetadataRequestMultiError, or nil if none found.
func (m *GetConfigurationMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigurationMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	if len(errors) > 0 {
		return GetConfigurationMetadataRequestMultiError(errors)
	}

	return nil
}

// GetConfigurationMetadataRequestMultiError is an error wrapping multiple
// validation errors returned by GetConfigurationMetadataRequest.ValidateAll()
// if the designated constraints aren't met.
type GetConfigurationMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigurationMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigurationMetadataRequestMultiError) AllErrors() []error { return m }

// GetConfigurationMetadataRequestValidationError is the validation error
// returned by GetConfigurationMetadataRequest.Validate if the designated
// constraints aren't met.
type GetConfigurationMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigurationMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigurationMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigurationMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigurationMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigurationMetadataRequestValidationError) ErrorName() string {
	return "GetConfigurationMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigurationMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigurationMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigurationMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigurationMetadataRequestValidationError{}

// Validate checks the field values on GetConfigurationMetadataResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetConfigurationMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigurationMetadataResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetConfigurationMetadataResponseMultiError, or nil if none found.
func (m *GetConfigurationMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigurationMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	{
		sorted_keys := make([]string, len(m.GetConfigurations()))
		i := 0
		for key := range m.GetConfigurations() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfigurations()[key]
			_ = val

			// no validation rules for Configurations[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetConfigurationMetadataResponseValidationError{
							field:  fmt.Sprintf("Configurations[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetConfigurationMetadataResponseValidationError{
							field:  fmt.Sprintf("Configurations[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetConfigurationMetadataResponseValidationError{
						field:  fmt.Sprintf("Configurations[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for IntegrationType

	// no validation rules for OrganizationId

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetConfigurationMetadataResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetConfigurationMetadataResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConfigurationMetadataResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetConfigurationMetadataResponseMultiError(errors)
	}

	return nil
}

// GetConfigurationMetadataResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetConfigurationMetadataResponse.ValidateAll() if the designated
// constraints aren't met.
type GetConfigurationMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigurationMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigurationMetadataResponseMultiError) AllErrors() []error { return m }

// GetConfigurationMetadataResponseValidationError is the validation error
// returned by GetConfigurationMetadataResponse.Validate if the designated
// constraints aren't met.
type GetConfigurationMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigurationMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigurationMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigurationMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigurationMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigurationMetadataResponseValidationError) ErrorName() string {
	return "GetConfigurationMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigurationMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigurationMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigurationMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigurationMetadataResponseValidationError{}

// Validate checks the field values on SyncRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SyncRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SyncRequestMultiError, or
// nil if none found.
func (m *SyncRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SyncRequestMultiError(errors)
	}

	return nil
}

// SyncRequestMultiError is an error wrapping multiple validation errors
// returned by SyncRequest.ValidateAll() if the designated constraints aren't met.
type SyncRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncRequestMultiError) AllErrors() []error { return m }

// SyncRequestValidationError is the validation error returned by
// SyncRequest.Validate if the designated constraints aren't met.
type SyncRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncRequestValidationError) ErrorName() string { return "SyncRequestValidationError" }

// Error satisfies the builtin error interface
func (e SyncRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncRequestValidationError{}

// Validate checks the field values on SyncResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SyncResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SyncResponseMultiError, or
// nil if none found.
func (m *SyncResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetIntegrationsSynced()))
		i := 0
		for key := range m.GetIntegrationsSynced() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetIntegrationsSynced()[key]
			_ = val

			// no validation rules for IntegrationsSynced[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, SyncResponseValidationError{
							field:  fmt.Sprintf("IntegrationsSynced[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, SyncResponseValidationError{
							field:  fmt.Sprintf("IntegrationsSynced[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return SyncResponseValidationError{
						field:  fmt.Sprintf("IntegrationsSynced[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SyncResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SyncResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SyncResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SyncResponseMultiError(errors)
	}

	return nil
}

// SyncResponseMultiError is an error wrapping multiple validation errors
// returned by SyncResponse.ValidateAll() if the designated constraints aren't met.
type SyncResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncResponseMultiError) AllErrors() []error { return m }

// SyncResponseValidationError is the validation error returned by
// SyncResponse.Validate if the designated constraints aren't met.
type SyncResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncResponseValidationError) ErrorName() string { return "SyncResponseValidationError" }

// Error satisfies the builtin error interface
func (e SyncResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncResponseValidationError{}

// Validate checks the field values on UpsertMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertMetadataRequestMultiError, or nil if none found.
func (m *UpsertMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetMetadata()) < 1 {
		err := UpsertMetadataRequestValidationError{
			field:  "Metadata",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMetadata() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertMetadataRequestValidationError{
						field:  fmt.Sprintf("Metadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertMetadataRequestValidationError{
						field:  fmt.Sprintf("Metadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertMetadataRequestValidationError{
					field:  fmt.Sprintf("Metadata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpsertMetadataRequestMultiError(errors)
	}

	return nil
}

// UpsertMetadataRequestMultiError is an error wrapping multiple validation
// errors returned by UpsertMetadataRequest.ValidateAll() if the designated
// constraints aren't met.
type UpsertMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertMetadataRequestMultiError) AllErrors() []error { return m }

// UpsertMetadataRequestValidationError is the validation error returned by
// UpsertMetadataRequest.Validate if the designated constraints aren't met.
type UpsertMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertMetadataRequestValidationError) ErrorName() string {
	return "UpsertMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertMetadataRequestValidationError{}

// Validate checks the field values on UpsertMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertMetadataResponseMultiError, or nil if none found.
func (m *UpsertMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertMetadataResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertMetadataResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertMetadataResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpsertMetadataResponseMultiError(errors)
	}

	return nil
}

// UpsertMetadataResponseMultiError is an error wrapping multiple validation
// errors returned by UpsertMetadataResponse.ValidateAll() if the designated
// constraints aren't met.
type UpsertMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertMetadataResponseMultiError) AllErrors() []error { return m }

// UpsertMetadataResponseValidationError is the validation error returned by
// UpsertMetadataResponse.Validate if the designated constraints aren't met.
type UpsertMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertMetadataResponseValidationError) ErrorName() string {
	return "UpsertMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertMetadataResponseValidationError{}

// Validate checks the field values on DeleteMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMetadataRequestMultiError, or nil if none found.
func (m *DeleteMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegrationId

	if len(errors) > 0 {
		return DeleteMetadataRequestMultiError(errors)
	}

	return nil
}

// DeleteMetadataRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMetadataRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMetadataRequestMultiError) AllErrors() []error { return m }

// DeleteMetadataRequestValidationError is the validation error returned by
// DeleteMetadataRequest.Validate if the designated constraints aren't met.
type DeleteMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMetadataRequestValidationError) ErrorName() string {
	return "DeleteMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMetadataRequestValidationError{}

// Validate checks the field values on DeleteMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMetadataResponseMultiError, or nil if none found.
func (m *DeleteMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteMetadataResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteMetadataResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteMetadataResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeleteMetadataResponseMultiError(errors)
	}

	return nil
}

// DeleteMetadataResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMetadataResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMetadataResponseMultiError) AllErrors() []error { return m }

// DeleteMetadataResponseValidationError is the validation error returned by
// DeleteMetadataResponse.Validate if the designated constraints aren't met.
type DeleteMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMetadataResponseValidationError) ErrorName() string {
	return "DeleteMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMetadataResponseValidationError{}

// Validate checks the field values on SyncResponse_Integration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SyncResponse_Integration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncResponse_Integration with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncResponse_IntegrationMultiError, or nil if none found.
func (m *SyncResponse_Integration) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncResponse_Integration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SyncResponse_IntegrationMultiError(errors)
	}

	return nil
}

// SyncResponse_IntegrationMultiError is an error wrapping multiple validation
// errors returned by SyncResponse_Integration.ValidateAll() if the designated
// constraints aren't met.
type SyncResponse_IntegrationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncResponse_IntegrationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncResponse_IntegrationMultiError) AllErrors() []error { return m }

// SyncResponse_IntegrationValidationError is the validation error returned by
// SyncResponse_Integration.Validate if the designated constraints aren't met.
type SyncResponse_IntegrationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncResponse_IntegrationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncResponse_IntegrationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncResponse_IntegrationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncResponse_IntegrationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncResponse_IntegrationValidationError) ErrorName() string {
	return "SyncResponse_IntegrationValidationError"
}

// Error satisfies the builtin error interface
func (e SyncResponse_IntegrationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncResponse_Integration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncResponse_IntegrationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncResponse_IntegrationValidationError{}
