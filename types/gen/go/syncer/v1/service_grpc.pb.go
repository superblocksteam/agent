// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: syncer/v1/service.proto

package v1

import (
	context "context"
	v1 "github.com/superblocksteam/agent/types/gen/go/event/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IntakeService_UpsertMetadata_FullMethodName = "/syncer.v1.IntakeService/UpsertMetadata"
	IntakeService_DeleteMetadata_FullMethodName = "/syncer.v1.IntakeService/DeleteMetadata"
	IntakeService_IngestEvent_FullMethodName    = "/syncer.v1.IntakeService/IngestEvent"
)

// IntakeServiceClient is the client API for IntakeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntakeServiceClient interface {
	UpsertMetadata(ctx context.Context, in *UpsertMetadataRequest, opts ...grpc.CallOption) (*UpsertMetadataResponse, error)
	DeleteMetadata(ctx context.Context, in *DeleteMetadataRequest, opts ...grpc.CallOption) (*DeleteMetadataResponse, error)
	IngestEvent(ctx context.Context, in *v1.IngestEventRequest, opts ...grpc.CallOption) (*v1.IngestEventResponse, error)
}

type intakeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntakeServiceClient(cc grpc.ClientConnInterface) IntakeServiceClient {
	return &intakeServiceClient{cc}
}

func (c *intakeServiceClient) UpsertMetadata(ctx context.Context, in *UpsertMetadataRequest, opts ...grpc.CallOption) (*UpsertMetadataResponse, error) {
	out := new(UpsertMetadataResponse)
	err := c.cc.Invoke(ctx, IntakeService_UpsertMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intakeServiceClient) DeleteMetadata(ctx context.Context, in *DeleteMetadataRequest, opts ...grpc.CallOption) (*DeleteMetadataResponse, error) {
	out := new(DeleteMetadataResponse)
	err := c.cc.Invoke(ctx, IntakeService_DeleteMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intakeServiceClient) IngestEvent(ctx context.Context, in *v1.IngestEventRequest, opts ...grpc.CallOption) (*v1.IngestEventResponse, error) {
	out := new(v1.IngestEventResponse)
	err := c.cc.Invoke(ctx, IntakeService_IngestEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntakeServiceServer is the server API for IntakeService service.
// All implementations should embed UnimplementedIntakeServiceServer
// for forward compatibility
type IntakeServiceServer interface {
	UpsertMetadata(context.Context, *UpsertMetadataRequest) (*UpsertMetadataResponse, error)
	DeleteMetadata(context.Context, *DeleteMetadataRequest) (*DeleteMetadataResponse, error)
	IngestEvent(context.Context, *v1.IngestEventRequest) (*v1.IngestEventResponse, error)
}

// UnimplementedIntakeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIntakeServiceServer struct {
}

func (UnimplementedIntakeServiceServer) UpsertMetadata(context.Context, *UpsertMetadataRequest) (*UpsertMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertMetadata not implemented")
}
func (UnimplementedIntakeServiceServer) DeleteMetadata(context.Context, *DeleteMetadataRequest) (*DeleteMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetadata not implemented")
}
func (UnimplementedIntakeServiceServer) IngestEvent(context.Context, *v1.IngestEventRequest) (*v1.IngestEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestEvent not implemented")
}

// UnsafeIntakeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntakeServiceServer will
// result in compilation errors.
type UnsafeIntakeServiceServer interface {
	mustEmbedUnimplementedIntakeServiceServer()
}

func RegisterIntakeServiceServer(s grpc.ServiceRegistrar, srv IntakeServiceServer) {
	s.RegisterService(&IntakeService_ServiceDesc, srv)
}

func _IntakeService_UpsertMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntakeServiceServer).UpsertMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntakeService_UpsertMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntakeServiceServer).UpsertMetadata(ctx, req.(*UpsertMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntakeService_DeleteMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntakeServiceServer).DeleteMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntakeService_DeleteMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntakeServiceServer).DeleteMetadata(ctx, req.(*DeleteMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntakeService_IngestEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IngestEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntakeServiceServer).IngestEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntakeService_IngestEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntakeServiceServer).IngestEvent(ctx, req.(*v1.IngestEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntakeService_ServiceDesc is the grpc.ServiceDesc for IntakeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntakeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "syncer.v1.IntakeService",
	HandlerType: (*IntakeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertMetadata",
			Handler:    _IntakeService_UpsertMetadata_Handler,
		},
		{
			MethodName: "DeleteMetadata",
			Handler:    _IntakeService_DeleteMetadata_Handler,
		},
		{
			MethodName: "IngestEvent",
			Handler:    _IntakeService_IngestEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syncer/v1/service.proto",
}

const (
	SyncerService_Sync_FullMethodName = "/syncer.v1.SyncerService/Sync"
)

// SyncerServiceClient is the client API for SyncerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncerServiceClient interface {
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
}

type syncerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncerServiceClient(cc grpc.ClientConnInterface) SyncerServiceClient {
	return &syncerServiceClient{cc}
}

func (c *syncerServiceClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, SyncerService_Sync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncerServiceServer is the server API for SyncerService service.
// All implementations should embed UnimplementedSyncerServiceServer
// for forward compatibility
type SyncerServiceServer interface {
	Sync(context.Context, *SyncRequest) (*SyncResponse, error)
}

// UnimplementedSyncerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSyncerServiceServer struct {
}

func (UnimplementedSyncerServiceServer) Sync(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}

// UnsafeSyncerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncerServiceServer will
// result in compilation errors.
type UnsafeSyncerServiceServer interface {
	mustEmbedUnimplementedSyncerServiceServer()
}

func RegisterSyncerServiceServer(s grpc.ServiceRegistrar, srv SyncerServiceServer) {
	s.RegisterService(&SyncerService_ServiceDesc, srv)
}

func _SyncerService_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncerServiceServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncerService_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncerServiceServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SyncerService_ServiceDesc is the grpc.ServiceDesc for SyncerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "syncer.v1.SyncerService",
	HandlerType: (*SyncerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _SyncerService_Sync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syncer/v1/service.proto",
}

const (
	IntegrationService_GetConfigurationMetadata_FullMethodName = "/syncer.v1.IntegrationService/GetConfigurationMetadata"
)

// IntegrationServiceClient is the client API for IntegrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegrationServiceClient interface {
	GetConfigurationMetadata(ctx context.Context, in *GetConfigurationMetadataRequest, opts ...grpc.CallOption) (*GetConfigurationMetadataResponse, error)
}

type integrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationServiceClient(cc grpc.ClientConnInterface) IntegrationServiceClient {
	return &integrationServiceClient{cc}
}

func (c *integrationServiceClient) GetConfigurationMetadata(ctx context.Context, in *GetConfigurationMetadataRequest, opts ...grpc.CallOption) (*GetConfigurationMetadataResponse, error) {
	out := new(GetConfigurationMetadataResponse)
	err := c.cc.Invoke(ctx, IntegrationService_GetConfigurationMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationServiceServer is the server API for IntegrationService service.
// All implementations should embed UnimplementedIntegrationServiceServer
// for forward compatibility
type IntegrationServiceServer interface {
	GetConfigurationMetadata(context.Context, *GetConfigurationMetadataRequest) (*GetConfigurationMetadataResponse, error)
}

// UnimplementedIntegrationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIntegrationServiceServer struct {
}

func (UnimplementedIntegrationServiceServer) GetConfigurationMetadata(context.Context, *GetConfigurationMetadataRequest) (*GetConfigurationMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigurationMetadata not implemented")
}

// UnsafeIntegrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrationServiceServer will
// result in compilation errors.
type UnsafeIntegrationServiceServer interface {
	mustEmbedUnimplementedIntegrationServiceServer()
}

func RegisterIntegrationServiceServer(s grpc.ServiceRegistrar, srv IntegrationServiceServer) {
	s.RegisterService(&IntegrationService_ServiceDesc, srv)
}

func _IntegrationService_GetConfigurationMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigurationMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).GetConfigurationMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_GetConfigurationMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).GetConfigurationMetadata(ctx, req.(*GetConfigurationMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntegrationService_ServiceDesc is the grpc.ServiceDesc for IntegrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntegrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "syncer.v1.IntegrationService",
	HandlerType: (*IntegrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfigurationMetadata",
			Handler:    _IntegrationService_GetConfigurationMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syncer/v1/service.proto",
}
