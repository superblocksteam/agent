// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: secrets/v1/store.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on InvalidateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InvalidateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvalidateRequestMultiError, or nil if none found.
func (m *InvalidateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Store

	// no validation rules for Secret

	// no validation rules for ConfigurationId

	if len(errors) > 0 {
		return InvalidateRequestMultiError(errors)
	}

	return nil
}

// InvalidateRequestMultiError is an error wrapping multiple validation errors
// returned by InvalidateRequest.ValidateAll() if the designated constraints
// aren't met.
type InvalidateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidateRequestMultiError) AllErrors() []error { return m }

// InvalidateRequestValidationError is the validation error returned by
// InvalidateRequest.Validate if the designated constraints aren't met.
type InvalidateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidateRequestValidationError) ErrorName() string {
	return "InvalidateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidateRequestValidationError{}

// Validate checks the field values on InvalidateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvalidateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvalidateResponseMultiError, or nil if none found.
func (m *InvalidateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InvalidateResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InvalidateResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InvalidateResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetInvalidations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InvalidateResponseValidationError{
						field:  fmt.Sprintf("Invalidations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InvalidateResponseValidationError{
						field:  fmt.Sprintf("Invalidations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InvalidateResponseValidationError{
					field:  fmt.Sprintf("Invalidations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Message

	if len(errors) > 0 {
		return InvalidateResponseMultiError(errors)
	}

	return nil
}

// InvalidateResponseMultiError is an error wrapping multiple validation errors
// returned by InvalidateResponse.ValidateAll() if the designated constraints
// aren't met.
type InvalidateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidateResponseMultiError) AllErrors() []error { return m }

// InvalidateResponseValidationError is the validation error returned by
// InvalidateResponse.Validate if the designated constraints aren't met.
type InvalidateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidateResponseValidationError) ErrorName() string {
	return "InvalidateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidateResponseValidationError{}

// Validate checks the field values on ListSecretsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSecretsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSecretsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSecretsRequestMultiError, or nil if none found.
func (m *ListSecretsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSecretsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Store

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSecretsRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSecretsRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSecretsRequestValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Provider != nil {

		if all {
			switch v := interface{}(m.GetProvider()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSecretsRequestValidationError{
						field:  "Provider",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSecretsRequestValidationError{
						field:  "Provider",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSecretsRequestValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSecretsRequestMultiError(errors)
	}

	return nil
}

// ListSecretsRequestMultiError is an error wrapping multiple validation errors
// returned by ListSecretsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListSecretsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSecretsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSecretsRequestMultiError) AllErrors() []error { return m }

// ListSecretsRequestValidationError is the validation error returned by
// ListSecretsRequest.Validate if the designated constraints aren't met.
type ListSecretsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSecretsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSecretsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSecretsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSecretsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSecretsRequestValidationError) ErrorName() string {
	return "ListSecretsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSecretsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSecretsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSecretsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSecretsRequestValidationError{}

// Validate checks the field values on ListSecretsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSecretsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSecretsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSecretsResponseMultiError, or nil if none found.
func (m *ListSecretsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSecretsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSecrets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSecretsResponseValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSecretsResponseValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSecretsResponseValidationError{
					field:  fmt.Sprintf("Secrets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSecretsResponseMultiError(errors)
	}

	return nil
}

// ListSecretsResponseMultiError is an error wrapping multiple validation
// errors returned by ListSecretsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSecretsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSecretsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSecretsResponseMultiError) AllErrors() []error { return m }

// ListSecretsResponseValidationError is the validation error returned by
// ListSecretsResponse.Validate if the designated constraints aren't met.
type ListSecretsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSecretsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSecretsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSecretsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSecretsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSecretsResponseValidationError) ErrorName() string {
	return "ListSecretsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSecretsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSecretsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSecretsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSecretsResponseValidationError{}
