// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: secrets/v1/secrets.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AwsSecretsManager with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AwsSecretsManager) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AwsSecretsManager with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AwsSecretsManagerMultiError, or nil if none found.
func (m *AwsSecretsManager) ValidateAll() error {
	return m.validate(true)
}

func (m *AwsSecretsManager) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AwsSecretsManagerValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AwsSecretsManagerValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AwsSecretsManagerValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Prefix != nil {
		// no validation rules for Prefix
	}

	if len(errors) > 0 {
		return AwsSecretsManagerMultiError(errors)
	}

	return nil
}

// AwsSecretsManagerMultiError is an error wrapping multiple validation errors
// returned by AwsSecretsManager.ValidateAll() if the designated constraints
// aren't met.
type AwsSecretsManagerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AwsSecretsManagerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AwsSecretsManagerMultiError) AllErrors() []error { return m }

// AwsSecretsManagerValidationError is the validation error returned by
// AwsSecretsManager.Validate if the designated constraints aren't met.
type AwsSecretsManagerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AwsSecretsManagerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AwsSecretsManagerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AwsSecretsManagerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AwsSecretsManagerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AwsSecretsManagerValidationError) ErrorName() string {
	return "AwsSecretsManagerValidationError"
}

// Error satisfies the builtin error interface
func (e AwsSecretsManagerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAwsSecretsManager.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AwsSecretsManagerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AwsSecretsManagerValidationError{}

// Validate checks the field values on GcpSecretManager with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GcpSecretManager) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GcpSecretManager with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GcpSecretManagerMultiError, or nil if none found.
func (m *GcpSecretManager) ValidateAll() error {
	return m.validate(true)
}

func (m *GcpSecretManager) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GcpSecretManagerValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GcpSecretManagerValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GcpSecretManagerValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return GcpSecretManagerMultiError(errors)
	}

	return nil
}

// GcpSecretManagerMultiError is an error wrapping multiple validation errors
// returned by GcpSecretManager.ValidateAll() if the designated constraints
// aren't met.
type GcpSecretManagerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GcpSecretManagerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GcpSecretManagerMultiError) AllErrors() []error { return m }

// GcpSecretManagerValidationError is the validation error returned by
// GcpSecretManager.Validate if the designated constraints aren't met.
type GcpSecretManagerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GcpSecretManagerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GcpSecretManagerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GcpSecretManagerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GcpSecretManagerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GcpSecretManagerValidationError) ErrorName() string { return "GcpSecretManagerValidationError" }

// Error satisfies the builtin error interface
func (e GcpSecretManagerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGcpSecretManager.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GcpSecretManagerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GcpSecretManagerValidationError{}

// Validate checks the field values on AkeylessSecretsManager with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AkeylessSecretsManager) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AkeylessSecretsManager with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AkeylessSecretsManagerMultiError, or nil if none found.
func (m *AkeylessSecretsManager) ValidateAll() error {
	return m.validate(true)
}

func (m *AkeylessSecretsManager) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AkeylessSecretsManagerValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AkeylessSecretsManagerValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AkeylessSecretsManagerValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Host != nil {
		// no validation rules for Host
	}

	if m.Prefix != nil {
		// no validation rules for Prefix
	}

	if len(errors) > 0 {
		return AkeylessSecretsManagerMultiError(errors)
	}

	return nil
}

// AkeylessSecretsManagerMultiError is an error wrapping multiple validation
// errors returned by AkeylessSecretsManager.ValidateAll() if the designated
// constraints aren't met.
type AkeylessSecretsManagerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AkeylessSecretsManagerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AkeylessSecretsManagerMultiError) AllErrors() []error { return m }

// AkeylessSecretsManagerValidationError is the validation error returned by
// AkeylessSecretsManager.Validate if the designated constraints aren't met.
type AkeylessSecretsManagerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AkeylessSecretsManagerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AkeylessSecretsManagerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AkeylessSecretsManagerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AkeylessSecretsManagerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AkeylessSecretsManagerValidationError) ErrorName() string {
	return "AkeylessSecretsManagerValidationError"
}

// Error satisfies the builtin error interface
func (e AkeylessSecretsManagerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAkeylessSecretsManager.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AkeylessSecretsManagerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AkeylessSecretsManagerValidationError{}

// Validate checks the field values on HashicorpVault with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HashicorpVault) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HashicorpVault with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HashicorpVaultMultiError,
// or nil if none found.
func (m *HashicorpVault) ValidateAll() error {
	return m.validate(true)
}

func (m *HashicorpVault) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HashicorpVaultValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HashicorpVaultValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HashicorpVaultValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Address

	// no validation rules for Version

	if m.Path != nil {
		// no validation rules for Path
	}

	if m.Namespace != nil {
		// no validation rules for Namespace
	}

	if m.SecretsPath != nil {
		// no validation rules for SecretsPath
	}

	if len(errors) > 0 {
		return HashicorpVaultMultiError(errors)
	}

	return nil
}

// HashicorpVaultMultiError is an error wrapping multiple validation errors
// returned by HashicorpVault.ValidateAll() if the designated constraints
// aren't met.
type HashicorpVaultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HashicorpVaultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HashicorpVaultMultiError) AllErrors() []error { return m }

// HashicorpVaultValidationError is the validation error returned by
// HashicorpVault.Validate if the designated constraints aren't met.
type HashicorpVaultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HashicorpVaultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HashicorpVaultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HashicorpVaultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HashicorpVaultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HashicorpVaultValidationError) ErrorName() string { return "HashicorpVaultValidationError" }

// Error satisfies the builtin error interface
func (e HashicorpVaultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHashicorpVault.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HashicorpVaultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HashicorpVaultValidationError{}

// Validate checks the field values on MockStore with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MockStore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MockStore with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MockStoreMultiError, or nil
// if none found.
func (m *MockStore) ValidateAll() error {
	return m.validate(true)
}

func (m *MockStore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return MockStoreMultiError(errors)
	}

	return nil
}

// MockStoreMultiError is an error wrapping multiple validation errors returned
// by MockStore.ValidateAll() if the designated constraints aren't met.
type MockStoreMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MockStoreMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MockStoreMultiError) AllErrors() []error { return m }

// MockStoreValidationError is the validation error returned by
// MockStore.Validate if the designated constraints aren't met.
type MockStoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MockStoreValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MockStoreValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MockStoreValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MockStoreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MockStoreValidationError) ErrorName() string { return "MockStoreValidationError" }

// Error satisfies the builtin error interface
func (e MockStoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMockStore.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MockStoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MockStoreValidationError{}

// Validate checks the field values on Provider with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Provider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Provider with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProviderMultiError, or nil
// if none found.
func (m *Provider) ValidateAll() error {
	return m.validate(true)
}

func (m *Provider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Config.(type) {
	case *Provider_Mock:
		if v == nil {
			err := ProviderValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMock()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProviderValidationError{
						field:  "Mock",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProviderValidationError{
						field:  "Mock",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMock()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProviderValidationError{
					field:  "Mock",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Provider_AkeylessSecretsManager:
		if v == nil {
			err := ProviderValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAkeylessSecretsManager()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProviderValidationError{
						field:  "AkeylessSecretsManager",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProviderValidationError{
						field:  "AkeylessSecretsManager",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAkeylessSecretsManager()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProviderValidationError{
					field:  "AkeylessSecretsManager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Provider_AwsSecretsManager:
		if v == nil {
			err := ProviderValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsSecretsManager()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProviderValidationError{
						field:  "AwsSecretsManager",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProviderValidationError{
						field:  "AwsSecretsManager",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsSecretsManager()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProviderValidationError{
					field:  "AwsSecretsManager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Provider_GcpSecretManager:
		if v == nil {
			err := ProviderValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGcpSecretManager()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProviderValidationError{
						field:  "GcpSecretManager",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProviderValidationError{
						field:  "GcpSecretManager",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGcpSecretManager()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProviderValidationError{
					field:  "GcpSecretManager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Provider_HashicorpVault:
		if v == nil {
			err := ProviderValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHashicorpVault()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProviderValidationError{
						field:  "HashicorpVault",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProviderValidationError{
						field:  "HashicorpVault",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHashicorpVault()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProviderValidationError{
					field:  "HashicorpVault",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ProviderMultiError(errors)
	}

	return nil
}

// ProviderMultiError is an error wrapping multiple validation errors returned
// by Provider.ValidateAll() if the designated constraints aren't met.
type ProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProviderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProviderMultiError) AllErrors() []error { return m }

// ProviderValidationError is the validation error returned by
// Provider.Validate if the designated constraints aren't met.
type ProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderValidationError) ErrorName() string { return "ProviderValidationError" }

// Error satisfies the builtin error interface
func (e ProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderValidationError{}

// Validate checks the field values on Store with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Store) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Store with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StoreMultiError, or nil if none found.
func (m *Store) ValidateAll() error {
	return m.validate(true)
}

func (m *Store) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoreValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoreValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoreValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProvider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoreValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoreValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoreValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConfigurationId

	// no validation rules for Cache

	if m.Ttl != nil {
		// no validation rules for Ttl
	}

	if len(errors) > 0 {
		return StoreMultiError(errors)
	}

	return nil
}

// StoreMultiError is an error wrapping multiple validation errors returned by
// Store.ValidateAll() if the designated constraints aren't met.
type StoreMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreMultiError) AllErrors() []error { return m }

// StoreValidationError is the validation error returned by Store.Validate if
// the designated constraints aren't met.
type StoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreValidationError) ErrorName() string { return "StoreValidationError" }

// Error satisfies the builtin error interface
func (e StoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStore.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreValidationError{}

// Validate checks the field values on Details with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Details) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Details with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DetailsMultiError, or nil if none found.
func (m *Details) ValidateAll() error {
	return m.validate(true)
}

func (m *Details) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Alias

	// no validation rules for Name

	if len(errors) > 0 {
		return DetailsMultiError(errors)
	}

	return nil
}

// DetailsMultiError is an error wrapping multiple validation errors returned
// by Details.ValidateAll() if the designated constraints aren't met.
type DetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetailsMultiError) AllErrors() []error { return m }

// DetailsValidationError is the validation error returned by Details.Validate
// if the designated constraints aren't met.
type DetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetailsValidationError) ErrorName() string { return "DetailsValidationError" }

// Error satisfies the builtin error interface
func (e DetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetailsValidationError{}

// Validate checks the field values on Invalidation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Invalidation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Invalidation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InvalidationMultiError, or
// nil if none found.
func (m *Invalidation) ValidateAll() error {
	return m.validate(true)
}

func (m *Invalidation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Alias

	// no validation rules for ConfigurationId

	// no validation rules for Store

	if len(errors) > 0 {
		return InvalidationMultiError(errors)
	}

	return nil
}

// InvalidationMultiError is an error wrapping multiple validation errors
// returned by Invalidation.ValidateAll() if the designated constraints aren't met.
type InvalidationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidationMultiError) AllErrors() []error { return m }

// InvalidationValidationError is the validation error returned by
// Invalidation.Validate if the designated constraints aren't met.
type InvalidationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidationValidationError) ErrorName() string { return "InvalidationValidationError" }

// Error satisfies the builtin error interface
func (e InvalidationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidationValidationError{}

// Validate checks the field values on HashicorpVault_Auth with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HashicorpVault_Auth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HashicorpVault_Auth with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HashicorpVault_AuthMultiError, or nil if none found.
func (m *HashicorpVault_Auth) ValidateAll() error {
	return m.validate(true)
}

func (m *HashicorpVault_Auth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Config.(type) {
	case *HashicorpVault_Auth_Token:
		if v == nil {
			err := HashicorpVault_AuthValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Token
	case *HashicorpVault_Auth_AppRole_:
		if v == nil {
			err := HashicorpVault_AuthValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAppRole()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HashicorpVault_AuthValidationError{
						field:  "AppRole",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HashicorpVault_AuthValidationError{
						field:  "AppRole",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAppRole()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HashicorpVault_AuthValidationError{
					field:  "AppRole",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return HashicorpVault_AuthMultiError(errors)
	}

	return nil
}

// HashicorpVault_AuthMultiError is an error wrapping multiple validation
// errors returned by HashicorpVault_Auth.ValidateAll() if the designated
// constraints aren't met.
type HashicorpVault_AuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HashicorpVault_AuthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HashicorpVault_AuthMultiError) AllErrors() []error { return m }

// HashicorpVault_AuthValidationError is the validation error returned by
// HashicorpVault_Auth.Validate if the designated constraints aren't met.
type HashicorpVault_AuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HashicorpVault_AuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HashicorpVault_AuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HashicorpVault_AuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HashicorpVault_AuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HashicorpVault_AuthValidationError) ErrorName() string {
	return "HashicorpVault_AuthValidationError"
}

// Error satisfies the builtin error interface
func (e HashicorpVault_AuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHashicorpVault_Auth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HashicorpVault_AuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HashicorpVault_AuthValidationError{}

// Validate checks the field values on HashicorpVault_Auth_AppRole with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HashicorpVault_Auth_AppRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HashicorpVault_Auth_AppRole with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HashicorpVault_Auth_AppRoleMultiError, or nil if none found.
func (m *HashicorpVault_Auth_AppRole) ValidateAll() error {
	return m.validate(true)
}

func (m *HashicorpVault_Auth_AppRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for SecretId

	if len(errors) > 0 {
		return HashicorpVault_Auth_AppRoleMultiError(errors)
	}

	return nil
}

// HashicorpVault_Auth_AppRoleMultiError is an error wrapping multiple
// validation errors returned by HashicorpVault_Auth_AppRole.ValidateAll() if
// the designated constraints aren't met.
type HashicorpVault_Auth_AppRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HashicorpVault_Auth_AppRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HashicorpVault_Auth_AppRoleMultiError) AllErrors() []error { return m }

// HashicorpVault_Auth_AppRoleValidationError is the validation error returned
// by HashicorpVault_Auth_AppRole.Validate if the designated constraints
// aren't met.
type HashicorpVault_Auth_AppRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HashicorpVault_Auth_AppRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HashicorpVault_Auth_AppRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HashicorpVault_Auth_AppRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HashicorpVault_Auth_AppRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HashicorpVault_Auth_AppRoleValidationError) ErrorName() string {
	return "HashicorpVault_Auth_AppRoleValidationError"
}

// Error satisfies the builtin error interface
func (e HashicorpVault_Auth_AppRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHashicorpVault_Auth_AppRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HashicorpVault_Auth_AppRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HashicorpVault_Auth_AppRoleValidationError{}
