// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: secrets/v1/secrets.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v11 "github.com/superblocksteam/agent/types/gen/go/common/v1"
	v1 "github.com/superblocksteam/agent/types/gen/go/plugins/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HashicorpVault_Version int32

const (
	HashicorpVault_VERSION_UNSPECIFIED HashicorpVault_Version = 0
	HashicorpVault_VERSION_V1          HashicorpVault_Version = 1
	HashicorpVault_VERSION_V2          HashicorpVault_Version = 2
)

// Enum value maps for HashicorpVault_Version.
var (
	HashicorpVault_Version_name = map[int32]string{
		0: "VERSION_UNSPECIFIED",
		1: "VERSION_V1",
		2: "VERSION_V2",
	}
	HashicorpVault_Version_value = map[string]int32{
		"VERSION_UNSPECIFIED": 0,
		"VERSION_V1":          1,
		"VERSION_V2":          2,
	}
)

func (x HashicorpVault_Version) Enum() *HashicorpVault_Version {
	p := new(HashicorpVault_Version)
	*p = x
	return p
}

func (x HashicorpVault_Version) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashicorpVault_Version) Descriptor() protoreflect.EnumDescriptor {
	return file_secrets_v1_secrets_proto_enumTypes[0].Descriptor()
}

func (HashicorpVault_Version) Type() protoreflect.EnumType {
	return &file_secrets_v1_secrets_proto_enumTypes[0]
}

func (x HashicorpVault_Version) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashicorpVault_Version.Descriptor instead.
func (HashicorpVault_Version) EnumDescriptor() ([]byte, []int) {
	return file_secrets_v1_secrets_proto_rawDescGZIP(), []int{3, 0}
}

type AwsSecretsManager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *v1.AwsAuth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Prefix *string     `protobuf:"bytes,2,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}

func (x *AwsSecretsManager) Reset() {
	*x = AwsSecretsManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secrets_v1_secrets_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsSecretsManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsSecretsManager) ProtoMessage() {}

func (x *AwsSecretsManager) ProtoReflect() protoreflect.Message {
	mi := &file_secrets_v1_secrets_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsSecretsManager.ProtoReflect.Descriptor instead.
func (*AwsSecretsManager) Descriptor() ([]byte, []int) {
	return file_secrets_v1_secrets_proto_rawDescGZIP(), []int{0}
}

func (x *AwsSecretsManager) GetAuth() *v1.AwsAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *AwsSecretsManager) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

type GcpSecretManager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *v1.GcpAuth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	ProjectId string      `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *GcpSecretManager) Reset() {
	*x = GcpSecretManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secrets_v1_secrets_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcpSecretManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpSecretManager) ProtoMessage() {}

func (x *GcpSecretManager) ProtoReflect() protoreflect.Message {
	mi := &file_secrets_v1_secrets_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpSecretManager.ProtoReflect.Descriptor instead.
func (*GcpSecretManager) Descriptor() ([]byte, []int) {
	return file_secrets_v1_secrets_proto_rawDescGZIP(), []int{1}
}

func (x *GcpSecretManager) GetAuth() *v1.GcpAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *GcpSecretManager) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type AkeylessSecretsManager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *v1.AkeylessAuth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Host   *string          `protobuf:"bytes,2,opt,name=host,proto3,oneof" json:"host,omitempty"`
	Prefix *string          `protobuf:"bytes,3,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}

func (x *AkeylessSecretsManager) Reset() {
	*x = AkeylessSecretsManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secrets_v1_secrets_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AkeylessSecretsManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AkeylessSecretsManager) ProtoMessage() {}

func (x *AkeylessSecretsManager) ProtoReflect() protoreflect.Message {
	mi := &file_secrets_v1_secrets_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AkeylessSecretsManager.ProtoReflect.Descriptor instead.
func (*AkeylessSecretsManager) Descriptor() ([]byte, []int) {
	return file_secrets_v1_secrets_proto_rawDescGZIP(), []int{2}
}

func (x *AkeylessSecretsManager) GetAuth() *v1.AkeylessAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *AkeylessSecretsManager) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *AkeylessSecretsManager) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

type HashicorpVault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *HashicorpVault_Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	// The location of the vault server.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// The path to the vault
	Path *string `protobuf:"bytes,3,opt,name=path,proto3,oneof" json:"path,omitempty"`
	// The Hashicorp Vault namespace.
	Namespace *string `protobuf:"bytes,4,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
	// The engine version.
	Version HashicorpVault_Version `protobuf:"varint,5,opt,name=version,proto3,enum=secrets.v1.HashicorpVault_Version" json:"version,omitempty"`
	// the path to the secrets
	SecretsPath *string `protobuf:"bytes,6,opt,name=secrets_path,json=secretsPath,proto3,oneof" json:"secrets_path,omitempty"`
}

func (x *HashicorpVault) Reset() {
	*x = HashicorpVault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secrets_v1_secrets_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashicorpVault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashicorpVault) ProtoMessage() {}

func (x *HashicorpVault) ProtoReflect() protoreflect.Message {
	mi := &file_secrets_v1_secrets_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashicorpVault.ProtoReflect.Descriptor instead.
func (*HashicorpVault) Descriptor() ([]byte, []int) {
	return file_secrets_v1_secrets_proto_rawDescGZIP(), []int{3}
}

func (x *HashicorpVault) GetAuth() *HashicorpVault_Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *HashicorpVault) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *HashicorpVault) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *HashicorpVault) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *HashicorpVault) GetVersion() HashicorpVault_Version {
	if x != nil {
		return x.Version
	}
	return HashicorpVault_VERSION_UNSPECIFIED
}

func (x *HashicorpVault) GetSecretsPath() string {
	if x != nil && x.SecretsPath != nil {
		return *x.SecretsPath
	}
	return ""
}

type MockStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MockStore) Reset() {
	*x = MockStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secrets_v1_secrets_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockStore) ProtoMessage() {}

func (x *MockStore) ProtoReflect() protoreflect.Message {
	mi := &file_secrets_v1_secrets_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockStore.ProtoReflect.Descriptor instead.
func (*MockStore) Descriptor() ([]byte, []int) {
	return file_secrets_v1_secrets_proto_rawDescGZIP(), []int{4}
}

func (x *MockStore) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type Provider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*Provider_Mock
	//	*Provider_AkeylessSecretsManager
	//	*Provider_AwsSecretsManager
	//	*Provider_GcpSecretManager
	//	*Provider_HashicorpVault
	Config isProvider_Config `protobuf_oneof:"config"`
}

func (x *Provider) Reset() {
	*x = Provider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secrets_v1_secrets_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provider) ProtoMessage() {}

func (x *Provider) ProtoReflect() protoreflect.Message {
	mi := &file_secrets_v1_secrets_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provider.ProtoReflect.Descriptor instead.
func (*Provider) Descriptor() ([]byte, []int) {
	return file_secrets_v1_secrets_proto_rawDescGZIP(), []int{5}
}

func (m *Provider) GetConfig() isProvider_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *Provider) GetMock() *MockStore {
	if x, ok := x.GetConfig().(*Provider_Mock); ok {
		return x.Mock
	}
	return nil
}

func (x *Provider) GetAkeylessSecretsManager() *AkeylessSecretsManager {
	if x, ok := x.GetConfig().(*Provider_AkeylessSecretsManager); ok {
		return x.AkeylessSecretsManager
	}
	return nil
}

func (x *Provider) GetAwsSecretsManager() *AwsSecretsManager {
	if x, ok := x.GetConfig().(*Provider_AwsSecretsManager); ok {
		return x.AwsSecretsManager
	}
	return nil
}

func (x *Provider) GetGcpSecretManager() *GcpSecretManager {
	if x, ok := x.GetConfig().(*Provider_GcpSecretManager); ok {
		return x.GcpSecretManager
	}
	return nil
}

func (x *Provider) GetHashicorpVault() *HashicorpVault {
	if x, ok := x.GetConfig().(*Provider_HashicorpVault); ok {
		return x.HashicorpVault
	}
	return nil
}

type isProvider_Config interface {
	isProvider_Config()
}

type Provider_Mock struct {
	Mock *MockStore `protobuf:"bytes,1,opt,name=mock,proto3,oneof"`
}

type Provider_AkeylessSecretsManager struct {
	AkeylessSecretsManager *AkeylessSecretsManager `protobuf:"bytes,2,opt,name=akeyless_secrets_manager,json=akeylessSecretsManager,proto3,oneof"`
}

type Provider_AwsSecretsManager struct {
	AwsSecretsManager *AwsSecretsManager `protobuf:"bytes,3,opt,name=aws_secrets_manager,json=awsSecretsManager,proto3,oneof"`
}

type Provider_GcpSecretManager struct {
	GcpSecretManager *GcpSecretManager `protobuf:"bytes,4,opt,name=gcp_secret_manager,json=gcpSecretManager,proto3,oneof"`
}

type Provider_HashicorpVault struct {
	HashicorpVault *HashicorpVault `protobuf:"bytes,5,opt,name=hashicorp_vault,json=hashicorpVault,proto3,oneof"`
}

func (*Provider_Mock) isProvider_Config() {}

func (*Provider_AkeylessSecretsManager) isProvider_Config() {}

func (*Provider_AwsSecretsManager) isProvider_Config() {}

func (*Provider_GcpSecretManager) isProvider_Config() {}

func (*Provider_HashicorpVault) isProvider_Config() {}

type Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata        *v11.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Provider        *Provider     `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	Ttl             *int32        `protobuf:"varint,3,opt,name=ttl,proto3,oneof" json:"ttl,omitempty"`
	ConfigurationId string        `protobuf:"bytes,4,opt,name=configuration_id,json=configurationId,proto3" json:"configuration_id,omitempty"`
	Cache           bool          `protobuf:"varint,5,opt,name=cache,proto3" json:"cache,omitempty"`
}

func (x *Store) Reset() {
	*x = Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secrets_v1_secrets_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store) ProtoMessage() {}

func (x *Store) ProtoReflect() protoreflect.Message {
	mi := &file_secrets_v1_secrets_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store.ProtoReflect.Descriptor instead.
func (*Store) Descriptor() ([]byte, []int) {
	return file_secrets_v1_secrets_proto_rawDescGZIP(), []int{6}
}

func (x *Store) GetMetadata() *v11.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Store) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *Store) GetTtl() int32 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

func (x *Store) GetConfigurationId() string {
	if x != nil {
		return x.ConfigurationId
	}
	return ""
}

func (x *Store) GetCache() bool {
	if x != nil {
		return x.Cache
	}
	return false
}

// Details represents the details of a secret.
// It does not contain the value.
type Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// i.e. "foo"
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	// i.e. "/projects/my-project/secrets/foo/versions/1"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Details) Reset() {
	*x = Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secrets_v1_secrets_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Details) ProtoMessage() {}

func (x *Details) ProtoReflect() protoreflect.Message {
	mi := &file_secrets_v1_secrets_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Details.ProtoReflect.Descriptor instead.
func (*Details) Descriptor() ([]byte, []int) {
	return file_secrets_v1_secrets_proto_rawDescGZIP(), []int{7}
}

func (x *Details) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Details) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Invalidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias           string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	ConfigurationId string `protobuf:"bytes,2,opt,name=configuration_id,json=configurationId,proto3" json:"configuration_id,omitempty"`
	Store           string `protobuf:"bytes,3,opt,name=store,proto3" json:"store,omitempty"`
}

func (x *Invalidation) Reset() {
	*x = Invalidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secrets_v1_secrets_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Invalidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Invalidation) ProtoMessage() {}

func (x *Invalidation) ProtoReflect() protoreflect.Message {
	mi := &file_secrets_v1_secrets_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Invalidation.ProtoReflect.Descriptor instead.
func (*Invalidation) Descriptor() ([]byte, []int) {
	return file_secrets_v1_secrets_proto_rawDescGZIP(), []int{8}
}

func (x *Invalidation) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Invalidation) GetConfigurationId() string {
	if x != nil {
		return x.ConfigurationId
	}
	return ""
}

func (x *Invalidation) GetStore() string {
	if x != nil {
		return x.Store
	}
	return ""
}

type HashicorpVault_Auth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*HashicorpVault_Auth_Token
	//	*HashicorpVault_Auth_AppRole_
	Config isHashicorpVault_Auth_Config `protobuf_oneof:"config"`
}

func (x *HashicorpVault_Auth) Reset() {
	*x = HashicorpVault_Auth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secrets_v1_secrets_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashicorpVault_Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashicorpVault_Auth) ProtoMessage() {}

func (x *HashicorpVault_Auth) ProtoReflect() protoreflect.Message {
	mi := &file_secrets_v1_secrets_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashicorpVault_Auth.ProtoReflect.Descriptor instead.
func (*HashicorpVault_Auth) Descriptor() ([]byte, []int) {
	return file_secrets_v1_secrets_proto_rawDescGZIP(), []int{3, 0}
}

func (m *HashicorpVault_Auth) GetConfig() isHashicorpVault_Auth_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *HashicorpVault_Auth) GetToken() string {
	if x, ok := x.GetConfig().(*HashicorpVault_Auth_Token); ok {
		return x.Token
	}
	return ""
}

func (x *HashicorpVault_Auth) GetAppRole() *HashicorpVault_Auth_AppRole {
	if x, ok := x.GetConfig().(*HashicorpVault_Auth_AppRole_); ok {
		return x.AppRole
	}
	return nil
}

type isHashicorpVault_Auth_Config interface {
	isHashicorpVault_Auth_Config()
}

type HashicorpVault_Auth_Token struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3,oneof"`
}

type HashicorpVault_Auth_AppRole_ struct {
	AppRole *HashicorpVault_Auth_AppRole `protobuf:"bytes,2,opt,name=app_role,json=appRole,proto3,oneof"`
}

func (*HashicorpVault_Auth_Token) isHashicorpVault_Auth_Config() {}

func (*HashicorpVault_Auth_AppRole_) isHashicorpVault_Auth_Config() {}

type HashicorpVault_Auth_AppRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId   string `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	SecretId string `protobuf:"bytes,2,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
}

func (x *HashicorpVault_Auth_AppRole) Reset() {
	*x = HashicorpVault_Auth_AppRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secrets_v1_secrets_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashicorpVault_Auth_AppRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashicorpVault_Auth_AppRole) ProtoMessage() {}

func (x *HashicorpVault_Auth_AppRole) ProtoReflect() protoreflect.Message {
	mi := &file_secrets_v1_secrets_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashicorpVault_Auth_AppRole.ProtoReflect.Descriptor instead.
func (*HashicorpVault_Auth_AppRole) Descriptor() ([]byte, []int) {
	return file_secrets_v1_secrets_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *HashicorpVault_Auth_AppRole) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *HashicorpVault_Auth_AppRole) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

var File_secrets_v1_secrets_proto protoreflect.FileDescriptor

var file_secrets_v1_secrets_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x73, 0x0a, 0x11, 0x41, 0x77, 0x73,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x77, 0x73, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x71,
	0x0a, 0x10, 0x47, 0x63, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x63, 0x70, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x22, 0x9f, 0x01, 0x0a, 0x16, 0x41, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x22, 0xbf, 0x04, 0x0a, 0x0e, 0x48, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x56, 0x61, 0x75, 0x6c, 0x74,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x1a, 0xbf, 0x01, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x70, 0x70, 0x52,
	0x6f, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07, 0x61, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x1a, 0x4f,
	0x0a, 0x07, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x07, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x09, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x42, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x31, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x32, 0x10, 0x02, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0x79, 0x0a, 0x09, 0x4d, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x87, 0x03, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x04, 0x6d, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x63, 0x6b, 0x12, 0x5e, 0x0a, 0x18, 0x61, 0x6b,
	0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6b, 0x65, 0x79, 0x6c, 0x65,
	0x73, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x16, 0x61, 0x6b, 0x65, 0x79, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x13, 0x61, 0x77,
	0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x12, 0x67,
	0x63, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x63, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x67, 0x63, 0x70, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0f, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x56, 0x61, 0x75, 0x6c, 0x74,
	0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xe2, 0x01, 0x0a, 0x05, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x74, 0x6c, 0x22,
	0x33, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x3a, 0x5a, 0x38, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_secrets_v1_secrets_proto_rawDescOnce sync.Once
	file_secrets_v1_secrets_proto_rawDescData = file_secrets_v1_secrets_proto_rawDesc
)

func file_secrets_v1_secrets_proto_rawDescGZIP() []byte {
	file_secrets_v1_secrets_proto_rawDescOnce.Do(func() {
		file_secrets_v1_secrets_proto_rawDescData = protoimpl.X.CompressGZIP(file_secrets_v1_secrets_proto_rawDescData)
	})
	return file_secrets_v1_secrets_proto_rawDescData
}

var file_secrets_v1_secrets_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_secrets_v1_secrets_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_secrets_v1_secrets_proto_goTypes = []interface{}{
	(HashicorpVault_Version)(0),         // 0: secrets.v1.HashicorpVault.Version
	(*AwsSecretsManager)(nil),           // 1: secrets.v1.AwsSecretsManager
	(*GcpSecretManager)(nil),            // 2: secrets.v1.GcpSecretManager
	(*AkeylessSecretsManager)(nil),      // 3: secrets.v1.AkeylessSecretsManager
	(*HashicorpVault)(nil),              // 4: secrets.v1.HashicorpVault
	(*MockStore)(nil),                   // 5: secrets.v1.MockStore
	(*Provider)(nil),                    // 6: secrets.v1.Provider
	(*Store)(nil),                       // 7: secrets.v1.Store
	(*Details)(nil),                     // 8: secrets.v1.Details
	(*Invalidation)(nil),                // 9: secrets.v1.Invalidation
	(*HashicorpVault_Auth)(nil),         // 10: secrets.v1.HashicorpVault.Auth
	(*HashicorpVault_Auth_AppRole)(nil), // 11: secrets.v1.HashicorpVault.Auth.AppRole
	nil,                                 // 12: secrets.v1.MockStore.DataEntry
	(*v1.AwsAuth)(nil),                  // 13: plugins.common.v1.AwsAuth
	(*v1.GcpAuth)(nil),                  // 14: plugins.common.v1.GcpAuth
	(*v1.AkeylessAuth)(nil),             // 15: plugins.common.v1.AkeylessAuth
	(*v11.Metadata)(nil),                // 16: common.v1.Metadata
}
var file_secrets_v1_secrets_proto_depIdxs = []int32{
	13, // 0: secrets.v1.AwsSecretsManager.auth:type_name -> plugins.common.v1.AwsAuth
	14, // 1: secrets.v1.GcpSecretManager.auth:type_name -> plugins.common.v1.GcpAuth
	15, // 2: secrets.v1.AkeylessSecretsManager.auth:type_name -> plugins.common.v1.AkeylessAuth
	10, // 3: secrets.v1.HashicorpVault.auth:type_name -> secrets.v1.HashicorpVault.Auth
	0,  // 4: secrets.v1.HashicorpVault.version:type_name -> secrets.v1.HashicorpVault.Version
	12, // 5: secrets.v1.MockStore.data:type_name -> secrets.v1.MockStore.DataEntry
	5,  // 6: secrets.v1.Provider.mock:type_name -> secrets.v1.MockStore
	3,  // 7: secrets.v1.Provider.akeyless_secrets_manager:type_name -> secrets.v1.AkeylessSecretsManager
	1,  // 8: secrets.v1.Provider.aws_secrets_manager:type_name -> secrets.v1.AwsSecretsManager
	2,  // 9: secrets.v1.Provider.gcp_secret_manager:type_name -> secrets.v1.GcpSecretManager
	4,  // 10: secrets.v1.Provider.hashicorp_vault:type_name -> secrets.v1.HashicorpVault
	16, // 11: secrets.v1.Store.metadata:type_name -> common.v1.Metadata
	6,  // 12: secrets.v1.Store.provider:type_name -> secrets.v1.Provider
	11, // 13: secrets.v1.HashicorpVault.Auth.app_role:type_name -> secrets.v1.HashicorpVault.Auth.AppRole
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_secrets_v1_secrets_proto_init() }
func file_secrets_v1_secrets_proto_init() {
	if File_secrets_v1_secrets_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_secrets_v1_secrets_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsSecretsManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secrets_v1_secrets_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GcpSecretManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secrets_v1_secrets_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AkeylessSecretsManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secrets_v1_secrets_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashicorpVault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secrets_v1_secrets_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secrets_v1_secrets_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secrets_v1_secrets_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secrets_v1_secrets_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secrets_v1_secrets_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Invalidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secrets_v1_secrets_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashicorpVault_Auth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secrets_v1_secrets_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashicorpVault_Auth_AppRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_secrets_v1_secrets_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_secrets_v1_secrets_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_secrets_v1_secrets_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_secrets_v1_secrets_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Provider_Mock)(nil),
		(*Provider_AkeylessSecretsManager)(nil),
		(*Provider_AwsSecretsManager)(nil),
		(*Provider_GcpSecretManager)(nil),
		(*Provider_HashicorpVault)(nil),
	}
	file_secrets_v1_secrets_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_secrets_v1_secrets_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*HashicorpVault_Auth_Token)(nil),
		(*HashicorpVault_Auth_AppRole_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_secrets_v1_secrets_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_secrets_v1_secrets_proto_goTypes,
		DependencyIndexes: file_secrets_v1_secrets_proto_depIdxs,
		EnumInfos:         file_secrets_v1_secrets_proto_enumTypes,
		MessageInfos:      file_secrets_v1_secrets_proto_msgTypes,
	}.Build()
	File_secrets_v1_secrets_proto = out.File
	file_secrets_v1_secrets_proto_rawDesc = nil
	file_secrets_v1_secrets_proto_goTypes = nil
	file_secrets_v1_secrets_proto_depIdxs = nil
}
