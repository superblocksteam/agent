// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: ai/v1/ai.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	v1 "github.com/superblocksteam/agent/types/gen/go/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LLM int32

const (
	LLM_LLM_UNSPECIFIED LLM = 0
	LLM_LLM_OPENAI      LLM = 1
	LLM_LLM_ANTHROPIC   LLM = 2
	LLM_LLM_MOCK        LLM = 3
)

// Enum value maps for LLM.
var (
	LLM_name = map[int32]string{
		0: "LLM_UNSPECIFIED",
		1: "LLM_OPENAI",
		2: "LLM_ANTHROPIC",
		3: "LLM_MOCK",
	}
	LLM_value = map[string]int32{
		"LLM_UNSPECIFIED": 0,
		"LLM_OPENAI":      1,
		"LLM_ANTHROPIC":   2,
		"LLM_MOCK":        3,
	}
)

func (x LLM) Enum() *LLM {
	p := new(LLM)
	*p = x
	return p
}

func (x LLM) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LLM) Descriptor() protoreflect.EnumDescriptor {
	return file_ai_v1_ai_proto_enumTypes[0].Descriptor()
}

func (LLM) Type() protoreflect.EnumType {
	return &file_ai_v1_ai_proto_enumTypes[0]
}

func (x LLM) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LLM.Descriptor instead.
func (LLM) EnumDescriptor() ([]byte, []int) {
	return file_ai_v1_ai_proto_rawDescGZIP(), []int{0}
}

type MODEL int32

const (
	MODEL_MODEL_UNSPECIFIED                       MODEL = 0
	MODEL_MODEL_ANTHROPIC_CLAUDE_V1               MODEL = 1
	MODEL_MODEL_ANTHROPIC_CLAUDE_V1_0             MODEL = 2
	MODEL_MODEL_ANTHROPIC_CLAUDE_V1_2             MODEL = 3
	MODEL_MODEL_ANTHROPIC_CLAUDE_INSTANT_V1       MODEL = 4
	MODEL_MODEL_ANTHROPIC_CLAUDE_INSTANT_V1_0     MODEL = 5
	MODEL_MODEL_OPENAI_GPT432K0314                MODEL = 6
	MODEL_MODEL_OPENAI_GPT432K0613                MODEL = 26
	MODEL_MODEL_OPENAI_GPT432K                    MODEL = 7
	MODEL_MODEL_OPENAI_GPT40314                   MODEL = 8
	MODEL_MODEL_OPENAI_GPT40613                   MODEL = 27
	MODEL_MODEL_OPENAI_GPT4                       MODEL = 9
	MODEL_MODEL_OPENAI_GPT3_5_TURBO_0301          MODEL = 10
	MODEL_MODEL_OPENAI_GPT3_5_TURBO_0613          MODEL = 28
	MODEL_MODEL_OPENAI_GPT3_5_TURBO               MODEL = 11
	MODEL_MODEL_OPENAI_GPT3_5_TURBO_16K           MODEL = 29
	MODEL_MODEL_OPENAI_GPT3_5_TURBO_16K_0613      MODEL = 30
	MODEL_MODEL_OPENAI_GPT3_TEXT_DAVINCI_003      MODEL = 12
	MODEL_MODEL_OPENAI_GPT3_TEXT_DAVINCI_002      MODEL = 13
	MODEL_MODEL_OPENAI_GPT3_TEXT_CURIE_001        MODEL = 14
	MODEL_MODEL_OPENAI_GPT3_TEXT_BAGGAGE_001      MODEL = 15
	MODEL_MODEL_OPENAI_GPT3_TEXT_ADA_001          MODEL = 16
	MODEL_MODEL_OPENAI_GPT3_TEXT_DAVINCI_001      MODEL = 17
	MODEL_MODEL_OPENAI_GPT3_DAVINCI_INSTRUCT_BETA MODEL = 18
	MODEL_MODEL_OPENAI_GPT3_DAVINCI               MODEL = 19
	MODEL_MODEL_OPENAI_GPT3_CURIE_INSTRUCT_BETA   MODEL = 20
	MODEL_MODEL_OPENAI_GPT3_CURIE                 MODEL = 21
	MODEL_MODEL_OPENAI_GPT3_ADA                   MODEL = 22
	MODEL_MODEL_OPENAI_GPT3_BAGGAGE               MODEL = 23
	MODEL_MODEL_MOCK_TIER_ONE                     MODEL = 24
	MODEL_MODEL_MOCK_TIER_TWO                     MODEL = 25
)

// Enum value maps for MODEL.
var (
	MODEL_name = map[int32]string{
		0:  "MODEL_UNSPECIFIED",
		1:  "MODEL_ANTHROPIC_CLAUDE_V1",
		2:  "MODEL_ANTHROPIC_CLAUDE_V1_0",
		3:  "MODEL_ANTHROPIC_CLAUDE_V1_2",
		4:  "MODEL_ANTHROPIC_CLAUDE_INSTANT_V1",
		5:  "MODEL_ANTHROPIC_CLAUDE_INSTANT_V1_0",
		6:  "MODEL_OPENAI_GPT432K0314",
		26: "MODEL_OPENAI_GPT432K0613",
		7:  "MODEL_OPENAI_GPT432K",
		8:  "MODEL_OPENAI_GPT40314",
		27: "MODEL_OPENAI_GPT40613",
		9:  "MODEL_OPENAI_GPT4",
		10: "MODEL_OPENAI_GPT3_5_TURBO_0301",
		28: "MODEL_OPENAI_GPT3_5_TURBO_0613",
		11: "MODEL_OPENAI_GPT3_5_TURBO",
		29: "MODEL_OPENAI_GPT3_5_TURBO_16K",
		30: "MODEL_OPENAI_GPT3_5_TURBO_16K_0613",
		12: "MODEL_OPENAI_GPT3_TEXT_DAVINCI_003",
		13: "MODEL_OPENAI_GPT3_TEXT_DAVINCI_002",
		14: "MODEL_OPENAI_GPT3_TEXT_CURIE_001",
		15: "MODEL_OPENAI_GPT3_TEXT_BAGGAGE_001",
		16: "MODEL_OPENAI_GPT3_TEXT_ADA_001",
		17: "MODEL_OPENAI_GPT3_TEXT_DAVINCI_001",
		18: "MODEL_OPENAI_GPT3_DAVINCI_INSTRUCT_BETA",
		19: "MODEL_OPENAI_GPT3_DAVINCI",
		20: "MODEL_OPENAI_GPT3_CURIE_INSTRUCT_BETA",
		21: "MODEL_OPENAI_GPT3_CURIE",
		22: "MODEL_OPENAI_GPT3_ADA",
		23: "MODEL_OPENAI_GPT3_BAGGAGE",
		24: "MODEL_MOCK_TIER_ONE",
		25: "MODEL_MOCK_TIER_TWO",
	}
	MODEL_value = map[string]int32{
		"MODEL_UNSPECIFIED":                       0,
		"MODEL_ANTHROPIC_CLAUDE_V1":               1,
		"MODEL_ANTHROPIC_CLAUDE_V1_0":             2,
		"MODEL_ANTHROPIC_CLAUDE_V1_2":             3,
		"MODEL_ANTHROPIC_CLAUDE_INSTANT_V1":       4,
		"MODEL_ANTHROPIC_CLAUDE_INSTANT_V1_0":     5,
		"MODEL_OPENAI_GPT432K0314":                6,
		"MODEL_OPENAI_GPT432K0613":                26,
		"MODEL_OPENAI_GPT432K":                    7,
		"MODEL_OPENAI_GPT40314":                   8,
		"MODEL_OPENAI_GPT40613":                   27,
		"MODEL_OPENAI_GPT4":                       9,
		"MODEL_OPENAI_GPT3_5_TURBO_0301":          10,
		"MODEL_OPENAI_GPT3_5_TURBO_0613":          28,
		"MODEL_OPENAI_GPT3_5_TURBO":               11,
		"MODEL_OPENAI_GPT3_5_TURBO_16K":           29,
		"MODEL_OPENAI_GPT3_5_TURBO_16K_0613":      30,
		"MODEL_OPENAI_GPT3_TEXT_DAVINCI_003":      12,
		"MODEL_OPENAI_GPT3_TEXT_DAVINCI_002":      13,
		"MODEL_OPENAI_GPT3_TEXT_CURIE_001":        14,
		"MODEL_OPENAI_GPT3_TEXT_BAGGAGE_001":      15,
		"MODEL_OPENAI_GPT3_TEXT_ADA_001":          16,
		"MODEL_OPENAI_GPT3_TEXT_DAVINCI_001":      17,
		"MODEL_OPENAI_GPT3_DAVINCI_INSTRUCT_BETA": 18,
		"MODEL_OPENAI_GPT3_DAVINCI":               19,
		"MODEL_OPENAI_GPT3_CURIE_INSTRUCT_BETA":   20,
		"MODEL_OPENAI_GPT3_CURIE":                 21,
		"MODEL_OPENAI_GPT3_ADA":                   22,
		"MODEL_OPENAI_GPT3_BAGGAGE":               23,
		"MODEL_MOCK_TIER_ONE":                     24,
		"MODEL_MOCK_TIER_TWO":                     25,
	}
)

func (x MODEL) Enum() *MODEL {
	p := new(MODEL)
	*p = x
	return p
}

func (x MODEL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODEL) Descriptor() protoreflect.EnumDescriptor {
	return file_ai_v1_ai_proto_enumTypes[1].Descriptor()
}

func (MODEL) Type() protoreflect.EnumType {
	return &file_ai_v1_ai_proto_enumTypes[1]
}

func (x MODEL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODEL.Descriptor instead.
func (MODEL) EnumDescriptor() ([]byte, []int) {
	return file_ai_v1_ai_proto_rawDescGZIP(), []int{1}
}

type Role int32

const (
	Role_ROLE_UNSPECIFIED Role = 0
	Role_ROLE_USER        Role = 1
	Role_ROLE_ASSISTANT   Role = 2
	Role_ROLE_SYSTEM      Role = 3
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "ROLE_UNSPECIFIED",
		1: "ROLE_USER",
		2: "ROLE_ASSISTANT",
		3: "ROLE_SYSTEM",
	}
	Role_value = map[string]int32{
		"ROLE_UNSPECIFIED": 0,
		"ROLE_USER":        1,
		"ROLE_ASSISTANT":   2,
		"ROLE_SYSTEM":      3,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_ai_v1_ai_proto_enumTypes[2].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_ai_v1_ai_proto_enumTypes[2]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_ai_v1_ai_proto_rawDescGZIP(), []int{2}
}

// NOTE(frank): I guess these could just be in the Lnaguage enum.
type Syntax int32

const (
	Syntax_SYNTAX_UNSPECIFIED    Syntax = 0
	Syntax_SYNTAX_JAVASCRIPT     Syntax = 1
	Syntax_SYNTAX_PYTHON         Syntax = 2
	Syntax_SYNTAX_POSTGRESQL     Syntax = 3
	Syntax_SYNTAX_MSSQL          Syntax = 4
	Syntax_SYNTAX_MYSQL          Syntax = 5
	Syntax_SYNTAX_MARIADB        Syntax = 6
	Syntax_SYNTAX_SNOWFLAKE      Syntax = 7
	Syntax_SYNTAX_COCKROACHDB    Syntax = 8
	Syntax_SYNTAX_ROCKSET        Syntax = 9
	Syntax_SYNTAX_REDSHIFT       Syntax = 10
	Syntax_SYNTAX_BIGQUERY       Syntax = 11
	Syntax_SYNTAX_DYNAMODB       Syntax = 12
	Syntax_SYNTAX_MONGODB        Syntax = 13
	Syntax_SYNTAX_BINDING        Syntax = 14
	Syntax_SYNTAX_JSON           Syntax = 15
	Syntax_SYNTAX_HTML           Syntax = 16
	Syntax_SYNTAX_API            Syntax = 17
	Syntax_SYNTAX_PLUGIN_RESTAPI Syntax = 18
	Syntax_SYNTAX_PLUGIN_GRAPHQL Syntax = 19
	Syntax_SYNTAX_ORACLEDB       Syntax = 20
	Syntax_SYNTAX_DATABRICKS     Syntax = 21
)

// Enum value maps for Syntax.
var (
	Syntax_name = map[int32]string{
		0:  "SYNTAX_UNSPECIFIED",
		1:  "SYNTAX_JAVASCRIPT",
		2:  "SYNTAX_PYTHON",
		3:  "SYNTAX_POSTGRESQL",
		4:  "SYNTAX_MSSQL",
		5:  "SYNTAX_MYSQL",
		6:  "SYNTAX_MARIADB",
		7:  "SYNTAX_SNOWFLAKE",
		8:  "SYNTAX_COCKROACHDB",
		9:  "SYNTAX_ROCKSET",
		10: "SYNTAX_REDSHIFT",
		11: "SYNTAX_BIGQUERY",
		12: "SYNTAX_DYNAMODB",
		13: "SYNTAX_MONGODB",
		14: "SYNTAX_BINDING",
		15: "SYNTAX_JSON",
		16: "SYNTAX_HTML",
		17: "SYNTAX_API",
		18: "SYNTAX_PLUGIN_RESTAPI",
		19: "SYNTAX_PLUGIN_GRAPHQL",
		20: "SYNTAX_ORACLEDB",
		21: "SYNTAX_DATABRICKS",
	}
	Syntax_value = map[string]int32{
		"SYNTAX_UNSPECIFIED":    0,
		"SYNTAX_JAVASCRIPT":     1,
		"SYNTAX_PYTHON":         2,
		"SYNTAX_POSTGRESQL":     3,
		"SYNTAX_MSSQL":          4,
		"SYNTAX_MYSQL":          5,
		"SYNTAX_MARIADB":        6,
		"SYNTAX_SNOWFLAKE":      7,
		"SYNTAX_COCKROACHDB":    8,
		"SYNTAX_ROCKSET":        9,
		"SYNTAX_REDSHIFT":       10,
		"SYNTAX_BIGQUERY":       11,
		"SYNTAX_DYNAMODB":       12,
		"SYNTAX_MONGODB":        13,
		"SYNTAX_BINDING":        14,
		"SYNTAX_JSON":           15,
		"SYNTAX_HTML":           16,
		"SYNTAX_API":            17,
		"SYNTAX_PLUGIN_RESTAPI": 18,
		"SYNTAX_PLUGIN_GRAPHQL": 19,
		"SYNTAX_ORACLEDB":       20,
		"SYNTAX_DATABRICKS":     21,
	}
)

func (x Syntax) Enum() *Syntax {
	p := new(Syntax)
	*p = x
	return p
}

func (x Syntax) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Syntax) Descriptor() protoreflect.EnumDescriptor {
	return file_ai_v1_ai_proto_enumTypes[3].Descriptor()
}

func (Syntax) Type() protoreflect.EnumType {
	return &file_ai_v1_ai_proto_enumTypes[3]
}

func (x Syntax) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Syntax.Descriptor instead.
func (Syntax) EnumDescriptor() ([]byte, []int) {
	return file_ai_v1_ai_proto_rawDescGZIP(), []int{3}
}

type Persona int32

const (
	Persona_PERSONA_UNSPECIFIED Persona = 0
	Persona_PERSONA_DEVELOPER   Persona = 1
	Persona_PERSONA_TEACHER     Persona = 2
)

// Enum value maps for Persona.
var (
	Persona_name = map[int32]string{
		0: "PERSONA_UNSPECIFIED",
		1: "PERSONA_DEVELOPER",
		2: "PERSONA_TEACHER",
	}
	Persona_value = map[string]int32{
		"PERSONA_UNSPECIFIED": 0,
		"PERSONA_DEVELOPER":   1,
		"PERSONA_TEACHER":     2,
	}
)

func (x Persona) Enum() *Persona {
	p := new(Persona)
	*p = x
	return p
}

func (x Persona) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Persona) Descriptor() protoreflect.EnumDescriptor {
	return file_ai_v1_ai_proto_enumTypes[4].Descriptor()
}

func (Persona) Type() protoreflect.EnumType {
	return &file_ai_v1_ai_proto_enumTypes[4]
}

func (x Persona) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Persona.Descriptor instead.
func (Persona) EnumDescriptor() ([]byte, []int) {
	return file_ai_v1_ai_proto_rawDescGZIP(), []int{4}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role    Role   `protobuf:"varint,1,opt,name=role,proto3,enum=ai.v1.Role" json:"role,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_v1_ai_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_ai_v1_ai_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_ai_v1_ai_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_ROLE_UNSPECIFIED
}

func (x *Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*Task_Optimize_
	//	*Task_Edit_
	//	*Task_Explain_
	//	*Task_Create_
	//	*Task_Debug_
	//	*Task_Transpile_
	//	*Task_Mock_
	Kind    isTask_Kind `protobuf_oneof:"kind"`
	History []*Message  `protobuf:"bytes,6,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_v1_ai_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_ai_v1_ai_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_ai_v1_ai_proto_rawDescGZIP(), []int{1}
}

func (m *Task) GetKind() isTask_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Task) GetOptimize() *Task_Optimize {
	if x, ok := x.GetKind().(*Task_Optimize_); ok {
		return x.Optimize
	}
	return nil
}

func (x *Task) GetEdit() *Task_Edit {
	if x, ok := x.GetKind().(*Task_Edit_); ok {
		return x.Edit
	}
	return nil
}

func (x *Task) GetExplain() *Task_Explain {
	if x, ok := x.GetKind().(*Task_Explain_); ok {
		return x.Explain
	}
	return nil
}

func (x *Task) GetCreate() *Task_Create {
	if x, ok := x.GetKind().(*Task_Create_); ok {
		return x.Create
	}
	return nil
}

func (x *Task) GetDebug() *Task_Debug {
	if x, ok := x.GetKind().(*Task_Debug_); ok {
		return x.Debug
	}
	return nil
}

func (x *Task) GetTranspile() *Task_Transpile {
	if x, ok := x.GetKind().(*Task_Transpile_); ok {
		return x.Transpile
	}
	return nil
}

func (x *Task) GetMock() *Task_Mock {
	if x, ok := x.GetKind().(*Task_Mock_); ok {
		return x.Mock
	}
	return nil
}

func (x *Task) GetHistory() []*Message {
	if x != nil {
		return x.History
	}
	return nil
}

type isTask_Kind interface {
	isTask_Kind()
}

type Task_Optimize_ struct {
	Optimize *Task_Optimize `protobuf:"bytes,1,opt,name=optimize,proto3,oneof"`
}

type Task_Edit_ struct {
	Edit *Task_Edit `protobuf:"bytes,2,opt,name=edit,proto3,oneof"`
}

type Task_Explain_ struct {
	Explain *Task_Explain `protobuf:"bytes,3,opt,name=explain,proto3,oneof"`
}

type Task_Create_ struct {
	Create *Task_Create `protobuf:"bytes,4,opt,name=create,proto3,oneof"`
}

type Task_Debug_ struct {
	Debug *Task_Debug `protobuf:"bytes,5,opt,name=debug,proto3,oneof"`
}

type Task_Transpile_ struct {
	Transpile *Task_Transpile `protobuf:"bytes,7,opt,name=transpile,proto3,oneof"`
}

type Task_Mock_ struct {
	Mock *Task_Mock `protobuf:"bytes,8,opt,name=mock,proto3,oneof"`
}

func (*Task_Optimize_) isTask_Kind() {}

func (*Task_Edit_) isTask_Kind() {}

func (*Task_Explain_) isTask_Kind() {}

func (*Task_Create_) isTask_Kind() {}

func (*Task_Debug_) isTask_Kind() {}

func (*Task_Transpile_) isTask_Kind() {}

func (*Task_Mock_) isTask_Kind() {}

type Task_Optimize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Task_Optimize) Reset() {
	*x = Task_Optimize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_v1_ai_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Optimize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Optimize) ProtoMessage() {}

func (x *Task_Optimize) ProtoReflect() protoreflect.Message {
	mi := &file_ai_v1_ai_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Optimize.ProtoReflect.Descriptor instead.
func (*Task_Optimize) Descriptor() ([]byte, []int) {
	return file_ai_v1_ai_proto_rawDescGZIP(), []int{1, 0}
}

type Task_Debug struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Task_Debug) Reset() {
	*x = Task_Debug{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_v1_ai_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Debug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Debug) ProtoMessage() {}

func (x *Task_Debug) ProtoReflect() protoreflect.Message {
	mi := &file_ai_v1_ai_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Debug.ProtoReflect.Descriptor instead.
func (*Task_Debug) Descriptor() ([]byte, []int) {
	return file_ai_v1_ai_proto_rawDescGZIP(), []int{1, 1}
}

type Task_Transpile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Task_Transpile) Reset() {
	*x = Task_Transpile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_v1_ai_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Transpile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Transpile) ProtoMessage() {}

func (x *Task_Transpile) ProtoReflect() protoreflect.Message {
	mi := &file_ai_v1_ai_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Transpile.ProtoReflect.Descriptor instead.
func (*Task_Transpile) Descriptor() ([]byte, []int) {
	return file_ai_v1_ai_proto_rawDescGZIP(), []int{1, 2}
}

type Task_Edit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prompt  string             `protobuf:"bytes,1,opt,name=prompt,proto3" json:"prompt,omitempty"`
	Syntax  Syntax             `protobuf:"varint,2,opt,name=syntax,proto3,enum=ai.v1.Syntax" json:"syntax,omitempty"`
	Snippet string             `protobuf:"bytes,3,opt,name=snippet,proto3" json:"snippet,omitempty"`
	Context *Task_Edit_Context `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *Task_Edit) Reset() {
	*x = Task_Edit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_v1_ai_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Edit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Edit) ProtoMessage() {}

func (x *Task_Edit) ProtoReflect() protoreflect.Message {
	mi := &file_ai_v1_ai_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Edit.ProtoReflect.Descriptor instead.
func (*Task_Edit) Descriptor() ([]byte, []int) {
	return file_ai_v1_ai_proto_rawDescGZIP(), []int{1, 3}
}

func (x *Task_Edit) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *Task_Edit) GetSyntax() Syntax {
	if x != nil {
		return x.Syntax
	}
	return Syntax_SYNTAX_UNSPECIFIED
}

func (x *Task_Edit) GetSnippet() string {
	if x != nil {
		return x.Snippet
	}
	return ""
}

func (x *Task_Edit) GetContext() *Task_Edit_Context {
	if x != nil {
		return x.Context
	}
	return nil
}

type Task_Create struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prompt  string               `protobuf:"bytes,1,opt,name=prompt,proto3" json:"prompt,omitempty"`
	Syntax  Syntax               `protobuf:"varint,2,opt,name=syntax,proto3,enum=ai.v1.Syntax" json:"syntax,omitempty"`
	Context *Task_Create_Context `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *Task_Create) Reset() {
	*x = Task_Create{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_v1_ai_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Create) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Create) ProtoMessage() {}

func (x *Task_Create) ProtoReflect() protoreflect.Message {
	mi := &file_ai_v1_ai_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Create.ProtoReflect.Descriptor instead.
func (*Task_Create) Descriptor() ([]byte, []int) {
	return file_ai_v1_ai_proto_rawDescGZIP(), []int{1, 4}
}

func (x *Task_Create) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *Task_Create) GetSyntax() Syntax {
	if x != nil {
		return x.Syntax
	}
	return Syntax_SYNTAX_UNSPECIFIED
}

func (x *Task_Create) GetContext() *Task_Create_Context {
	if x != nil {
		return x.Context
	}
	return nil
}

type Task_Explain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Syntax   Syntax      `protobuf:"varint,1,opt,name=syntax,proto3,enum=ai.v1.Syntax" json:"syntax,omitempty"`
	Snippet  string      `protobuf:"bytes,2,opt,name=snippet,proto3" json:"snippet,omitempty"`
	Contents string      `protobuf:"bytes,3,opt,name=contents,proto3" json:"contents,omitempty"`
	Language v1.Language `protobuf:"varint,4,opt,name=language,proto3,enum=common.v1.Language" json:"language,omitempty"`
}

func (x *Task_Explain) Reset() {
	*x = Task_Explain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_v1_ai_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Explain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Explain) ProtoMessage() {}

func (x *Task_Explain) ProtoReflect() protoreflect.Message {
	mi := &file_ai_v1_ai_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Explain.ProtoReflect.Descriptor instead.
func (*Task_Explain) Descriptor() ([]byte, []int) {
	return file_ai_v1_ai_proto_rawDescGZIP(), []int{1, 5}
}

func (x *Task_Explain) GetSyntax() Syntax {
	if x != nil {
		return x.Syntax
	}
	return Syntax_SYNTAX_UNSPECIFIED
}

func (x *Task_Explain) GetSnippet() string {
	if x != nil {
		return x.Snippet
	}
	return ""
}

func (x *Task_Explain) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

func (x *Task_Explain) GetLanguage() v1.Language {
	if x != nil {
		return x.Language
	}
	return v1.Language(0)
}

type Task_Mock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Syntax Syntax `protobuf:"varint,1,opt,name=syntax,proto3,enum=ai.v1.Syntax" json:"syntax,omitempty"`
	Shape  string `protobuf:"bytes,2,opt,name=shape,proto3" json:"shape,omitempty"`
	Prompt string `protobuf:"bytes,3,opt,name=prompt,proto3" json:"prompt,omitempty"`
}

func (x *Task_Mock) Reset() {
	*x = Task_Mock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_v1_ai_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Mock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Mock) ProtoMessage() {}

func (x *Task_Mock) ProtoReflect() protoreflect.Message {
	mi := &file_ai_v1_ai_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Mock.ProtoReflect.Descriptor instead.
func (*Task_Mock) Descriptor() ([]byte, []int) {
	return file_ai_v1_ai_proto_rawDescGZIP(), []int{1, 6}
}

func (x *Task_Mock) GetSyntax() Syntax {
	if x != nil {
		return x.Syntax
	}
	return Syntax_SYNTAX_UNSPECIFIED
}

func (x *Task_Mock) GetShape() string {
	if x != nil {
		return x.Shape
	}
	return ""
}

func (x *Task_Mock) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

type Task_Edit_Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Configuration:
	//
	//	*Task_Edit_Context_Metadata
	//	*Task_Edit_Context_ConfigurationIds
	Configuration isTask_Edit_Context_Configuration `protobuf_oneof:"configuration"`
}

func (x *Task_Edit_Context) Reset() {
	*x = Task_Edit_Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_v1_ai_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Edit_Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Edit_Context) ProtoMessage() {}

func (x *Task_Edit_Context) ProtoReflect() protoreflect.Message {
	mi := &file_ai_v1_ai_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Edit_Context.ProtoReflect.Descriptor instead.
func (*Task_Edit_Context) Descriptor() ([]byte, []int) {
	return file_ai_v1_ai_proto_rawDescGZIP(), []int{1, 3, 0}
}

func (m *Task_Edit_Context) GetConfiguration() isTask_Edit_Context_Configuration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (x *Task_Edit_Context) GetMetadata() *structpb.Struct {
	if x, ok := x.GetConfiguration().(*Task_Edit_Context_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *Task_Edit_Context) GetConfigurationIds() *v1.StringList {
	if x, ok := x.GetConfiguration().(*Task_Edit_Context_ConfigurationIds); ok {
		return x.ConfigurationIds
	}
	return nil
}

type isTask_Edit_Context_Configuration interface {
	isTask_Edit_Context_Configuration()
}

type Task_Edit_Context_Metadata struct {
	Metadata *structpb.Struct `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type Task_Edit_Context_ConfigurationIds struct {
	ConfigurationIds *v1.StringList `protobuf:"bytes,2,opt,name=configuration_ids,json=configurationIds,proto3,oneof"`
}

func (*Task_Edit_Context_Metadata) isTask_Edit_Context_Configuration() {}

func (*Task_Edit_Context_ConfigurationIds) isTask_Edit_Context_Configuration() {}

type Task_Create_Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Configuration:
	//
	//	*Task_Create_Context_Metadata
	//	*Task_Create_Context_ConfigurationIds
	Configuration isTask_Create_Context_Configuration `protobuf_oneof:"configuration"`
}

func (x *Task_Create_Context) Reset() {
	*x = Task_Create_Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ai_v1_ai_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Create_Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Create_Context) ProtoMessage() {}

func (x *Task_Create_Context) ProtoReflect() protoreflect.Message {
	mi := &file_ai_v1_ai_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Create_Context.ProtoReflect.Descriptor instead.
func (*Task_Create_Context) Descriptor() ([]byte, []int) {
	return file_ai_v1_ai_proto_rawDescGZIP(), []int{1, 4, 0}
}

func (m *Task_Create_Context) GetConfiguration() isTask_Create_Context_Configuration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (x *Task_Create_Context) GetMetadata() *structpb.Struct {
	if x, ok := x.GetConfiguration().(*Task_Create_Context_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *Task_Create_Context) GetConfigurationIds() *v1.StringList {
	if x, ok := x.GetConfiguration().(*Task_Create_Context_ConfigurationIds); ok {
		return x.ConfigurationIds
	}
	return nil
}

type isTask_Create_Context_Configuration interface {
	isTask_Create_Context_Configuration()
}

type Task_Create_Context_Metadata struct {
	Metadata *structpb.Struct `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type Task_Create_Context_ConfigurationIds struct {
	ConfigurationIds *v1.StringList `protobuf:"bytes,2,opt,name=configuration_ids,json=configurationIds,proto3,oneof"`
}

func (*Task_Create_Context_Metadata) isTask_Create_Context_Configuration() {}

func (*Task_Create_Context_ConfigurationIds) isTask_Create_Context_Configuration() {}

var File_ai_v1_ai_proto protoreflect.FileDescriptor

var file_ai_v1_ai_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x61, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0xe0, 0x09, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x32, 0x0a, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x12,
	0x26, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x65, 0x64, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52,
	0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x48, 0x00, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x12, 0x35, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x69, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6d, 0x6f, 0x63, 0x6b,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x63, 0x6b,
	0x12, 0x28, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x0a, 0x0a, 0x08, 0x4f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x1a, 0x07, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x1a,
	0x0b, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x69, 0x6c, 0x65, 0x1a, 0xad, 0x02, 0x0a,
	0x04, 0x45, 0x64, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x25, 0x0a,
	0x06, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x52, 0x06, 0x73, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x12, 0x32,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x45, 0x64, 0x69,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x1a, 0x97, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x35,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x97, 0x02, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12,
	0x25, 0x0a, 0x06, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x52, 0x06,
	0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x97, 0x01, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x44, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x97, 0x01, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61,
	0x78, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6e, 0x69,
	0x70, 0x70, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6e, 0x69, 0x70,
	0x70, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2f, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x1a, 0x5b, 0x0a, 0x04, 0x4d, 0x6f, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x79, 0x6e, 0x74,
	0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x42, 0x06, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x2a, 0x4b, 0x0a, 0x03, 0x4c, 0x4c, 0x4d, 0x12, 0x13, 0x0a, 0x0f,
	0x4c, 0x4c, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4c, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x49, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4c, 0x4d, 0x5f, 0x41, 0x4e, 0x54, 0x48, 0x52, 0x4f, 0x50,
	0x49, 0x43, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4c, 0x4d, 0x5f, 0x4d, 0x4f, 0x43, 0x4b,
	0x10, 0x03, 0x2a, 0x8e, 0x08, 0x0a, 0x05, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x12, 0x15, 0x0a, 0x11,
	0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x41, 0x4e, 0x54,
	0x48, 0x52, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x44, 0x45, 0x5f, 0x56, 0x31,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x41, 0x4e, 0x54, 0x48,
	0x52, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x44, 0x45, 0x5f, 0x56, 0x31, 0x5f,
	0x30, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x41, 0x4e, 0x54,
	0x48, 0x52, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x44, 0x45, 0x5f, 0x56, 0x31,
	0x5f, 0x32, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x41, 0x4e,
	0x54, 0x48, 0x52, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x44, 0x45, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x56, 0x31, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x4d,
	0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x41, 0x4e, 0x54, 0x48, 0x52, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x43,
	0x4c, 0x41, 0x55, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x56, 0x31,
	0x5f, 0x30, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x41, 0x49, 0x5f, 0x47, 0x50, 0x54, 0x34, 0x33, 0x32, 0x4b, 0x30, 0x33, 0x31, 0x34,
	0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x41, 0x49, 0x5f, 0x47, 0x50, 0x54, 0x34, 0x33, 0x32, 0x4b, 0x30, 0x36, 0x31, 0x33, 0x10, 0x1a,
	0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x49,
	0x5f, 0x47, 0x50, 0x54, 0x34, 0x33, 0x32, 0x4b, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f,
	0x44, 0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x49, 0x5f, 0x47, 0x50, 0x54, 0x34, 0x30,
	0x33, 0x31, 0x34, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4f,
	0x50, 0x45, 0x4e, 0x41, 0x49, 0x5f, 0x47, 0x50, 0x54, 0x34, 0x30, 0x36, 0x31, 0x33, 0x10, 0x1b,
	0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x49,
	0x5f, 0x47, 0x50, 0x54, 0x34, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x4f, 0x44, 0x45, 0x4c,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x49, 0x5f, 0x47, 0x50, 0x54, 0x33, 0x5f, 0x35, 0x5f, 0x54,
	0x55, 0x52, 0x42, 0x4f, 0x5f, 0x30, 0x33, 0x30, 0x31, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x4d,
	0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x49, 0x5f, 0x47, 0x50, 0x54, 0x33,
	0x5f, 0x35, 0x5f, 0x54, 0x55, 0x52, 0x42, 0x4f, 0x5f, 0x30, 0x36, 0x31, 0x33, 0x10, 0x1c, 0x12,
	0x1d, 0x0a, 0x19, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x49, 0x5f,
	0x47, 0x50, 0x54, 0x33, 0x5f, 0x35, 0x5f, 0x54, 0x55, 0x52, 0x42, 0x4f, 0x10, 0x0b, 0x12, 0x21,
	0x0a, 0x1d, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x49, 0x5f, 0x47,
	0x50, 0x54, 0x33, 0x5f, 0x35, 0x5f, 0x54, 0x55, 0x52, 0x42, 0x4f, 0x5f, 0x31, 0x36, 0x4b, 0x10,
	0x1d, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41,
	0x49, 0x5f, 0x47, 0x50, 0x54, 0x33, 0x5f, 0x35, 0x5f, 0x54, 0x55, 0x52, 0x42, 0x4f, 0x5f, 0x31,
	0x36, 0x4b, 0x5f, 0x30, 0x36, 0x31, 0x33, 0x10, 0x1e, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x4f, 0x44,
	0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x49, 0x5f, 0x47, 0x50, 0x54, 0x33, 0x5f, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x44, 0x41, 0x56, 0x49, 0x4e, 0x43, 0x49, 0x5f, 0x30, 0x30, 0x33, 0x10,
	0x0c, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41,
	0x49, 0x5f, 0x47, 0x50, 0x54, 0x33, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x44, 0x41, 0x56, 0x49,
	0x4e, 0x43, 0x49, 0x5f, 0x30, 0x30, 0x32, 0x10, 0x0d, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x4f, 0x44,
	0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x49, 0x5f, 0x47, 0x50, 0x54, 0x33, 0x5f, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x49, 0x45, 0x5f, 0x30, 0x30, 0x31, 0x10, 0x0e, 0x12,
	0x26, 0x0a, 0x22, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x49, 0x5f,
	0x47, 0x50, 0x54, 0x33, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x42, 0x41, 0x47, 0x47, 0x41, 0x47,
	0x45, 0x5f, 0x30, 0x30, 0x31, 0x10, 0x0f, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x4f, 0x44, 0x45, 0x4c,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x49, 0x5f, 0x47, 0x50, 0x54, 0x33, 0x5f, 0x54, 0x45, 0x58,
	0x54, 0x5f, 0x41, 0x44, 0x41, 0x5f, 0x30, 0x30, 0x31, 0x10, 0x10, 0x12, 0x26, 0x0a, 0x22, 0x4d,
	0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x49, 0x5f, 0x47, 0x50, 0x54, 0x33,
	0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x44, 0x41, 0x56, 0x49, 0x4e, 0x43, 0x49, 0x5f, 0x30, 0x30,
	0x31, 0x10, 0x11, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x41, 0x49, 0x5f, 0x47, 0x50, 0x54, 0x33, 0x5f, 0x44, 0x41, 0x56, 0x49, 0x4e, 0x43, 0x49,
	0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x41, 0x10, 0x12,
	0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x49,
	0x5f, 0x47, 0x50, 0x54, 0x33, 0x5f, 0x44, 0x41, 0x56, 0x49, 0x4e, 0x43, 0x49, 0x10, 0x13, 0x12,
	0x29, 0x0a, 0x25, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x49, 0x5f,
	0x47, 0x50, 0x54, 0x33, 0x5f, 0x43, 0x55, 0x52, 0x49, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52,
	0x55, 0x43, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x41, 0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x4f,
	0x44, 0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x49, 0x5f, 0x47, 0x50, 0x54, 0x33, 0x5f,
	0x43, 0x55, 0x52, 0x49, 0x45, 0x10, 0x15, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x44, 0x45, 0x4c,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x49, 0x5f, 0x47, 0x50, 0x54, 0x33, 0x5f, 0x41, 0x44, 0x41,
	0x10, 0x16, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x41, 0x49, 0x5f, 0x47, 0x50, 0x54, 0x33, 0x5f, 0x42, 0x41, 0x47, 0x47, 0x41, 0x47, 0x45, 0x10,
	0x17, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4d, 0x4f, 0x43, 0x4b, 0x5f,
	0x54, 0x49, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f,
	0x44, 0x45, 0x4c, 0x5f, 0x4d, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x54, 0x57,
	0x4f, 0x10, 0x19, 0x2a, 0x50, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52,
	0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41,
	0x4e, 0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x10, 0x03, 0x2a, 0xd6, 0x03, 0x0a, 0x06, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x59, 0x4e, 0x54,
	0x41, 0x58, 0x5f, 0x4a, 0x41, 0x56, 0x41, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x50, 0x59, 0x54, 0x48, 0x4f, 0x4e,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x50, 0x4f, 0x53,
	0x54, 0x47, 0x52, 0x45, 0x53, 0x51, 0x4c, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x4e,
	0x54, 0x41, 0x58, 0x5f, 0x4d, 0x53, 0x53, 0x51, 0x4c, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x10, 0x05, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x4d, 0x41, 0x52, 0x49, 0x41, 0x44, 0x42, 0x10,
	0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x53, 0x4e, 0x4f, 0x57,
	0x46, 0x4c, 0x41, 0x4b, 0x45, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x59, 0x4e, 0x54, 0x41,
	0x58, 0x5f, 0x43, 0x4f, 0x43, 0x4b, 0x52, 0x4f, 0x41, 0x43, 0x48, 0x44, 0x42, 0x10, 0x08, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x52, 0x4f, 0x43, 0x4b, 0x53, 0x45,
	0x54, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x52, 0x45,
	0x44, 0x53, 0x48, 0x49, 0x46, 0x54, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x59, 0x4e, 0x54,
	0x41, 0x58, 0x5f, 0x42, 0x49, 0x47, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x0b, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x4f, 0x44, 0x42,
	0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x4d, 0x4f, 0x4e,
	0x47, 0x4f, 0x44, 0x42, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58,
	0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x59,
	0x4e, 0x54, 0x41, 0x58, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x41, 0x50, 0x49, 0x10, 0x11, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x41, 0x50, 0x49, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x59, 0x4e, 0x54, 0x41,
	0x58, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x51, 0x4c,
	0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x4f, 0x52, 0x41,
	0x43, 0x4c, 0x45, 0x44, 0x42, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x59, 0x4e, 0x54, 0x41,
	0x58, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x52, 0x49, 0x43, 0x4b, 0x53, 0x10, 0x15, 0x2a, 0x4e,
	0x0a, 0x07, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x45, 0x52,
	0x53, 0x4f, 0x4e, 0x41, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x5f, 0x44, 0x45,
	0x56, 0x45, 0x4c, 0x4f, 0x50, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x45, 0x52,
	0x53, 0x4f, 0x4e, 0x41, 0x5f, 0x54, 0x45, 0x41, 0x43, 0x48, 0x45, 0x52, 0x10, 0x02, 0x42, 0x35,
	0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f,
	0x61, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ai_v1_ai_proto_rawDescOnce sync.Once
	file_ai_v1_ai_proto_rawDescData = file_ai_v1_ai_proto_rawDesc
)

func file_ai_v1_ai_proto_rawDescGZIP() []byte {
	file_ai_v1_ai_proto_rawDescOnce.Do(func() {
		file_ai_v1_ai_proto_rawDescData = protoimpl.X.CompressGZIP(file_ai_v1_ai_proto_rawDescData)
	})
	return file_ai_v1_ai_proto_rawDescData
}

var file_ai_v1_ai_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_ai_v1_ai_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_ai_v1_ai_proto_goTypes = []interface{}{
	(LLM)(0),                    // 0: ai.v1.LLM
	(MODEL)(0),                  // 1: ai.v1.MODEL
	(Role)(0),                   // 2: ai.v1.Role
	(Syntax)(0),                 // 3: ai.v1.Syntax
	(Persona)(0),                // 4: ai.v1.Persona
	(*Message)(nil),             // 5: ai.v1.Message
	(*Task)(nil),                // 6: ai.v1.Task
	(*Task_Optimize)(nil),       // 7: ai.v1.Task.Optimize
	(*Task_Debug)(nil),          // 8: ai.v1.Task.Debug
	(*Task_Transpile)(nil),      // 9: ai.v1.Task.Transpile
	(*Task_Edit)(nil),           // 10: ai.v1.Task.Edit
	(*Task_Create)(nil),         // 11: ai.v1.Task.Create
	(*Task_Explain)(nil),        // 12: ai.v1.Task.Explain
	(*Task_Mock)(nil),           // 13: ai.v1.Task.Mock
	(*Task_Edit_Context)(nil),   // 14: ai.v1.Task.Edit.Context
	(*Task_Create_Context)(nil), // 15: ai.v1.Task.Create.Context
	(v1.Language)(0),            // 16: common.v1.Language
	(*structpb.Struct)(nil),     // 17: google.protobuf.Struct
	(*v1.StringList)(nil),       // 18: common.v1.StringList
}
var file_ai_v1_ai_proto_depIdxs = []int32{
	2,  // 0: ai.v1.Message.role:type_name -> ai.v1.Role
	7,  // 1: ai.v1.Task.optimize:type_name -> ai.v1.Task.Optimize
	10, // 2: ai.v1.Task.edit:type_name -> ai.v1.Task.Edit
	12, // 3: ai.v1.Task.explain:type_name -> ai.v1.Task.Explain
	11, // 4: ai.v1.Task.create:type_name -> ai.v1.Task.Create
	8,  // 5: ai.v1.Task.debug:type_name -> ai.v1.Task.Debug
	9,  // 6: ai.v1.Task.transpile:type_name -> ai.v1.Task.Transpile
	13, // 7: ai.v1.Task.mock:type_name -> ai.v1.Task.Mock
	5,  // 8: ai.v1.Task.history:type_name -> ai.v1.Message
	3,  // 9: ai.v1.Task.Edit.syntax:type_name -> ai.v1.Syntax
	14, // 10: ai.v1.Task.Edit.context:type_name -> ai.v1.Task.Edit.Context
	3,  // 11: ai.v1.Task.Create.syntax:type_name -> ai.v1.Syntax
	15, // 12: ai.v1.Task.Create.context:type_name -> ai.v1.Task.Create.Context
	3,  // 13: ai.v1.Task.Explain.syntax:type_name -> ai.v1.Syntax
	16, // 14: ai.v1.Task.Explain.language:type_name -> common.v1.Language
	3,  // 15: ai.v1.Task.Mock.syntax:type_name -> ai.v1.Syntax
	17, // 16: ai.v1.Task.Edit.Context.metadata:type_name -> google.protobuf.Struct
	18, // 17: ai.v1.Task.Edit.Context.configuration_ids:type_name -> common.v1.StringList
	17, // 18: ai.v1.Task.Create.Context.metadata:type_name -> google.protobuf.Struct
	18, // 19: ai.v1.Task.Create.Context.configuration_ids:type_name -> common.v1.StringList
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_ai_v1_ai_proto_init() }
func file_ai_v1_ai_proto_init() {
	if File_ai_v1_ai_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ai_v1_ai_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_v1_ai_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_v1_ai_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Optimize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_v1_ai_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Debug); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_v1_ai_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Transpile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_v1_ai_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Edit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_v1_ai_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Create); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_v1_ai_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Explain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_v1_ai_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Mock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_v1_ai_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Edit_Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ai_v1_ai_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Create_Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ai_v1_ai_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Task_Optimize_)(nil),
		(*Task_Edit_)(nil),
		(*Task_Explain_)(nil),
		(*Task_Create_)(nil),
		(*Task_Debug_)(nil),
		(*Task_Transpile_)(nil),
		(*Task_Mock_)(nil),
	}
	file_ai_v1_ai_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Task_Edit_Context_Metadata)(nil),
		(*Task_Edit_Context_ConfigurationIds)(nil),
	}
	file_ai_v1_ai_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Task_Create_Context_Metadata)(nil),
		(*Task_Create_Context_ConfigurationIds)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ai_v1_ai_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ai_v1_ai_proto_goTypes,
		DependencyIndexes: file_ai_v1_ai_proto_depIdxs,
		EnumInfos:         file_ai_v1_ai_proto_enumTypes,
		MessageInfos:      file_ai_v1_ai_proto_msgTypes,
	}.Build()
	File_ai_v1_ai_proto = out.File
	file_ai_v1_ai_proto_rawDesc = nil
	file_ai_v1_ai_proto_goTypes = nil
	file_ai_v1_ai_proto_depIdxs = nil
}
