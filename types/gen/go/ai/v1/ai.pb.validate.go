// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ai/v1/ai.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v1 "github.com/superblocksteam/agent/types/gen/go/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v1.Language(0)
)

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MessageMultiError, or nil if none found.
func (m *Message) ValidateAll() error {
	return m.validate(true)
}

func (m *Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Role

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := MessageValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MessageMultiError(errors)
	}

	return nil
}

// MessageMultiError is an error wrapping multiple validation errors returned
// by Message.ValidateAll() if the designated constraints aren't met.
type MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageMultiError) AllErrors() []error { return m }

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}

// Validate checks the field values on Task with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Task) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TaskMultiError, or nil if none found.
func (m *Task) ValidateAll() error {
	return m.validate(true)
}

func (m *Task) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetHistory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  fmt.Sprintf("History[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  fmt.Sprintf("History[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskValidationError{
					field:  fmt.Sprintf("History[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	switch v := m.Kind.(type) {
	case *Task_Optimize_:
		if v == nil {
			err := TaskValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOptimize()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "Optimize",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "Optimize",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOptimize()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskValidationError{
					field:  "Optimize",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Task_Edit_:
		if v == nil {
			err := TaskValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEdit()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "Edit",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "Edit",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEdit()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskValidationError{
					field:  "Edit",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Task_Explain_:
		if v == nil {
			err := TaskValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExplain()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "Explain",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "Explain",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExplain()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskValidationError{
					field:  "Explain",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Task_Create_:
		if v == nil {
			err := TaskValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCreate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "Create",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "Create",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskValidationError{
					field:  "Create",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Task_Debug_:
		if v == nil {
			err := TaskValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDebug()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "Debug",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "Debug",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDebug()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskValidationError{
					field:  "Debug",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Task_Transpile_:
		if v == nil {
			err := TaskValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTranspile()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "Transpile",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "Transpile",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTranspile()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskValidationError{
					field:  "Transpile",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Task_Mock_:
		if v == nil {
			err := TaskValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMock()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "Mock",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskValidationError{
						field:  "Mock",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMock()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskValidationError{
					field:  "Mock",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TaskMultiError(errors)
	}

	return nil
}

// TaskMultiError is an error wrapping multiple validation errors returned by
// Task.ValidateAll() if the designated constraints aren't met.
type TaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskMultiError) AllErrors() []error { return m }

// TaskValidationError is the validation error returned by Task.Validate if the
// designated constraints aren't met.
type TaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskValidationError) ErrorName() string { return "TaskValidationError" }

// Error satisfies the builtin error interface
func (e TaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskValidationError{}

// Validate checks the field values on Task_Optimize with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Task_Optimize) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_Optimize with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Task_OptimizeMultiError, or
// nil if none found.
func (m *Task_Optimize) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_Optimize) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Task_OptimizeMultiError(errors)
	}

	return nil
}

// Task_OptimizeMultiError is an error wrapping multiple validation errors
// returned by Task_Optimize.ValidateAll() if the designated constraints
// aren't met.
type Task_OptimizeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_OptimizeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_OptimizeMultiError) AllErrors() []error { return m }

// Task_OptimizeValidationError is the validation error returned by
// Task_Optimize.Validate if the designated constraints aren't met.
type Task_OptimizeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_OptimizeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_OptimizeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_OptimizeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_OptimizeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_OptimizeValidationError) ErrorName() string { return "Task_OptimizeValidationError" }

// Error satisfies the builtin error interface
func (e Task_OptimizeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_Optimize.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_OptimizeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_OptimizeValidationError{}

// Validate checks the field values on Task_Debug with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Task_Debug) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_Debug with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Task_DebugMultiError, or
// nil if none found.
func (m *Task_Debug) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_Debug) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Task_DebugMultiError(errors)
	}

	return nil
}

// Task_DebugMultiError is an error wrapping multiple validation errors
// returned by Task_Debug.ValidateAll() if the designated constraints aren't met.
type Task_DebugMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_DebugMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_DebugMultiError) AllErrors() []error { return m }

// Task_DebugValidationError is the validation error returned by
// Task_Debug.Validate if the designated constraints aren't met.
type Task_DebugValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_DebugValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_DebugValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_DebugValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_DebugValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_DebugValidationError) ErrorName() string { return "Task_DebugValidationError" }

// Error satisfies the builtin error interface
func (e Task_DebugValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_Debug.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_DebugValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_DebugValidationError{}

// Validate checks the field values on Task_Transpile with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Task_Transpile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_Transpile with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Task_TranspileMultiError,
// or nil if none found.
func (m *Task_Transpile) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_Transpile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Task_TranspileMultiError(errors)
	}

	return nil
}

// Task_TranspileMultiError is an error wrapping multiple validation errors
// returned by Task_Transpile.ValidateAll() if the designated constraints
// aren't met.
type Task_TranspileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_TranspileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_TranspileMultiError) AllErrors() []error { return m }

// Task_TranspileValidationError is the validation error returned by
// Task_Transpile.Validate if the designated constraints aren't met.
type Task_TranspileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_TranspileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_TranspileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_TranspileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_TranspileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_TranspileValidationError) ErrorName() string { return "Task_TranspileValidationError" }

// Error satisfies the builtin error interface
func (e Task_TranspileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_Transpile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_TranspileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_TranspileValidationError{}

// Validate checks the field values on Task_Edit with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Task_Edit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_Edit with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Task_EditMultiError, or nil
// if none found.
func (m *Task_Edit) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_Edit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Prompt

	// no validation rules for Syntax

	// no validation rules for Snippet

	if all {
		switch v := interface{}(m.GetContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Task_EditValidationError{
					field:  "Context",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Task_EditValidationError{
					field:  "Context",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Task_EditValidationError{
				field:  "Context",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Task_EditMultiError(errors)
	}

	return nil
}

// Task_EditMultiError is an error wrapping multiple validation errors returned
// by Task_Edit.ValidateAll() if the designated constraints aren't met.
type Task_EditMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_EditMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_EditMultiError) AllErrors() []error { return m }

// Task_EditValidationError is the validation error returned by
// Task_Edit.Validate if the designated constraints aren't met.
type Task_EditValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_EditValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_EditValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_EditValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_EditValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_EditValidationError) ErrorName() string { return "Task_EditValidationError" }

// Error satisfies the builtin error interface
func (e Task_EditValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_Edit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_EditValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_EditValidationError{}

// Validate checks the field values on Task_Create with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Task_Create) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_Create with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Task_CreateMultiError, or
// nil if none found.
func (m *Task_Create) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_Create) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Prompt

	// no validation rules for Syntax

	if all {
		switch v := interface{}(m.GetContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Task_CreateValidationError{
					field:  "Context",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Task_CreateValidationError{
					field:  "Context",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Task_CreateValidationError{
				field:  "Context",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Task_CreateMultiError(errors)
	}

	return nil
}

// Task_CreateMultiError is an error wrapping multiple validation errors
// returned by Task_Create.ValidateAll() if the designated constraints aren't met.
type Task_CreateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_CreateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_CreateMultiError) AllErrors() []error { return m }

// Task_CreateValidationError is the validation error returned by
// Task_Create.Validate if the designated constraints aren't met.
type Task_CreateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_CreateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_CreateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_CreateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_CreateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_CreateValidationError) ErrorName() string { return "Task_CreateValidationError" }

// Error satisfies the builtin error interface
func (e Task_CreateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_Create.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_CreateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_CreateValidationError{}

// Validate checks the field values on Task_Explain with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Task_Explain) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_Explain with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Task_ExplainMultiError, or
// nil if none found.
func (m *Task_Explain) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_Explain) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Syntax

	// no validation rules for Snippet

	// no validation rules for Contents

	// no validation rules for Language

	if len(errors) > 0 {
		return Task_ExplainMultiError(errors)
	}

	return nil
}

// Task_ExplainMultiError is an error wrapping multiple validation errors
// returned by Task_Explain.ValidateAll() if the designated constraints aren't met.
type Task_ExplainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_ExplainMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_ExplainMultiError) AllErrors() []error { return m }

// Task_ExplainValidationError is the validation error returned by
// Task_Explain.Validate if the designated constraints aren't met.
type Task_ExplainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_ExplainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_ExplainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_ExplainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_ExplainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_ExplainValidationError) ErrorName() string { return "Task_ExplainValidationError" }

// Error satisfies the builtin error interface
func (e Task_ExplainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_Explain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_ExplainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_ExplainValidationError{}

// Validate checks the field values on Task_Mock with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Task_Mock) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_Mock with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Task_MockMultiError, or nil
// if none found.
func (m *Task_Mock) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_Mock) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Syntax

	// no validation rules for Shape

	// no validation rules for Prompt

	if len(errors) > 0 {
		return Task_MockMultiError(errors)
	}

	return nil
}

// Task_MockMultiError is an error wrapping multiple validation errors returned
// by Task_Mock.ValidateAll() if the designated constraints aren't met.
type Task_MockMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_MockMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_MockMultiError) AllErrors() []error { return m }

// Task_MockValidationError is the validation error returned by
// Task_Mock.Validate if the designated constraints aren't met.
type Task_MockValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_MockValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_MockValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_MockValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_MockValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_MockValidationError) ErrorName() string { return "Task_MockValidationError" }

// Error satisfies the builtin error interface
func (e Task_MockValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_Mock.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_MockValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_MockValidationError{}

// Validate checks the field values on Task_Edit_Context with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Task_Edit_Context) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_Edit_Context with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Task_Edit_ContextMultiError, or nil if none found.
func (m *Task_Edit_Context) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_Edit_Context) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Configuration.(type) {
	case *Task_Edit_Context_Metadata:
		if v == nil {
			err := Task_Edit_ContextValidationError{
				field:  "Configuration",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMetadata()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Task_Edit_ContextValidationError{
						field:  "Metadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Task_Edit_ContextValidationError{
						field:  "Metadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Task_Edit_ContextValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Task_Edit_Context_ConfigurationIds:
		if v == nil {
			err := Task_Edit_ContextValidationError{
				field:  "Configuration",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetConfigurationIds()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Task_Edit_ContextValidationError{
						field:  "ConfigurationIds",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Task_Edit_ContextValidationError{
						field:  "ConfigurationIds",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConfigurationIds()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Task_Edit_ContextValidationError{
					field:  "ConfigurationIds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return Task_Edit_ContextMultiError(errors)
	}

	return nil
}

// Task_Edit_ContextMultiError is an error wrapping multiple validation errors
// returned by Task_Edit_Context.ValidateAll() if the designated constraints
// aren't met.
type Task_Edit_ContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_Edit_ContextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_Edit_ContextMultiError) AllErrors() []error { return m }

// Task_Edit_ContextValidationError is the validation error returned by
// Task_Edit_Context.Validate if the designated constraints aren't met.
type Task_Edit_ContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_Edit_ContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_Edit_ContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_Edit_ContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_Edit_ContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_Edit_ContextValidationError) ErrorName() string {
	return "Task_Edit_ContextValidationError"
}

// Error satisfies the builtin error interface
func (e Task_Edit_ContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_Edit_Context.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_Edit_ContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_Edit_ContextValidationError{}

// Validate checks the field values on Task_Create_Context with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Task_Create_Context) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task_Create_Context with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Task_Create_ContextMultiError, or nil if none found.
func (m *Task_Create_Context) ValidateAll() error {
	return m.validate(true)
}

func (m *Task_Create_Context) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Configuration.(type) {
	case *Task_Create_Context_Metadata:
		if v == nil {
			err := Task_Create_ContextValidationError{
				field:  "Configuration",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMetadata()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Task_Create_ContextValidationError{
						field:  "Metadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Task_Create_ContextValidationError{
						field:  "Metadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Task_Create_ContextValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Task_Create_Context_ConfigurationIds:
		if v == nil {
			err := Task_Create_ContextValidationError{
				field:  "Configuration",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetConfigurationIds()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Task_Create_ContextValidationError{
						field:  "ConfigurationIds",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Task_Create_ContextValidationError{
						field:  "ConfigurationIds",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConfigurationIds()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Task_Create_ContextValidationError{
					field:  "ConfigurationIds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return Task_Create_ContextMultiError(errors)
	}

	return nil
}

// Task_Create_ContextMultiError is an error wrapping multiple validation
// errors returned by Task_Create_Context.ValidateAll() if the designated
// constraints aren't met.
type Task_Create_ContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Task_Create_ContextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Task_Create_ContextMultiError) AllErrors() []error { return m }

// Task_Create_ContextValidationError is the validation error returned by
// Task_Create_Context.Validate if the designated constraints aren't met.
type Task_Create_ContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Task_Create_ContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Task_Create_ContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Task_Create_ContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Task_Create_ContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Task_Create_ContextValidationError) ErrorName() string {
	return "Task_Create_ContextValidationError"
}

// Error satisfies the builtin error interface
func (e Task_Create_ContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask_Create_Context.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Task_Create_ContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Task_Create_ContextValidationError{}
