// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: agent/v1/service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v1 "github.com/superblocksteam/agent/types/gen/go/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v1.UserType(0)
)

// define the regex for a UUID once up-front
var _service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RegistrationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegistrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistrationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegistrationRequestMultiError, or nil if none found.
func (m *RegistrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetPluginVersions()))
		i := 0
		for key := range m.GetPluginVersions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPluginVersions()[key]
			_ = val

			// no validation rules for PluginVersions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RegistrationRequestValidationError{
							field:  fmt.Sprintf("PluginVersions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RegistrationRequestValidationError{
							field:  fmt.Sprintf("PluginVersions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RegistrationRequestValidationError{
						field:  fmt.Sprintf("PluginVersions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Type

	{
		sorted_keys := make([]string, len(m.GetTags()))
		i := 0
		for key := range m.GetTags() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetTags()[key]
			_ = val

			// no validation rules for Tags[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RegistrationRequestValidationError{
							field:  fmt.Sprintf("Tags[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RegistrationRequestValidationError{
							field:  fmt.Sprintf("Tags[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RegistrationRequestValidationError{
						field:  fmt.Sprintf("Tags[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for SigningKeyId

	if len(errors) > 0 {
		return RegistrationRequestMultiError(errors)
	}

	return nil
}

// RegistrationRequestMultiError is an error wrapping multiple validation
// errors returned by RegistrationRequest.ValidateAll() if the designated
// constraints aren't met.
type RegistrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistrationRequestMultiError) AllErrors() []error { return m }

// RegistrationRequestValidationError is the validation error returned by
// RegistrationRequest.Validate if the designated constraints aren't met.
type RegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistrationRequestValidationError) ErrorName() string {
	return "RegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistrationRequestValidationError{}

// Validate checks the field values on RegistrationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegistrationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistrationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegistrationResponseMultiError, or nil if none found.
func (m *RegistrationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistrationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponseMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegistrationResponseValidationError{
					field:  "ResponseMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegistrationResponseValidationError{
					field:  "ResponseMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponseMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegistrationResponseValidationError{
				field:  "ResponseMeta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegistrationResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegistrationResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegistrationResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegistrationResponseMultiError(errors)
	}

	return nil
}

// RegistrationResponseMultiError is an error wrapping multiple validation
// errors returned by RegistrationResponse.ValidateAll() if the designated
// constraints aren't met.
type RegistrationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistrationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistrationResponseMultiError) AllErrors() []error { return m }

// RegistrationResponseValidationError is the validation error returned by
// RegistrationResponse.Validate if the designated constraints aren't met.
type RegistrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistrationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistrationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistrationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistrationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistrationResponseValidationError) ErrorName() string {
	return "RegistrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegistrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistrationResponseValidationError{}

// Validate checks the field values on VersionList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VersionList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VersionList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VersionListMultiError, or
// nil if none found.
func (m *VersionList) ValidateAll() error {
	return m.validate(true)
}

func (m *VersionList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VersionListMultiError(errors)
	}

	return nil
}

// VersionListMultiError is an error wrapping multiple validation errors
// returned by VersionList.ValidateAll() if the designated constraints aren't met.
type VersionListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VersionListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VersionListMultiError) AllErrors() []error { return m }

// VersionListValidationError is the validation error returned by
// VersionList.Validate if the designated constraints aren't met.
type VersionListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionListValidationError) ErrorName() string { return "VersionListValidationError" }

// Error satisfies the builtin error interface
func (e VersionListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionListValidationError{}

// Validate checks the field values on TagList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TagList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TagList with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TagListMultiError, or nil if none found.
func (m *TagList) ValidateAll() error {
	return m.validate(true)
}

func (m *TagList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TagListMultiError(errors)
	}

	return nil
}

// TagListMultiError is an error wrapping multiple validation errors returned
// by TagList.ValidateAll() if the designated constraints aren't met.
type TagListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagListMultiError) AllErrors() []error { return m }

// TagListValidationError is the validation error returned by TagList.Validate
// if the designated constraints aren't met.
type TagListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagListValidationError) ErrorName() string { return "TagListValidationError" }

// Error satisfies the builtin error interface
func (e TagListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTagList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagListValidationError{}

// Validate checks the field values on AuditLogRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuditLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuditLogRequestMultiError, or nil if none found.
func (m *AuditLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAuditLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuditLogRequestValidationError{
						field:  fmt.Sprintf("AuditLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuditLogRequestValidationError{
						field:  fmt.Sprintf("AuditLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuditLogRequestValidationError{
					field:  fmt.Sprintf("AuditLogs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AuditLogRequestMultiError(errors)
	}

	return nil
}

// AuditLogRequestMultiError is an error wrapping multiple validation errors
// returned by AuditLogRequest.ValidateAll() if the designated constraints
// aren't met.
type AuditLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditLogRequestMultiError) AllErrors() []error { return m }

// AuditLogRequestValidationError is the validation error returned by
// AuditLogRequest.Validate if the designated constraints aren't met.
type AuditLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditLogRequestValidationError) ErrorName() string { return "AuditLogRequestValidationError" }

// Error satisfies the builtin error interface
func (e AuditLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditLogRequestValidationError{}

// Validate checks the field values on RegistrationResponse_ResponseMeta with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RegistrationResponse_ResponseMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistrationResponse_ResponseMeta
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RegistrationResponse_ResponseMetaMultiError, or nil if none found.
func (m *RegistrationResponse_ResponseMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistrationResponse_ResponseMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	// no validation rules for Success

	if len(errors) > 0 {
		return RegistrationResponse_ResponseMetaMultiError(errors)
	}

	return nil
}

// RegistrationResponse_ResponseMetaMultiError is an error wrapping multiple
// validation errors returned by
// RegistrationResponse_ResponseMeta.ValidateAll() if the designated
// constraints aren't met.
type RegistrationResponse_ResponseMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistrationResponse_ResponseMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistrationResponse_ResponseMetaMultiError) AllErrors() []error { return m }

// RegistrationResponse_ResponseMetaValidationError is the validation error
// returned by RegistrationResponse_ResponseMeta.Validate if the designated
// constraints aren't met.
type RegistrationResponse_ResponseMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistrationResponse_ResponseMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistrationResponse_ResponseMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistrationResponse_ResponseMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistrationResponse_ResponseMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistrationResponse_ResponseMetaValidationError) ErrorName() string {
	return "RegistrationResponse_ResponseMetaValidationError"
}

// Error satisfies the builtin error interface
func (e RegistrationResponse_ResponseMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistrationResponse_ResponseMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistrationResponse_ResponseMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistrationResponse_ResponseMetaValidationError{}

// Validate checks the field values on RegistrationResponse_ResponseBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RegistrationResponse_ResponseBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistrationResponse_ResponseBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RegistrationResponse_ResponseBodyMultiError, or nil if none found.
func (m *RegistrationResponse_ResponseBody) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistrationResponse_ResponseBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAgent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegistrationResponse_ResponseBodyValidationError{
					field:  "Agent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegistrationResponse_ResponseBodyValidationError{
					field:  "Agent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAgent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegistrationResponse_ResponseBodyValidationError{
				field:  "Agent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BillingPlan

	// no validation rules for OrganizationId

	// no validation rules for OrganizationName

	if len(errors) > 0 {
		return RegistrationResponse_ResponseBodyMultiError(errors)
	}

	return nil
}

// RegistrationResponse_ResponseBodyMultiError is an error wrapping multiple
// validation errors returned by
// RegistrationResponse_ResponseBody.ValidateAll() if the designated
// constraints aren't met.
type RegistrationResponse_ResponseBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistrationResponse_ResponseBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistrationResponse_ResponseBodyMultiError) AllErrors() []error { return m }

// RegistrationResponse_ResponseBodyValidationError is the validation error
// returned by RegistrationResponse_ResponseBody.Validate if the designated
// constraints aren't met.
type RegistrationResponse_ResponseBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistrationResponse_ResponseBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistrationResponse_ResponseBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistrationResponse_ResponseBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistrationResponse_ResponseBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistrationResponse_ResponseBodyValidationError) ErrorName() string {
	return "RegistrationResponse_ResponseBodyValidationError"
}

// Error satisfies the builtin error interface
func (e RegistrationResponse_ResponseBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistrationResponse_ResponseBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistrationResponse_ResponseBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistrationResponse_ResponseBodyValidationError{}

// Validate checks the field values on RegistrationResponse_ResponseBody_Agent
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RegistrationResponse_ResponseBody_Agent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RegistrationResponse_ResponseBody_Agent with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RegistrationResponse_ResponseBody_AgentMultiError, or nil if none found.
func (m *RegistrationResponse_ResponseBody_Agent) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistrationResponse_ResponseBody_Agent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Key

	// no validation rules for Environment

	// no validation rules for Status

	// no validation rules for Version

	// no validation rules for VersionExternal

	{
		sorted_keys := make([]string, len(m.GetSupportedPluginVersions()))
		i := 0
		for key := range m.GetSupportedPluginVersions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetSupportedPluginVersions()[key]
			_ = val

			// no validation rules for SupportedPluginVersions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RegistrationResponse_ResponseBody_AgentValidationError{
							field:  fmt.Sprintf("SupportedPluginVersions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RegistrationResponse_ResponseBody_AgentValidationError{
							field:  fmt.Sprintf("SupportedPluginVersions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RegistrationResponse_ResponseBody_AgentValidationError{
						field:  fmt.Sprintf("SupportedPluginVersions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Url

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegistrationResponse_ResponseBody_AgentValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegistrationResponse_ResponseBody_AgentValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegistrationResponse_ResponseBody_AgentValidationError{
				field:  "Updated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegistrationResponse_ResponseBody_AgentValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegistrationResponse_ResponseBody_AgentValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegistrationResponse_ResponseBody_AgentValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetTags()))
		i := 0
		for key := range m.GetTags() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetTags()[key]
			_ = val

			// no validation rules for Tags[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RegistrationResponse_ResponseBody_AgentValidationError{
							field:  fmt.Sprintf("Tags[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RegistrationResponse_ResponseBody_AgentValidationError{
							field:  fmt.Sprintf("Tags[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RegistrationResponse_ResponseBody_AgentValidationError{
						field:  fmt.Sprintf("Tags[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return RegistrationResponse_ResponseBody_AgentMultiError(errors)
	}

	return nil
}

// RegistrationResponse_ResponseBody_AgentMultiError is an error wrapping
// multiple validation errors returned by
// RegistrationResponse_ResponseBody_Agent.ValidateAll() if the designated
// constraints aren't met.
type RegistrationResponse_ResponseBody_AgentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistrationResponse_ResponseBody_AgentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistrationResponse_ResponseBody_AgentMultiError) AllErrors() []error { return m }

// RegistrationResponse_ResponseBody_AgentValidationError is the validation
// error returned by RegistrationResponse_ResponseBody_Agent.Validate if the
// designated constraints aren't met.
type RegistrationResponse_ResponseBody_AgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistrationResponse_ResponseBody_AgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistrationResponse_ResponseBody_AgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistrationResponse_ResponseBody_AgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistrationResponse_ResponseBody_AgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistrationResponse_ResponseBody_AgentValidationError) ErrorName() string {
	return "RegistrationResponse_ResponseBody_AgentValidationError"
}

// Error satisfies the builtin error interface
func (e RegistrationResponse_ResponseBody_AgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistrationResponse_ResponseBody_Agent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistrationResponse_ResponseBody_AgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistrationResponse_ResponseBody_AgentValidationError{}

// Validate checks the field values on AuditLogRequest_AuditLog with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuditLogRequest_AuditLog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditLogRequest_AuditLog with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuditLogRequest_AuditLogMultiError, or nil if none found.
func (m *AuditLogRequest_AuditLog) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditLogRequest_AuditLog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetEntityId()); err != nil {
		err = AuditLogRequest_AuditLogValidationError{
			field:  "EntityId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for EntityType

	// no validation rules for OrganizationId

	// no validation rules for IsDeployed

	// no validation rules for Source

	// no validation rules for Target

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetApiTiming()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuditLogRequest_AuditLogValidationError{
					field:  "ApiTiming",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuditLogRequest_AuditLogValidationError{
					field:  "ApiTiming",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApiTiming()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuditLogRequest_AuditLogValidationError{
				field:  "ApiTiming",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.AgentId != nil {
		// no validation rules for AgentId
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Error != nil {
		// no validation rules for Error
	}

	if m.ApiLocationContext != nil {

		if all {
			switch v := interface{}(m.GetApiLocationContext()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuditLogRequest_AuditLogValidationError{
						field:  "ApiLocationContext",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuditLogRequest_AuditLogValidationError{
						field:  "ApiLocationContext",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetApiLocationContext()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuditLogRequest_AuditLogValidationError{
					field:  "ApiLocationContext",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UserType != nil {
		// no validation rules for UserType
	}

	if m.TargetName != nil {
		// no validation rules for TargetName
	}

	if len(errors) > 0 {
		return AuditLogRequest_AuditLogMultiError(errors)
	}

	return nil
}

func (m *AuditLogRequest_AuditLog) _validateUuid(uuid string) error {
	if matched := _service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AuditLogRequest_AuditLogMultiError is an error wrapping multiple validation
// errors returned by AuditLogRequest_AuditLog.ValidateAll() if the designated
// constraints aren't met.
type AuditLogRequest_AuditLogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditLogRequest_AuditLogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditLogRequest_AuditLogMultiError) AllErrors() []error { return m }

// AuditLogRequest_AuditLogValidationError is the validation error returned by
// AuditLogRequest_AuditLog.Validate if the designated constraints aren't met.
type AuditLogRequest_AuditLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditLogRequest_AuditLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditLogRequest_AuditLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditLogRequest_AuditLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditLogRequest_AuditLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditLogRequest_AuditLogValidationError) ErrorName() string {
	return "AuditLogRequest_AuditLogValidationError"
}

// Error satisfies the builtin error interface
func (e AuditLogRequest_AuditLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditLogRequest_AuditLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditLogRequest_AuditLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditLogRequest_AuditLogValidationError{}

// Validate checks the field values on
// AuditLogRequest_AuditLog_ApiLocationContext with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuditLogRequest_AuditLog_ApiLocationContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AuditLogRequest_AuditLog_ApiLocationContext with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AuditLogRequest_AuditLog_ApiLocationContextMultiError, or nil if none found.
func (m *AuditLogRequest_AuditLog_ApiLocationContext) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditLogRequest_AuditLog_ApiLocationContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationId

	if len(errors) > 0 {
		return AuditLogRequest_AuditLog_ApiLocationContextMultiError(errors)
	}

	return nil
}

// AuditLogRequest_AuditLog_ApiLocationContextMultiError is an error wrapping
// multiple validation errors returned by
// AuditLogRequest_AuditLog_ApiLocationContext.ValidateAll() if the designated
// constraints aren't met.
type AuditLogRequest_AuditLog_ApiLocationContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditLogRequest_AuditLog_ApiLocationContextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditLogRequest_AuditLog_ApiLocationContextMultiError) AllErrors() []error { return m }

// AuditLogRequest_AuditLog_ApiLocationContextValidationError is the validation
// error returned by AuditLogRequest_AuditLog_ApiLocationContext.Validate if
// the designated constraints aren't met.
type AuditLogRequest_AuditLog_ApiLocationContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditLogRequest_AuditLog_ApiLocationContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditLogRequest_AuditLog_ApiLocationContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditLogRequest_AuditLog_ApiLocationContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditLogRequest_AuditLog_ApiLocationContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditLogRequest_AuditLog_ApiLocationContextValidationError) ErrorName() string {
	return "AuditLogRequest_AuditLog_ApiLocationContextValidationError"
}

// Error satisfies the builtin error interface
func (e AuditLogRequest_AuditLog_ApiLocationContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditLogRequest_AuditLog_ApiLocationContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditLogRequest_AuditLog_ApiLocationContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditLogRequest_AuditLog_ApiLocationContextValidationError{}

// Validate checks the field values on AuditLogRequest_AuditLog_ApiTiming with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AuditLogRequest_AuditLog_ApiTiming) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditLogRequest_AuditLog_ApiTiming
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AuditLogRequest_AuditLog_ApiTimingMultiError, or nil if none found.
func (m *AuditLogRequest_AuditLog_ApiTiming) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditLogRequest_AuditLog_ApiTiming) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	if m.End != nil {
		// no validation rules for End
	}

	if len(errors) > 0 {
		return AuditLogRequest_AuditLog_ApiTimingMultiError(errors)
	}

	return nil
}

// AuditLogRequest_AuditLog_ApiTimingMultiError is an error wrapping multiple
// validation errors returned by
// AuditLogRequest_AuditLog_ApiTiming.ValidateAll() if the designated
// constraints aren't met.
type AuditLogRequest_AuditLog_ApiTimingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditLogRequest_AuditLog_ApiTimingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditLogRequest_AuditLog_ApiTimingMultiError) AllErrors() []error { return m }

// AuditLogRequest_AuditLog_ApiTimingValidationError is the validation error
// returned by AuditLogRequest_AuditLog_ApiTiming.Validate if the designated
// constraints aren't met.
type AuditLogRequest_AuditLog_ApiTimingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditLogRequest_AuditLog_ApiTimingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditLogRequest_AuditLog_ApiTimingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditLogRequest_AuditLog_ApiTimingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditLogRequest_AuditLog_ApiTimingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditLogRequest_AuditLog_ApiTimingValidationError) ErrorName() string {
	return "AuditLogRequest_AuditLog_ApiTimingValidationError"
}

// Error satisfies the builtin error interface
func (e AuditLogRequest_AuditLog_ApiTimingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditLogRequest_AuditLog_ApiTiming.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditLogRequest_AuditLog_ApiTimingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditLogRequest_AuditLog_ApiTimingValidationError{}
