// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: event/v2/service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventsService_Receive_FullMethodName = "/event.v2.EventsService/Receive"
	EventsService_Send_FullMethodName    = "/event.v2.EventsService/Send"
)

// EventsServiceClient is the client API for EventsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventsServiceClient interface {
	Receive(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (EventsService_ReceiveClient, error)
	Send(ctx context.Context, in *CloudEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type eventsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsServiceClient(cc grpc.ClientConnInterface) EventsServiceClient {
	return &eventsServiceClient{cc}
}

func (c *eventsServiceClient) Receive(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (EventsService_ReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventsService_ServiceDesc.Streams[0], EventsService_Receive_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &eventsServiceReceiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventsService_ReceiveClient interface {
	Recv() (*CloudEvent, error)
	grpc.ClientStream
}

type eventsServiceReceiveClient struct {
	grpc.ClientStream
}

func (x *eventsServiceReceiveClient) Recv() (*CloudEvent, error) {
	m := new(CloudEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventsServiceClient) Send(ctx context.Context, in *CloudEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EventsService_Send_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventsServiceServer is the server API for EventsService service.
// All implementations should embed UnimplementedEventsServiceServer
// for forward compatibility
type EventsServiceServer interface {
	Receive(*emptypb.Empty, EventsService_ReceiveServer) error
	Send(context.Context, *CloudEvent) (*emptypb.Empty, error)
}

// UnimplementedEventsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEventsServiceServer struct {
}

func (UnimplementedEventsServiceServer) Receive(*emptypb.Empty, EventsService_ReceiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedEventsServiceServer) Send(context.Context, *CloudEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}

// UnsafeEventsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventsServiceServer will
// result in compilation errors.
type UnsafeEventsServiceServer interface {
	mustEmbedUnimplementedEventsServiceServer()
}

func RegisterEventsServiceServer(s grpc.ServiceRegistrar, srv EventsServiceServer) {
	s.RegisterService(&EventsService_ServiceDesc, srv)
}

func _EventsService_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventsServiceServer).Receive(m, &eventsServiceReceiveServer{stream})
}

type EventsService_ReceiveServer interface {
	Send(*CloudEvent) error
	grpc.ServerStream
}

type eventsServiceReceiveServer struct {
	grpc.ServerStream
}

func (x *eventsServiceReceiveServer) Send(m *CloudEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _EventsService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventsService_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServiceServer).Send(ctx, req.(*CloudEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// EventsService_ServiceDesc is the grpc.ServiceDesc for EventsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.v2.EventsService",
	HandlerType: (*EventsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _EventsService_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Receive",
			Handler:       _EventsService_Receive_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "event/v2/service.proto",
}
