// source: common/v1/health.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.common.v1.HealthResponse', null, global);
goog.exportSymbol('proto.common.v1.Pool', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.v1.Pool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.v1.Pool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.v1.Pool.displayName = 'proto.common.v1.Pool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.v1.HealthResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.v1.HealthResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.v1.HealthResponse.displayName = 'proto.common.v1.HealthResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.v1.Pool.prototype.toObject = function(opt_includeInstance) {
  return proto.common.v1.Pool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.v1.Pool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.v1.Pool.toObject = function(includeInstance, msg) {
  var f, obj = {
hits: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
misses: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
timeouts: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
total: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
idle: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
stale: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.v1.Pool}
 */
proto.common.v1.Pool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.v1.Pool;
  return proto.common.v1.Pool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.v1.Pool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.v1.Pool}
 */
proto.common.v1.Pool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHits(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMisses(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimeouts(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotal(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIdle(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStale(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.v1.Pool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.v1.Pool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.v1.Pool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.v1.Pool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 hits = 1;
 * @return {number}
 */
proto.common.v1.Pool.prototype.getHits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.v1.Pool} returns this
 */
proto.common.v1.Pool.prototype.setHits = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.common.v1.Pool} returns this
 */
proto.common.v1.Pool.prototype.clearHits = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.v1.Pool.prototype.hasHits = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 misses = 2;
 * @return {number}
 */
proto.common.v1.Pool.prototype.getMisses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.v1.Pool} returns this
 */
proto.common.v1.Pool.prototype.setMisses = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.common.v1.Pool} returns this
 */
proto.common.v1.Pool.prototype.clearMisses = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.v1.Pool.prototype.hasMisses = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 timeouts = 3;
 * @return {number}
 */
proto.common.v1.Pool.prototype.getTimeouts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.v1.Pool} returns this
 */
proto.common.v1.Pool.prototype.setTimeouts = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.common.v1.Pool} returns this
 */
proto.common.v1.Pool.prototype.clearTimeouts = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.v1.Pool.prototype.hasTimeouts = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 total = 4;
 * @return {number}
 */
proto.common.v1.Pool.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.v1.Pool} returns this
 */
proto.common.v1.Pool.prototype.setTotal = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.common.v1.Pool} returns this
 */
proto.common.v1.Pool.prototype.clearTotal = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.v1.Pool.prototype.hasTotal = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 idle = 5;
 * @return {number}
 */
proto.common.v1.Pool.prototype.getIdle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.v1.Pool} returns this
 */
proto.common.v1.Pool.prototype.setIdle = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.common.v1.Pool} returns this
 */
proto.common.v1.Pool.prototype.clearIdle = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.v1.Pool.prototype.hasIdle = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 stale = 6;
 * @return {number}
 */
proto.common.v1.Pool.prototype.getStale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.v1.Pool} returns this
 */
proto.common.v1.Pool.prototype.setStale = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.common.v1.Pool} returns this
 */
proto.common.v1.Pool.prototype.clearStale = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.v1.Pool.prototype.hasStale = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.v1.HealthResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.common.v1.HealthResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.v1.HealthResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.v1.HealthResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
message: jspb.Message.getFieldWithDefault(msg, 1, ""),
uptime: jspb.Message.getFieldWithDefault(msg, 2, 0),
version: jspb.Message.getFieldWithDefault(msg, 3, ""),
store: (f = msg.getStore()) && proto.common.v1.Pool.toObject(includeInstance, f),
stream: (f = msg.getStream()) && proto.common.v1.Pool.toObject(includeInstance, f),
id: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.v1.HealthResponse}
 */
proto.common.v1.HealthResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.v1.HealthResponse;
  return proto.common.v1.HealthResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.v1.HealthResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.v1.HealthResponse}
 */
proto.common.v1.HealthResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUptime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 4:
      var value = new proto.common.v1.Pool;
      reader.readMessage(value,proto.common.v1.Pool.deserializeBinaryFromReader);
      msg.setStore(value);
      break;
    case 5:
      var value = new proto.common.v1.Pool;
      reader.readMessage(value,proto.common.v1.Pool.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.v1.HealthResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.v1.HealthResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.v1.HealthResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.v1.HealthResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUptime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStore();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.common.v1.Pool.serializeBinaryToWriter
    );
  }
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.common.v1.Pool.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.common.v1.HealthResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.v1.HealthResponse} returns this
 */
proto.common.v1.HealthResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 uptime = 2;
 * @return {number}
 */
proto.common.v1.HealthResponse.prototype.getUptime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.v1.HealthResponse} returns this
 */
proto.common.v1.HealthResponse.prototype.setUptime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string version = 3;
 * @return {string}
 */
proto.common.v1.HealthResponse.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.v1.HealthResponse} returns this
 */
proto.common.v1.HealthResponse.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Pool store = 4;
 * @return {?proto.common.v1.Pool}
 */
proto.common.v1.HealthResponse.prototype.getStore = function() {
  return /** @type{?proto.common.v1.Pool} */ (
    jspb.Message.getWrapperField(this, proto.common.v1.Pool, 4));
};


/**
 * @param {?proto.common.v1.Pool|undefined} value
 * @return {!proto.common.v1.HealthResponse} returns this
*/
proto.common.v1.HealthResponse.prototype.setStore = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.v1.HealthResponse} returns this
 */
proto.common.v1.HealthResponse.prototype.clearStore = function() {
  return this.setStore(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.v1.HealthResponse.prototype.hasStore = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Pool stream = 5;
 * @return {?proto.common.v1.Pool}
 */
proto.common.v1.HealthResponse.prototype.getStream = function() {
  return /** @type{?proto.common.v1.Pool} */ (
    jspb.Message.getWrapperField(this, proto.common.v1.Pool, 5));
};


/**
 * @param {?proto.common.v1.Pool|undefined} value
 * @return {!proto.common.v1.HealthResponse} returns this
*/
proto.common.v1.HealthResponse.prototype.setStream = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.v1.HealthResponse} returns this
 */
proto.common.v1.HealthResponse.prototype.clearStream = function() {
  return this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.v1.HealthResponse.prototype.hasStream = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string id = 6;
 * @return {string}
 */
proto.common.v1.HealthResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.v1.HealthResponse} returns this
 */
proto.common.v1.HealthResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


goog.object.extend(exports, proto.common.v1);
