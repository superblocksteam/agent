// source: common/v1/api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = globalThis;

goog.exportSymbol('proto.common.v1.CombinedLinks', null, global);
goog.exportSymbol('proto.common.v1.Link', null, global);
goog.exportSymbol('proto.common.v1.Links', null, global);
goog.exportSymbol('proto.common.v1.LinksV2', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.v1.Links = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.v1.Links, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.v1.Links.displayName = 'proto.common.v1.Links';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.v1.LinksV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.v1.LinksV2.repeatedFields_, null);
};
goog.inherits(proto.common.v1.LinksV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.v1.LinksV2.displayName = 'proto.common.v1.LinksV2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.v1.Link = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.v1.Link, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.v1.Link.displayName = 'proto.common.v1.Link';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.v1.CombinedLinks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.v1.CombinedLinks.repeatedFields_, null);
};
goog.inherits(proto.common.v1.CombinedLinks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.v1.CombinedLinks.displayName = 'proto.common.v1.CombinedLinks';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.v1.Links.prototype.toObject = function(opt_includeInstance) {
  return proto.common.v1.Links.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.v1.Links} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.v1.Links.toObject = function(includeInstance, msg) {
  var f, obj = {
linksMap: (f = msg.getLinksMap()) ? f.toObject(includeInstance, proto.common.v1.Link.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.v1.Links}
 */
proto.common.v1.Links.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.v1.Links;
  return proto.common.v1.Links.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.v1.Links} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.v1.Links}
 */
proto.common.v1.Links.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getLinksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readStringRequireUtf8, jspb.BinaryReader.prototype.readMessage, proto.common.v1.Link.deserializeBinaryFromReader, "", new proto.common.v1.Link());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.v1.Links.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.v1.Links.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.v1.Links} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.v1.Links.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinksMap(true);
  if (f && f.getLength() > 0) {
jspb.internal.public_for_gencode.serializeMapToBinary(
    message.getLinksMap(true),
    1,
    writer,
    jspb.BinaryWriter.prototype.writeString,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.common.v1.Link.serializeBinaryToWriter);
  }
};


/**
 * map<string, Link> links = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.common.v1.Link>}
 */
proto.common.v1.Links.prototype.getLinksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.common.v1.Link>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.common.v1.Link));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.common.v1.Links} returns this
 */
proto.common.v1.Links.prototype.clearLinksMap = function() {
  this.getLinksMap().clear();
  return this;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.v1.LinksV2.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.v1.LinksV2.prototype.toObject = function(opt_includeInstance) {
  return proto.common.v1.LinksV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.v1.LinksV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.v1.LinksV2.toObject = function(includeInstance, msg) {
  var f, obj = {
linksList: jspb.Message.toObjectList(msg.getLinksList(),
    proto.common.v1.Links.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.v1.LinksV2}
 */
proto.common.v1.LinksV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.v1.LinksV2;
  return proto.common.v1.LinksV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.v1.LinksV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.v1.LinksV2}
 */
proto.common.v1.LinksV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.v1.Links;
      reader.readMessage(value,proto.common.v1.Links.deserializeBinaryFromReader);
      msg.addLinks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.v1.LinksV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.v1.LinksV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.v1.LinksV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.v1.LinksV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.common.v1.Links.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Links links = 1;
 * @return {!Array<!proto.common.v1.Links>}
 */
proto.common.v1.LinksV2.prototype.getLinksList = function() {
  return /** @type{!Array<!proto.common.v1.Links>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.v1.Links, 1));
};


/**
 * @param {!Array<!proto.common.v1.Links>} value
 * @return {!proto.common.v1.LinksV2} returns this
*/
proto.common.v1.LinksV2.prototype.setLinksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.common.v1.Links=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.v1.Links}
 */
proto.common.v1.LinksV2.prototype.addLinks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.common.v1.Links, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.v1.LinksV2} returns this
 */
proto.common.v1.LinksV2.prototype.clearLinksList = function() {
  return this.setLinksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.v1.Link.prototype.toObject = function(opt_includeInstance) {
  return proto.common.v1.Link.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.v1.Link} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.v1.Link.toObject = function(includeInstance, msg) {
  var f, obj = {
url: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.v1.Link}
 */
proto.common.v1.Link.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.v1.Link;
  return proto.common.v1.Link.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.v1.Link} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.v1.Link}
 */
proto.common.v1.Link.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.v1.Link.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.v1.Link.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.v1.Link} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.v1.Link.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.common.v1.Link.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.v1.Link} returns this
 */
proto.common.v1.Link.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.v1.CombinedLinks.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.v1.CombinedLinks.prototype.toObject = function(opt_includeInstance) {
  return proto.common.v1.CombinedLinks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.v1.CombinedLinks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.v1.CombinedLinks.toObject = function(includeInstance, msg) {
  var f, obj = {
linksMap: (f = msg.getLinksMap()) ? f.toObject(includeInstance, proto.common.v1.Link.toObject) : [],
linksV2List: jspb.Message.toObjectList(msg.getLinksV2List(),
    proto.common.v1.Links.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.v1.CombinedLinks}
 */
proto.common.v1.CombinedLinks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.v1.CombinedLinks;
  return proto.common.v1.CombinedLinks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.v1.CombinedLinks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.v1.CombinedLinks}
 */
proto.common.v1.CombinedLinks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getLinksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readStringRequireUtf8, jspb.BinaryReader.prototype.readMessage, proto.common.v1.Link.deserializeBinaryFromReader, "", new proto.common.v1.Link());
         });
      break;
    case 2:
      var value = new proto.common.v1.Links;
      reader.readMessage(value,proto.common.v1.Links.deserializeBinaryFromReader);
      msg.addLinksV2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.v1.CombinedLinks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.v1.CombinedLinks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.v1.CombinedLinks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.v1.CombinedLinks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinksMap(true);
  if (f && f.getLength() > 0) {
jspb.internal.public_for_gencode.serializeMapToBinary(
    message.getLinksMap(true),
    1,
    writer,
    jspb.BinaryWriter.prototype.writeString,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.common.v1.Link.serializeBinaryToWriter);
  }
  f = message.getLinksV2List();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.common.v1.Links.serializeBinaryToWriter
    );
  }
};


/**
 * map<string, Link> links = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.common.v1.Link>}
 */
proto.common.v1.CombinedLinks.prototype.getLinksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.common.v1.Link>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.common.v1.Link));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.common.v1.CombinedLinks} returns this
 */
proto.common.v1.CombinedLinks.prototype.clearLinksMap = function() {
  this.getLinksMap().clear();
  return this;
};


/**
 * repeated Links links_v2 = 2;
 * @return {!Array<!proto.common.v1.Links>}
 */
proto.common.v1.CombinedLinks.prototype.getLinksV2List = function() {
  return /** @type{!Array<!proto.common.v1.Links>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.v1.Links, 2));
};


/**
 * @param {!Array<!proto.common.v1.Links>} value
 * @return {!proto.common.v1.CombinedLinks} returns this
*/
proto.common.v1.CombinedLinks.prototype.setLinksV2List = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.common.v1.Links=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.v1.Links}
 */
proto.common.v1.CombinedLinks.prototype.addLinksV2 = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.common.v1.Links, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.v1.CombinedLinks} returns this
 */
proto.common.v1.CombinedLinks.prototype.clearLinksV2List = function() {
  return this.setLinksV2List([]);
};


goog.object.extend(exports, proto.common.v1);
