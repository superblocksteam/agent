// source: plugins/redis/v1/plugin.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var plugins_common_v1_plugin_pb = require('../../../plugins/common/v1/plugin_pb');
goog.object.extend(proto, plugins_common_v1_plugin_pb);
goog.exportSymbol('proto.plugins.redis.v1.Plugin', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.CommandTypeCase', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Connection', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Connection.ConnectionTypeCase', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Connection.Fields', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Connection.Url', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Del', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Expire', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Expire.Option', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Get', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Hdel', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Hget', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Hgetall', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Hkeys', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Hlen', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Hmget', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Hset', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Hsetnx', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Hvals', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Keys', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Lindex', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Llen', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Lpush', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Lrange', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Lrem', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Mget', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Raw', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Raw.ActionCase', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Raw.Singleton', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Sadd', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Scard', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Set', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Sismember', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Smembers', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Srandmember', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Srem', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Structured', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Structured.ActionCase', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Ttl', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Zadd', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Zcard', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Zcount', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Zrange', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Zrank', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Zrem', null, global);
goog.exportSymbol('proto.plugins.redis.v1.Plugin.Zscore', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.plugins.redis.v1.Plugin.oneofGroups_);
};
goog.inherits(proto.plugins.redis.v1.Plugin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.displayName = 'proto.plugins.redis.v1.Plugin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Raw = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.plugins.redis.v1.Plugin.Raw.oneofGroups_);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Raw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Raw.displayName = 'proto.plugins.redis.v1.Plugin.Raw';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Raw.Singleton = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Raw.Singleton, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Raw.Singleton.displayName = 'proto.plugins.redis.v1.Plugin.Raw.Singleton';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Structured = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Structured, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Structured.displayName = 'proto.plugins.redis.v1.Plugin.Structured';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Connection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.plugins.redis.v1.Plugin.Connection.oneofGroups_);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Connection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Connection.displayName = 'proto.plugins.redis.v1.Plugin.Connection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Connection.Url = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Connection.Url, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Connection.Url.displayName = 'proto.plugins.redis.v1.Plugin.Connection.Url';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Connection.Fields = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Connection.Fields, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Connection.Fields.displayName = 'proto.plugins.redis.v1.Plugin.Connection.Fields';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Get = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Get, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Get.displayName = 'proto.plugins.redis.v1.Plugin.Get';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Set = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Set, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Set.displayName = 'proto.plugins.redis.v1.Plugin.Set';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Del = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Del, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Del.displayName = 'proto.plugins.redis.v1.Plugin.Del';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Keys = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Keys, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Keys.displayName = 'proto.plugins.redis.v1.Plugin.Keys';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Mget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Mget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Mget.displayName = 'proto.plugins.redis.v1.Plugin.Mget';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Hget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Hget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Hget.displayName = 'proto.plugins.redis.v1.Plugin.Hget';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Hmget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Hmget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Hmget.displayName = 'proto.plugins.redis.v1.Plugin.Hmget';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Hgetall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Hgetall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Hgetall.displayName = 'proto.plugins.redis.v1.Plugin.Hgetall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Hset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Hset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Hset.displayName = 'proto.plugins.redis.v1.Plugin.Hset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Hsetnx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Hsetnx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Hsetnx.displayName = 'proto.plugins.redis.v1.Plugin.Hsetnx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Hlen = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Hlen, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Hlen.displayName = 'proto.plugins.redis.v1.Plugin.Hlen';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Hdel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Hdel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Hdel.displayName = 'proto.plugins.redis.v1.Plugin.Hdel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Hkeys = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Hkeys, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Hkeys.displayName = 'proto.plugins.redis.v1.Plugin.Hkeys';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Hvals = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Hvals, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Hvals.displayName = 'proto.plugins.redis.v1.Plugin.Hvals';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Lindex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Lindex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Lindex.displayName = 'proto.plugins.redis.v1.Plugin.Lindex';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Llen = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Llen, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Llen.displayName = 'proto.plugins.redis.v1.Plugin.Llen';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Lpush = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Lpush, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Lpush.displayName = 'proto.plugins.redis.v1.Plugin.Lpush';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Lrem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Lrem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Lrem.displayName = 'proto.plugins.redis.v1.Plugin.Lrem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Lrange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Lrange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Lrange.displayName = 'proto.plugins.redis.v1.Plugin.Lrange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Sadd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Sadd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Sadd.displayName = 'proto.plugins.redis.v1.Plugin.Sadd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Scard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Scard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Scard.displayName = 'proto.plugins.redis.v1.Plugin.Scard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Smembers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Smembers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Smembers.displayName = 'proto.plugins.redis.v1.Plugin.Smembers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Sismember = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Sismember, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Sismember.displayName = 'proto.plugins.redis.v1.Plugin.Sismember';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Srandmember = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Srandmember, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Srandmember.displayName = 'proto.plugins.redis.v1.Plugin.Srandmember';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Srem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Srem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Srem.displayName = 'proto.plugins.redis.v1.Plugin.Srem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Zadd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Zadd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Zadd.displayName = 'proto.plugins.redis.v1.Plugin.Zadd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Zcard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Zcard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Zcard.displayName = 'proto.plugins.redis.v1.Plugin.Zcard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Zcount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Zcount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Zcount.displayName = 'proto.plugins.redis.v1.Plugin.Zcount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Zrange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Zrange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Zrange.displayName = 'proto.plugins.redis.v1.Plugin.Zrange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Zrank = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Zrank, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Zrank.displayName = 'proto.plugins.redis.v1.Plugin.Zrank';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Zrem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Zrem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Zrem.displayName = 'proto.plugins.redis.v1.Plugin.Zrem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Zscore = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Zscore, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Zscore.displayName = 'proto.plugins.redis.v1.Plugin.Zscore';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Expire = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Expire, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Expire.displayName = 'proto.plugins.redis.v1.Plugin.Expire';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.redis.v1.Plugin.Ttl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.redis.v1.Plugin.Ttl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.redis.v1.Plugin.Ttl.displayName = 'proto.plugins.redis.v1.Plugin.Ttl';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.plugins.redis.v1.Plugin.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.plugins.redis.v1.Plugin.CommandTypeCase = {
  COMMAND_TYPE_NOT_SET: 0,
  RAW: 3,
  STRUCTURED: 4
};

/**
 * @return {proto.plugins.redis.v1.Plugin.CommandTypeCase}
 */
proto.plugins.redis.v1.Plugin.prototype.getCommandTypeCase = function() {
  return /** @type {proto.plugins.redis.v1.Plugin.CommandTypeCase} */(jspb.Message.computeOneofCase(this, proto.plugins.redis.v1.Plugin.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.toObject = function(includeInstance, msg) {
  var f, obj = {
name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
connection: (f = msg.getConnection()) && proto.plugins.redis.v1.Plugin.Connection.toObject(includeInstance, f),
raw: (f = msg.getRaw()) && proto.plugins.redis.v1.Plugin.Raw.toObject(includeInstance, f),
structured: (f = msg.getStructured()) && proto.plugins.redis.v1.Plugin.Structured.toObject(includeInstance, f),
dynamicWorkflowConfiguration: (f = msg.getDynamicWorkflowConfiguration()) && plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin}
 */
proto.plugins.redis.v1.Plugin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin;
  return proto.plugins.redis.v1.Plugin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin}
 */
proto.plugins.redis.v1.Plugin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.plugins.redis.v1.Plugin.Connection;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Connection.deserializeBinaryFromReader);
      msg.setConnection(value);
      break;
    case 3:
      var value = new proto.plugins.redis.v1.Plugin.Raw;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Raw.deserializeBinaryFromReader);
      msg.setRaw(value);
      break;
    case 4:
      var value = new proto.plugins.redis.v1.Plugin.Structured;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Structured.deserializeBinaryFromReader);
      msg.setStructured(value);
      break;
    case 5:
      var value = new plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration;
      reader.readMessage(value,plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration.deserializeBinaryFromReader);
      msg.setDynamicWorkflowConfiguration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConnection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.plugins.redis.v1.Plugin.Connection.serializeBinaryToWriter
    );
  }
  f = message.getRaw();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.plugins.redis.v1.Plugin.Raw.serializeBinaryToWriter
    );
  }
  f = message.getStructured();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.plugins.redis.v1.Plugin.Structured.serializeBinaryToWriter
    );
  }
  f = message.getDynamicWorkflowConfiguration();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.plugins.redis.v1.Plugin.Raw.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.plugins.redis.v1.Plugin.Raw.ActionCase = {
  ACTION_NOT_SET: 0,
  SINGLETON: 1
};

/**
 * @return {proto.plugins.redis.v1.Plugin.Raw.ActionCase}
 */
proto.plugins.redis.v1.Plugin.Raw.prototype.getActionCase = function() {
  return /** @type {proto.plugins.redis.v1.Plugin.Raw.ActionCase} */(jspb.Message.computeOneofCase(this, proto.plugins.redis.v1.Plugin.Raw.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Raw.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Raw.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Raw} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Raw.toObject = function(includeInstance, msg) {
  var f, obj = {
singleton: (f = msg.getSingleton()) && proto.plugins.redis.v1.Plugin.Raw.Singleton.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Raw}
 */
proto.plugins.redis.v1.Plugin.Raw.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Raw;
  return proto.plugins.redis.v1.Plugin.Raw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Raw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Raw}
 */
proto.plugins.redis.v1.Plugin.Raw.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.plugins.redis.v1.Plugin.Raw.Singleton;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Raw.Singleton.deserializeBinaryFromReader);
      msg.setSingleton(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Raw.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Raw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Raw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Raw.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSingleton();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.plugins.redis.v1.Plugin.Raw.Singleton.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Raw.Singleton.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Raw.Singleton.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Raw.Singleton} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Raw.Singleton.toObject = function(includeInstance, msg) {
  var f, obj = {
query: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Raw.Singleton}
 */
proto.plugins.redis.v1.Plugin.Raw.Singleton.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Raw.Singleton;
  return proto.plugins.redis.v1.Plugin.Raw.Singleton.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Raw.Singleton} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Raw.Singleton}
 */
proto.plugins.redis.v1.Plugin.Raw.Singleton.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Raw.Singleton.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Raw.Singleton.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Raw.Singleton} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Raw.Singleton.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Raw.Singleton.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Raw.Singleton} returns this
 */
proto.plugins.redis.v1.Plugin.Raw.Singleton.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Singleton singleton = 1;
 * @return {?proto.plugins.redis.v1.Plugin.Raw.Singleton}
 */
proto.plugins.redis.v1.Plugin.Raw.prototype.getSingleton = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Raw.Singleton} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Raw.Singleton, 1));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Raw.Singleton|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Raw} returns this
*/
proto.plugins.redis.v1.Plugin.Raw.prototype.setSingleton = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.plugins.redis.v1.Plugin.Raw.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Raw} returns this
 */
proto.plugins.redis.v1.Plugin.Raw.prototype.clearSingleton = function() {
  return this.setSingleton(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Raw.prototype.hasSingleton = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.plugins.redis.v1.Plugin.Structured.oneofGroups_ = [[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]];

/**
 * @enum {number}
 */
proto.plugins.redis.v1.Plugin.Structured.ActionCase = {
  ACTION_NOT_SET: 0,
  GET: 6,
  SET: 7,
  DEL: 8,
  KEYS: 9,
  MGET: 10,
  HGET: 11,
  HMGET: 12,
  HGETALL: 13,
  HSET: 14,
  HSETNX: 15,
  HLEN: 16,
  HDEL: 17,
  HKEYS: 18,
  HVALS: 19,
  LINDEX: 20,
  LLEN: 21,
  LPUSH: 22,
  LREM: 23,
  LRANGE: 24,
  SADD: 25,
  SCARD: 26,
  SMEMBERS: 27,
  SISMEMBER: 28,
  SRANDMEMBER: 29,
  SREM: 30,
  ZADD: 31,
  ZCARD: 32,
  ZCOUNT: 33,
  ZRANGE: 34,
  ZRANK: 35,
  ZREM: 36,
  ZSCORE: 37,
  EXPIRE: 38,
  TTL: 39
};

/**
 * @return {proto.plugins.redis.v1.Plugin.Structured.ActionCase}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getActionCase = function() {
  return /** @type {proto.plugins.redis.v1.Plugin.Structured.ActionCase} */(jspb.Message.computeOneofCase(this, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Structured.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Structured} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Structured.toObject = function(includeInstance, msg) {
  var f, obj = {
get: (f = msg.getGet()) && proto.plugins.redis.v1.Plugin.Get.toObject(includeInstance, f),
set: (f = msg.getSet()) && proto.plugins.redis.v1.Plugin.Set.toObject(includeInstance, f),
del: (f = msg.getDel()) && proto.plugins.redis.v1.Plugin.Del.toObject(includeInstance, f),
keys: (f = msg.getKeys()) && proto.plugins.redis.v1.Plugin.Keys.toObject(includeInstance, f),
mget: (f = msg.getMget()) && proto.plugins.redis.v1.Plugin.Mget.toObject(includeInstance, f),
hget: (f = msg.getHget()) && proto.plugins.redis.v1.Plugin.Hget.toObject(includeInstance, f),
hmget: (f = msg.getHmget()) && proto.plugins.redis.v1.Plugin.Hmget.toObject(includeInstance, f),
hgetall: (f = msg.getHgetall()) && proto.plugins.redis.v1.Plugin.Hgetall.toObject(includeInstance, f),
hset: (f = msg.getHset()) && proto.plugins.redis.v1.Plugin.Hset.toObject(includeInstance, f),
hsetnx: (f = msg.getHsetnx()) && proto.plugins.redis.v1.Plugin.Hsetnx.toObject(includeInstance, f),
hlen: (f = msg.getHlen()) && proto.plugins.redis.v1.Plugin.Hlen.toObject(includeInstance, f),
hdel: (f = msg.getHdel()) && proto.plugins.redis.v1.Plugin.Hdel.toObject(includeInstance, f),
hkeys: (f = msg.getHkeys()) && proto.plugins.redis.v1.Plugin.Hkeys.toObject(includeInstance, f),
hvals: (f = msg.getHvals()) && proto.plugins.redis.v1.Plugin.Hvals.toObject(includeInstance, f),
lindex: (f = msg.getLindex()) && proto.plugins.redis.v1.Plugin.Lindex.toObject(includeInstance, f),
llen: (f = msg.getLlen()) && proto.plugins.redis.v1.Plugin.Llen.toObject(includeInstance, f),
lpush: (f = msg.getLpush()) && proto.plugins.redis.v1.Plugin.Lpush.toObject(includeInstance, f),
lrem: (f = msg.getLrem()) && proto.plugins.redis.v1.Plugin.Lrem.toObject(includeInstance, f),
lrange: (f = msg.getLrange()) && proto.plugins.redis.v1.Plugin.Lrange.toObject(includeInstance, f),
sadd: (f = msg.getSadd()) && proto.plugins.redis.v1.Plugin.Sadd.toObject(includeInstance, f),
scard: (f = msg.getScard()) && proto.plugins.redis.v1.Plugin.Scard.toObject(includeInstance, f),
smembers: (f = msg.getSmembers()) && proto.plugins.redis.v1.Plugin.Smembers.toObject(includeInstance, f),
sismember: (f = msg.getSismember()) && proto.plugins.redis.v1.Plugin.Sismember.toObject(includeInstance, f),
srandmember: (f = msg.getSrandmember()) && proto.plugins.redis.v1.Plugin.Srandmember.toObject(includeInstance, f),
srem: (f = msg.getSrem()) && proto.plugins.redis.v1.Plugin.Srem.toObject(includeInstance, f),
zadd: (f = msg.getZadd()) && proto.plugins.redis.v1.Plugin.Zadd.toObject(includeInstance, f),
zcard: (f = msg.getZcard()) && proto.plugins.redis.v1.Plugin.Zcard.toObject(includeInstance, f),
zcount: (f = msg.getZcount()) && proto.plugins.redis.v1.Plugin.Zcount.toObject(includeInstance, f),
zrange: (f = msg.getZrange()) && proto.plugins.redis.v1.Plugin.Zrange.toObject(includeInstance, f),
zrank: (f = msg.getZrank()) && proto.plugins.redis.v1.Plugin.Zrank.toObject(includeInstance, f),
zrem: (f = msg.getZrem()) && proto.plugins.redis.v1.Plugin.Zrem.toObject(includeInstance, f),
zscore: (f = msg.getZscore()) && proto.plugins.redis.v1.Plugin.Zscore.toObject(includeInstance, f),
expire: (f = msg.getExpire()) && proto.plugins.redis.v1.Plugin.Expire.toObject(includeInstance, f),
ttl: (f = msg.getTtl()) && proto.plugins.redis.v1.Plugin.Ttl.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Structured}
 */
proto.plugins.redis.v1.Plugin.Structured.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Structured;
  return proto.plugins.redis.v1.Plugin.Structured.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Structured} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Structured}
 */
proto.plugins.redis.v1.Plugin.Structured.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 6:
      var value = new proto.plugins.redis.v1.Plugin.Get;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Get.deserializeBinaryFromReader);
      msg.setGet(value);
      break;
    case 7:
      var value = new proto.plugins.redis.v1.Plugin.Set;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Set.deserializeBinaryFromReader);
      msg.setSet(value);
      break;
    case 8:
      var value = new proto.plugins.redis.v1.Plugin.Del;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Del.deserializeBinaryFromReader);
      msg.setDel(value);
      break;
    case 9:
      var value = new proto.plugins.redis.v1.Plugin.Keys;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Keys.deserializeBinaryFromReader);
      msg.setKeys(value);
      break;
    case 10:
      var value = new proto.plugins.redis.v1.Plugin.Mget;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Mget.deserializeBinaryFromReader);
      msg.setMget(value);
      break;
    case 11:
      var value = new proto.plugins.redis.v1.Plugin.Hget;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Hget.deserializeBinaryFromReader);
      msg.setHget(value);
      break;
    case 12:
      var value = new proto.plugins.redis.v1.Plugin.Hmget;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Hmget.deserializeBinaryFromReader);
      msg.setHmget(value);
      break;
    case 13:
      var value = new proto.plugins.redis.v1.Plugin.Hgetall;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Hgetall.deserializeBinaryFromReader);
      msg.setHgetall(value);
      break;
    case 14:
      var value = new proto.plugins.redis.v1.Plugin.Hset;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Hset.deserializeBinaryFromReader);
      msg.setHset(value);
      break;
    case 15:
      var value = new proto.plugins.redis.v1.Plugin.Hsetnx;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Hsetnx.deserializeBinaryFromReader);
      msg.setHsetnx(value);
      break;
    case 16:
      var value = new proto.plugins.redis.v1.Plugin.Hlen;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Hlen.deserializeBinaryFromReader);
      msg.setHlen(value);
      break;
    case 17:
      var value = new proto.plugins.redis.v1.Plugin.Hdel;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Hdel.deserializeBinaryFromReader);
      msg.setHdel(value);
      break;
    case 18:
      var value = new proto.plugins.redis.v1.Plugin.Hkeys;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Hkeys.deserializeBinaryFromReader);
      msg.setHkeys(value);
      break;
    case 19:
      var value = new proto.plugins.redis.v1.Plugin.Hvals;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Hvals.deserializeBinaryFromReader);
      msg.setHvals(value);
      break;
    case 20:
      var value = new proto.plugins.redis.v1.Plugin.Lindex;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Lindex.deserializeBinaryFromReader);
      msg.setLindex(value);
      break;
    case 21:
      var value = new proto.plugins.redis.v1.Plugin.Llen;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Llen.deserializeBinaryFromReader);
      msg.setLlen(value);
      break;
    case 22:
      var value = new proto.plugins.redis.v1.Plugin.Lpush;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Lpush.deserializeBinaryFromReader);
      msg.setLpush(value);
      break;
    case 23:
      var value = new proto.plugins.redis.v1.Plugin.Lrem;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Lrem.deserializeBinaryFromReader);
      msg.setLrem(value);
      break;
    case 24:
      var value = new proto.plugins.redis.v1.Plugin.Lrange;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Lrange.deserializeBinaryFromReader);
      msg.setLrange(value);
      break;
    case 25:
      var value = new proto.plugins.redis.v1.Plugin.Sadd;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Sadd.deserializeBinaryFromReader);
      msg.setSadd(value);
      break;
    case 26:
      var value = new proto.plugins.redis.v1.Plugin.Scard;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Scard.deserializeBinaryFromReader);
      msg.setScard(value);
      break;
    case 27:
      var value = new proto.plugins.redis.v1.Plugin.Smembers;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Smembers.deserializeBinaryFromReader);
      msg.setSmembers(value);
      break;
    case 28:
      var value = new proto.plugins.redis.v1.Plugin.Sismember;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Sismember.deserializeBinaryFromReader);
      msg.setSismember(value);
      break;
    case 29:
      var value = new proto.plugins.redis.v1.Plugin.Srandmember;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Srandmember.deserializeBinaryFromReader);
      msg.setSrandmember(value);
      break;
    case 30:
      var value = new proto.plugins.redis.v1.Plugin.Srem;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Srem.deserializeBinaryFromReader);
      msg.setSrem(value);
      break;
    case 31:
      var value = new proto.plugins.redis.v1.Plugin.Zadd;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Zadd.deserializeBinaryFromReader);
      msg.setZadd(value);
      break;
    case 32:
      var value = new proto.plugins.redis.v1.Plugin.Zcard;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Zcard.deserializeBinaryFromReader);
      msg.setZcard(value);
      break;
    case 33:
      var value = new proto.plugins.redis.v1.Plugin.Zcount;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Zcount.deserializeBinaryFromReader);
      msg.setZcount(value);
      break;
    case 34:
      var value = new proto.plugins.redis.v1.Plugin.Zrange;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Zrange.deserializeBinaryFromReader);
      msg.setZrange(value);
      break;
    case 35:
      var value = new proto.plugins.redis.v1.Plugin.Zrank;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Zrank.deserializeBinaryFromReader);
      msg.setZrank(value);
      break;
    case 36:
      var value = new proto.plugins.redis.v1.Plugin.Zrem;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Zrem.deserializeBinaryFromReader);
      msg.setZrem(value);
      break;
    case 37:
      var value = new proto.plugins.redis.v1.Plugin.Zscore;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Zscore.deserializeBinaryFromReader);
      msg.setZscore(value);
      break;
    case 38:
      var value = new proto.plugins.redis.v1.Plugin.Expire;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Expire.deserializeBinaryFromReader);
      msg.setExpire(value);
      break;
    case 39:
      var value = new proto.plugins.redis.v1.Plugin.Ttl;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Ttl.deserializeBinaryFromReader);
      msg.setTtl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Structured.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Structured} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Structured.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGet();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.plugins.redis.v1.Plugin.Get.serializeBinaryToWriter
    );
  }
  f = message.getSet();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.plugins.redis.v1.Plugin.Set.serializeBinaryToWriter
    );
  }
  f = message.getDel();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.plugins.redis.v1.Plugin.Del.serializeBinaryToWriter
    );
  }
  f = message.getKeys();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.plugins.redis.v1.Plugin.Keys.serializeBinaryToWriter
    );
  }
  f = message.getMget();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.plugins.redis.v1.Plugin.Mget.serializeBinaryToWriter
    );
  }
  f = message.getHget();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.plugins.redis.v1.Plugin.Hget.serializeBinaryToWriter
    );
  }
  f = message.getHmget();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.plugins.redis.v1.Plugin.Hmget.serializeBinaryToWriter
    );
  }
  f = message.getHgetall();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.plugins.redis.v1.Plugin.Hgetall.serializeBinaryToWriter
    );
  }
  f = message.getHset();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.plugins.redis.v1.Plugin.Hset.serializeBinaryToWriter
    );
  }
  f = message.getHsetnx();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.plugins.redis.v1.Plugin.Hsetnx.serializeBinaryToWriter
    );
  }
  f = message.getHlen();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.plugins.redis.v1.Plugin.Hlen.serializeBinaryToWriter
    );
  }
  f = message.getHdel();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.plugins.redis.v1.Plugin.Hdel.serializeBinaryToWriter
    );
  }
  f = message.getHkeys();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.plugins.redis.v1.Plugin.Hkeys.serializeBinaryToWriter
    );
  }
  f = message.getHvals();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.plugins.redis.v1.Plugin.Hvals.serializeBinaryToWriter
    );
  }
  f = message.getLindex();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.plugins.redis.v1.Plugin.Lindex.serializeBinaryToWriter
    );
  }
  f = message.getLlen();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.plugins.redis.v1.Plugin.Llen.serializeBinaryToWriter
    );
  }
  f = message.getLpush();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.plugins.redis.v1.Plugin.Lpush.serializeBinaryToWriter
    );
  }
  f = message.getLrem();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.plugins.redis.v1.Plugin.Lrem.serializeBinaryToWriter
    );
  }
  f = message.getLrange();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.plugins.redis.v1.Plugin.Lrange.serializeBinaryToWriter
    );
  }
  f = message.getSadd();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.plugins.redis.v1.Plugin.Sadd.serializeBinaryToWriter
    );
  }
  f = message.getScard();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.plugins.redis.v1.Plugin.Scard.serializeBinaryToWriter
    );
  }
  f = message.getSmembers();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.plugins.redis.v1.Plugin.Smembers.serializeBinaryToWriter
    );
  }
  f = message.getSismember();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      proto.plugins.redis.v1.Plugin.Sismember.serializeBinaryToWriter
    );
  }
  f = message.getSrandmember();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      proto.plugins.redis.v1.Plugin.Srandmember.serializeBinaryToWriter
    );
  }
  f = message.getSrem();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.plugins.redis.v1.Plugin.Srem.serializeBinaryToWriter
    );
  }
  f = message.getZadd();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.plugins.redis.v1.Plugin.Zadd.serializeBinaryToWriter
    );
  }
  f = message.getZcard();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      proto.plugins.redis.v1.Plugin.Zcard.serializeBinaryToWriter
    );
  }
  f = message.getZcount();
  if (f != null) {
    writer.writeMessage(
      33,
      f,
      proto.plugins.redis.v1.Plugin.Zcount.serializeBinaryToWriter
    );
  }
  f = message.getZrange();
  if (f != null) {
    writer.writeMessage(
      34,
      f,
      proto.plugins.redis.v1.Plugin.Zrange.serializeBinaryToWriter
    );
  }
  f = message.getZrank();
  if (f != null) {
    writer.writeMessage(
      35,
      f,
      proto.plugins.redis.v1.Plugin.Zrank.serializeBinaryToWriter
    );
  }
  f = message.getZrem();
  if (f != null) {
    writer.writeMessage(
      36,
      f,
      proto.plugins.redis.v1.Plugin.Zrem.serializeBinaryToWriter
    );
  }
  f = message.getZscore();
  if (f != null) {
    writer.writeMessage(
      37,
      f,
      proto.plugins.redis.v1.Plugin.Zscore.serializeBinaryToWriter
    );
  }
  f = message.getExpire();
  if (f != null) {
    writer.writeMessage(
      38,
      f,
      proto.plugins.redis.v1.Plugin.Expire.serializeBinaryToWriter
    );
  }
  f = message.getTtl();
  if (f != null) {
    writer.writeMessage(
      39,
      f,
      proto.plugins.redis.v1.Plugin.Ttl.serializeBinaryToWriter
    );
  }
};


/**
 * optional Get get = 6;
 * @return {?proto.plugins.redis.v1.Plugin.Get}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getGet = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Get} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Get, 6));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Get|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setGet = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearGet = function() {
  return this.setGet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasGet = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Set set = 7;
 * @return {?proto.plugins.redis.v1.Plugin.Set}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getSet = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Set} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Set, 7));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Set|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setSet = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearSet = function() {
  return this.setSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasSet = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Del del = 8;
 * @return {?proto.plugins.redis.v1.Plugin.Del}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getDel = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Del} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Del, 8));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Del|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setDel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearDel = function() {
  return this.setDel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasDel = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Keys keys = 9;
 * @return {?proto.plugins.redis.v1.Plugin.Keys}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getKeys = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Keys} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Keys, 9));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Keys|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setKeys = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearKeys = function() {
  return this.setKeys(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasKeys = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Mget mget = 10;
 * @return {?proto.plugins.redis.v1.Plugin.Mget}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getMget = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Mget} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Mget, 10));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Mget|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setMget = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearMget = function() {
  return this.setMget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasMget = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Hget hget = 11;
 * @return {?proto.plugins.redis.v1.Plugin.Hget}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getHget = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Hget} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Hget, 11));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Hget|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setHget = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearHget = function() {
  return this.setHget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasHget = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Hmget hmget = 12;
 * @return {?proto.plugins.redis.v1.Plugin.Hmget}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getHmget = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Hmget} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Hmget, 12));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Hmget|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setHmget = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearHmget = function() {
  return this.setHmget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasHmget = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Hgetall hgetall = 13;
 * @return {?proto.plugins.redis.v1.Plugin.Hgetall}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getHgetall = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Hgetall} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Hgetall, 13));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Hgetall|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setHgetall = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearHgetall = function() {
  return this.setHgetall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasHgetall = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Hset hset = 14;
 * @return {?proto.plugins.redis.v1.Plugin.Hset}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getHset = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Hset} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Hset, 14));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Hset|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setHset = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearHset = function() {
  return this.setHset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasHset = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional Hsetnx hsetnx = 15;
 * @return {?proto.plugins.redis.v1.Plugin.Hsetnx}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getHsetnx = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Hsetnx} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Hsetnx, 15));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Hsetnx|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setHsetnx = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearHsetnx = function() {
  return this.setHsetnx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasHsetnx = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional Hlen hlen = 16;
 * @return {?proto.plugins.redis.v1.Plugin.Hlen}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getHlen = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Hlen} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Hlen, 16));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Hlen|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setHlen = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearHlen = function() {
  return this.setHlen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasHlen = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional Hdel hdel = 17;
 * @return {?proto.plugins.redis.v1.Plugin.Hdel}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getHdel = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Hdel} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Hdel, 17));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Hdel|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setHdel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearHdel = function() {
  return this.setHdel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasHdel = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional Hkeys hkeys = 18;
 * @return {?proto.plugins.redis.v1.Plugin.Hkeys}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getHkeys = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Hkeys} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Hkeys, 18));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Hkeys|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setHkeys = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearHkeys = function() {
  return this.setHkeys(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasHkeys = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional Hvals hvals = 19;
 * @return {?proto.plugins.redis.v1.Plugin.Hvals}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getHvals = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Hvals} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Hvals, 19));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Hvals|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setHvals = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearHvals = function() {
  return this.setHvals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasHvals = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional Lindex lindex = 20;
 * @return {?proto.plugins.redis.v1.Plugin.Lindex}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getLindex = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Lindex} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Lindex, 20));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Lindex|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setLindex = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearLindex = function() {
  return this.setLindex(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasLindex = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional Llen llen = 21;
 * @return {?proto.plugins.redis.v1.Plugin.Llen}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getLlen = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Llen} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Llen, 21));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Llen|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setLlen = function(value) {
  return jspb.Message.setOneofWrapperField(this, 21, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearLlen = function() {
  return this.setLlen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasLlen = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional Lpush lpush = 22;
 * @return {?proto.plugins.redis.v1.Plugin.Lpush}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getLpush = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Lpush} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Lpush, 22));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Lpush|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setLpush = function(value) {
  return jspb.Message.setOneofWrapperField(this, 22, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearLpush = function() {
  return this.setLpush(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasLpush = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional Lrem lrem = 23;
 * @return {?proto.plugins.redis.v1.Plugin.Lrem}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getLrem = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Lrem} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Lrem, 23));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Lrem|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setLrem = function(value) {
  return jspb.Message.setOneofWrapperField(this, 23, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearLrem = function() {
  return this.setLrem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasLrem = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional Lrange lrange = 24;
 * @return {?proto.plugins.redis.v1.Plugin.Lrange}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getLrange = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Lrange} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Lrange, 24));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Lrange|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setLrange = function(value) {
  return jspb.Message.setOneofWrapperField(this, 24, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearLrange = function() {
  return this.setLrange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasLrange = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional Sadd sadd = 25;
 * @return {?proto.plugins.redis.v1.Plugin.Sadd}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getSadd = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Sadd} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Sadd, 25));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Sadd|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setSadd = function(value) {
  return jspb.Message.setOneofWrapperField(this, 25, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearSadd = function() {
  return this.setSadd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasSadd = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional Scard scard = 26;
 * @return {?proto.plugins.redis.v1.Plugin.Scard}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getScard = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Scard} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Scard, 26));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Scard|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setScard = function(value) {
  return jspb.Message.setOneofWrapperField(this, 26, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearScard = function() {
  return this.setScard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasScard = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional Smembers smembers = 27;
 * @return {?proto.plugins.redis.v1.Plugin.Smembers}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getSmembers = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Smembers} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Smembers, 27));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Smembers|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setSmembers = function(value) {
  return jspb.Message.setOneofWrapperField(this, 27, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearSmembers = function() {
  return this.setSmembers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasSmembers = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional Sismember sismember = 28;
 * @return {?proto.plugins.redis.v1.Plugin.Sismember}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getSismember = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Sismember} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Sismember, 28));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Sismember|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setSismember = function(value) {
  return jspb.Message.setOneofWrapperField(this, 28, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearSismember = function() {
  return this.setSismember(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasSismember = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional Srandmember srandmember = 29;
 * @return {?proto.plugins.redis.v1.Plugin.Srandmember}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getSrandmember = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Srandmember} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Srandmember, 29));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Srandmember|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setSrandmember = function(value) {
  return jspb.Message.setOneofWrapperField(this, 29, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearSrandmember = function() {
  return this.setSrandmember(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasSrandmember = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional Srem srem = 30;
 * @return {?proto.plugins.redis.v1.Plugin.Srem}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getSrem = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Srem} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Srem, 30));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Srem|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setSrem = function(value) {
  return jspb.Message.setOneofWrapperField(this, 30, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearSrem = function() {
  return this.setSrem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasSrem = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional Zadd zadd = 31;
 * @return {?proto.plugins.redis.v1.Plugin.Zadd}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getZadd = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Zadd} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Zadd, 31));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Zadd|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setZadd = function(value) {
  return jspb.Message.setOneofWrapperField(this, 31, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearZadd = function() {
  return this.setZadd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasZadd = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional Zcard zcard = 32;
 * @return {?proto.plugins.redis.v1.Plugin.Zcard}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getZcard = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Zcard} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Zcard, 32));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Zcard|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setZcard = function(value) {
  return jspb.Message.setOneofWrapperField(this, 32, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearZcard = function() {
  return this.setZcard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasZcard = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional Zcount zcount = 33;
 * @return {?proto.plugins.redis.v1.Plugin.Zcount}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getZcount = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Zcount} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Zcount, 33));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Zcount|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setZcount = function(value) {
  return jspb.Message.setOneofWrapperField(this, 33, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearZcount = function() {
  return this.setZcount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasZcount = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * optional Zrange zrange = 34;
 * @return {?proto.plugins.redis.v1.Plugin.Zrange}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getZrange = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Zrange} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Zrange, 34));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Zrange|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setZrange = function(value) {
  return jspb.Message.setOneofWrapperField(this, 34, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearZrange = function() {
  return this.setZrange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasZrange = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * optional Zrank zrank = 35;
 * @return {?proto.plugins.redis.v1.Plugin.Zrank}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getZrank = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Zrank} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Zrank, 35));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Zrank|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setZrank = function(value) {
  return jspb.Message.setOneofWrapperField(this, 35, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearZrank = function() {
  return this.setZrank(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasZrank = function() {
  return jspb.Message.getField(this, 35) != null;
};


/**
 * optional Zrem zrem = 36;
 * @return {?proto.plugins.redis.v1.Plugin.Zrem}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getZrem = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Zrem} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Zrem, 36));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Zrem|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setZrem = function(value) {
  return jspb.Message.setOneofWrapperField(this, 36, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearZrem = function() {
  return this.setZrem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasZrem = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional Zscore zscore = 37;
 * @return {?proto.plugins.redis.v1.Plugin.Zscore}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getZscore = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Zscore} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Zscore, 37));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Zscore|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setZscore = function(value) {
  return jspb.Message.setOneofWrapperField(this, 37, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearZscore = function() {
  return this.setZscore(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasZscore = function() {
  return jspb.Message.getField(this, 37) != null;
};


/**
 * optional Expire expire = 38;
 * @return {?proto.plugins.redis.v1.Plugin.Expire}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getExpire = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Expire} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Expire, 38));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Expire|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setExpire = function(value) {
  return jspb.Message.setOneofWrapperField(this, 38, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearExpire = function() {
  return this.setExpire(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasExpire = function() {
  return jspb.Message.getField(this, 38) != null;
};


/**
 * optional Ttl ttl = 39;
 * @return {?proto.plugins.redis.v1.Plugin.Ttl}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.getTtl = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Ttl} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Ttl, 39));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Ttl|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
*/
proto.plugins.redis.v1.Plugin.Structured.prototype.setTtl = function(value) {
  return jspb.Message.setOneofWrapperField(this, 39, proto.plugins.redis.v1.Plugin.Structured.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Structured} returns this
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.clearTtl = function() {
  return this.setTtl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Structured.prototype.hasTtl = function() {
  return jspb.Message.getField(this, 39) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.plugins.redis.v1.Plugin.Connection.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.plugins.redis.v1.Plugin.Connection.ConnectionTypeCase = {
  CONNECTION_TYPE_NOT_SET: 0,
  URL: 1,
  FIELDS: 2
};

/**
 * @return {proto.plugins.redis.v1.Plugin.Connection.ConnectionTypeCase}
 */
proto.plugins.redis.v1.Plugin.Connection.prototype.getConnectionTypeCase = function() {
  return /** @type {proto.plugins.redis.v1.Plugin.Connection.ConnectionTypeCase} */(jspb.Message.computeOneofCase(this, proto.plugins.redis.v1.Plugin.Connection.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Connection.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Connection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Connection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Connection.toObject = function(includeInstance, msg) {
  var f, obj = {
url: (f = msg.getUrl()) && proto.plugins.redis.v1.Plugin.Connection.Url.toObject(includeInstance, f),
fields: (f = msg.getFields()) && proto.plugins.redis.v1.Plugin.Connection.Fields.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Connection}
 */
proto.plugins.redis.v1.Plugin.Connection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Connection;
  return proto.plugins.redis.v1.Plugin.Connection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Connection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Connection}
 */
proto.plugins.redis.v1.Plugin.Connection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.plugins.redis.v1.Plugin.Connection.Url;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Connection.Url.deserializeBinaryFromReader);
      msg.setUrl(value);
      break;
    case 2:
      var value = new proto.plugins.redis.v1.Plugin.Connection.Fields;
      reader.readMessage(value,proto.plugins.redis.v1.Plugin.Connection.Fields.deserializeBinaryFromReader);
      msg.setFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Connection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Connection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Connection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Connection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.plugins.redis.v1.Plugin.Connection.Url.serializeBinaryToWriter
    );
  }
  f = message.getFields();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.plugins.redis.v1.Plugin.Connection.Fields.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Connection.Url.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Connection.Url.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Connection.Url} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Connection.Url.toObject = function(includeInstance, msg) {
  var f, obj = {
urlString: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Connection.Url}
 */
proto.plugins.redis.v1.Plugin.Connection.Url.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Connection.Url;
  return proto.plugins.redis.v1.Plugin.Connection.Url.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Connection.Url} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Connection.Url}
 */
proto.plugins.redis.v1.Plugin.Connection.Url.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrlString(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Connection.Url.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Connection.Url.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Connection.Url} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Connection.Url.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrlString();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string url_string = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Connection.Url.prototype.getUrlString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Connection.Url} returns this
 */
proto.plugins.redis.v1.Plugin.Connection.Url.prototype.setUrlString = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Connection.Fields.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Connection.Fields} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.toObject = function(includeInstance, msg) {
  var f, obj = {
host: jspb.Message.getFieldWithDefault(msg, 1, ""),
port: jspb.Message.getFieldWithDefault(msg, 2, 0),
databaseNumber: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
username: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
password: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
enableSsl: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Connection.Fields}
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Connection.Fields;
  return proto.plugins.redis.v1.Plugin.Connection.Fields.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Connection.Fields} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Connection.Fields}
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDatabaseNumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableSsl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Connection.Fields.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Connection.Fields} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEnableSsl();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Connection.Fields} returns this
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.redis.v1.Plugin.Connection.Fields} returns this
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 database_number = 3;
 * @return {number}
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.prototype.getDatabaseNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.redis.v1.Plugin.Connection.Fields} returns this
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.prototype.setDatabaseNumber = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Connection.Fields} returns this
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.prototype.clearDatabaseNumber = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.prototype.hasDatabaseNumber = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string username = 4;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Connection.Fields} returns this
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.prototype.setUsername = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Connection.Fields} returns this
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.prototype.clearUsername = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string password = 5;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Connection.Fields} returns this
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.prototype.setPassword = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Connection.Fields} returns this
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.prototype.clearPassword = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool enable_ssl = 6;
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.prototype.getEnableSsl = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.plugins.redis.v1.Plugin.Connection.Fields} returns this
 */
proto.plugins.redis.v1.Plugin.Connection.Fields.prototype.setEnableSsl = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional Url url = 1;
 * @return {?proto.plugins.redis.v1.Plugin.Connection.Url}
 */
proto.plugins.redis.v1.Plugin.Connection.prototype.getUrl = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Connection.Url} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Connection.Url, 1));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Connection.Url|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Connection} returns this
*/
proto.plugins.redis.v1.Plugin.Connection.prototype.setUrl = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.plugins.redis.v1.Plugin.Connection.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Connection} returns this
 */
proto.plugins.redis.v1.Plugin.Connection.prototype.clearUrl = function() {
  return this.setUrl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Connection.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Fields fields = 2;
 * @return {?proto.plugins.redis.v1.Plugin.Connection.Fields}
 */
proto.plugins.redis.v1.Plugin.Connection.prototype.getFields = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Connection.Fields} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Connection.Fields, 2));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Connection.Fields|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin.Connection} returns this
*/
proto.plugins.redis.v1.Plugin.Connection.prototype.setFields = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.plugins.redis.v1.Plugin.Connection.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Connection} returns this
 */
proto.plugins.redis.v1.Plugin.Connection.prototype.clearFields = function() {
  return this.setFields(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Connection.prototype.hasFields = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Get.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Get.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Get} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Get.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Get}
 */
proto.plugins.redis.v1.Plugin.Get.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Get;
  return proto.plugins.redis.v1.Plugin.Get.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Get} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Get}
 */
proto.plugins.redis.v1.Plugin.Get.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Get.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Get.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Get} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Get.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Get.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Get} returns this
 */
proto.plugins.redis.v1.Plugin.Get.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Set.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Set.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Set} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Set.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
value: jspb.Message.getFieldWithDefault(msg, 2, ""),
expirationMs: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Set}
 */
proto.plugins.redis.v1.Plugin.Set.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Set;
  return proto.plugins.redis.v1.Plugin.Set.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Set} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Set}
 */
proto.plugins.redis.v1.Plugin.Set.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExpirationMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Set.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Set.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Set} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Set.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Set.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Set} returns this
 */
proto.plugins.redis.v1.Plugin.Set.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Set.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Set} returns this
 */
proto.plugins.redis.v1.Plugin.Set.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 expiration_ms = 3;
 * @return {number}
 */
proto.plugins.redis.v1.Plugin.Set.prototype.getExpirationMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.redis.v1.Plugin.Set} returns this
 */
proto.plugins.redis.v1.Plugin.Set.prototype.setExpirationMs = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Set} returns this
 */
proto.plugins.redis.v1.Plugin.Set.prototype.clearExpirationMs = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Set.prototype.hasExpirationMs = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Del.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Del.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Del} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Del.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Del}
 */
proto.plugins.redis.v1.Plugin.Del.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Del;
  return proto.plugins.redis.v1.Plugin.Del.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Del} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Del}
 */
proto.plugins.redis.v1.Plugin.Del.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Del.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Del.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Del} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Del.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Del.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Del} returns this
 */
proto.plugins.redis.v1.Plugin.Del.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Keys.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Keys.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Keys} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Keys.toObject = function(includeInstance, msg) {
  var f, obj = {
pattern: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Keys}
 */
proto.plugins.redis.v1.Plugin.Keys.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Keys;
  return proto.plugins.redis.v1.Plugin.Keys.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Keys} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Keys}
 */
proto.plugins.redis.v1.Plugin.Keys.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPattern(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Keys.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Keys.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Keys} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Keys.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPattern();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string pattern = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Keys.prototype.getPattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Keys} returns this
 */
proto.plugins.redis.v1.Plugin.Keys.prototype.setPattern = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Mget.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Mget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Mget} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Mget.toObject = function(includeInstance, msg) {
  var f, obj = {
keys: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Mget}
 */
proto.plugins.redis.v1.Plugin.Mget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Mget;
  return proto.plugins.redis.v1.Plugin.Mget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Mget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Mget}
 */
proto.plugins.redis.v1.Plugin.Mget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Mget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Mget.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Mget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Mget.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeys();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string keys = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Mget.prototype.getKeys = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Mget} returns this
 */
proto.plugins.redis.v1.Plugin.Mget.prototype.setKeys = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Hget.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Hget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Hget} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Hget.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
field: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Hget}
 */
proto.plugins.redis.v1.Plugin.Hget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Hget;
  return proto.plugins.redis.v1.Plugin.Hget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Hget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Hget}
 */
proto.plugins.redis.v1.Plugin.Hget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Hget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Hget.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Hget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Hget.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getField();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Hget.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Hget} returns this
 */
proto.plugins.redis.v1.Plugin.Hget.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string field = 2;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Hget.prototype.getField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Hget} returns this
 */
proto.plugins.redis.v1.Plugin.Hget.prototype.setField = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Hmget.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Hmget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Hmget} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Hmget.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
fields: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Hmget}
 */
proto.plugins.redis.v1.Plugin.Hmget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Hmget;
  return proto.plugins.redis.v1.Plugin.Hmget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Hmget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Hmget}
 */
proto.plugins.redis.v1.Plugin.Hmget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Hmget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Hmget.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Hmget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Hmget.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFields();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Hmget.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Hmget} returns this
 */
proto.plugins.redis.v1.Plugin.Hmget.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string fields = 2;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Hmget.prototype.getFields = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Hmget} returns this
 */
proto.plugins.redis.v1.Plugin.Hmget.prototype.setFields = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Hgetall.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Hgetall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Hgetall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Hgetall.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Hgetall}
 */
proto.plugins.redis.v1.Plugin.Hgetall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Hgetall;
  return proto.plugins.redis.v1.Plugin.Hgetall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Hgetall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Hgetall}
 */
proto.plugins.redis.v1.Plugin.Hgetall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Hgetall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Hgetall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Hgetall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Hgetall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Hgetall.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Hgetall} returns this
 */
proto.plugins.redis.v1.Plugin.Hgetall.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Hset.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Hset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Hset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Hset.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
field: jspb.Message.getFieldWithDefault(msg, 2, ""),
value: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Hset}
 */
proto.plugins.redis.v1.Plugin.Hset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Hset;
  return proto.plugins.redis.v1.Plugin.Hset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Hset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Hset}
 */
proto.plugins.redis.v1.Plugin.Hset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Hset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Hset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Hset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Hset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getField();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Hset.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Hset} returns this
 */
proto.plugins.redis.v1.Plugin.Hset.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string field = 2;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Hset.prototype.getField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Hset} returns this
 */
proto.plugins.redis.v1.Plugin.Hset.prototype.setField = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Hset.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Hset} returns this
 */
proto.plugins.redis.v1.Plugin.Hset.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Hsetnx.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Hsetnx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Hsetnx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Hsetnx.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
field: jspb.Message.getFieldWithDefault(msg, 2, ""),
value: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Hsetnx}
 */
proto.plugins.redis.v1.Plugin.Hsetnx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Hsetnx;
  return proto.plugins.redis.v1.Plugin.Hsetnx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Hsetnx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Hsetnx}
 */
proto.plugins.redis.v1.Plugin.Hsetnx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Hsetnx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Hsetnx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Hsetnx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Hsetnx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getField();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Hsetnx.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Hsetnx} returns this
 */
proto.plugins.redis.v1.Plugin.Hsetnx.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string field = 2;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Hsetnx.prototype.getField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Hsetnx} returns this
 */
proto.plugins.redis.v1.Plugin.Hsetnx.prototype.setField = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Hsetnx.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Hsetnx} returns this
 */
proto.plugins.redis.v1.Plugin.Hsetnx.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Hlen.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Hlen.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Hlen} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Hlen.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Hlen}
 */
proto.plugins.redis.v1.Plugin.Hlen.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Hlen;
  return proto.plugins.redis.v1.Plugin.Hlen.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Hlen} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Hlen}
 */
proto.plugins.redis.v1.Plugin.Hlen.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Hlen.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Hlen.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Hlen} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Hlen.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Hlen.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Hlen} returns this
 */
proto.plugins.redis.v1.Plugin.Hlen.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Hdel.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Hdel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Hdel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Hdel.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
field: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Hdel}
 */
proto.plugins.redis.v1.Plugin.Hdel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Hdel;
  return proto.plugins.redis.v1.Plugin.Hdel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Hdel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Hdel}
 */
proto.plugins.redis.v1.Plugin.Hdel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Hdel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Hdel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Hdel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Hdel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getField();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Hdel.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Hdel} returns this
 */
proto.plugins.redis.v1.Plugin.Hdel.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string field = 2;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Hdel.prototype.getField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Hdel} returns this
 */
proto.plugins.redis.v1.Plugin.Hdel.prototype.setField = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Hkeys.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Hkeys.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Hkeys} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Hkeys.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Hkeys}
 */
proto.plugins.redis.v1.Plugin.Hkeys.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Hkeys;
  return proto.plugins.redis.v1.Plugin.Hkeys.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Hkeys} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Hkeys}
 */
proto.plugins.redis.v1.Plugin.Hkeys.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Hkeys.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Hkeys.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Hkeys} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Hkeys.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Hkeys.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Hkeys} returns this
 */
proto.plugins.redis.v1.Plugin.Hkeys.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Hvals.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Hvals.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Hvals} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Hvals.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Hvals}
 */
proto.plugins.redis.v1.Plugin.Hvals.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Hvals;
  return proto.plugins.redis.v1.Plugin.Hvals.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Hvals} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Hvals}
 */
proto.plugins.redis.v1.Plugin.Hvals.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Hvals.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Hvals.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Hvals} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Hvals.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Hvals.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Hvals} returns this
 */
proto.plugins.redis.v1.Plugin.Hvals.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Lindex.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Lindex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Lindex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Lindex.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
index: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Lindex}
 */
proto.plugins.redis.v1.Plugin.Lindex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Lindex;
  return proto.plugins.redis.v1.Plugin.Lindex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Lindex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Lindex}
 */
proto.plugins.redis.v1.Plugin.Lindex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Lindex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Lindex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Lindex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Lindex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Lindex.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Lindex} returns this
 */
proto.plugins.redis.v1.Plugin.Lindex.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 index = 2;
 * @return {number}
 */
proto.plugins.redis.v1.Plugin.Lindex.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.redis.v1.Plugin.Lindex} returns this
 */
proto.plugins.redis.v1.Plugin.Lindex.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Llen.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Llen.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Llen} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Llen.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Llen}
 */
proto.plugins.redis.v1.Plugin.Llen.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Llen;
  return proto.plugins.redis.v1.Plugin.Llen.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Llen} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Llen}
 */
proto.plugins.redis.v1.Plugin.Llen.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Llen.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Llen.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Llen} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Llen.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Llen.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Llen} returns this
 */
proto.plugins.redis.v1.Plugin.Llen.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Lpush.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Lpush.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Lpush} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Lpush.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Lpush}
 */
proto.plugins.redis.v1.Plugin.Lpush.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Lpush;
  return proto.plugins.redis.v1.Plugin.Lpush.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Lpush} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Lpush}
 */
proto.plugins.redis.v1.Plugin.Lpush.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Lpush.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Lpush.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Lpush} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Lpush.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Lpush.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Lpush} returns this
 */
proto.plugins.redis.v1.Plugin.Lpush.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Lpush.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Lpush} returns this
 */
proto.plugins.redis.v1.Plugin.Lpush.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Lrem.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Lrem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Lrem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Lrem.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
count: jspb.Message.getFieldWithDefault(msg, 2, 0),
value: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Lrem}
 */
proto.plugins.redis.v1.Plugin.Lrem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Lrem;
  return proto.plugins.redis.v1.Plugin.Lrem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Lrem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Lrem}
 */
proto.plugins.redis.v1.Plugin.Lrem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Lrem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Lrem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Lrem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Lrem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Lrem.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Lrem} returns this
 */
proto.plugins.redis.v1.Plugin.Lrem.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.plugins.redis.v1.Plugin.Lrem.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.redis.v1.Plugin.Lrem} returns this
 */
proto.plugins.redis.v1.Plugin.Lrem.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Lrem.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Lrem} returns this
 */
proto.plugins.redis.v1.Plugin.Lrem.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Lrange.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Lrange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Lrange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Lrange.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
start: jspb.Message.getFieldWithDefault(msg, 2, 0),
stop: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Lrange}
 */
proto.plugins.redis.v1.Plugin.Lrange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Lrange;
  return proto.plugins.redis.v1.Plugin.Lrange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Lrange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Lrange}
 */
proto.plugins.redis.v1.Plugin.Lrange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStart(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Lrange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Lrange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Lrange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Lrange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStart();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStop();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Lrange.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Lrange} returns this
 */
proto.plugins.redis.v1.Plugin.Lrange.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 start = 2;
 * @return {number}
 */
proto.plugins.redis.v1.Plugin.Lrange.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.redis.v1.Plugin.Lrange} returns this
 */
proto.plugins.redis.v1.Plugin.Lrange.prototype.setStart = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 stop = 3;
 * @return {number}
 */
proto.plugins.redis.v1.Plugin.Lrange.prototype.getStop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.redis.v1.Plugin.Lrange} returns this
 */
proto.plugins.redis.v1.Plugin.Lrange.prototype.setStop = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Sadd.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Sadd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Sadd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Sadd.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
member: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Sadd}
 */
proto.plugins.redis.v1.Plugin.Sadd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Sadd;
  return proto.plugins.redis.v1.Plugin.Sadd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Sadd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Sadd}
 */
proto.plugins.redis.v1.Plugin.Sadd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMember(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Sadd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Sadd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Sadd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Sadd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMember();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Sadd.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Sadd} returns this
 */
proto.plugins.redis.v1.Plugin.Sadd.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string member = 2;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Sadd.prototype.getMember = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Sadd} returns this
 */
proto.plugins.redis.v1.Plugin.Sadd.prototype.setMember = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Scard.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Scard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Scard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Scard.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Scard}
 */
proto.plugins.redis.v1.Plugin.Scard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Scard;
  return proto.plugins.redis.v1.Plugin.Scard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Scard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Scard}
 */
proto.plugins.redis.v1.Plugin.Scard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Scard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Scard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Scard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Scard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Scard.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Scard} returns this
 */
proto.plugins.redis.v1.Plugin.Scard.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Smembers.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Smembers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Smembers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Smembers.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Smembers}
 */
proto.plugins.redis.v1.Plugin.Smembers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Smembers;
  return proto.plugins.redis.v1.Plugin.Smembers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Smembers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Smembers}
 */
proto.plugins.redis.v1.Plugin.Smembers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Smembers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Smembers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Smembers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Smembers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Smembers.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Smembers} returns this
 */
proto.plugins.redis.v1.Plugin.Smembers.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Sismember.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Sismember.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Sismember} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Sismember.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
member: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Sismember}
 */
proto.plugins.redis.v1.Plugin.Sismember.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Sismember;
  return proto.plugins.redis.v1.Plugin.Sismember.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Sismember} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Sismember}
 */
proto.plugins.redis.v1.Plugin.Sismember.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMember(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Sismember.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Sismember.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Sismember} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Sismember.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMember();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Sismember.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Sismember} returns this
 */
proto.plugins.redis.v1.Plugin.Sismember.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string member = 2;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Sismember.prototype.getMember = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Sismember} returns this
 */
proto.plugins.redis.v1.Plugin.Sismember.prototype.setMember = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Srandmember.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Srandmember.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Srandmember} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Srandmember.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
count: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Srandmember}
 */
proto.plugins.redis.v1.Plugin.Srandmember.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Srandmember;
  return proto.plugins.redis.v1.Plugin.Srandmember.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Srandmember} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Srandmember}
 */
proto.plugins.redis.v1.Plugin.Srandmember.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Srandmember.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Srandmember.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Srandmember} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Srandmember.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Srandmember.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Srandmember} returns this
 */
proto.plugins.redis.v1.Plugin.Srandmember.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.plugins.redis.v1.Plugin.Srandmember.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.redis.v1.Plugin.Srandmember} returns this
 */
proto.plugins.redis.v1.Plugin.Srandmember.prototype.setCount = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Srandmember} returns this
 */
proto.plugins.redis.v1.Plugin.Srandmember.prototype.clearCount = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Srandmember.prototype.hasCount = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Srem.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Srem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Srem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Srem.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
member: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Srem}
 */
proto.plugins.redis.v1.Plugin.Srem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Srem;
  return proto.plugins.redis.v1.Plugin.Srem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Srem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Srem}
 */
proto.plugins.redis.v1.Plugin.Srem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMember(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Srem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Srem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Srem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Srem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMember();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Srem.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Srem} returns this
 */
proto.plugins.redis.v1.Plugin.Srem.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string member = 2;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Srem.prototype.getMember = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Srem} returns this
 */
proto.plugins.redis.v1.Plugin.Srem.prototype.setMember = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Zadd.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Zadd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Zadd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Zadd.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
score: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
member: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Zadd}
 */
proto.plugins.redis.v1.Plugin.Zadd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Zadd;
  return proto.plugins.redis.v1.Plugin.Zadd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Zadd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Zadd}
 */
proto.plugins.redis.v1.Plugin.Zadd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setScore(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMember(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Zadd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Zadd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Zadd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Zadd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScore();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getMember();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Zadd.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Zadd} returns this
 */
proto.plugins.redis.v1.Plugin.Zadd.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double score = 2;
 * @return {number}
 */
proto.plugins.redis.v1.Plugin.Zadd.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.redis.v1.Plugin.Zadd} returns this
 */
proto.plugins.redis.v1.Plugin.Zadd.prototype.setScore = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string member = 3;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Zadd.prototype.getMember = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Zadd} returns this
 */
proto.plugins.redis.v1.Plugin.Zadd.prototype.setMember = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Zcard.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Zcard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Zcard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Zcard.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Zcard}
 */
proto.plugins.redis.v1.Plugin.Zcard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Zcard;
  return proto.plugins.redis.v1.Plugin.Zcard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Zcard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Zcard}
 */
proto.plugins.redis.v1.Plugin.Zcard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Zcard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Zcard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Zcard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Zcard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Zcard.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Zcard} returns this
 */
proto.plugins.redis.v1.Plugin.Zcard.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Zcount.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Zcount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Zcount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Zcount.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
min: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
max: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Zcount}
 */
proto.plugins.redis.v1.Plugin.Zcount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Zcount;
  return proto.plugins.redis.v1.Plugin.Zcount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Zcount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Zcount}
 */
proto.plugins.redis.v1.Plugin.Zcount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Zcount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Zcount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Zcount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Zcount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMin();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getMax();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Zcount.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Zcount} returns this
 */
proto.plugins.redis.v1.Plugin.Zcount.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double min = 2;
 * @return {number}
 */
proto.plugins.redis.v1.Plugin.Zcount.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.redis.v1.Plugin.Zcount} returns this
 */
proto.plugins.redis.v1.Plugin.Zcount.prototype.setMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double max = 3;
 * @return {number}
 */
proto.plugins.redis.v1.Plugin.Zcount.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.redis.v1.Plugin.Zcount} returns this
 */
proto.plugins.redis.v1.Plugin.Zcount.prototype.setMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Zrange.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Zrange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Zrange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Zrange.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
start: jspb.Message.getFieldWithDefault(msg, 2, 0),
stop: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Zrange}
 */
proto.plugins.redis.v1.Plugin.Zrange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Zrange;
  return proto.plugins.redis.v1.Plugin.Zrange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Zrange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Zrange}
 */
proto.plugins.redis.v1.Plugin.Zrange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStart(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Zrange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Zrange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Zrange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Zrange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStart();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStop();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Zrange.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Zrange} returns this
 */
proto.plugins.redis.v1.Plugin.Zrange.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 start = 2;
 * @return {number}
 */
proto.plugins.redis.v1.Plugin.Zrange.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.redis.v1.Plugin.Zrange} returns this
 */
proto.plugins.redis.v1.Plugin.Zrange.prototype.setStart = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 stop = 3;
 * @return {number}
 */
proto.plugins.redis.v1.Plugin.Zrange.prototype.getStop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.redis.v1.Plugin.Zrange} returns this
 */
proto.plugins.redis.v1.Plugin.Zrange.prototype.setStop = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Zrank.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Zrank.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Zrank} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Zrank.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
member: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Zrank}
 */
proto.plugins.redis.v1.Plugin.Zrank.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Zrank;
  return proto.plugins.redis.v1.Plugin.Zrank.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Zrank} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Zrank}
 */
proto.plugins.redis.v1.Plugin.Zrank.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMember(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Zrank.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Zrank.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Zrank} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Zrank.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMember();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Zrank.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Zrank} returns this
 */
proto.plugins.redis.v1.Plugin.Zrank.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string member = 2;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Zrank.prototype.getMember = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Zrank} returns this
 */
proto.plugins.redis.v1.Plugin.Zrank.prototype.setMember = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Zrem.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Zrem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Zrem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Zrem.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
member: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Zrem}
 */
proto.plugins.redis.v1.Plugin.Zrem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Zrem;
  return proto.plugins.redis.v1.Plugin.Zrem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Zrem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Zrem}
 */
proto.plugins.redis.v1.Plugin.Zrem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMember(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Zrem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Zrem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Zrem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Zrem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMember();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Zrem.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Zrem} returns this
 */
proto.plugins.redis.v1.Plugin.Zrem.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string member = 2;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Zrem.prototype.getMember = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Zrem} returns this
 */
proto.plugins.redis.v1.Plugin.Zrem.prototype.setMember = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Zscore.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Zscore.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Zscore} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Zscore.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
member: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Zscore}
 */
proto.plugins.redis.v1.Plugin.Zscore.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Zscore;
  return proto.plugins.redis.v1.Plugin.Zscore.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Zscore} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Zscore}
 */
proto.plugins.redis.v1.Plugin.Zscore.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMember(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Zscore.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Zscore.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Zscore} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Zscore.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMember();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Zscore.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Zscore} returns this
 */
proto.plugins.redis.v1.Plugin.Zscore.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string member = 2;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Zscore.prototype.getMember = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Zscore} returns this
 */
proto.plugins.redis.v1.Plugin.Zscore.prototype.setMember = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Expire.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Expire.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Expire} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Expire.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
seconds: jspb.Message.getFieldWithDefault(msg, 2, 0),
option: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Expire}
 */
proto.plugins.redis.v1.Plugin.Expire.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Expire;
  return proto.plugins.redis.v1.Plugin.Expire.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Expire} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Expire}
 */
proto.plugins.redis.v1.Plugin.Expire.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeconds(value);
      break;
    case 3:
      var value = /** @type {!proto.plugins.redis.v1.Plugin.Expire.Option} */ (reader.readEnum());
      msg.setOption(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Expire.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Expire.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Expire} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Expire.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSeconds();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {!proto.plugins.redis.v1.Plugin.Expire.Option} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.plugins.redis.v1.Plugin.Expire.Option = {
  OPTION_UNSPECIFIED: 0,
  OPTION_NX: 1,
  OPTION_XX: 2,
  OPTION_GT: 3,
  OPTION_LT: 4
};

/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Expire.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Expire} returns this
 */
proto.plugins.redis.v1.Plugin.Expire.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 seconds = 2;
 * @return {number}
 */
proto.plugins.redis.v1.Plugin.Expire.prototype.getSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.redis.v1.Plugin.Expire} returns this
 */
proto.plugins.redis.v1.Plugin.Expire.prototype.setSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Option option = 3;
 * @return {!proto.plugins.redis.v1.Plugin.Expire.Option}
 */
proto.plugins.redis.v1.Plugin.Expire.prototype.getOption = function() {
  return /** @type {!proto.plugins.redis.v1.Plugin.Expire.Option} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.plugins.redis.v1.Plugin.Expire.Option} value
 * @return {!proto.plugins.redis.v1.Plugin.Expire} returns this
 */
proto.plugins.redis.v1.Plugin.Expire.prototype.setOption = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin.Expire} returns this
 */
proto.plugins.redis.v1.Plugin.Expire.prototype.clearOption = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.Expire.prototype.hasOption = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.redis.v1.Plugin.Ttl.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.redis.v1.Plugin.Ttl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.redis.v1.Plugin.Ttl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Ttl.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.redis.v1.Plugin.Ttl}
 */
proto.plugins.redis.v1.Plugin.Ttl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.redis.v1.Plugin.Ttl;
  return proto.plugins.redis.v1.Plugin.Ttl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.redis.v1.Plugin.Ttl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.redis.v1.Plugin.Ttl}
 */
proto.plugins.redis.v1.Plugin.Ttl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.redis.v1.Plugin.Ttl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.redis.v1.Plugin.Ttl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.redis.v1.Plugin.Ttl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.redis.v1.Plugin.Ttl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.Ttl.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin.Ttl} returns this
 */
proto.plugins.redis.v1.Plugin.Ttl.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.plugins.redis.v1.Plugin.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.redis.v1.Plugin} returns this
 */
proto.plugins.redis.v1.Plugin.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin} returns this
 */
proto.plugins.redis.v1.Plugin.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Connection connection = 2;
 * @return {?proto.plugins.redis.v1.Plugin.Connection}
 */
proto.plugins.redis.v1.Plugin.prototype.getConnection = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Connection} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Connection, 2));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Connection|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin} returns this
*/
proto.plugins.redis.v1.Plugin.prototype.setConnection = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin} returns this
 */
proto.plugins.redis.v1.Plugin.prototype.clearConnection = function() {
  return this.setConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.prototype.hasConnection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Raw raw = 3;
 * @return {?proto.plugins.redis.v1.Plugin.Raw}
 */
proto.plugins.redis.v1.Plugin.prototype.getRaw = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Raw} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Raw, 3));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Raw|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin} returns this
*/
proto.plugins.redis.v1.Plugin.prototype.setRaw = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.plugins.redis.v1.Plugin.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin} returns this
 */
proto.plugins.redis.v1.Plugin.prototype.clearRaw = function() {
  return this.setRaw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.prototype.hasRaw = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Structured structured = 4;
 * @return {?proto.plugins.redis.v1.Plugin.Structured}
 */
proto.plugins.redis.v1.Plugin.prototype.getStructured = function() {
  return /** @type{?proto.plugins.redis.v1.Plugin.Structured} */ (
    jspb.Message.getWrapperField(this, proto.plugins.redis.v1.Plugin.Structured, 4));
};


/**
 * @param {?proto.plugins.redis.v1.Plugin.Structured|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin} returns this
*/
proto.plugins.redis.v1.Plugin.prototype.setStructured = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.plugins.redis.v1.Plugin.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin} returns this
 */
proto.plugins.redis.v1.Plugin.prototype.clearStructured = function() {
  return this.setStructured(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.prototype.hasStructured = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional plugins.common.v1.DynamicWorkflowConfiguration dynamic_workflow_configuration = 5;
 * @return {?proto.plugins.common.v1.DynamicWorkflowConfiguration}
 */
proto.plugins.redis.v1.Plugin.prototype.getDynamicWorkflowConfiguration = function() {
  return /** @type{?proto.plugins.common.v1.DynamicWorkflowConfiguration} */ (
    jspb.Message.getWrapperField(this, plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration, 5));
};


/**
 * @param {?proto.plugins.common.v1.DynamicWorkflowConfiguration|undefined} value
 * @return {!proto.plugins.redis.v1.Plugin} returns this
*/
proto.plugins.redis.v1.Plugin.prototype.setDynamicWorkflowConfiguration = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.redis.v1.Plugin} returns this
 */
proto.plugins.redis.v1.Plugin.prototype.clearDynamicWorkflowConfiguration = function() {
  return this.setDynamicWorkflowConfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.redis.v1.Plugin.prototype.hasDynamicWorkflowConfiguration = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.plugins.redis.v1);
