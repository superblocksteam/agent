// source: plugins/common/v1/oauth.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.plugins.common.v1.Auth', null, global);
goog.exportSymbol('proto.plugins.common.v1.Auth.AuthCase', null, global);
goog.exportSymbol('proto.plugins.common.v1.Basic', null, global);
goog.exportSymbol('proto.plugins.common.v1.OAuth', null, global);
goog.exportSymbol('proto.plugins.common.v1.OAuth.CodeFlow', null, global);
goog.exportSymbol('proto.plugins.common.v1.OAuth.PasswordGrantFlow', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.OAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.common.v1.OAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.OAuth.displayName = 'proto.plugins.common.v1.OAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.common.v1.OAuth.PasswordGrantFlow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.OAuth.PasswordGrantFlow.displayName = 'proto.plugins.common.v1.OAuth.PasswordGrantFlow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.OAuth.CodeFlow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.common.v1.OAuth.CodeFlow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.OAuth.CodeFlow.displayName = 'proto.plugins.common.v1.OAuth.CodeFlow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.Basic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.common.v1.Basic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.Basic.displayName = 'proto.plugins.common.v1.Basic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.Auth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.plugins.common.v1.Auth.oneofGroups_);
};
goog.inherits(proto.plugins.common.v1.Auth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.Auth.displayName = 'proto.plugins.common.v1.Auth';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.common.v1.OAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.common.v1.OAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.common.v1.OAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.OAuth.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.OAuth}
 */
proto.plugins.common.v1.OAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.OAuth;
  return proto.plugins.common.v1.OAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.OAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.OAuth}
 */
proto.plugins.common.v1.OAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.OAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.OAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.OAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.OAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.common.v1.OAuth.PasswordGrantFlow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.common.v1.OAuth.PasswordGrantFlow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clientSecret: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tokenUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    username: jspb.Message.getFieldWithDefault(msg, 5, ""),
    password: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.OAuth.PasswordGrantFlow}
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.OAuth.PasswordGrantFlow;
  return proto.plugins.common.v1.OAuth.PasswordGrantFlow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.OAuth.PasswordGrantFlow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.OAuth.PasswordGrantFlow}
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientSecret(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.OAuth.PasswordGrantFlow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.OAuth.PasswordGrantFlow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClientSecret();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTokenUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string client_id = 2;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.PasswordGrantFlow} returns this
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string client_secret = 3;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.getClientSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.PasswordGrantFlow} returns this
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.setClientSecret = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string token_url = 4;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.getTokenUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.PasswordGrantFlow} returns this
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.setTokenUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string username = 5;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.PasswordGrantFlow} returns this
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string password = 6;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.PasswordGrantFlow} returns this
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.common.v1.OAuth.CodeFlow.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.common.v1.OAuth.CodeFlow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.common.v1.OAuth.CodeFlow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.OAuth.CodeFlow.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientSecret: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tokenUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    authUrl: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.OAuth.CodeFlow}
 */
proto.plugins.common.v1.OAuth.CodeFlow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.OAuth.CodeFlow;
  return proto.plugins.common.v1.OAuth.CodeFlow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.OAuth.CodeFlow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.OAuth.CodeFlow}
 */
proto.plugins.common.v1.OAuth.CodeFlow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientSecret(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.OAuth.CodeFlow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.OAuth.CodeFlow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.OAuth.CodeFlow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.OAuth.CodeFlow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientSecret();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTokenUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAuthUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.CodeFlow.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.CodeFlow} returns this
 */
proto.plugins.common.v1.OAuth.CodeFlow.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string client_secret = 2;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.CodeFlow.prototype.getClientSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.CodeFlow} returns this
 */
proto.plugins.common.v1.OAuth.CodeFlow.prototype.setClientSecret = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string token_url = 3;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.CodeFlow.prototype.getTokenUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.CodeFlow} returns this
 */
proto.plugins.common.v1.OAuth.CodeFlow.prototype.setTokenUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string auth_url = 4;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.CodeFlow.prototype.getAuthUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.CodeFlow} returns this
 */
proto.plugins.common.v1.OAuth.CodeFlow.prototype.setAuthUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.common.v1.Basic.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.common.v1.Basic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.common.v1.Basic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.Basic.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.Basic}
 */
proto.plugins.common.v1.Basic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.Basic;
  return proto.plugins.common.v1.Basic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.Basic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.Basic}
 */
proto.plugins.common.v1.Basic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.Basic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.Basic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.Basic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.Basic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.plugins.common.v1.Basic.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.Basic} returns this
 */
proto.plugins.common.v1.Basic.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.plugins.common.v1.Basic.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.Basic} returns this
 */
proto.plugins.common.v1.Basic.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.plugins.common.v1.Auth.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.plugins.common.v1.Auth.AuthCase = {
  AUTH_NOT_SET: 0,
  PASSWORD_GRANT_FLOW: 1,
  CODE_FLOW: 2,
  BASIC: 3
};

/**
 * @return {proto.plugins.common.v1.Auth.AuthCase}
 */
proto.plugins.common.v1.Auth.prototype.getAuthCase = function() {
  return /** @type {proto.plugins.common.v1.Auth.AuthCase} */(jspb.Message.computeOneofCase(this, proto.plugins.common.v1.Auth.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.common.v1.Auth.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.common.v1.Auth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.common.v1.Auth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.Auth.toObject = function(includeInstance, msg) {
  var f, obj = {
    passwordGrantFlow: (f = msg.getPasswordGrantFlow()) && proto.plugins.common.v1.OAuth.PasswordGrantFlow.toObject(includeInstance, f),
    codeFlow: (f = msg.getCodeFlow()) && proto.plugins.common.v1.OAuth.CodeFlow.toObject(includeInstance, f),
    basic: (f = msg.getBasic()) && proto.plugins.common.v1.Basic.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.Auth}
 */
proto.plugins.common.v1.Auth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.Auth;
  return proto.plugins.common.v1.Auth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.Auth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.Auth}
 */
proto.plugins.common.v1.Auth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.plugins.common.v1.OAuth.PasswordGrantFlow;
      reader.readMessage(value,proto.plugins.common.v1.OAuth.PasswordGrantFlow.deserializeBinaryFromReader);
      msg.setPasswordGrantFlow(value);
      break;
    case 2:
      var value = new proto.plugins.common.v1.OAuth.CodeFlow;
      reader.readMessage(value,proto.plugins.common.v1.OAuth.CodeFlow.deserializeBinaryFromReader);
      msg.setCodeFlow(value);
      break;
    case 3:
      var value = new proto.plugins.common.v1.Basic;
      reader.readMessage(value,proto.plugins.common.v1.Basic.deserializeBinaryFromReader);
      msg.setBasic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.Auth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.Auth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.Auth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.Auth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPasswordGrantFlow();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.plugins.common.v1.OAuth.PasswordGrantFlow.serializeBinaryToWriter
    );
  }
  f = message.getCodeFlow();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.plugins.common.v1.OAuth.CodeFlow.serializeBinaryToWriter
    );
  }
  f = message.getBasic();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.plugins.common.v1.Basic.serializeBinaryToWriter
    );
  }
};


/**
 * optional OAuth.PasswordGrantFlow password_grant_flow = 1;
 * @return {?proto.plugins.common.v1.OAuth.PasswordGrantFlow}
 */
proto.plugins.common.v1.Auth.prototype.getPasswordGrantFlow = function() {
  return /** @type{?proto.plugins.common.v1.OAuth.PasswordGrantFlow} */ (
    jspb.Message.getWrapperField(this, proto.plugins.common.v1.OAuth.PasswordGrantFlow, 1));
};


/**
 * @param {?proto.plugins.common.v1.OAuth.PasswordGrantFlow|undefined} value
 * @return {!proto.plugins.common.v1.Auth} returns this
*/
proto.plugins.common.v1.Auth.prototype.setPasswordGrantFlow = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.plugins.common.v1.Auth.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.common.v1.Auth} returns this
 */
proto.plugins.common.v1.Auth.prototype.clearPasswordGrantFlow = function() {
  return this.setPasswordGrantFlow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.Auth.prototype.hasPasswordGrantFlow = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OAuth.CodeFlow code_flow = 2;
 * @return {?proto.plugins.common.v1.OAuth.CodeFlow}
 */
proto.plugins.common.v1.Auth.prototype.getCodeFlow = function() {
  return /** @type{?proto.plugins.common.v1.OAuth.CodeFlow} */ (
    jspb.Message.getWrapperField(this, proto.plugins.common.v1.OAuth.CodeFlow, 2));
};


/**
 * @param {?proto.plugins.common.v1.OAuth.CodeFlow|undefined} value
 * @return {!proto.plugins.common.v1.Auth} returns this
*/
proto.plugins.common.v1.Auth.prototype.setCodeFlow = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.plugins.common.v1.Auth.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.common.v1.Auth} returns this
 */
proto.plugins.common.v1.Auth.prototype.clearCodeFlow = function() {
  return this.setCodeFlow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.Auth.prototype.hasCodeFlow = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Basic basic = 3;
 * @return {?proto.plugins.common.v1.Basic}
 */
proto.plugins.common.v1.Auth.prototype.getBasic = function() {
  return /** @type{?proto.plugins.common.v1.Basic} */ (
    jspb.Message.getWrapperField(this, proto.plugins.common.v1.Basic, 3));
};


/**
 * @param {?proto.plugins.common.v1.Basic|undefined} value
 * @return {!proto.plugins.common.v1.Auth} returns this
*/
proto.plugins.common.v1.Auth.prototype.setBasic = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.plugins.common.v1.Auth.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.common.v1.Auth} returns this
 */
proto.plugins.common.v1.Auth.prototype.clearBasic = function() {
  return this.setBasic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.Auth.prototype.hasBasic = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.plugins.common.v1);
