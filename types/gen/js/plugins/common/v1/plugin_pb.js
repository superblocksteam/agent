// source: plugins/common/v1/plugin.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var buf_validate_validate_pb = require('../../../buf/validate/validate_pb');
goog.object.extend(proto, buf_validate_validate_pb);
goog.exportSymbol('proto.plugins.common.v1.AWSConfig', null, global);
goog.exportSymbol('proto.plugins.common.v1.AWSConfig.Auth', null, global);
goog.exportSymbol('proto.plugins.common.v1.DynamicWorkflowConfiguration', null, global);
goog.exportSymbol('proto.plugins.common.v1.SQLBulkEdit', null, global);
goog.exportSymbol('proto.plugins.common.v1.SQLExecution', null, global);
goog.exportSymbol('proto.plugins.common.v1.SQLMappedColumns', null, global);
goog.exportSymbol('proto.plugins.common.v1.SQLMappingMode', null, global);
goog.exportSymbol('proto.plugins.common.v1.SQLMatchingMode', null, global);
goog.exportSymbol('proto.plugins.common.v1.SQLOperation', null, global);
goog.exportSymbol('proto.plugins.common.v1.SSHAuthMethod', null, global);
goog.exportSymbol('proto.plugins.common.v1.SSHConfiguration', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.DynamicWorkflowConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.common.v1.DynamicWorkflowConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.DynamicWorkflowConfiguration.displayName = 'proto.plugins.common.v1.DynamicWorkflowConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.AWSConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.common.v1.AWSConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.AWSConfig.displayName = 'proto.plugins.common.v1.AWSConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.AWSConfig.Auth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.common.v1.AWSConfig.Auth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.AWSConfig.Auth.displayName = 'proto.plugins.common.v1.AWSConfig.Auth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.SQLExecution = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.common.v1.SQLExecution, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.SQLExecution.displayName = 'proto.plugins.common.v1.SQLExecution';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.SQLMappedColumns = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.common.v1.SQLMappedColumns, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.SQLMappedColumns.displayName = 'proto.plugins.common.v1.SQLMappedColumns';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.SSHConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.common.v1.SSHConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.SSHConfiguration.displayName = 'proto.plugins.common.v1.SSHConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.SQLBulkEdit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.common.v1.SQLBulkEdit.repeatedFields_, null);
};
goog.inherits(proto.plugins.common.v1.SQLBulkEdit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.SQLBulkEdit.displayName = 'proto.plugins.common.v1.SQLBulkEdit';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.common.v1.DynamicWorkflowConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.common.v1.DynamicWorkflowConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.common.v1.DynamicWorkflowConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.DynamicWorkflowConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
enabled: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
workflowId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.DynamicWorkflowConfiguration}
 */
proto.plugins.common.v1.DynamicWorkflowConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.DynamicWorkflowConfiguration;
  return proto.plugins.common.v1.DynamicWorkflowConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.DynamicWorkflowConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.DynamicWorkflowConfiguration}
 */
proto.plugins.common.v1.DynamicWorkflowConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkflowId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.DynamicWorkflowConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.DynamicWorkflowConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.DynamicWorkflowConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.DynamicWorkflowConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.plugins.common.v1.DynamicWorkflowConfiguration.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.plugins.common.v1.DynamicWorkflowConfiguration} returns this
 */
proto.plugins.common.v1.DynamicWorkflowConfiguration.prototype.setEnabled = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.DynamicWorkflowConfiguration} returns this
 */
proto.plugins.common.v1.DynamicWorkflowConfiguration.prototype.clearEnabled = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.DynamicWorkflowConfiguration.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string workflow_id = 2;
 * @return {string}
 */
proto.plugins.common.v1.DynamicWorkflowConfiguration.prototype.getWorkflowId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.DynamicWorkflowConfiguration} returns this
 */
proto.plugins.common.v1.DynamicWorkflowConfiguration.prototype.setWorkflowId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.DynamicWorkflowConfiguration} returns this
 */
proto.plugins.common.v1.DynamicWorkflowConfiguration.prototype.clearWorkflowId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.DynamicWorkflowConfiguration.prototype.hasWorkflowId = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.common.v1.AWSConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.common.v1.AWSConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.common.v1.AWSConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.AWSConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
region: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
auth: (f = msg.getAuth()) && proto.plugins.common.v1.AWSConfig.Auth.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.AWSConfig}
 */
proto.plugins.common.v1.AWSConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.AWSConfig;
  return proto.plugins.common.v1.AWSConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.AWSConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.AWSConfig}
 */
proto.plugins.common.v1.AWSConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 2:
      var value = new proto.plugins.common.v1.AWSConfig.Auth;
      reader.readMessage(value,proto.plugins.common.v1.AWSConfig.Auth.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.AWSConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.AWSConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.AWSConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.AWSConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.plugins.common.v1.AWSConfig.Auth.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.common.v1.AWSConfig.Auth.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.common.v1.AWSConfig.Auth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.common.v1.AWSConfig.Auth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.AWSConfig.Auth.toObject = function(includeInstance, msg) {
  var f, obj = {
accessKeyId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
secretKey: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
iamRoleArn: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.AWSConfig.Auth}
 */
proto.plugins.common.v1.AWSConfig.Auth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.AWSConfig.Auth;
  return proto.plugins.common.v1.AWSConfig.Auth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.AWSConfig.Auth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.AWSConfig.Auth}
 */
proto.plugins.common.v1.AWSConfig.Auth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessKeyId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIamRoleArn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.AWSConfig.Auth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.AWSConfig.Auth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.AWSConfig.Auth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.AWSConfig.Auth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string access_key_id = 1;
 * @return {string}
 */
proto.plugins.common.v1.AWSConfig.Auth.prototype.getAccessKeyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.AWSConfig.Auth} returns this
 */
proto.plugins.common.v1.AWSConfig.Auth.prototype.setAccessKeyId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.AWSConfig.Auth} returns this
 */
proto.plugins.common.v1.AWSConfig.Auth.prototype.clearAccessKeyId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.AWSConfig.Auth.prototype.hasAccessKeyId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string secret_key = 2;
 * @return {string}
 */
proto.plugins.common.v1.AWSConfig.Auth.prototype.getSecretKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.AWSConfig.Auth} returns this
 */
proto.plugins.common.v1.AWSConfig.Auth.prototype.setSecretKey = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.AWSConfig.Auth} returns this
 */
proto.plugins.common.v1.AWSConfig.Auth.prototype.clearSecretKey = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.AWSConfig.Auth.prototype.hasSecretKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string iam_role_arn = 3;
 * @return {string}
 */
proto.plugins.common.v1.AWSConfig.Auth.prototype.getIamRoleArn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.AWSConfig.Auth} returns this
 */
proto.plugins.common.v1.AWSConfig.Auth.prototype.setIamRoleArn = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.AWSConfig.Auth} returns this
 */
proto.plugins.common.v1.AWSConfig.Auth.prototype.clearIamRoleArn = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.AWSConfig.Auth.prototype.hasIamRoleArn = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string region = 1;
 * @return {string}
 */
proto.plugins.common.v1.AWSConfig.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.AWSConfig} returns this
 */
proto.plugins.common.v1.AWSConfig.prototype.setRegion = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.AWSConfig} returns this
 */
proto.plugins.common.v1.AWSConfig.prototype.clearRegion = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.AWSConfig.prototype.hasRegion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Auth auth = 2;
 * @return {?proto.plugins.common.v1.AWSConfig.Auth}
 */
proto.plugins.common.v1.AWSConfig.prototype.getAuth = function() {
  return /** @type{?proto.plugins.common.v1.AWSConfig.Auth} */ (
    jspb.Message.getWrapperField(this, proto.plugins.common.v1.AWSConfig.Auth, 2));
};


/**
 * @param {?proto.plugins.common.v1.AWSConfig.Auth|undefined} value
 * @return {!proto.plugins.common.v1.AWSConfig} returns this
*/
proto.plugins.common.v1.AWSConfig.prototype.setAuth = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.common.v1.AWSConfig} returns this
 */
proto.plugins.common.v1.AWSConfig.prototype.clearAuth = function() {
  return this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.AWSConfig.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.common.v1.SQLExecution.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.common.v1.SQLExecution.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.common.v1.SQLExecution} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.SQLExecution.toObject = function(includeInstance, msg) {
  var f, obj = {
sqlBody: jspb.Message.getFieldWithDefault(msg, 1, ""),
useParameterized: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.SQLExecution}
 */
proto.plugins.common.v1.SQLExecution.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.SQLExecution;
  return proto.plugins.common.v1.SQLExecution.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.SQLExecution} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.SQLExecution}
 */
proto.plugins.common.v1.SQLExecution.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSqlBody(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseParameterized(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.SQLExecution.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.SQLExecution.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.SQLExecution} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.SQLExecution.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSqlBody();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUseParameterized();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string sql_body = 1;
 * @return {string}
 */
proto.plugins.common.v1.SQLExecution.prototype.getSqlBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.SQLExecution} returns this
 */
proto.plugins.common.v1.SQLExecution.prototype.setSqlBody = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool use_parameterized = 2;
 * @return {boolean}
 */
proto.plugins.common.v1.SQLExecution.prototype.getUseParameterized = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.plugins.common.v1.SQLExecution} returns this
 */
proto.plugins.common.v1.SQLExecution.prototype.setUseParameterized = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.common.v1.SQLMappedColumns.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.common.v1.SQLMappedColumns.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.common.v1.SQLMappedColumns} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.SQLMappedColumns.toObject = function(includeInstance, msg) {
  var f, obj = {
json: jspb.Message.getFieldWithDefault(msg, 1, ""),
sql: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.SQLMappedColumns}
 */
proto.plugins.common.v1.SQLMappedColumns.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.SQLMappedColumns;
  return proto.plugins.common.v1.SQLMappedColumns.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.SQLMappedColumns} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.SQLMappedColumns}
 */
proto.plugins.common.v1.SQLMappedColumns.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJson(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSql(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.SQLMappedColumns.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.SQLMappedColumns.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.SQLMappedColumns} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.SQLMappedColumns.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJson();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSql();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string json = 1;
 * @return {string}
 */
proto.plugins.common.v1.SQLMappedColumns.prototype.getJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.SQLMappedColumns} returns this
 */
proto.plugins.common.v1.SQLMappedColumns.prototype.setJson = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sql = 2;
 * @return {string}
 */
proto.plugins.common.v1.SQLMappedColumns.prototype.getSql = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.SQLMappedColumns} returns this
 */
proto.plugins.common.v1.SQLMappedColumns.prototype.setSql = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.common.v1.SSHConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.common.v1.SSHConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.common.v1.SSHConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.SSHConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
authenticationMethod: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
enabled: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
host: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
passphrase: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
password: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
port: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
privateKey: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
publicKey: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
username: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.SSHConfiguration}
 */
proto.plugins.common.v1.SSHConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.SSHConfiguration;
  return proto.plugins.common.v1.SSHConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.SSHConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.SSHConfiguration}
 */
proto.plugins.common.v1.SSHConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.plugins.common.v1.SSHAuthMethod} */ (reader.readEnum());
      msg.setAuthenticationMethod(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassphrase(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivateKey(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.SSHConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.SSHConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.SSHConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.SSHConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.plugins.common.v1.SSHAuthMethod} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional SSHAuthMethod authentication_method = 1;
 * @return {!proto.plugins.common.v1.SSHAuthMethod}
 */
proto.plugins.common.v1.SSHConfiguration.prototype.getAuthenticationMethod = function() {
  return /** @type {!proto.plugins.common.v1.SSHAuthMethod} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.plugins.common.v1.SSHAuthMethod} value
 * @return {!proto.plugins.common.v1.SSHConfiguration} returns this
 */
proto.plugins.common.v1.SSHConfiguration.prototype.setAuthenticationMethod = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.SSHConfiguration} returns this
 */
proto.plugins.common.v1.SSHConfiguration.prototype.clearAuthenticationMethod = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.SSHConfiguration.prototype.hasAuthenticationMethod = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool enabled = 2;
 * @return {boolean}
 */
proto.plugins.common.v1.SSHConfiguration.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.plugins.common.v1.SSHConfiguration} returns this
 */
proto.plugins.common.v1.SSHConfiguration.prototype.setEnabled = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.SSHConfiguration} returns this
 */
proto.plugins.common.v1.SSHConfiguration.prototype.clearEnabled = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.SSHConfiguration.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string host = 3;
 * @return {string}
 */
proto.plugins.common.v1.SSHConfiguration.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.SSHConfiguration} returns this
 */
proto.plugins.common.v1.SSHConfiguration.prototype.setHost = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.SSHConfiguration} returns this
 */
proto.plugins.common.v1.SSHConfiguration.prototype.clearHost = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.SSHConfiguration.prototype.hasHost = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string passphrase = 4;
 * @return {string}
 */
proto.plugins.common.v1.SSHConfiguration.prototype.getPassphrase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.SSHConfiguration} returns this
 */
proto.plugins.common.v1.SSHConfiguration.prototype.setPassphrase = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.SSHConfiguration} returns this
 */
proto.plugins.common.v1.SSHConfiguration.prototype.clearPassphrase = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.SSHConfiguration.prototype.hasPassphrase = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string password = 5;
 * @return {string}
 */
proto.plugins.common.v1.SSHConfiguration.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.SSHConfiguration} returns this
 */
proto.plugins.common.v1.SSHConfiguration.prototype.setPassword = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.SSHConfiguration} returns this
 */
proto.plugins.common.v1.SSHConfiguration.prototype.clearPassword = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.SSHConfiguration.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 port = 6;
 * @return {number}
 */
proto.plugins.common.v1.SSHConfiguration.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.common.v1.SSHConfiguration} returns this
 */
proto.plugins.common.v1.SSHConfiguration.prototype.setPort = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.SSHConfiguration} returns this
 */
proto.plugins.common.v1.SSHConfiguration.prototype.clearPort = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.SSHConfiguration.prototype.hasPort = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string private_key = 7;
 * @return {string}
 */
proto.plugins.common.v1.SSHConfiguration.prototype.getPrivateKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.SSHConfiguration} returns this
 */
proto.plugins.common.v1.SSHConfiguration.prototype.setPrivateKey = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.SSHConfiguration} returns this
 */
proto.plugins.common.v1.SSHConfiguration.prototype.clearPrivateKey = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.SSHConfiguration.prototype.hasPrivateKey = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string public_key = 8;
 * @return {string}
 */
proto.plugins.common.v1.SSHConfiguration.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.SSHConfiguration} returns this
 */
proto.plugins.common.v1.SSHConfiguration.prototype.setPublicKey = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.SSHConfiguration} returns this
 */
proto.plugins.common.v1.SSHConfiguration.prototype.clearPublicKey = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.SSHConfiguration.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string username = 9;
 * @return {string}
 */
proto.plugins.common.v1.SSHConfiguration.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.SSHConfiguration} returns this
 */
proto.plugins.common.v1.SSHConfiguration.prototype.setUsername = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.SSHConfiguration} returns this
 */
proto.plugins.common.v1.SSHConfiguration.prototype.clearUsername = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.SSHConfiguration.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.common.v1.SQLBulkEdit.repeatedFields_ = [6,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.common.v1.SQLBulkEdit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.common.v1.SQLBulkEdit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.SQLBulkEdit.toObject = function(includeInstance, msg) {
  var f, obj = {
matchingMode: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
schema: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
table: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
updatedRows: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
oldRows: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
filterByList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
mappingMode: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
mappedColumnsList: jspb.Message.toObjectList(msg.getMappedColumnsList(),
    proto.plugins.common.v1.SQLMappedColumns.toObject, includeInstance),
insertedRows: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
deletedRows: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.SQLBulkEdit}
 */
proto.plugins.common.v1.SQLBulkEdit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.SQLBulkEdit;
  return proto.plugins.common.v1.SQLBulkEdit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.SQLBulkEdit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.SQLBulkEdit}
 */
proto.plugins.common.v1.SQLBulkEdit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.plugins.common.v1.SQLMatchingMode} */ (reader.readEnum());
      msg.setMatchingMode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchema(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTable(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedRows(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldRows(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addFilterBy(value);
      break;
    case 7:
      var value = /** @type {!proto.plugins.common.v1.SQLMappingMode} */ (reader.readEnum());
      msg.setMappingMode(value);
      break;
    case 8:
      var value = new proto.plugins.common.v1.SQLMappedColumns;
      reader.readMessage(value,proto.plugins.common.v1.SQLMappedColumns.deserializeBinaryFromReader);
      msg.addMappedColumns(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setInsertedRows(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeletedRows(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.SQLBulkEdit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.SQLBulkEdit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.SQLBulkEdit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.plugins.common.v1.SQLMatchingMode} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFilterByList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = /** @type {!proto.plugins.common.v1.SQLMappingMode} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getMappedColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.plugins.common.v1.SQLMappedColumns.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional SQLMatchingMode matching_mode = 1;
 * @return {!proto.plugins.common.v1.SQLMatchingMode}
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.getMatchingMode = function() {
  return /** @type {!proto.plugins.common.v1.SQLMatchingMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.plugins.common.v1.SQLMatchingMode} value
 * @return {!proto.plugins.common.v1.SQLBulkEdit} returns this
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.setMatchingMode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.SQLBulkEdit} returns this
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.clearMatchingMode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.hasMatchingMode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string schema = 2;
 * @return {string}
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.getSchema = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.SQLBulkEdit} returns this
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.setSchema = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.SQLBulkEdit} returns this
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.clearSchema = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string table = 3;
 * @return {string}
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.getTable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.SQLBulkEdit} returns this
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.setTable = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.SQLBulkEdit} returns this
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.clearTable = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.hasTable = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string updated_rows = 4;
 * @return {string}
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.getUpdatedRows = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.SQLBulkEdit} returns this
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.setUpdatedRows = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.SQLBulkEdit} returns this
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.clearUpdatedRows = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.hasUpdatedRows = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string old_rows = 5;
 * @return {string}
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.getOldRows = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.SQLBulkEdit} returns this
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.setOldRows = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.SQLBulkEdit} returns this
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.clearOldRows = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.hasOldRows = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated string filter_by = 6;
 * @return {!Array<string>}
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.getFilterByList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.plugins.common.v1.SQLBulkEdit} returns this
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.setFilterByList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.plugins.common.v1.SQLBulkEdit} returns this
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.addFilterBy = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.common.v1.SQLBulkEdit} returns this
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.clearFilterByList = function() {
  return this.setFilterByList([]);
};


/**
 * optional SQLMappingMode mapping_mode = 7;
 * @return {!proto.plugins.common.v1.SQLMappingMode}
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.getMappingMode = function() {
  return /** @type {!proto.plugins.common.v1.SQLMappingMode} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.plugins.common.v1.SQLMappingMode} value
 * @return {!proto.plugins.common.v1.SQLBulkEdit} returns this
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.setMappingMode = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.SQLBulkEdit} returns this
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.clearMappingMode = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.hasMappingMode = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated SQLMappedColumns mapped_columns = 8;
 * @return {!Array<!proto.plugins.common.v1.SQLMappedColumns>}
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.getMappedColumnsList = function() {
  return /** @type{!Array<!proto.plugins.common.v1.SQLMappedColumns>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plugins.common.v1.SQLMappedColumns, 8));
};


/**
 * @param {!Array<!proto.plugins.common.v1.SQLMappedColumns>} value
 * @return {!proto.plugins.common.v1.SQLBulkEdit} returns this
*/
proto.plugins.common.v1.SQLBulkEdit.prototype.setMappedColumnsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.plugins.common.v1.SQLMappedColumns=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plugins.common.v1.SQLMappedColumns}
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.addMappedColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.plugins.common.v1.SQLMappedColumns, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.common.v1.SQLBulkEdit} returns this
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.clearMappedColumnsList = function() {
  return this.setMappedColumnsList([]);
};


/**
 * optional string inserted_rows = 9;
 * @return {string}
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.getInsertedRows = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.SQLBulkEdit} returns this
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.setInsertedRows = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.SQLBulkEdit} returns this
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.clearInsertedRows = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.hasInsertedRows = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string deleted_rows = 10;
 * @return {string}
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.getDeletedRows = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.SQLBulkEdit} returns this
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.setDeletedRows = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.SQLBulkEdit} returns this
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.clearDeletedRows = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.SQLBulkEdit.prototype.hasDeletedRows = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * @enum {number}
 */
proto.plugins.common.v1.SSHAuthMethod = {
  SSH_AUTH_METHOD_UNSPECIFIED: 0,
  SSH_AUTH_METHOD_PASSWORD: 1,
  SSH_AUTH_METHOD_PUB_KEY_RSA: 2,
  SSH_AUTH_METHOD_PUB_KEY_ED25519: 3,
  SSH_AUTH_METHOD_USER_PRIVATE_KEY: 4
};

/**
 * @enum {number}
 */
proto.plugins.common.v1.SQLMappingMode = {
  SQL_MAPPING_MODE_UNSPECIFIED: 0,
  SQL_MAPPING_MODE_AUTO: 1,
  SQL_MAPPING_MODE_MANUAL: 2
};

/**
 * @enum {number}
 */
proto.plugins.common.v1.SQLMatchingMode = {
  SQL_MATCHING_MODE_UNSPECIFIED: 0,
  SQL_MATCHING_MODE_AUTO: 1,
  SQL_MATCHING_MODE_ADVANCED: 2
};

/**
 * @enum {number}
 */
proto.plugins.common.v1.SQLOperation = {
  SQL_OPERATION_UNSPECIFIED: 0,
  SQL_OPERATION_RUN_SQL: 1,
  SQL_OPERATION_UPDATE_ROWS: 2
};

goog.object.extend(exports, proto.plugins.common.v1);
