// source: plugins/couchbase/v1/plugin.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = globalThis;

var plugins_common_v1_plugin_pb = require('../../../plugins/common/v1/plugin_pb');
goog.object.extend(proto, plugins_common_v1_plugin_pb);
goog.exportSymbol('proto.plugins.couchbase.v1.Metadata', null, global);
goog.exportSymbol('proto.plugins.couchbase.v1.Metadata.Bucket', null, global);
goog.exportSymbol('proto.plugins.couchbase.v1.Metadata.Collection', null, global);
goog.exportSymbol('proto.plugins.couchbase.v1.Metadata.Scope', null, global);
goog.exportSymbol('proto.plugins.couchbase.v1.Plugin', null, global);
goog.exportSymbol('proto.plugins.couchbase.v1.Plugin.CouchbaseActionCase', null, global);
goog.exportSymbol('proto.plugins.couchbase.v1.Plugin.CouchbaseConnection', null, global);
goog.exportSymbol('proto.plugins.couchbase.v1.Plugin.CouchbaseGet', null, global);
goog.exportSymbol('proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier', null, global);
goog.exportSymbol('proto.plugins.couchbase.v1.Plugin.CouchbaseInsert', null, global);
goog.exportSymbol('proto.plugins.couchbase.v1.Plugin.CouchbaseRemove', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.couchbase.v1.Plugin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.plugins.couchbase.v1.Plugin.oneofGroups_);
};
goog.inherits(proto.plugins.couchbase.v1.Plugin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.couchbase.v1.Plugin.displayName = 'proto.plugins.couchbase.v1.Plugin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.displayName = 'proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseConnection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.couchbase.v1.Plugin.CouchbaseConnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.couchbase.v1.Plugin.CouchbaseConnection.displayName = 'proto.plugins.couchbase.v1.Plugin.CouchbaseConnection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseInsert = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.couchbase.v1.Plugin.CouchbaseInsert, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.couchbase.v1.Plugin.CouchbaseInsert.displayName = 'proto.plugins.couchbase.v1.Plugin.CouchbaseInsert';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseGet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.couchbase.v1.Plugin.CouchbaseGet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.couchbase.v1.Plugin.CouchbaseGet.displayName = 'proto.plugins.couchbase.v1.Plugin.CouchbaseGet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseRemove = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.couchbase.v1.Plugin.CouchbaseRemove, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.couchbase.v1.Plugin.CouchbaseRemove.displayName = 'proto.plugins.couchbase.v1.Plugin.CouchbaseRemove';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.couchbase.v1.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.couchbase.v1.Metadata.repeatedFields_, null);
};
goog.inherits(proto.plugins.couchbase.v1.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.couchbase.v1.Metadata.displayName = 'proto.plugins.couchbase.v1.Metadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.couchbase.v1.Metadata.Collection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.couchbase.v1.Metadata.Collection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.couchbase.v1.Metadata.Collection.displayName = 'proto.plugins.couchbase.v1.Metadata.Collection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.couchbase.v1.Metadata.Scope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.couchbase.v1.Metadata.Scope.repeatedFields_, null);
};
goog.inherits(proto.plugins.couchbase.v1.Metadata.Scope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.couchbase.v1.Metadata.Scope.displayName = 'proto.plugins.couchbase.v1.Metadata.Scope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.couchbase.v1.Metadata.Bucket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.couchbase.v1.Metadata.Bucket.repeatedFields_, null);
};
goog.inherits(proto.plugins.couchbase.v1.Metadata.Bucket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.couchbase.v1.Metadata.Bucket.displayName = 'proto.plugins.couchbase.v1.Metadata.Bucket';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.plugins.couchbase.v1.Plugin.oneofGroups_ = [[6,7,8,9]];

/**
 * @enum {number}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseActionCase = {
  COUCHBASE_ACTION_NOT_SET: 0,
  RUN_SQL: 6,
  INSERT: 7,
  GET: 8,
  REMOVE: 9
};

/**
 * @return {proto.plugins.couchbase.v1.Plugin.CouchbaseActionCase}
 */
proto.plugins.couchbase.v1.Plugin.prototype.getCouchbaseActionCase = function() {
  return /** @type {proto.plugins.couchbase.v1.Plugin.CouchbaseActionCase} */(jspb.Message.computeOneofCase(this, proto.plugins.couchbase.v1.Plugin.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.couchbase.v1.Plugin.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.couchbase.v1.Plugin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.couchbase.v1.Plugin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.couchbase.v1.Plugin.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
connection: (f = msg.getConnection()) && proto.plugins.couchbase.v1.Plugin.CouchbaseConnection.toObject(includeInstance, f),
dynamicWorkflowConfiguration: (f = msg.getDynamicWorkflowConfiguration()) && plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration.toObject(includeInstance, f),
tunnel: (f = msg.getTunnel()) && plugins_common_v1_plugin_pb.SSHConfiguration.toObject(includeInstance, f),
bucketName: jspb.Message.getFieldWithDefault(msg, 5, ""),
runSql: (f = msg.getRunSql()) && plugins_common_v1_plugin_pb.SQLExecution.toObject(includeInstance, f),
insert: (f = msg.getInsert()) && proto.plugins.couchbase.v1.Plugin.CouchbaseInsert.toObject(includeInstance, f),
get: (f = msg.getGet()) && proto.plugins.couchbase.v1.Plugin.CouchbaseGet.toObject(includeInstance, f),
remove: (f = msg.getRemove()) && proto.plugins.couchbase.v1.Plugin.CouchbaseRemove.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.couchbase.v1.Plugin}
 */
proto.plugins.couchbase.v1.Plugin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.couchbase.v1.Plugin;
  return proto.plugins.couchbase.v1.Plugin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.couchbase.v1.Plugin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.couchbase.v1.Plugin}
 */
proto.plugins.couchbase.v1.Plugin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.plugins.couchbase.v1.Plugin.CouchbaseConnection;
      reader.readMessage(value,proto.plugins.couchbase.v1.Plugin.CouchbaseConnection.deserializeBinaryFromReader);
      msg.setConnection(value);
      break;
    case 3:
      var value = new plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration;
      reader.readMessage(value,plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration.deserializeBinaryFromReader);
      msg.setDynamicWorkflowConfiguration(value);
      break;
    case 4:
      var value = new plugins_common_v1_plugin_pb.SSHConfiguration;
      reader.readMessage(value,plugins_common_v1_plugin_pb.SSHConfiguration.deserializeBinaryFromReader);
      msg.setTunnel(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setBucketName(value);
      break;
    case 6:
      var value = new plugins_common_v1_plugin_pb.SQLExecution;
      reader.readMessage(value,plugins_common_v1_plugin_pb.SQLExecution.deserializeBinaryFromReader);
      msg.setRunSql(value);
      break;
    case 7:
      var value = new proto.plugins.couchbase.v1.Plugin.CouchbaseInsert;
      reader.readMessage(value,proto.plugins.couchbase.v1.Plugin.CouchbaseInsert.deserializeBinaryFromReader);
      msg.setInsert(value);
      break;
    case 8:
      var value = new proto.plugins.couchbase.v1.Plugin.CouchbaseGet;
      reader.readMessage(value,proto.plugins.couchbase.v1.Plugin.CouchbaseGet.deserializeBinaryFromReader);
      msg.setGet(value);
      break;
    case 9:
      var value = new proto.plugins.couchbase.v1.Plugin.CouchbaseRemove;
      reader.readMessage(value,proto.plugins.couchbase.v1.Plugin.CouchbaseRemove.deserializeBinaryFromReader);
      msg.setRemove(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.couchbase.v1.Plugin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.couchbase.v1.Plugin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.couchbase.v1.Plugin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.couchbase.v1.Plugin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConnection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.plugins.couchbase.v1.Plugin.CouchbaseConnection.serializeBinaryToWriter
    );
  }
  f = message.getDynamicWorkflowConfiguration();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration.serializeBinaryToWriter
    );
  }
  f = message.getTunnel();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      plugins_common_v1_plugin_pb.SSHConfiguration.serializeBinaryToWriter
    );
  }
  f = message.getBucketName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRunSql();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      plugins_common_v1_plugin_pb.SQLExecution.serializeBinaryToWriter
    );
  }
  f = message.getInsert();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.plugins.couchbase.v1.Plugin.CouchbaseInsert.serializeBinaryToWriter
    );
  }
  f = message.getGet();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.plugins.couchbase.v1.Plugin.CouchbaseGet.serializeBinaryToWriter
    );
  }
  f = message.getRemove();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.plugins.couchbase.v1.Plugin.CouchbaseRemove.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.toObject = function(includeInstance, msg) {
  var f, obj = {
scope: jspb.Message.getFieldWithDefault(msg, 1, ""),
collection: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier;
  return proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setCollection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCollection();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string scope = 1;
 * @return {string}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier} returns this
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.prototype.setScope = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string collection = 2;
 * @return {string}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.prototype.getCollection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier} returns this
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.prototype.setCollection = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseConnection.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.couchbase.v1.Plugin.CouchbaseConnection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.couchbase.v1.Plugin.CouchbaseConnection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseConnection.toObject = function(includeInstance, msg) {
  var f, obj = {
user: jspb.Message.getFieldWithDefault(msg, 2, ""),
password: jspb.Message.getFieldWithDefault(msg, 3, ""),
url: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseConnection}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseConnection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.couchbase.v1.Plugin.CouchbaseConnection;
  return proto.plugins.couchbase.v1.Plugin.CouchbaseConnection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.couchbase.v1.Plugin.CouchbaseConnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseConnection}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseConnection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setUser(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setPassword(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseConnection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.couchbase.v1.Plugin.CouchbaseConnection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.couchbase.v1.Plugin.CouchbaseConnection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseConnection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string user = 2;
 * @return {string}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseConnection.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseConnection} returns this
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseConnection.prototype.setUser = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string password = 3;
 * @return {string}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseConnection.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseConnection} returns this
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseConnection.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string url = 5;
 * @return {string}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseConnection.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseConnection} returns this
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseConnection.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseInsert.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.couchbase.v1.Plugin.CouchbaseInsert.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.couchbase.v1.Plugin.CouchbaseInsert} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseInsert.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
value: jspb.Message.getFieldWithDefault(msg, 2, ""),
identifier: (f = msg.getIdentifier()) && proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseInsert}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseInsert.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.couchbase.v1.Plugin.CouchbaseInsert;
  return proto.plugins.couchbase.v1.Plugin.CouchbaseInsert.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.couchbase.v1.Plugin.CouchbaseInsert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseInsert}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseInsert.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier;
      reader.readMessage(value,proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.deserializeBinaryFromReader);
      msg.setIdentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseInsert.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.couchbase.v1.Plugin.CouchbaseInsert.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.couchbase.v1.Plugin.CouchbaseInsert} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseInsert.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIdentifier();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.serializeBinaryToWriter
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseInsert.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseInsert} returns this
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseInsert.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseInsert.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseInsert} returns this
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseInsert.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional CouchbaseIdentifier identifier = 3;
 * @return {?proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseInsert.prototype.getIdentifier = function() {
  return /** @type{?proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier, 3));
};


/**
 * @param {?proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier|undefined} value
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseInsert} returns this
*/
proto.plugins.couchbase.v1.Plugin.CouchbaseInsert.prototype.setIdentifier = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseInsert} returns this
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseInsert.prototype.clearIdentifier = function() {
  return this.setIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseInsert.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseGet.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.couchbase.v1.Plugin.CouchbaseGet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.couchbase.v1.Plugin.CouchbaseGet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseGet.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
identifier: (f = msg.getIdentifier()) && proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseGet}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseGet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.couchbase.v1.Plugin.CouchbaseGet;
  return proto.plugins.couchbase.v1.Plugin.CouchbaseGet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.couchbase.v1.Plugin.CouchbaseGet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseGet}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseGet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier;
      reader.readMessage(value,proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.deserializeBinaryFromReader);
      msg.setIdentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseGet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.couchbase.v1.Plugin.CouchbaseGet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.couchbase.v1.Plugin.CouchbaseGet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseGet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdentifier();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.serializeBinaryToWriter
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseGet.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseGet} returns this
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseGet.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional CouchbaseIdentifier identifier = 2;
 * @return {?proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseGet.prototype.getIdentifier = function() {
  return /** @type{?proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier, 2));
};


/**
 * @param {?proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier|undefined} value
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseGet} returns this
*/
proto.plugins.couchbase.v1.Plugin.CouchbaseGet.prototype.setIdentifier = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseGet} returns this
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseGet.prototype.clearIdentifier = function() {
  return this.setIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseGet.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseRemove.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.couchbase.v1.Plugin.CouchbaseRemove.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.couchbase.v1.Plugin.CouchbaseRemove} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseRemove.toObject = function(includeInstance, msg) {
  var f, obj = {
key: jspb.Message.getFieldWithDefault(msg, 1, ""),
identifier: (f = msg.getIdentifier()) && proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseRemove}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseRemove.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.couchbase.v1.Plugin.CouchbaseRemove;
  return proto.plugins.couchbase.v1.Plugin.CouchbaseRemove.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.couchbase.v1.Plugin.CouchbaseRemove} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseRemove}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseRemove.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier;
      reader.readMessage(value,proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.deserializeBinaryFromReader);
      msg.setIdentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseRemove.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.couchbase.v1.Plugin.CouchbaseRemove.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.couchbase.v1.Plugin.CouchbaseRemove} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseRemove.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdentifier();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier.serializeBinaryToWriter
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseRemove.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseRemove} returns this
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseRemove.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional CouchbaseIdentifier identifier = 2;
 * @return {?proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseRemove.prototype.getIdentifier = function() {
  return /** @type{?proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier, 2));
};


/**
 * @param {?proto.plugins.couchbase.v1.Plugin.CouchbaseIdentifier|undefined} value
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseRemove} returns this
*/
proto.plugins.couchbase.v1.Plugin.CouchbaseRemove.prototype.setIdentifier = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.couchbase.v1.Plugin.CouchbaseRemove} returns this
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseRemove.prototype.clearIdentifier = function() {
  return this.setIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.couchbase.v1.Plugin.CouchbaseRemove.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.plugins.couchbase.v1.Plugin.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.couchbase.v1.Plugin} returns this
 */
proto.plugins.couchbase.v1.Plugin.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional CouchbaseConnection connection = 2;
 * @return {?proto.plugins.couchbase.v1.Plugin.CouchbaseConnection}
 */
proto.plugins.couchbase.v1.Plugin.prototype.getConnection = function() {
  return /** @type{?proto.plugins.couchbase.v1.Plugin.CouchbaseConnection} */ (
    jspb.Message.getWrapperField(this, proto.plugins.couchbase.v1.Plugin.CouchbaseConnection, 2));
};


/**
 * @param {?proto.plugins.couchbase.v1.Plugin.CouchbaseConnection|undefined} value
 * @return {!proto.plugins.couchbase.v1.Plugin} returns this
*/
proto.plugins.couchbase.v1.Plugin.prototype.setConnection = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.couchbase.v1.Plugin} returns this
 */
proto.plugins.couchbase.v1.Plugin.prototype.clearConnection = function() {
  return this.setConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.couchbase.v1.Plugin.prototype.hasConnection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional plugins.common.v1.DynamicWorkflowConfiguration dynamic_workflow_configuration = 3;
 * @return {?proto.plugins.common.v1.DynamicWorkflowConfiguration}
 */
proto.plugins.couchbase.v1.Plugin.prototype.getDynamicWorkflowConfiguration = function() {
  return /** @type{?proto.plugins.common.v1.DynamicWorkflowConfiguration} */ (
    jspb.Message.getWrapperField(this, plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration, 3));
};


/**
 * @param {?proto.plugins.common.v1.DynamicWorkflowConfiguration|undefined} value
 * @return {!proto.plugins.couchbase.v1.Plugin} returns this
*/
proto.plugins.couchbase.v1.Plugin.prototype.setDynamicWorkflowConfiguration = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.couchbase.v1.Plugin} returns this
 */
proto.plugins.couchbase.v1.Plugin.prototype.clearDynamicWorkflowConfiguration = function() {
  return this.setDynamicWorkflowConfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.couchbase.v1.Plugin.prototype.hasDynamicWorkflowConfiguration = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional plugins.common.v1.SSHConfiguration tunnel = 4;
 * @return {?proto.plugins.common.v1.SSHConfiguration}
 */
proto.plugins.couchbase.v1.Plugin.prototype.getTunnel = function() {
  return /** @type{?proto.plugins.common.v1.SSHConfiguration} */ (
    jspb.Message.getWrapperField(this, plugins_common_v1_plugin_pb.SSHConfiguration, 4));
};


/**
 * @param {?proto.plugins.common.v1.SSHConfiguration|undefined} value
 * @return {!proto.plugins.couchbase.v1.Plugin} returns this
*/
proto.plugins.couchbase.v1.Plugin.prototype.setTunnel = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.couchbase.v1.Plugin} returns this
 */
proto.plugins.couchbase.v1.Plugin.prototype.clearTunnel = function() {
  return this.setTunnel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.couchbase.v1.Plugin.prototype.hasTunnel = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string bucket_name = 5;
 * @return {string}
 */
proto.plugins.couchbase.v1.Plugin.prototype.getBucketName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.couchbase.v1.Plugin} returns this
 */
proto.plugins.couchbase.v1.Plugin.prototype.setBucketName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional plugins.common.v1.SQLExecution run_sql = 6;
 * @return {?proto.plugins.common.v1.SQLExecution}
 */
proto.plugins.couchbase.v1.Plugin.prototype.getRunSql = function() {
  return /** @type{?proto.plugins.common.v1.SQLExecution} */ (
    jspb.Message.getWrapperField(this, plugins_common_v1_plugin_pb.SQLExecution, 6));
};


/**
 * @param {?proto.plugins.common.v1.SQLExecution|undefined} value
 * @return {!proto.plugins.couchbase.v1.Plugin} returns this
*/
proto.plugins.couchbase.v1.Plugin.prototype.setRunSql = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.plugins.couchbase.v1.Plugin.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.couchbase.v1.Plugin} returns this
 */
proto.plugins.couchbase.v1.Plugin.prototype.clearRunSql = function() {
  return this.setRunSql(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.couchbase.v1.Plugin.prototype.hasRunSql = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional CouchbaseInsert insert = 7;
 * @return {?proto.plugins.couchbase.v1.Plugin.CouchbaseInsert}
 */
proto.plugins.couchbase.v1.Plugin.prototype.getInsert = function() {
  return /** @type{?proto.plugins.couchbase.v1.Plugin.CouchbaseInsert} */ (
    jspb.Message.getWrapperField(this, proto.plugins.couchbase.v1.Plugin.CouchbaseInsert, 7));
};


/**
 * @param {?proto.plugins.couchbase.v1.Plugin.CouchbaseInsert|undefined} value
 * @return {!proto.plugins.couchbase.v1.Plugin} returns this
*/
proto.plugins.couchbase.v1.Plugin.prototype.setInsert = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.plugins.couchbase.v1.Plugin.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.couchbase.v1.Plugin} returns this
 */
proto.plugins.couchbase.v1.Plugin.prototype.clearInsert = function() {
  return this.setInsert(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.couchbase.v1.Plugin.prototype.hasInsert = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CouchbaseGet get = 8;
 * @return {?proto.plugins.couchbase.v1.Plugin.CouchbaseGet}
 */
proto.plugins.couchbase.v1.Plugin.prototype.getGet = function() {
  return /** @type{?proto.plugins.couchbase.v1.Plugin.CouchbaseGet} */ (
    jspb.Message.getWrapperField(this, proto.plugins.couchbase.v1.Plugin.CouchbaseGet, 8));
};


/**
 * @param {?proto.plugins.couchbase.v1.Plugin.CouchbaseGet|undefined} value
 * @return {!proto.plugins.couchbase.v1.Plugin} returns this
*/
proto.plugins.couchbase.v1.Plugin.prototype.setGet = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.plugins.couchbase.v1.Plugin.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.couchbase.v1.Plugin} returns this
 */
proto.plugins.couchbase.v1.Plugin.prototype.clearGet = function() {
  return this.setGet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.couchbase.v1.Plugin.prototype.hasGet = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional CouchbaseRemove remove = 9;
 * @return {?proto.plugins.couchbase.v1.Plugin.CouchbaseRemove}
 */
proto.plugins.couchbase.v1.Plugin.prototype.getRemove = function() {
  return /** @type{?proto.plugins.couchbase.v1.Plugin.CouchbaseRemove} */ (
    jspb.Message.getWrapperField(this, proto.plugins.couchbase.v1.Plugin.CouchbaseRemove, 9));
};


/**
 * @param {?proto.plugins.couchbase.v1.Plugin.CouchbaseRemove|undefined} value
 * @return {!proto.plugins.couchbase.v1.Plugin} returns this
*/
proto.plugins.couchbase.v1.Plugin.prototype.setRemove = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.plugins.couchbase.v1.Plugin.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.couchbase.v1.Plugin} returns this
 */
proto.plugins.couchbase.v1.Plugin.prototype.clearRemove = function() {
  return this.setRemove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.couchbase.v1.Plugin.prototype.hasRemove = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.couchbase.v1.Metadata.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.couchbase.v1.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.couchbase.v1.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.couchbase.v1.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.couchbase.v1.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
bucketsList: jspb.Message.toObjectList(msg.getBucketsList(),
    proto.plugins.couchbase.v1.Metadata.Bucket.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.couchbase.v1.Metadata}
 */
proto.plugins.couchbase.v1.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.couchbase.v1.Metadata;
  return proto.plugins.couchbase.v1.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.couchbase.v1.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.couchbase.v1.Metadata}
 */
proto.plugins.couchbase.v1.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.plugins.couchbase.v1.Metadata.Bucket;
      reader.readMessage(value,proto.plugins.couchbase.v1.Metadata.Bucket.deserializeBinaryFromReader);
      msg.addBuckets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.couchbase.v1.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.couchbase.v1.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.couchbase.v1.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.couchbase.v1.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.plugins.couchbase.v1.Metadata.Bucket.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.couchbase.v1.Metadata.Collection.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.couchbase.v1.Metadata.Collection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.couchbase.v1.Metadata.Collection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.couchbase.v1.Metadata.Collection.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.couchbase.v1.Metadata.Collection}
 */
proto.plugins.couchbase.v1.Metadata.Collection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.couchbase.v1.Metadata.Collection;
  return proto.plugins.couchbase.v1.Metadata.Collection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.couchbase.v1.Metadata.Collection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.couchbase.v1.Metadata.Collection}
 */
proto.plugins.couchbase.v1.Metadata.Collection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.couchbase.v1.Metadata.Collection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.couchbase.v1.Metadata.Collection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.couchbase.v1.Metadata.Collection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.couchbase.v1.Metadata.Collection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.plugins.couchbase.v1.Metadata.Collection.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.couchbase.v1.Metadata.Collection} returns this
 */
proto.plugins.couchbase.v1.Metadata.Collection.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.couchbase.v1.Metadata.Scope.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.couchbase.v1.Metadata.Scope.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.couchbase.v1.Metadata.Scope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.couchbase.v1.Metadata.Scope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.couchbase.v1.Metadata.Scope.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
collectionsList: jspb.Message.toObjectList(msg.getCollectionsList(),
    proto.plugins.couchbase.v1.Metadata.Collection.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.couchbase.v1.Metadata.Scope}
 */
proto.plugins.couchbase.v1.Metadata.Scope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.couchbase.v1.Metadata.Scope;
  return proto.plugins.couchbase.v1.Metadata.Scope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.couchbase.v1.Metadata.Scope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.couchbase.v1.Metadata.Scope}
 */
proto.plugins.couchbase.v1.Metadata.Scope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.plugins.couchbase.v1.Metadata.Collection;
      reader.readMessage(value,proto.plugins.couchbase.v1.Metadata.Collection.deserializeBinaryFromReader);
      msg.addCollections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.couchbase.v1.Metadata.Scope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.couchbase.v1.Metadata.Scope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.couchbase.v1.Metadata.Scope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.couchbase.v1.Metadata.Scope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCollectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.plugins.couchbase.v1.Metadata.Collection.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.plugins.couchbase.v1.Metadata.Scope.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.couchbase.v1.Metadata.Scope} returns this
 */
proto.plugins.couchbase.v1.Metadata.Scope.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Collection collections = 2;
 * @return {!Array<!proto.plugins.couchbase.v1.Metadata.Collection>}
 */
proto.plugins.couchbase.v1.Metadata.Scope.prototype.getCollectionsList = function() {
  return /** @type{!Array<!proto.plugins.couchbase.v1.Metadata.Collection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plugins.couchbase.v1.Metadata.Collection, 2));
};


/**
 * @param {!Array<!proto.plugins.couchbase.v1.Metadata.Collection>} value
 * @return {!proto.plugins.couchbase.v1.Metadata.Scope} returns this
*/
proto.plugins.couchbase.v1.Metadata.Scope.prototype.setCollectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.plugins.couchbase.v1.Metadata.Collection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plugins.couchbase.v1.Metadata.Collection}
 */
proto.plugins.couchbase.v1.Metadata.Scope.prototype.addCollections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.plugins.couchbase.v1.Metadata.Collection, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.couchbase.v1.Metadata.Scope} returns this
 */
proto.plugins.couchbase.v1.Metadata.Scope.prototype.clearCollectionsList = function() {
  return this.setCollectionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.couchbase.v1.Metadata.Bucket.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.couchbase.v1.Metadata.Bucket.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.couchbase.v1.Metadata.Bucket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.couchbase.v1.Metadata.Bucket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.couchbase.v1.Metadata.Bucket.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
scopesList: jspb.Message.toObjectList(msg.getScopesList(),
    proto.plugins.couchbase.v1.Metadata.Scope.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.couchbase.v1.Metadata.Bucket}
 */
proto.plugins.couchbase.v1.Metadata.Bucket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.couchbase.v1.Metadata.Bucket;
  return proto.plugins.couchbase.v1.Metadata.Bucket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.couchbase.v1.Metadata.Bucket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.couchbase.v1.Metadata.Bucket}
 */
proto.plugins.couchbase.v1.Metadata.Bucket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readStringRequireUtf8());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.plugins.couchbase.v1.Metadata.Scope;
      reader.readMessage(value,proto.plugins.couchbase.v1.Metadata.Scope.deserializeBinaryFromReader);
      msg.addScopes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.couchbase.v1.Metadata.Bucket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.couchbase.v1.Metadata.Bucket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.couchbase.v1.Metadata.Bucket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.couchbase.v1.Metadata.Bucket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScopesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.plugins.couchbase.v1.Metadata.Scope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.plugins.couchbase.v1.Metadata.Bucket.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.couchbase.v1.Metadata.Bucket} returns this
 */
proto.plugins.couchbase.v1.Metadata.Bucket.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Scope scopes = 2;
 * @return {!Array<!proto.plugins.couchbase.v1.Metadata.Scope>}
 */
proto.plugins.couchbase.v1.Metadata.Bucket.prototype.getScopesList = function() {
  return /** @type{!Array<!proto.plugins.couchbase.v1.Metadata.Scope>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plugins.couchbase.v1.Metadata.Scope, 2));
};


/**
 * @param {!Array<!proto.plugins.couchbase.v1.Metadata.Scope>} value
 * @return {!proto.plugins.couchbase.v1.Metadata.Bucket} returns this
*/
proto.plugins.couchbase.v1.Metadata.Bucket.prototype.setScopesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.plugins.couchbase.v1.Metadata.Scope=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plugins.couchbase.v1.Metadata.Scope}
 */
proto.plugins.couchbase.v1.Metadata.Bucket.prototype.addScopes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.plugins.couchbase.v1.Metadata.Scope, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.couchbase.v1.Metadata.Bucket} returns this
 */
proto.plugins.couchbase.v1.Metadata.Bucket.prototype.clearScopesList = function() {
  return this.setScopesList([]);
};


/**
 * repeated Bucket buckets = 1;
 * @return {!Array<!proto.plugins.couchbase.v1.Metadata.Bucket>}
 */
proto.plugins.couchbase.v1.Metadata.prototype.getBucketsList = function() {
  return /** @type{!Array<!proto.plugins.couchbase.v1.Metadata.Bucket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plugins.couchbase.v1.Metadata.Bucket, 1));
};


/**
 * @param {!Array<!proto.plugins.couchbase.v1.Metadata.Bucket>} value
 * @return {!proto.plugins.couchbase.v1.Metadata} returns this
*/
proto.plugins.couchbase.v1.Metadata.prototype.setBucketsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.plugins.couchbase.v1.Metadata.Bucket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plugins.couchbase.v1.Metadata.Bucket}
 */
proto.plugins.couchbase.v1.Metadata.prototype.addBuckets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.plugins.couchbase.v1.Metadata.Bucket, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.couchbase.v1.Metadata} returns this
 */
proto.plugins.couchbase.v1.Metadata.prototype.clearBucketsList = function() {
  return this.setBucketsList([]);
};


goog.object.extend(exports, proto.plugins.couchbase.v1);
