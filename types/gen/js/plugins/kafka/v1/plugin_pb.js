// source: plugins/kafka/v1/plugin.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var buf_validate_validate_pb = require('../../../buf/validate/validate_pb');
goog.object.extend(proto, buf_validate_validate_pb);
var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb');
goog.object.extend(proto, google_protobuf_struct_pb);
var plugins_common_v1_plugin_pb = require('../../../plugins/common/v1/plugin_pb');
goog.object.extend(proto, plugins_common_v1_plugin_pb);
var validate_validate_pb = require('../../../validate/validate_pb');
goog.object.extend(proto, validate_validate_pb);
goog.exportSymbol('proto.plugins.kafka.v1.Acks', null, global);
goog.exportSymbol('proto.plugins.kafka.v1.Broker', null, global);
goog.exportSymbol('proto.plugins.kafka.v1.Cluster', null, global);
goog.exportSymbol('proto.plugins.kafka.v1.Compression', null, global);
goog.exportSymbol('proto.plugins.kafka.v1.Message', null, global);
goog.exportSymbol('proto.plugins.kafka.v1.Messages', null, global);
goog.exportSymbol('proto.plugins.kafka.v1.Metadata', null, global);
goog.exportSymbol('proto.plugins.kafka.v1.Metadata.Minified', null, global);
goog.exportSymbol('proto.plugins.kafka.v1.Operation', null, global);
goog.exportSymbol('proto.plugins.kafka.v1.Plugin', null, global);
goog.exportSymbol('proto.plugins.kafka.v1.Plugin.Consume', null, global);
goog.exportSymbol('proto.plugins.kafka.v1.Plugin.Consume.From', null, global);
goog.exportSymbol('proto.plugins.kafka.v1.Plugin.Consume.Seek', null, global);
goog.exportSymbol('proto.plugins.kafka.v1.Plugin.Produce', null, global);
goog.exportSymbol('proto.plugins.kafka.v1.SASL', null, global);
goog.exportSymbol('proto.plugins.kafka.v1.SASL.Mechanism', null, global);
goog.exportSymbol('proto.plugins.kafka.v1.SuperblocksMetadata', null, global);
goog.exportSymbol('proto.plugins.kafka.v1.Topic', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.kafka.v1.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.kafka.v1.Metadata.repeatedFields_, null);
};
goog.inherits(proto.plugins.kafka.v1.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.kafka.v1.Metadata.displayName = 'proto.plugins.kafka.v1.Metadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.kafka.v1.Metadata.Minified = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.kafka.v1.Metadata.Minified.repeatedFields_, null);
};
goog.inherits(proto.plugins.kafka.v1.Metadata.Minified, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.kafka.v1.Metadata.Minified.displayName = 'proto.plugins.kafka.v1.Metadata.Minified';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.kafka.v1.Broker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.kafka.v1.Broker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.kafka.v1.Broker.displayName = 'proto.plugins.kafka.v1.Broker';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.kafka.v1.Topic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.kafka.v1.Topic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.kafka.v1.Topic.displayName = 'proto.plugins.kafka.v1.Topic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.kafka.v1.Messages = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.kafka.v1.Messages.repeatedFields_, null);
};
goog.inherits(proto.plugins.kafka.v1.Messages, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.kafka.v1.Messages.displayName = 'proto.plugins.kafka.v1.Messages';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.kafka.v1.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.kafka.v1.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.kafka.v1.Message.displayName = 'proto.plugins.kafka.v1.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.kafka.v1.SASL = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.kafka.v1.SASL, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.kafka.v1.SASL.displayName = 'proto.plugins.kafka.v1.SASL';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.kafka.v1.Cluster = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.kafka.v1.Cluster, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.kafka.v1.Cluster.displayName = 'proto.plugins.kafka.v1.Cluster';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.kafka.v1.Plugin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.kafka.v1.Plugin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.kafka.v1.Plugin.displayName = 'proto.plugins.kafka.v1.Plugin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.kafka.v1.Plugin.Consume = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.kafka.v1.Plugin.Consume, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.kafka.v1.Plugin.Consume.displayName = 'proto.plugins.kafka.v1.Plugin.Consume';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.kafka.v1.Plugin.Consume.Seek = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.kafka.v1.Plugin.Consume.Seek, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.kafka.v1.Plugin.Consume.Seek.displayName = 'proto.plugins.kafka.v1.Plugin.Consume.Seek';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.kafka.v1.Plugin.Produce = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.kafka.v1.Plugin.Produce, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.kafka.v1.Plugin.Produce.displayName = 'proto.plugins.kafka.v1.Plugin.Produce';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.kafka.v1.SuperblocksMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.kafka.v1.SuperblocksMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.kafka.v1.SuperblocksMetadata.displayName = 'proto.plugins.kafka.v1.SuperblocksMetadata';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.kafka.v1.Metadata.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.kafka.v1.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.kafka.v1.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.kafka.v1.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
topicsList: jspb.Message.toObjectList(msg.getTopicsList(),
    proto.plugins.kafka.v1.Topic.toObject, includeInstance),
brokersList: jspb.Message.toObjectList(msg.getBrokersList(),
    proto.plugins.kafka.v1.Broker.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.kafka.v1.Metadata}
 */
proto.plugins.kafka.v1.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.kafka.v1.Metadata;
  return proto.plugins.kafka.v1.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.kafka.v1.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.kafka.v1.Metadata}
 */
proto.plugins.kafka.v1.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.plugins.kafka.v1.Topic;
      reader.readMessage(value,proto.plugins.kafka.v1.Topic.deserializeBinaryFromReader);
      msg.addTopics(value);
      break;
    case 2:
      var value = new proto.plugins.kafka.v1.Broker;
      reader.readMessage(value,proto.plugins.kafka.v1.Broker.deserializeBinaryFromReader);
      msg.addBrokers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.kafka.v1.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.kafka.v1.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.kafka.v1.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopicsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.plugins.kafka.v1.Topic.serializeBinaryToWriter
    );
  }
  f = message.getBrokersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.plugins.kafka.v1.Broker.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.kafka.v1.Metadata.Minified.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.kafka.v1.Metadata.Minified.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.kafka.v1.Metadata.Minified.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.kafka.v1.Metadata.Minified} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Metadata.Minified.toObject = function(includeInstance, msg) {
  var f, obj = {
topicsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.kafka.v1.Metadata.Minified}
 */
proto.plugins.kafka.v1.Metadata.Minified.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.kafka.v1.Metadata.Minified;
  return proto.plugins.kafka.v1.Metadata.Minified.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.kafka.v1.Metadata.Minified} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.kafka.v1.Metadata.Minified}
 */
proto.plugins.kafka.v1.Metadata.Minified.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTopics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.kafka.v1.Metadata.Minified.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.kafka.v1.Metadata.Minified.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.kafka.v1.Metadata.Minified} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Metadata.Minified.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopicsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string topics = 1;
 * @return {!Array<string>}
 */
proto.plugins.kafka.v1.Metadata.Minified.prototype.getTopicsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.plugins.kafka.v1.Metadata.Minified} returns this
 */
proto.plugins.kafka.v1.Metadata.Minified.prototype.setTopicsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.plugins.kafka.v1.Metadata.Minified} returns this
 */
proto.plugins.kafka.v1.Metadata.Minified.prototype.addTopics = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.kafka.v1.Metadata.Minified} returns this
 */
proto.plugins.kafka.v1.Metadata.Minified.prototype.clearTopicsList = function() {
  return this.setTopicsList([]);
};


/**
 * repeated Topic topics = 1;
 * @return {!Array<!proto.plugins.kafka.v1.Topic>}
 */
proto.plugins.kafka.v1.Metadata.prototype.getTopicsList = function() {
  return /** @type{!Array<!proto.plugins.kafka.v1.Topic>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plugins.kafka.v1.Topic, 1));
};


/**
 * @param {!Array<!proto.plugins.kafka.v1.Topic>} value
 * @return {!proto.plugins.kafka.v1.Metadata} returns this
*/
proto.plugins.kafka.v1.Metadata.prototype.setTopicsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.plugins.kafka.v1.Topic=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plugins.kafka.v1.Topic}
 */
proto.plugins.kafka.v1.Metadata.prototype.addTopics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.plugins.kafka.v1.Topic, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.kafka.v1.Metadata} returns this
 */
proto.plugins.kafka.v1.Metadata.prototype.clearTopicsList = function() {
  return this.setTopicsList([]);
};


/**
 * repeated Broker brokers = 2;
 * @return {!Array<!proto.plugins.kafka.v1.Broker>}
 */
proto.plugins.kafka.v1.Metadata.prototype.getBrokersList = function() {
  return /** @type{!Array<!proto.plugins.kafka.v1.Broker>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plugins.kafka.v1.Broker, 2));
};


/**
 * @param {!Array<!proto.plugins.kafka.v1.Broker>} value
 * @return {!proto.plugins.kafka.v1.Metadata} returns this
*/
proto.plugins.kafka.v1.Metadata.prototype.setBrokersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.plugins.kafka.v1.Broker=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plugins.kafka.v1.Broker}
 */
proto.plugins.kafka.v1.Metadata.prototype.addBrokers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.plugins.kafka.v1.Broker, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.kafka.v1.Metadata} returns this
 */
proto.plugins.kafka.v1.Metadata.prototype.clearBrokersList = function() {
  return this.setBrokersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.kafka.v1.Broker.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.kafka.v1.Broker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.kafka.v1.Broker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Broker.toObject = function(includeInstance, msg) {
  var f, obj = {
nodeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
address: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.kafka.v1.Broker}
 */
proto.plugins.kafka.v1.Broker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.kafka.v1.Broker;
  return proto.plugins.kafka.v1.Broker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.kafka.v1.Broker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.kafka.v1.Broker}
 */
proto.plugins.kafka.v1.Broker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.kafka.v1.Broker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.kafka.v1.Broker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.kafka.v1.Broker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Broker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 node_id = 1;
 * @return {number}
 */
proto.plugins.kafka.v1.Broker.prototype.getNodeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.kafka.v1.Broker} returns this
 */
proto.plugins.kafka.v1.Broker.prototype.setNodeId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.plugins.kafka.v1.Broker.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.kafka.v1.Broker} returns this
 */
proto.plugins.kafka.v1.Broker.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.kafka.v1.Topic.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.kafka.v1.Topic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.kafka.v1.Topic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Topic.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.kafka.v1.Topic}
 */
proto.plugins.kafka.v1.Topic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.kafka.v1.Topic;
  return proto.plugins.kafka.v1.Topic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.kafka.v1.Topic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.kafka.v1.Topic}
 */
proto.plugins.kafka.v1.Topic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.kafka.v1.Topic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.kafka.v1.Topic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.kafka.v1.Topic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Topic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.plugins.kafka.v1.Topic.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.kafka.v1.Topic} returns this
 */
proto.plugins.kafka.v1.Topic.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.kafka.v1.Messages.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.kafka.v1.Messages.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.kafka.v1.Messages.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.kafka.v1.Messages} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Messages.toObject = function(includeInstance, msg) {
  var f, obj = {
messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.plugins.kafka.v1.Message.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.kafka.v1.Messages}
 */
proto.plugins.kafka.v1.Messages.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.kafka.v1.Messages;
  return proto.plugins.kafka.v1.Messages.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.kafka.v1.Messages} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.kafka.v1.Messages}
 */
proto.plugins.kafka.v1.Messages.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.plugins.kafka.v1.Message;
      reader.readMessage(value,proto.plugins.kafka.v1.Message.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.kafka.v1.Messages.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.kafka.v1.Messages.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.kafka.v1.Messages} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Messages.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.plugins.kafka.v1.Message.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Message messages = 1;
 * @return {!Array<!proto.plugins.kafka.v1.Message>}
 */
proto.plugins.kafka.v1.Messages.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.plugins.kafka.v1.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plugins.kafka.v1.Message, 1));
};


/**
 * @param {!Array<!proto.plugins.kafka.v1.Message>} value
 * @return {!proto.plugins.kafka.v1.Messages} returns this
*/
proto.plugins.kafka.v1.Messages.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.plugins.kafka.v1.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plugins.kafka.v1.Message}
 */
proto.plugins.kafka.v1.Messages.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.plugins.kafka.v1.Message, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.kafka.v1.Messages} returns this
 */
proto.plugins.kafka.v1.Messages.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.kafka.v1.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.kafka.v1.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.kafka.v1.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
topic: jspb.Message.getFieldWithDefault(msg, 1, ""),
partition: jspb.Message.getFieldWithDefault(msg, 2, 0),
offset: jspb.Message.getFieldWithDefault(msg, 4, 0),
timestamp: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
key: (f = msg.getKey()) && google_protobuf_struct_pb.Value.toObject(includeInstance, f),
value: (f = msg.getValue()) && google_protobuf_struct_pb.Value.toObject(includeInstance, f),
length: jspb.Message.getFieldWithDefault(msg, 7, 0),
attributes: jspb.Message.getFieldWithDefault(msg, 8, 0),
headersMap: (f = msg.getHeadersMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.kafka.v1.Message}
 */
proto.plugins.kafka.v1.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.kafka.v1.Message;
  return proto.plugins.kafka.v1.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.kafka.v1.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.kafka.v1.Message}
 */
proto.plugins.kafka.v1.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartition(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = new google_protobuf_struct_pb.Value;
      reader.readMessage(value,google_protobuf_struct_pb.Value.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 6:
      var value = new google_protobuf_struct_pb.Value;
      reader.readMessage(value,google_protobuf_struct_pb.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttributes(value);
      break;
    case 9:
      var value = msg.getHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.kafka.v1.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.kafka.v1.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.kafka.v1.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPartition();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_struct_pb.Value.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_struct_pb.Value.serializeBinaryToWriter
    );
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getAttributes();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string topic = 1;
 * @return {string}
 */
proto.plugins.kafka.v1.Message.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.kafka.v1.Message} returns this
 */
proto.plugins.kafka.v1.Message.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 partition = 2;
 * @return {number}
 */
proto.plugins.kafka.v1.Message.prototype.getPartition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.kafka.v1.Message} returns this
 */
proto.plugins.kafka.v1.Message.prototype.setPartition = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 offset = 4;
 * @return {number}
 */
proto.plugins.kafka.v1.Message.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.kafka.v1.Message} returns this
 */
proto.plugins.kafka.v1.Message.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string timestamp = 3;
 * @return {string}
 */
proto.plugins.kafka.v1.Message.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.kafka.v1.Message} returns this
 */
proto.plugins.kafka.v1.Message.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.kafka.v1.Message} returns this
 */
proto.plugins.kafka.v1.Message.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.Message.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Value key = 5;
 * @return {?proto.google.protobuf.Value}
 */
proto.plugins.kafka.v1.Message.prototype.getKey = function() {
  return /** @type{?proto.google.protobuf.Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Value, 5));
};


/**
 * @param {?proto.google.protobuf.Value|undefined} value
 * @return {!proto.plugins.kafka.v1.Message} returns this
*/
proto.plugins.kafka.v1.Message.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.kafka.v1.Message} returns this
 */
proto.plugins.kafka.v1.Message.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.Message.prototype.hasKey = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Value value = 6;
 * @return {?proto.google.protobuf.Value}
 */
proto.plugins.kafka.v1.Message.prototype.getValue = function() {
  return /** @type{?proto.google.protobuf.Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Value, 6));
};


/**
 * @param {?proto.google.protobuf.Value|undefined} value
 * @return {!proto.plugins.kafka.v1.Message} returns this
*/
proto.plugins.kafka.v1.Message.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.kafka.v1.Message} returns this
 */
proto.plugins.kafka.v1.Message.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.Message.prototype.hasValue = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 length = 7;
 * @return {number}
 */
proto.plugins.kafka.v1.Message.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.kafka.v1.Message} returns this
 */
proto.plugins.kafka.v1.Message.prototype.setLength = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 attributes = 8;
 * @return {number}
 */
proto.plugins.kafka.v1.Message.prototype.getAttributes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.kafka.v1.Message} returns this
 */
proto.plugins.kafka.v1.Message.prototype.setAttributes = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * map<string, string> headers = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.plugins.kafka.v1.Message.prototype.getHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.plugins.kafka.v1.Message} returns this
 */
proto.plugins.kafka.v1.Message.prototype.clearHeadersMap = function() {
  this.getHeadersMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.kafka.v1.SASL.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.kafka.v1.SASL.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.kafka.v1.SASL} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.SASL.toObject = function(includeInstance, msg) {
  var f, obj = {
mechanism: jspb.Message.getFieldWithDefault(msg, 1, 0),
username: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
password: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
accessKeyId: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
secretKey: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
sessionToken: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
authorizationIdentity: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.kafka.v1.SASL}
 */
proto.plugins.kafka.v1.SASL.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.kafka.v1.SASL;
  return proto.plugins.kafka.v1.SASL.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.kafka.v1.SASL} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.kafka.v1.SASL}
 */
proto.plugins.kafka.v1.SASL.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.plugins.kafka.v1.SASL.Mechanism} */ (reader.readEnum());
      msg.setMechanism(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessKeyId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretKey(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionToken(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorizationIdentity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.kafka.v1.SASL.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.kafka.v1.SASL.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.kafka.v1.SASL} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.SASL.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMechanism();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.plugins.kafka.v1.SASL.Mechanism = {
  MECHANISM_UNSPECIFIED: 0,
  MECHANISM_PLAIN: 1,
  MECHANISM_SCRAM_SHA256: 2,
  MECHANISM_SCRAM_SHA512: 3,
  MECHANISM_AWS: 4
};

/**
 * optional Mechanism mechanism = 1;
 * @return {!proto.plugins.kafka.v1.SASL.Mechanism}
 */
proto.plugins.kafka.v1.SASL.prototype.getMechanism = function() {
  return /** @type {!proto.plugins.kafka.v1.SASL.Mechanism} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.plugins.kafka.v1.SASL.Mechanism} value
 * @return {!proto.plugins.kafka.v1.SASL} returns this
 */
proto.plugins.kafka.v1.SASL.prototype.setMechanism = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.plugins.kafka.v1.SASL.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.kafka.v1.SASL} returns this
 */
proto.plugins.kafka.v1.SASL.prototype.setUsername = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.kafka.v1.SASL} returns this
 */
proto.plugins.kafka.v1.SASL.prototype.clearUsername = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.SASL.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string password = 3;
 * @return {string}
 */
proto.plugins.kafka.v1.SASL.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.kafka.v1.SASL} returns this
 */
proto.plugins.kafka.v1.SASL.prototype.setPassword = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.kafka.v1.SASL} returns this
 */
proto.plugins.kafka.v1.SASL.prototype.clearPassword = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.SASL.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string access_key_id = 4;
 * @return {string}
 */
proto.plugins.kafka.v1.SASL.prototype.getAccessKeyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.kafka.v1.SASL} returns this
 */
proto.plugins.kafka.v1.SASL.prototype.setAccessKeyId = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.kafka.v1.SASL} returns this
 */
proto.plugins.kafka.v1.SASL.prototype.clearAccessKeyId = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.SASL.prototype.hasAccessKeyId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string secret_key = 5;
 * @return {string}
 */
proto.plugins.kafka.v1.SASL.prototype.getSecretKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.kafka.v1.SASL} returns this
 */
proto.plugins.kafka.v1.SASL.prototype.setSecretKey = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.kafka.v1.SASL} returns this
 */
proto.plugins.kafka.v1.SASL.prototype.clearSecretKey = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.SASL.prototype.hasSecretKey = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string session_token = 6;
 * @return {string}
 */
proto.plugins.kafka.v1.SASL.prototype.getSessionToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.kafka.v1.SASL} returns this
 */
proto.plugins.kafka.v1.SASL.prototype.setSessionToken = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.kafka.v1.SASL} returns this
 */
proto.plugins.kafka.v1.SASL.prototype.clearSessionToken = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.SASL.prototype.hasSessionToken = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string authorization_identity = 7;
 * @return {string}
 */
proto.plugins.kafka.v1.SASL.prototype.getAuthorizationIdentity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.kafka.v1.SASL} returns this
 */
proto.plugins.kafka.v1.SASL.prototype.setAuthorizationIdentity = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.kafka.v1.SASL} returns this
 */
proto.plugins.kafka.v1.SASL.prototype.clearAuthorizationIdentity = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.SASL.prototype.hasAuthorizationIdentity = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.kafka.v1.Cluster.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.kafka.v1.Cluster.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.kafka.v1.Cluster} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Cluster.toObject = function(includeInstance, msg) {
  var f, obj = {
brokers: jspb.Message.getFieldWithDefault(msg, 1, ""),
ssl: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
sasl: (f = msg.getSasl()) && proto.plugins.kafka.v1.SASL.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.kafka.v1.Cluster}
 */
proto.plugins.kafka.v1.Cluster.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.kafka.v1.Cluster;
  return proto.plugins.kafka.v1.Cluster.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.kafka.v1.Cluster} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.kafka.v1.Cluster}
 */
proto.plugins.kafka.v1.Cluster.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrokers(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSsl(value);
      break;
    case 3:
      var value = new proto.plugins.kafka.v1.SASL;
      reader.readMessage(value,proto.plugins.kafka.v1.SASL.deserializeBinaryFromReader);
      msg.setSasl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.kafka.v1.Cluster.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.kafka.v1.Cluster.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.kafka.v1.Cluster} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Cluster.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBrokers();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSsl();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSasl();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.plugins.kafka.v1.SASL.serializeBinaryToWriter
    );
  }
};


/**
 * optional string brokers = 1;
 * @return {string}
 */
proto.plugins.kafka.v1.Cluster.prototype.getBrokers = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.kafka.v1.Cluster} returns this
 */
proto.plugins.kafka.v1.Cluster.prototype.setBrokers = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool ssl = 2;
 * @return {boolean}
 */
proto.plugins.kafka.v1.Cluster.prototype.getSsl = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.plugins.kafka.v1.Cluster} returns this
 */
proto.plugins.kafka.v1.Cluster.prototype.setSsl = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional SASL sasl = 3;
 * @return {?proto.plugins.kafka.v1.SASL}
 */
proto.plugins.kafka.v1.Cluster.prototype.getSasl = function() {
  return /** @type{?proto.plugins.kafka.v1.SASL} */ (
    jspb.Message.getWrapperField(this, proto.plugins.kafka.v1.SASL, 3));
};


/**
 * @param {?proto.plugins.kafka.v1.SASL|undefined} value
 * @return {!proto.plugins.kafka.v1.Cluster} returns this
*/
proto.plugins.kafka.v1.Cluster.prototype.setSasl = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.kafka.v1.Cluster} returns this
 */
proto.plugins.kafka.v1.Cluster.prototype.clearSasl = function() {
  return this.setSasl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.Cluster.prototype.hasSasl = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.kafka.v1.Plugin.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.kafka.v1.Plugin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.kafka.v1.Plugin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Plugin.toObject = function(includeInstance, msg) {
  var f, obj = {
name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
operation: jspb.Message.getFieldWithDefault(msg, 2, 0),
produce: (f = msg.getProduce()) && proto.plugins.kafka.v1.Plugin.Produce.toObject(includeInstance, f),
consume: (f = msg.getConsume()) && proto.plugins.kafka.v1.Plugin.Consume.toObject(includeInstance, f),
cluster: (f = msg.getCluster()) && proto.plugins.kafka.v1.Cluster.toObject(includeInstance, f),
superblocksmetadata: (f = msg.getSuperblocksmetadata()) && proto.plugins.kafka.v1.SuperblocksMetadata.toObject(includeInstance, f),
dynamicWorkflowConfiguration: (f = msg.getDynamicWorkflowConfiguration()) && plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.kafka.v1.Plugin}
 */
proto.plugins.kafka.v1.Plugin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.kafka.v1.Plugin;
  return proto.plugins.kafka.v1.Plugin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.kafka.v1.Plugin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.kafka.v1.Plugin}
 */
proto.plugins.kafka.v1.Plugin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.plugins.kafka.v1.Operation} */ (reader.readEnum());
      msg.setOperation(value);
      break;
    case 3:
      var value = new proto.plugins.kafka.v1.Plugin.Produce;
      reader.readMessage(value,proto.plugins.kafka.v1.Plugin.Produce.deserializeBinaryFromReader);
      msg.setProduce(value);
      break;
    case 4:
      var value = new proto.plugins.kafka.v1.Plugin.Consume;
      reader.readMessage(value,proto.plugins.kafka.v1.Plugin.Consume.deserializeBinaryFromReader);
      msg.setConsume(value);
      break;
    case 5:
      var value = new proto.plugins.kafka.v1.Cluster;
      reader.readMessage(value,proto.plugins.kafka.v1.Cluster.deserializeBinaryFromReader);
      msg.setCluster(value);
      break;
    case 6:
      var value = new proto.plugins.kafka.v1.SuperblocksMetadata;
      reader.readMessage(value,proto.plugins.kafka.v1.SuperblocksMetadata.deserializeBinaryFromReader);
      msg.setSuperblocksmetadata(value);
      break;
    case 7:
      var value = new plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration;
      reader.readMessage(value,plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration.deserializeBinaryFromReader);
      msg.setDynamicWorkflowConfiguration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.kafka.v1.Plugin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.kafka.v1.Plugin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.kafka.v1.Plugin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Plugin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOperation();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getProduce();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.plugins.kafka.v1.Plugin.Produce.serializeBinaryToWriter
    );
  }
  f = message.getConsume();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.plugins.kafka.v1.Plugin.Consume.serializeBinaryToWriter
    );
  }
  f = message.getCluster();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.plugins.kafka.v1.Cluster.serializeBinaryToWriter
    );
  }
  f = message.getSuperblocksmetadata();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.plugins.kafka.v1.SuperblocksMetadata.serializeBinaryToWriter
    );
  }
  f = message.getDynamicWorkflowConfiguration();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.kafka.v1.Plugin.Consume.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.kafka.v1.Plugin.Consume.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.kafka.v1.Plugin.Consume} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Plugin.Consume.toObject = function(includeInstance, msg) {
  var f, obj = {
from: jspb.Message.getFieldWithDefault(msg, 1, 0),
topic: jspb.Message.getFieldWithDefault(msg, 2, ""),
groupId: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
clientId: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
seek: (f = msg.getSeek()) && proto.plugins.kafka.v1.Plugin.Consume.Seek.toObject(includeInstance, f),
readUncommitted: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.kafka.v1.Plugin.Consume}
 */
proto.plugins.kafka.v1.Plugin.Consume.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.kafka.v1.Plugin.Consume;
  return proto.plugins.kafka.v1.Plugin.Consume.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.kafka.v1.Plugin.Consume} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.kafka.v1.Plugin.Consume}
 */
proto.plugins.kafka.v1.Plugin.Consume.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.plugins.kafka.v1.Plugin.Consume.From} */ (reader.readEnum());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 5:
      var value = new proto.plugins.kafka.v1.Plugin.Consume.Seek;
      reader.readMessage(value,proto.plugins.kafka.v1.Plugin.Consume.Seek.deserializeBinaryFromReader);
      msg.setSeek(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadUncommitted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.kafka.v1.Plugin.Consume.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.kafka.v1.Plugin.Consume.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.kafka.v1.Plugin.Consume} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Plugin.Consume.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSeek();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.plugins.kafka.v1.Plugin.Consume.Seek.serializeBinaryToWriter
    );
  }
  f = message.getReadUncommitted();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.plugins.kafka.v1.Plugin.Consume.From = {
  FROM_UNSPECIFIED: 0,
  FROM_BEGINNING: 1,
  FROM_LATEST: 2,
  FROM_SEEK: 3
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.kafka.v1.Plugin.Consume.Seek.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.kafka.v1.Plugin.Consume.Seek.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.kafka.v1.Plugin.Consume.Seek} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Plugin.Consume.Seek.toObject = function(includeInstance, msg) {
  var f, obj = {
topic: jspb.Message.getFieldWithDefault(msg, 1, ""),
offset: jspb.Message.getFieldWithDefault(msg, 2, 0),
partition: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.kafka.v1.Plugin.Consume.Seek}
 */
proto.plugins.kafka.v1.Plugin.Consume.Seek.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.kafka.v1.Plugin.Consume.Seek;
  return proto.plugins.kafka.v1.Plugin.Consume.Seek.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.kafka.v1.Plugin.Consume.Seek} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.kafka.v1.Plugin.Consume.Seek}
 */
proto.plugins.kafka.v1.Plugin.Consume.Seek.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.kafka.v1.Plugin.Consume.Seek.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.kafka.v1.Plugin.Consume.Seek.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.kafka.v1.Plugin.Consume.Seek} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Plugin.Consume.Seek.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPartition();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string topic = 1;
 * @return {string}
 */
proto.plugins.kafka.v1.Plugin.Consume.Seek.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.kafka.v1.Plugin.Consume.Seek} returns this
 */
proto.plugins.kafka.v1.Plugin.Consume.Seek.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 offset = 2;
 * @return {number}
 */
proto.plugins.kafka.v1.Plugin.Consume.Seek.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.kafka.v1.Plugin.Consume.Seek} returns this
 */
proto.plugins.kafka.v1.Plugin.Consume.Seek.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 partition = 3;
 * @return {number}
 */
proto.plugins.kafka.v1.Plugin.Consume.Seek.prototype.getPartition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.kafka.v1.Plugin.Consume.Seek} returns this
 */
proto.plugins.kafka.v1.Plugin.Consume.Seek.prototype.setPartition = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional From from = 1;
 * @return {!proto.plugins.kafka.v1.Plugin.Consume.From}
 */
proto.plugins.kafka.v1.Plugin.Consume.prototype.getFrom = function() {
  return /** @type {!proto.plugins.kafka.v1.Plugin.Consume.From} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.plugins.kafka.v1.Plugin.Consume.From} value
 * @return {!proto.plugins.kafka.v1.Plugin.Consume} returns this
 */
proto.plugins.kafka.v1.Plugin.Consume.prototype.setFrom = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string topic = 2;
 * @return {string}
 */
proto.plugins.kafka.v1.Plugin.Consume.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.kafka.v1.Plugin.Consume} returns this
 */
proto.plugins.kafka.v1.Plugin.Consume.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string group_id = 3;
 * @return {string}
 */
proto.plugins.kafka.v1.Plugin.Consume.prototype.getGroupId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.kafka.v1.Plugin.Consume} returns this
 */
proto.plugins.kafka.v1.Plugin.Consume.prototype.setGroupId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.kafka.v1.Plugin.Consume} returns this
 */
proto.plugins.kafka.v1.Plugin.Consume.prototype.clearGroupId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.Plugin.Consume.prototype.hasGroupId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string client_id = 4;
 * @return {string}
 */
proto.plugins.kafka.v1.Plugin.Consume.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.kafka.v1.Plugin.Consume} returns this
 */
proto.plugins.kafka.v1.Plugin.Consume.prototype.setClientId = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.kafka.v1.Plugin.Consume} returns this
 */
proto.plugins.kafka.v1.Plugin.Consume.prototype.clearClientId = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.Plugin.Consume.prototype.hasClientId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Seek seek = 5;
 * @return {?proto.plugins.kafka.v1.Plugin.Consume.Seek}
 */
proto.plugins.kafka.v1.Plugin.Consume.prototype.getSeek = function() {
  return /** @type{?proto.plugins.kafka.v1.Plugin.Consume.Seek} */ (
    jspb.Message.getWrapperField(this, proto.plugins.kafka.v1.Plugin.Consume.Seek, 5));
};


/**
 * @param {?proto.plugins.kafka.v1.Plugin.Consume.Seek|undefined} value
 * @return {!proto.plugins.kafka.v1.Plugin.Consume} returns this
*/
proto.plugins.kafka.v1.Plugin.Consume.prototype.setSeek = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.kafka.v1.Plugin.Consume} returns this
 */
proto.plugins.kafka.v1.Plugin.Consume.prototype.clearSeek = function() {
  return this.setSeek(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.Plugin.Consume.prototype.hasSeek = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool read_uncommitted = 6;
 * @return {boolean}
 */
proto.plugins.kafka.v1.Plugin.Consume.prototype.getReadUncommitted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.plugins.kafka.v1.Plugin.Consume} returns this
 */
proto.plugins.kafka.v1.Plugin.Consume.prototype.setReadUncommitted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.kafka.v1.Plugin.Produce.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.kafka.v1.Plugin.Produce} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Plugin.Produce.toObject = function(includeInstance, msg) {
  var f, obj = {
acks: jspb.Message.getFieldWithDefault(msg, 1, 0),
clientId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
timeout: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
compression: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
transactionId: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
autoCreateTopic: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
idempotent: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
transaction: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
messages: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.kafka.v1.Plugin.Produce}
 */
proto.plugins.kafka.v1.Plugin.Produce.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.kafka.v1.Plugin.Produce;
  return proto.plugins.kafka.v1.Plugin.Produce.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.kafka.v1.Plugin.Produce} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.kafka.v1.Plugin.Produce}
 */
proto.plugins.kafka.v1.Plugin.Produce.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.plugins.kafka.v1.Acks} */ (reader.readEnum());
      msg.setAcks(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeout(value);
      break;
    case 4:
      var value = /** @type {!proto.plugins.kafka.v1.Compression} */ (reader.readEnum());
      msg.setCompression(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionId(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoCreateTopic(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIdempotent(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTransaction(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.kafka.v1.Plugin.Produce.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.kafka.v1.Plugin.Produce} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.Plugin.Produce.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAcks();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {!proto.plugins.kafka.v1.Compression} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAutoCreateTopic();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getIdempotent();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getTransaction();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getMessages();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional Acks acks = 1;
 * @return {!proto.plugins.kafka.v1.Acks}
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.getAcks = function() {
  return /** @type {!proto.plugins.kafka.v1.Acks} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.plugins.kafka.v1.Acks} value
 * @return {!proto.plugins.kafka.v1.Plugin.Produce} returns this
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.setAcks = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string client_id = 2;
 * @return {string}
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.kafka.v1.Plugin.Produce} returns this
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.setClientId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.kafka.v1.Plugin.Produce} returns this
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.clearClientId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.hasClientId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 timeout = 3;
 * @return {number}
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.kafka.v1.Plugin.Produce} returns this
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.setTimeout = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.kafka.v1.Plugin.Produce} returns this
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.clearTimeout = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.hasTimeout = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Compression compression = 4;
 * @return {!proto.plugins.kafka.v1.Compression}
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.getCompression = function() {
  return /** @type {!proto.plugins.kafka.v1.Compression} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.plugins.kafka.v1.Compression} value
 * @return {!proto.plugins.kafka.v1.Plugin.Produce} returns this
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.setCompression = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.kafka.v1.Plugin.Produce} returns this
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.clearCompression = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.hasCompression = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string transaction_id = 5;
 * @return {string}
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.getTransactionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.kafka.v1.Plugin.Produce} returns this
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.setTransactionId = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.kafka.v1.Plugin.Produce} returns this
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.clearTransactionId = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.hasTransactionId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool auto_create_topic = 6;
 * @return {boolean}
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.getAutoCreateTopic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.plugins.kafka.v1.Plugin.Produce} returns this
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.setAutoCreateTopic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool idempotent = 7;
 * @return {boolean}
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.getIdempotent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.plugins.kafka.v1.Plugin.Produce} returns this
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.setIdempotent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool transaction = 8;
 * @return {boolean}
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.getTransaction = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.plugins.kafka.v1.Plugin.Produce} returns this
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.setTransaction = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string messages = 9;
 * @return {string}
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.getMessages = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.kafka.v1.Plugin.Produce} returns this
 */
proto.plugins.kafka.v1.Plugin.Produce.prototype.setMessages = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.plugins.kafka.v1.Plugin.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.kafka.v1.Plugin} returns this
 */
proto.plugins.kafka.v1.Plugin.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.kafka.v1.Plugin} returns this
 */
proto.plugins.kafka.v1.Plugin.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.Plugin.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Operation operation = 2;
 * @return {!proto.plugins.kafka.v1.Operation}
 */
proto.plugins.kafka.v1.Plugin.prototype.getOperation = function() {
  return /** @type {!proto.plugins.kafka.v1.Operation} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.plugins.kafka.v1.Operation} value
 * @return {!proto.plugins.kafka.v1.Plugin} returns this
 */
proto.plugins.kafka.v1.Plugin.prototype.setOperation = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Produce produce = 3;
 * @return {?proto.plugins.kafka.v1.Plugin.Produce}
 */
proto.plugins.kafka.v1.Plugin.prototype.getProduce = function() {
  return /** @type{?proto.plugins.kafka.v1.Plugin.Produce} */ (
    jspb.Message.getWrapperField(this, proto.plugins.kafka.v1.Plugin.Produce, 3));
};


/**
 * @param {?proto.plugins.kafka.v1.Plugin.Produce|undefined} value
 * @return {!proto.plugins.kafka.v1.Plugin} returns this
*/
proto.plugins.kafka.v1.Plugin.prototype.setProduce = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.kafka.v1.Plugin} returns this
 */
proto.plugins.kafka.v1.Plugin.prototype.clearProduce = function() {
  return this.setProduce(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.Plugin.prototype.hasProduce = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Consume consume = 4;
 * @return {?proto.plugins.kafka.v1.Plugin.Consume}
 */
proto.plugins.kafka.v1.Plugin.prototype.getConsume = function() {
  return /** @type{?proto.plugins.kafka.v1.Plugin.Consume} */ (
    jspb.Message.getWrapperField(this, proto.plugins.kafka.v1.Plugin.Consume, 4));
};


/**
 * @param {?proto.plugins.kafka.v1.Plugin.Consume|undefined} value
 * @return {!proto.plugins.kafka.v1.Plugin} returns this
*/
proto.plugins.kafka.v1.Plugin.prototype.setConsume = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.kafka.v1.Plugin} returns this
 */
proto.plugins.kafka.v1.Plugin.prototype.clearConsume = function() {
  return this.setConsume(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.Plugin.prototype.hasConsume = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Cluster cluster = 5;
 * @return {?proto.plugins.kafka.v1.Cluster}
 */
proto.plugins.kafka.v1.Plugin.prototype.getCluster = function() {
  return /** @type{?proto.plugins.kafka.v1.Cluster} */ (
    jspb.Message.getWrapperField(this, proto.plugins.kafka.v1.Cluster, 5));
};


/**
 * @param {?proto.plugins.kafka.v1.Cluster|undefined} value
 * @return {!proto.plugins.kafka.v1.Plugin} returns this
*/
proto.plugins.kafka.v1.Plugin.prototype.setCluster = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.kafka.v1.Plugin} returns this
 */
proto.plugins.kafka.v1.Plugin.prototype.clearCluster = function() {
  return this.setCluster(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.Plugin.prototype.hasCluster = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SuperblocksMetadata superblocksMetadata = 6;
 * @return {?proto.plugins.kafka.v1.SuperblocksMetadata}
 */
proto.plugins.kafka.v1.Plugin.prototype.getSuperblocksmetadata = function() {
  return /** @type{?proto.plugins.kafka.v1.SuperblocksMetadata} */ (
    jspb.Message.getWrapperField(this, proto.plugins.kafka.v1.SuperblocksMetadata, 6));
};


/**
 * @param {?proto.plugins.kafka.v1.SuperblocksMetadata|undefined} value
 * @return {!proto.plugins.kafka.v1.Plugin} returns this
*/
proto.plugins.kafka.v1.Plugin.prototype.setSuperblocksmetadata = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.kafka.v1.Plugin} returns this
 */
proto.plugins.kafka.v1.Plugin.prototype.clearSuperblocksmetadata = function() {
  return this.setSuperblocksmetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.Plugin.prototype.hasSuperblocksmetadata = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional plugins.common.v1.DynamicWorkflowConfiguration dynamic_workflow_configuration = 7;
 * @return {?proto.plugins.common.v1.DynamicWorkflowConfiguration}
 */
proto.plugins.kafka.v1.Plugin.prototype.getDynamicWorkflowConfiguration = function() {
  return /** @type{?proto.plugins.common.v1.DynamicWorkflowConfiguration} */ (
    jspb.Message.getWrapperField(this, plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration, 7));
};


/**
 * @param {?proto.plugins.common.v1.DynamicWorkflowConfiguration|undefined} value
 * @return {!proto.plugins.kafka.v1.Plugin} returns this
*/
proto.plugins.kafka.v1.Plugin.prototype.setDynamicWorkflowConfiguration = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.kafka.v1.Plugin} returns this
 */
proto.plugins.kafka.v1.Plugin.prototype.clearDynamicWorkflowConfiguration = function() {
  return this.setDynamicWorkflowConfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.Plugin.prototype.hasDynamicWorkflowConfiguration = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.kafka.v1.SuperblocksMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.kafka.v1.SuperblocksMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.kafka.v1.SuperblocksMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.SuperblocksMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
pluginVersion: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
syncedFromProfileId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.kafka.v1.SuperblocksMetadata}
 */
proto.plugins.kafka.v1.SuperblocksMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.kafka.v1.SuperblocksMetadata;
  return proto.plugins.kafka.v1.SuperblocksMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.kafka.v1.SuperblocksMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.kafka.v1.SuperblocksMetadata}
 */
proto.plugins.kafka.v1.SuperblocksMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPluginVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSyncedFromProfileId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.kafka.v1.SuperblocksMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.kafka.v1.SuperblocksMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.kafka.v1.SuperblocksMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.kafka.v1.SuperblocksMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string plugin_version = 1;
 * @return {string}
 */
proto.plugins.kafka.v1.SuperblocksMetadata.prototype.getPluginVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.kafka.v1.SuperblocksMetadata} returns this
 */
proto.plugins.kafka.v1.SuperblocksMetadata.prototype.setPluginVersion = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.kafka.v1.SuperblocksMetadata} returns this
 */
proto.plugins.kafka.v1.SuperblocksMetadata.prototype.clearPluginVersion = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.SuperblocksMetadata.prototype.hasPluginVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string synced_from_profile_id = 2;
 * @return {string}
 */
proto.plugins.kafka.v1.SuperblocksMetadata.prototype.getSyncedFromProfileId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.kafka.v1.SuperblocksMetadata} returns this
 */
proto.plugins.kafka.v1.SuperblocksMetadata.prototype.setSyncedFromProfileId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.kafka.v1.SuperblocksMetadata} returns this
 */
proto.plugins.kafka.v1.SuperblocksMetadata.prototype.clearSyncedFromProfileId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.kafka.v1.SuperblocksMetadata.prototype.hasSyncedFromProfileId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.plugins.kafka.v1.Operation = {
  OPERATION_UNSPECIFIED: 0,
  OPERATION_CONSUME: 1,
  OPERATION_PRODUCE: 2
};

/**
 * @enum {number}
 */
proto.plugins.kafka.v1.Compression = {
  COMPRESSION_UNSPECIFIED: 0,
  COMPRESSION_GZIP: 1,
  COMPRESSION_SNAPPY: 2,
  COMPRESSION_LZ4: 3,
  COMPRESSION_ZSTD: 4
};

/**
 * @enum {number}
 */
proto.plugins.kafka.v1.Acks = {
  ACKS_UNSPECIFIED: 0,
  ACKS_NONE: 1,
  ACKS_LEADER: 2,
  ACKS_ALL: 3
};

goog.object.extend(exports, proto.plugins.kafka.v1);
