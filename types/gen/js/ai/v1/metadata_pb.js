// source: ai/v1/metadata.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var buf_validate_validate_pb = require('../../buf/validate/validate_pb');
goog.object.extend(proto, buf_validate_validate_pb);
var plugins_common_v1_metadata_pb = require('../../plugins/common/v1/metadata_pb');
goog.object.extend(proto, plugins_common_v1_metadata_pb);
var plugins_kafka_v1_plugin_pb = require('../../plugins/kafka/v1/plugin_pb');
goog.object.extend(proto, plugins_kafka_v1_plugin_pb);
var validate_validate_pb = require('../../validate/validate_pb');
goog.object.extend(proto, validate_validate_pb);
goog.exportSymbol('proto.ai.v1.Metadata', null, global);
goog.exportSymbol('proto.ai.v1.Metadata.ConfigCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ai.v1.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ai.v1.Metadata.oneofGroups_);
};
goog.inherits(proto.ai.v1.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ai.v1.Metadata.displayName = 'proto.ai.v1.Metadata';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ai.v1.Metadata.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12]];

/**
 * @enum {number}
 */
proto.ai.v1.Metadata.ConfigCase = {
  CONFIG_NOT_SET: 0,
  MARIADB: 1,
  MSSQL: 2,
  MYSQL: 3,
  POSTGRES: 4,
  ROCKSET: 5,
  SNOWFLAKE: 6,
  COCKROACHDB: 7,
  KAFKA: 8,
  CONFLUENT: 9,
  MSK: 10,
  REDPANDA: 11,
  AIVENKAFKA: 12
};

/**
 * @return {proto.ai.v1.Metadata.ConfigCase}
 */
proto.ai.v1.Metadata.prototype.getConfigCase = function() {
  return /** @type {proto.ai.v1.Metadata.ConfigCase} */(jspb.Message.computeOneofCase(this, proto.ai.v1.Metadata.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ai.v1.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.ai.v1.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ai.v1.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.v1.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
mariadb: (f = msg.getMariadb()) && plugins_common_v1_metadata_pb.SQLMetadata.Minified.toObject(includeInstance, f),
mssql: (f = msg.getMssql()) && plugins_common_v1_metadata_pb.SQLMetadata.Minified.toObject(includeInstance, f),
mysql: (f = msg.getMysql()) && plugins_common_v1_metadata_pb.SQLMetadata.Minified.toObject(includeInstance, f),
postgres: (f = msg.getPostgres()) && plugins_common_v1_metadata_pb.SQLMetadata.Minified.toObject(includeInstance, f),
rockset: (f = msg.getRockset()) && plugins_common_v1_metadata_pb.SQLMetadata.Minified.toObject(includeInstance, f),
snowflake: (f = msg.getSnowflake()) && plugins_common_v1_metadata_pb.SQLMetadata.Minified.toObject(includeInstance, f),
cockroachdb: (f = msg.getCockroachdb()) && plugins_common_v1_metadata_pb.SQLMetadata.Minified.toObject(includeInstance, f),
kafka: (f = msg.getKafka()) && plugins_kafka_v1_plugin_pb.Metadata.Minified.toObject(includeInstance, f),
confluent: (f = msg.getConfluent()) && plugins_kafka_v1_plugin_pb.Metadata.Minified.toObject(includeInstance, f),
msk: (f = msg.getMsk()) && plugins_kafka_v1_plugin_pb.Metadata.Minified.toObject(includeInstance, f),
redpanda: (f = msg.getRedpanda()) && plugins_kafka_v1_plugin_pb.Metadata.Minified.toObject(includeInstance, f),
aivenkafka: (f = msg.getAivenkafka()) && plugins_kafka_v1_plugin_pb.Metadata.Minified.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ai.v1.Metadata}
 */
proto.ai.v1.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ai.v1.Metadata;
  return proto.ai.v1.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ai.v1.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ai.v1.Metadata}
 */
proto.ai.v1.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new plugins_common_v1_metadata_pb.SQLMetadata.Minified;
      reader.readMessage(value,plugins_common_v1_metadata_pb.SQLMetadata.Minified.deserializeBinaryFromReader);
      msg.setMariadb(value);
      break;
    case 2:
      var value = new plugins_common_v1_metadata_pb.SQLMetadata.Minified;
      reader.readMessage(value,plugins_common_v1_metadata_pb.SQLMetadata.Minified.deserializeBinaryFromReader);
      msg.setMssql(value);
      break;
    case 3:
      var value = new plugins_common_v1_metadata_pb.SQLMetadata.Minified;
      reader.readMessage(value,plugins_common_v1_metadata_pb.SQLMetadata.Minified.deserializeBinaryFromReader);
      msg.setMysql(value);
      break;
    case 4:
      var value = new plugins_common_v1_metadata_pb.SQLMetadata.Minified;
      reader.readMessage(value,plugins_common_v1_metadata_pb.SQLMetadata.Minified.deserializeBinaryFromReader);
      msg.setPostgres(value);
      break;
    case 5:
      var value = new plugins_common_v1_metadata_pb.SQLMetadata.Minified;
      reader.readMessage(value,plugins_common_v1_metadata_pb.SQLMetadata.Minified.deserializeBinaryFromReader);
      msg.setRockset(value);
      break;
    case 6:
      var value = new plugins_common_v1_metadata_pb.SQLMetadata.Minified;
      reader.readMessage(value,plugins_common_v1_metadata_pb.SQLMetadata.Minified.deserializeBinaryFromReader);
      msg.setSnowflake(value);
      break;
    case 7:
      var value = new plugins_common_v1_metadata_pb.SQLMetadata.Minified;
      reader.readMessage(value,plugins_common_v1_metadata_pb.SQLMetadata.Minified.deserializeBinaryFromReader);
      msg.setCockroachdb(value);
      break;
    case 8:
      var value = new plugins_kafka_v1_plugin_pb.Metadata.Minified;
      reader.readMessage(value,plugins_kafka_v1_plugin_pb.Metadata.Minified.deserializeBinaryFromReader);
      msg.setKafka(value);
      break;
    case 9:
      var value = new plugins_kafka_v1_plugin_pb.Metadata.Minified;
      reader.readMessage(value,plugins_kafka_v1_plugin_pb.Metadata.Minified.deserializeBinaryFromReader);
      msg.setConfluent(value);
      break;
    case 10:
      var value = new plugins_kafka_v1_plugin_pb.Metadata.Minified;
      reader.readMessage(value,plugins_kafka_v1_plugin_pb.Metadata.Minified.deserializeBinaryFromReader);
      msg.setMsk(value);
      break;
    case 11:
      var value = new plugins_kafka_v1_plugin_pb.Metadata.Minified;
      reader.readMessage(value,plugins_kafka_v1_plugin_pb.Metadata.Minified.deserializeBinaryFromReader);
      msg.setRedpanda(value);
      break;
    case 12:
      var value = new plugins_kafka_v1_plugin_pb.Metadata.Minified;
      reader.readMessage(value,plugins_kafka_v1_plugin_pb.Metadata.Minified.deserializeBinaryFromReader);
      msg.setAivenkafka(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ai.v1.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ai.v1.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ai.v1.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.v1.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMariadb();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      plugins_common_v1_metadata_pb.SQLMetadata.Minified.serializeBinaryToWriter
    );
  }
  f = message.getMssql();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      plugins_common_v1_metadata_pb.SQLMetadata.Minified.serializeBinaryToWriter
    );
  }
  f = message.getMysql();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      plugins_common_v1_metadata_pb.SQLMetadata.Minified.serializeBinaryToWriter
    );
  }
  f = message.getPostgres();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      plugins_common_v1_metadata_pb.SQLMetadata.Minified.serializeBinaryToWriter
    );
  }
  f = message.getRockset();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      plugins_common_v1_metadata_pb.SQLMetadata.Minified.serializeBinaryToWriter
    );
  }
  f = message.getSnowflake();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      plugins_common_v1_metadata_pb.SQLMetadata.Minified.serializeBinaryToWriter
    );
  }
  f = message.getCockroachdb();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      plugins_common_v1_metadata_pb.SQLMetadata.Minified.serializeBinaryToWriter
    );
  }
  f = message.getKafka();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      plugins_kafka_v1_plugin_pb.Metadata.Minified.serializeBinaryToWriter
    );
  }
  f = message.getConfluent();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      plugins_kafka_v1_plugin_pb.Metadata.Minified.serializeBinaryToWriter
    );
  }
  f = message.getMsk();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      plugins_kafka_v1_plugin_pb.Metadata.Minified.serializeBinaryToWriter
    );
  }
  f = message.getRedpanda();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      plugins_kafka_v1_plugin_pb.Metadata.Minified.serializeBinaryToWriter
    );
  }
  f = message.getAivenkafka();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      plugins_kafka_v1_plugin_pb.Metadata.Minified.serializeBinaryToWriter
    );
  }
};


/**
 * optional plugins.common.v1.SQLMetadata.Minified mariadb = 1;
 * @return {?proto.plugins.common.v1.SQLMetadata.Minified}
 */
proto.ai.v1.Metadata.prototype.getMariadb = function() {
  return /** @type{?proto.plugins.common.v1.SQLMetadata.Minified} */ (
    jspb.Message.getWrapperField(this, plugins_common_v1_metadata_pb.SQLMetadata.Minified, 1));
};


/**
 * @param {?proto.plugins.common.v1.SQLMetadata.Minified|undefined} value
 * @return {!proto.ai.v1.Metadata} returns this
*/
proto.ai.v1.Metadata.prototype.setMariadb = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ai.v1.Metadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ai.v1.Metadata} returns this
 */
proto.ai.v1.Metadata.prototype.clearMariadb = function() {
  return this.setMariadb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ai.v1.Metadata.prototype.hasMariadb = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional plugins.common.v1.SQLMetadata.Minified mssql = 2;
 * @return {?proto.plugins.common.v1.SQLMetadata.Minified}
 */
proto.ai.v1.Metadata.prototype.getMssql = function() {
  return /** @type{?proto.plugins.common.v1.SQLMetadata.Minified} */ (
    jspb.Message.getWrapperField(this, plugins_common_v1_metadata_pb.SQLMetadata.Minified, 2));
};


/**
 * @param {?proto.plugins.common.v1.SQLMetadata.Minified|undefined} value
 * @return {!proto.ai.v1.Metadata} returns this
*/
proto.ai.v1.Metadata.prototype.setMssql = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ai.v1.Metadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ai.v1.Metadata} returns this
 */
proto.ai.v1.Metadata.prototype.clearMssql = function() {
  return this.setMssql(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ai.v1.Metadata.prototype.hasMssql = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional plugins.common.v1.SQLMetadata.Minified mysql = 3;
 * @return {?proto.plugins.common.v1.SQLMetadata.Minified}
 */
proto.ai.v1.Metadata.prototype.getMysql = function() {
  return /** @type{?proto.plugins.common.v1.SQLMetadata.Minified} */ (
    jspb.Message.getWrapperField(this, plugins_common_v1_metadata_pb.SQLMetadata.Minified, 3));
};


/**
 * @param {?proto.plugins.common.v1.SQLMetadata.Minified|undefined} value
 * @return {!proto.ai.v1.Metadata} returns this
*/
proto.ai.v1.Metadata.prototype.setMysql = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.ai.v1.Metadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ai.v1.Metadata} returns this
 */
proto.ai.v1.Metadata.prototype.clearMysql = function() {
  return this.setMysql(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ai.v1.Metadata.prototype.hasMysql = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional plugins.common.v1.SQLMetadata.Minified postgres = 4;
 * @return {?proto.plugins.common.v1.SQLMetadata.Minified}
 */
proto.ai.v1.Metadata.prototype.getPostgres = function() {
  return /** @type{?proto.plugins.common.v1.SQLMetadata.Minified} */ (
    jspb.Message.getWrapperField(this, plugins_common_v1_metadata_pb.SQLMetadata.Minified, 4));
};


/**
 * @param {?proto.plugins.common.v1.SQLMetadata.Minified|undefined} value
 * @return {!proto.ai.v1.Metadata} returns this
*/
proto.ai.v1.Metadata.prototype.setPostgres = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.ai.v1.Metadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ai.v1.Metadata} returns this
 */
proto.ai.v1.Metadata.prototype.clearPostgres = function() {
  return this.setPostgres(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ai.v1.Metadata.prototype.hasPostgres = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional plugins.common.v1.SQLMetadata.Minified rockset = 5;
 * @return {?proto.plugins.common.v1.SQLMetadata.Minified}
 */
proto.ai.v1.Metadata.prototype.getRockset = function() {
  return /** @type{?proto.plugins.common.v1.SQLMetadata.Minified} */ (
    jspb.Message.getWrapperField(this, plugins_common_v1_metadata_pb.SQLMetadata.Minified, 5));
};


/**
 * @param {?proto.plugins.common.v1.SQLMetadata.Minified|undefined} value
 * @return {!proto.ai.v1.Metadata} returns this
*/
proto.ai.v1.Metadata.prototype.setRockset = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.ai.v1.Metadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ai.v1.Metadata} returns this
 */
proto.ai.v1.Metadata.prototype.clearRockset = function() {
  return this.setRockset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ai.v1.Metadata.prototype.hasRockset = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional plugins.common.v1.SQLMetadata.Minified snowflake = 6;
 * @return {?proto.plugins.common.v1.SQLMetadata.Minified}
 */
proto.ai.v1.Metadata.prototype.getSnowflake = function() {
  return /** @type{?proto.plugins.common.v1.SQLMetadata.Minified} */ (
    jspb.Message.getWrapperField(this, plugins_common_v1_metadata_pb.SQLMetadata.Minified, 6));
};


/**
 * @param {?proto.plugins.common.v1.SQLMetadata.Minified|undefined} value
 * @return {!proto.ai.v1.Metadata} returns this
*/
proto.ai.v1.Metadata.prototype.setSnowflake = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.ai.v1.Metadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ai.v1.Metadata} returns this
 */
proto.ai.v1.Metadata.prototype.clearSnowflake = function() {
  return this.setSnowflake(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ai.v1.Metadata.prototype.hasSnowflake = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional plugins.common.v1.SQLMetadata.Minified cockroachdb = 7;
 * @return {?proto.plugins.common.v1.SQLMetadata.Minified}
 */
proto.ai.v1.Metadata.prototype.getCockroachdb = function() {
  return /** @type{?proto.plugins.common.v1.SQLMetadata.Minified} */ (
    jspb.Message.getWrapperField(this, plugins_common_v1_metadata_pb.SQLMetadata.Minified, 7));
};


/**
 * @param {?proto.plugins.common.v1.SQLMetadata.Minified|undefined} value
 * @return {!proto.ai.v1.Metadata} returns this
*/
proto.ai.v1.Metadata.prototype.setCockroachdb = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.ai.v1.Metadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ai.v1.Metadata} returns this
 */
proto.ai.v1.Metadata.prototype.clearCockroachdb = function() {
  return this.setCockroachdb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ai.v1.Metadata.prototype.hasCockroachdb = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional plugins.kafka.v1.Metadata.Minified kafka = 8;
 * @return {?proto.plugins.kafka.v1.Metadata.Minified}
 */
proto.ai.v1.Metadata.prototype.getKafka = function() {
  return /** @type{?proto.plugins.kafka.v1.Metadata.Minified} */ (
    jspb.Message.getWrapperField(this, plugins_kafka_v1_plugin_pb.Metadata.Minified, 8));
};


/**
 * @param {?proto.plugins.kafka.v1.Metadata.Minified|undefined} value
 * @return {!proto.ai.v1.Metadata} returns this
*/
proto.ai.v1.Metadata.prototype.setKafka = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.ai.v1.Metadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ai.v1.Metadata} returns this
 */
proto.ai.v1.Metadata.prototype.clearKafka = function() {
  return this.setKafka(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ai.v1.Metadata.prototype.hasKafka = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional plugins.kafka.v1.Metadata.Minified confluent = 9;
 * @return {?proto.plugins.kafka.v1.Metadata.Minified}
 */
proto.ai.v1.Metadata.prototype.getConfluent = function() {
  return /** @type{?proto.plugins.kafka.v1.Metadata.Minified} */ (
    jspb.Message.getWrapperField(this, plugins_kafka_v1_plugin_pb.Metadata.Minified, 9));
};


/**
 * @param {?proto.plugins.kafka.v1.Metadata.Minified|undefined} value
 * @return {!proto.ai.v1.Metadata} returns this
*/
proto.ai.v1.Metadata.prototype.setConfluent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.ai.v1.Metadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ai.v1.Metadata} returns this
 */
proto.ai.v1.Metadata.prototype.clearConfluent = function() {
  return this.setConfluent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ai.v1.Metadata.prototype.hasConfluent = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional plugins.kafka.v1.Metadata.Minified msk = 10;
 * @return {?proto.plugins.kafka.v1.Metadata.Minified}
 */
proto.ai.v1.Metadata.prototype.getMsk = function() {
  return /** @type{?proto.plugins.kafka.v1.Metadata.Minified} */ (
    jspb.Message.getWrapperField(this, plugins_kafka_v1_plugin_pb.Metadata.Minified, 10));
};


/**
 * @param {?proto.plugins.kafka.v1.Metadata.Minified|undefined} value
 * @return {!proto.ai.v1.Metadata} returns this
*/
proto.ai.v1.Metadata.prototype.setMsk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.ai.v1.Metadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ai.v1.Metadata} returns this
 */
proto.ai.v1.Metadata.prototype.clearMsk = function() {
  return this.setMsk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ai.v1.Metadata.prototype.hasMsk = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional plugins.kafka.v1.Metadata.Minified redpanda = 11;
 * @return {?proto.plugins.kafka.v1.Metadata.Minified}
 */
proto.ai.v1.Metadata.prototype.getRedpanda = function() {
  return /** @type{?proto.plugins.kafka.v1.Metadata.Minified} */ (
    jspb.Message.getWrapperField(this, plugins_kafka_v1_plugin_pb.Metadata.Minified, 11));
};


/**
 * @param {?proto.plugins.kafka.v1.Metadata.Minified|undefined} value
 * @return {!proto.ai.v1.Metadata} returns this
*/
proto.ai.v1.Metadata.prototype.setRedpanda = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.ai.v1.Metadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ai.v1.Metadata} returns this
 */
proto.ai.v1.Metadata.prototype.clearRedpanda = function() {
  return this.setRedpanda(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ai.v1.Metadata.prototype.hasRedpanda = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional plugins.kafka.v1.Metadata.Minified aivenkafka = 12;
 * @return {?proto.plugins.kafka.v1.Metadata.Minified}
 */
proto.ai.v1.Metadata.prototype.getAivenkafka = function() {
  return /** @type{?proto.plugins.kafka.v1.Metadata.Minified} */ (
    jspb.Message.getWrapperField(this, plugins_kafka_v1_plugin_pb.Metadata.Minified, 12));
};


/**
 * @param {?proto.plugins.kafka.v1.Metadata.Minified|undefined} value
 * @return {!proto.ai.v1.Metadata} returns this
*/
proto.ai.v1.Metadata.prototype.setAivenkafka = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.ai.v1.Metadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ai.v1.Metadata} returns this
 */
proto.ai.v1.Metadata.prototype.clearAivenkafka = function() {
  return this.setAivenkafka(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ai.v1.Metadata.prototype.hasAivenkafka = function() {
  return jspb.Message.getField(this, 12) != null;
};


goog.object.extend(exports, proto.ai.v1);
