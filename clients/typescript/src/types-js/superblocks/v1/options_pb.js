// source: superblocks/v1/options.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

var google_protobuf_descriptor_pb = require('google-protobuf/google/protobuf/descriptor_pb');
goog.object.extend(proto, google_protobuf_descriptor_pb);
goog.exportSymbol('proto.superblocks.v1.IntegrationOptions', null, global);
goog.exportSymbol('proto.superblocks.v1.Integrations', null, global);
goog.exportSymbol('proto.superblocks.v1.integrationOptions', null, global);
goog.exportSymbol('proto.superblocks.v1.integrations', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.superblocks.v1.Integrations = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.superblocks.v1.Integrations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.superblocks.v1.Integrations.displayName = 'proto.superblocks.v1.Integrations';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.superblocks.v1.IntegrationOptions = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.superblocks.v1.IntegrationOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.superblocks.v1.IntegrationOptions.displayName = 'proto.superblocks.v1.IntegrationOptions';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.superblocks.v1.Integrations.prototype.toObject = function (opt_includeInstance) {
    return proto.superblocks.v1.Integrations.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.superblocks.v1.Integrations} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.superblocks.v1.Integrations.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        registry: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.superblocks.v1.Integrations}
 */
proto.superblocks.v1.Integrations.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.superblocks.v1.Integrations();
  return proto.superblocks.v1.Integrations.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.superblocks.v1.Integrations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.superblocks.v1.Integrations}
 */
proto.superblocks.v1.Integrations.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setRegistry(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.superblocks.v1.Integrations.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.superblocks.v1.Integrations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.superblocks.v1.Integrations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.superblocks.v1.Integrations.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getRegistry();
  if (f) {
    writer.writeBool(1, f);
  }
};

/**
 * optional bool registry = 1;
 * @return {boolean}
 */
proto.superblocks.v1.Integrations.prototype.getRegistry = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};

/**
 * @param {boolean} value
 * @return {!proto.superblocks.v1.Integrations} returns this
 */
proto.superblocks.v1.Integrations.prototype.setRegistry = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.superblocks.v1.IntegrationOptions.prototype.toObject = function (opt_includeInstance) {
    return proto.superblocks.v1.IntegrationOptions.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.superblocks.v1.IntegrationOptions} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.superblocks.v1.IntegrationOptions.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        plugintype: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.superblocks.v1.IntegrationOptions}
 */
proto.superblocks.v1.IntegrationOptions.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.superblocks.v1.IntegrationOptions();
  return proto.superblocks.v1.IntegrationOptions.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.superblocks.v1.IntegrationOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.superblocks.v1.IntegrationOptions}
 */
proto.superblocks.v1.IntegrationOptions.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPlugintype(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.superblocks.v1.IntegrationOptions.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.superblocks.v1.IntegrationOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.superblocks.v1.IntegrationOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.superblocks.v1.IntegrationOptions.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPlugintype();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string pluginType = 2;
 * @return {string}
 */
proto.superblocks.v1.IntegrationOptions.prototype.getPlugintype = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.superblocks.v1.IntegrationOptions} returns this
 */
proto.superblocks.v1.IntegrationOptions.prototype.setPlugintype = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * A tuple of {field number, class constructor} for the extension
 * field named `integrations`.
 * @type {!jspb.ExtensionFieldInfo<!proto.superblocks.v1.Integrations>}
 */
proto.superblocks.v1.integrations = new jspb.ExtensionFieldInfo(
  50000,
  { integrations: 0 },
  proto.superblocks.v1.Integrations,
  /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (proto.superblocks.v1.Integrations.toObject),
  0
);

google_protobuf_descriptor_pb.MessageOptions.extensionsBinary[50000] = new jspb.ExtensionFieldBinaryInfo(
  proto.superblocks.v1.integrations,
  jspb.BinaryReader.prototype.readMessage,
  jspb.BinaryWriter.prototype.writeMessage,
  proto.superblocks.v1.Integrations.serializeBinaryToWriter,
  proto.superblocks.v1.Integrations.deserializeBinaryFromReader,
  false
);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_descriptor_pb.MessageOptions.extensions[50000] = proto.superblocks.v1.integrations;

/**
 * A tuple of {field number, class constructor} for the extension
 * field named `integrationOptions`.
 * @type {!jspb.ExtensionFieldInfo<!proto.superblocks.v1.IntegrationOptions>}
 */
proto.superblocks.v1.integrationOptions = new jspb.ExtensionFieldInfo(
  60000,
  { integrationOptions: 0 },
  proto.superblocks.v1.IntegrationOptions,
  /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (proto.superblocks.v1.IntegrationOptions.toObject),
  0
);

google_protobuf_descriptor_pb.FieldOptions.extensionsBinary[60000] = new jspb.ExtensionFieldBinaryInfo(
  proto.superblocks.v1.integrationOptions,
  jspb.BinaryReader.prototype.readMessage,
  jspb.BinaryWriter.prototype.writeMessage,
  proto.superblocks.v1.IntegrationOptions.serializeBinaryToWriter,
  proto.superblocks.v1.IntegrationOptions.deserializeBinaryFromReader,
  false
);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
google_protobuf_descriptor_pb.FieldOptions.extensions[60000] = proto.superblocks.v1.integrationOptions;

goog.object.extend(exports, proto.superblocks.v1);
