// source: plugins/cosmosdb/v1/plugin.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

var plugins_common_v1_auth_pb = require('../../../plugins/common/v1/auth_pb');
goog.object.extend(proto, plugins_common_v1_auth_pb);
var plugins_common_v1_plugin_pb = require('../../../plugins/common/v1/plugin_pb');
goog.object.extend(proto, plugins_common_v1_plugin_pb);
goog.exportSymbol('proto.plugins.cosmosdb.v1.Plugin', null, global);
goog.exportSymbol('proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection', null, global);
goog.exportSymbol('proto.plugins.cosmosdb.v1.Plugin.CosmosdbActionCase', null, global);
goog.exportSymbol('proto.plugins.cosmosdb.v1.Plugin.Metadata', null, global);
goog.exportSymbol('proto.plugins.cosmosdb.v1.Plugin.Metadata.Container', null, global);
goog.exportSymbol('proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey', null, global);
goog.exportSymbol('proto.plugins.cosmosdb.v1.Plugin.PointOperation', null, global);
goog.exportSymbol('proto.plugins.cosmosdb.v1.Plugin.PointOperation.ActionCase', null, global);
goog.exportSymbol('proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create', null, global);
goog.exportSymbol('proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete', null, global);
goog.exportSymbol('proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read', null, global);
goog.exportSymbol('proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace', null, global);
goog.exportSymbol('proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert', null, global);
goog.exportSymbol('proto.plugins.cosmosdb.v1.Plugin.Sql', null, global);
goog.exportSymbol('proto.plugins.cosmosdb.v1.Plugin.Sql.ActionCase', null, global);
goog.exportSymbol('proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.cosmosdb.v1.Plugin = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.plugins.cosmosdb.v1.Plugin.oneofGroups_);
};
goog.inherits(proto.plugins.cosmosdb.v1.Plugin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.cosmosdb.v1.Plugin.displayName = 'proto.plugins.cosmosdb.v1.Plugin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.displayName = 'proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.cosmosdb.v1.Plugin.Metadata.repeatedFields_, null);
};
goog.inherits(proto.plugins.cosmosdb.v1.Plugin.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.cosmosdb.v1.Plugin.Metadata.displayName = 'proto.plugins.cosmosdb.v1.Plugin.Metadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.cosmosdb.v1.Plugin.Metadata.Container, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.displayName = 'proto.plugins.cosmosdb.v1.Plugin.Metadata.Container';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.repeatedFields_, null);
};
goog.inherits(proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.displayName =
    'proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.cosmosdb.v1.Plugin.Sql = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.plugins.cosmosdb.v1.Plugin.Sql.oneofGroups_);
};
goog.inherits(proto.plugins.cosmosdb.v1.Plugin.Sql, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.cosmosdb.v1.Plugin.Sql.displayName = 'proto.plugins.cosmosdb.v1.Plugin.Sql';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.displayName = 'proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.plugins.cosmosdb.v1.Plugin.PointOperation.oneofGroups_);
};
goog.inherits(proto.plugins.cosmosdb.v1.Plugin.PointOperation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.displayName = 'proto.plugins.cosmosdb.v1.Plugin.PointOperation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read.displayName = 'proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete.displayName = 'proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace.displayName = 'proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert.displayName = 'proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create.displayName = 'proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.plugins.cosmosdb.v1.Plugin.oneofGroups_ = [[5, 6]];

/**
 * @enum {number}
 */
proto.plugins.cosmosdb.v1.Plugin.CosmosdbActionCase = {
  COSMOSDB_ACTION_NOT_SET: 0,
  SQL: 5,
  POINT_OPERATION: 6
};

/**
 * @return {proto.plugins.cosmosdb.v1.Plugin.CosmosdbActionCase}
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.getCosmosdbActionCase = function () {
  return /** @type {proto.plugins.cosmosdb.v1.Plugin.CosmosdbActionCase} */ (
    jspb.Message.computeOneofCase(this, proto.plugins.cosmosdb.v1.Plugin.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.cosmosdb.v1.Plugin.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.cosmosdb.v1.Plugin.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.cosmosdb.v1.Plugin} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.cosmosdb.v1.Plugin.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ''),
        dynamicWorkflowConfiguration:
          (f = msg.getDynamicWorkflowConfiguration()) &&
          plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration.toObject(includeInstance, f),
        connection: (f = msg.getConnection()) && proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.toObject(includeInstance, f),
        sql: (f = msg.getSql()) && proto.plugins.cosmosdb.v1.Plugin.Sql.toObject(includeInstance, f),
        pointOperation: (f = msg.getPointOperation()) && proto.plugins.cosmosdb.v1.Plugin.PointOperation.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.cosmosdb.v1.Plugin}
 */
proto.plugins.cosmosdb.v1.Plugin.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.cosmosdb.v1.Plugin();
  return proto.plugins.cosmosdb.v1.Plugin.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.cosmosdb.v1.Plugin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.cosmosdb.v1.Plugin}
 */
proto.plugins.cosmosdb.v1.Plugin.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 2:
        var value = new plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration();
        reader.readMessage(value, plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration.deserializeBinaryFromReader);
        msg.setDynamicWorkflowConfiguration(value);
        break;
      case 3:
        var value = new proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection();
        reader.readMessage(value, proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.deserializeBinaryFromReader);
        msg.setConnection(value);
        break;
      case 5:
        var value = new proto.plugins.cosmosdb.v1.Plugin.Sql();
        reader.readMessage(value, proto.plugins.cosmosdb.v1.Plugin.Sql.deserializeBinaryFromReader);
        msg.setSql(value);
        break;
      case 6:
        var value = new proto.plugins.cosmosdb.v1.Plugin.PointOperation();
        reader.readMessage(value, proto.plugins.cosmosdb.v1.Plugin.PointOperation.deserializeBinaryFromReader);
        msg.setPointOperation(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.cosmosdb.v1.Plugin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.cosmosdb.v1.Plugin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.cosmosdb.v1.Plugin.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(1, f);
  }
  f = message.getDynamicWorkflowConfiguration();
  if (f != null) {
    writer.writeMessage(2, f, plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration.serializeBinaryToWriter);
  }
  f = message.getConnection();
  if (f != null) {
    writer.writeMessage(3, f, proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.serializeBinaryToWriter);
  }
  f = message.getSql();
  if (f != null) {
    writer.writeMessage(5, f, proto.plugins.cosmosdb.v1.Plugin.Sql.serializeBinaryToWriter);
  }
  f = message.getPointOperation();
  if (f != null) {
    writer.writeMessage(6, f, proto.plugins.cosmosdb.v1.Plugin.PointOperation.serializeBinaryToWriter);
  }
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        host: jspb.Message.getFieldWithDefault(msg, 1, ''),
        port: jspb.Message.getFieldWithDefault(msg, 2, 0),
        databaseId: jspb.Message.getFieldWithDefault(msg, 3, ''),
        auth: (f = msg.getAuth()) && plugins_common_v1_auth_pb.Azure.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection}
 */
proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection();
  return proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection}
 */
proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setHost(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPort(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setDatabaseId(value);
        break;
      case 4:
        var value = new plugins_common_v1_auth_pb.Azure();
        reader.readMessage(value, plugins_common_v1_auth_pb.Azure.deserializeBinaryFromReader);
        msg.setAuth(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(2, f);
  }
  f = message.getDatabaseId();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(4, f, plugins_common_v1_auth_pb.Azure.serializeBinaryToWriter);
  }
};

/**
 * optional string host = 1;
 * @return {string}
 */
proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.prototype.getHost = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.prototype.setHost = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.prototype.getPort = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.prototype.setPort = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional string database_id = 3;
 * @return {string}
 */
proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.prototype.getDatabaseId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.prototype.setDatabaseId = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional plugins.common.v1.Azure auth = 4;
 * @return {?proto.plugins.common.v1.Azure}
 */
proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.prototype.getAuth = function () {
  return /** @type{?proto.plugins.common.v1.Azure} */ (jspb.Message.getWrapperField(this, plugins_common_v1_auth_pb.Azure, 4));
};

/**
 * @param {?proto.plugins.common.v1.Azure|undefined} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.prototype.setAuth = function (value) {
  return jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.prototype.clearAuth = function () {
  return this.setAuth(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection.prototype.hasAuth = function () {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.cosmosdb.v1.Plugin.Metadata.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.cosmosdb.v1.Plugin.Metadata.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.cosmosdb.v1.Plugin.Metadata} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.cosmosdb.v1.Plugin.Metadata.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        containersList: jspb.Message.toObjectList(
          msg.getContainersList(),
          proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.toObject,
          includeInstance
        )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Metadata}
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.cosmosdb.v1.Plugin.Metadata();
  return proto.plugins.cosmosdb.v1.Plugin.Metadata.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Metadata}
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.plugins.cosmosdb.v1.Plugin.Metadata.Container();
        reader.readMessage(value, proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.deserializeBinaryFromReader);
        msg.addContainers(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.cosmosdb.v1.Plugin.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getContainersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.serializeBinaryToWriter);
  }
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
        partitionKey:
          (f = msg.getPartitionKey()) && proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container}
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.cosmosdb.v1.Plugin.Metadata.Container();
  return proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container}
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 2:
        var value = new proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey();
        reader.readMessage(value, proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.deserializeBinaryFromReader);
        msg.setPartitionKey(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPartitionKey();
  if (f != null) {
    writer.writeMessage(2, f, proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.serializeBinaryToWriter);
  }
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        pathsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
        kind: jspb.Message.getFieldWithDefault(msg, 2, ''),
        version: jspb.Message.getFieldWithDefault(msg, 3, 0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey}
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey();
  return proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey}
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.addPaths(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setKind(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setVersion(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPathsList();
  if (f.length > 0) {
    writer.writeRepeatedString(1, f);
  }
  f = message.getKind();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(3, f);
  }
};

/**
 * repeated string paths = 1;
 * @return {!Array<string>}
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.prototype.getPathsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.prototype.setPathsList = function (value) {
  return jspb.Message.setField(this, 1, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.prototype.addPaths = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.prototype.clearPathsList = function () {
  return this.setPathsList([]);
};

/**
 * optional string kind = 2;
 * @return {string}
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.prototype.getKind = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.prototype.setKind = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional int32 version = 3;
 * @return {number}
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.prototype.getVersion = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.prototype.setVersion = function (value) {
  return jspb.Message.setField(this, 3, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.prototype.clearVersion = function () {
  return jspb.Message.setField(this, 3, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey.prototype.hasVersion = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional PartitionKey partition_key = 2;
 * @return {?proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey}
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.prototype.getPartitionKey = function () {
  return /** @type{?proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey} */ (
    jspb.Message.getWrapperField(this, proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey, 2)
  );
};

/**
 * @param {?proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey|undefined} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.prototype.setPartitionKey = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.prototype.clearPartitionKey = function () {
  return this.setPartitionKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.Container.prototype.hasPartitionKey = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * repeated Container containers = 1;
 * @return {!Array<!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container>}
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.prototype.getContainersList = function () {
  return /** @type{!Array<!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plugins.cosmosdb.v1.Plugin.Metadata.Container, 1)
  );
};

/**
 * @param {!Array<!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container>} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Metadata} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.prototype.setContainersList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Metadata.Container}
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.prototype.addContainers = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.plugins.cosmosdb.v1.Plugin.Metadata.Container, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Metadata} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.Metadata.prototype.clearContainersList = function () {
  return this.setContainersList([]);
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.ActionCase = {
  ACTION_NOT_SET: 0,
  SINGLETON: 1
};

/**
 * @return {proto.plugins.cosmosdb.v1.Plugin.Sql.ActionCase}
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.prototype.getActionCase = function () {
  return /** @type {proto.plugins.cosmosdb.v1.Plugin.Sql.ActionCase} */ (
    jspb.Message.computeOneofCase(this, proto.plugins.cosmosdb.v1.Plugin.Sql.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.cosmosdb.v1.Plugin.Sql.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.cosmosdb.v1.Plugin.Sql.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.cosmosdb.v1.Plugin.Sql} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.cosmosdb.v1.Plugin.Sql.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        singleton: (f = msg.getSingleton()) && proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Sql}
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.cosmosdb.v1.Plugin.Sql();
  return proto.plugins.cosmosdb.v1.Plugin.Sql.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.Sql} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Sql}
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton();
        reader.readMessage(value, proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.deserializeBinaryFromReader);
        msg.setSingleton(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.cosmosdb.v1.Plugin.Sql.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.Sql} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSingleton();
  if (f != null) {
    writer.writeMessage(1, f, proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.serializeBinaryToWriter);
  }
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        containerId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        query: jspb.Message.getFieldWithDefault(msg, 2, ''),
        crossPartition: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
        partitionKey: jspb.Message.getFieldWithDefault(msg, 4, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton}
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton();
  return proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton}
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setContainerId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setQuery(value);
        break;
      case 3:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setCrossPartition(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setPartitionKey(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getContainerId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getCrossPartition();
  if (f) {
    writer.writeBool(3, f);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(4, f);
  }
};

/**
 * optional string container_id = 1;
 * @return {string}
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.prototype.getContainerId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.prototype.setContainerId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string query = 2;
 * @return {string}
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.prototype.getQuery = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.prototype.setQuery = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional bool cross_partition = 3;
 * @return {boolean}
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.prototype.getCrossPartition = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};

/**
 * @param {boolean} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.prototype.setCrossPartition = function (value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};

/**
 * optional string partition_key = 4;
 * @return {string}
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.prototype.getPartitionKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.prototype.setPartitionKey = function (value) {
  return jspb.Message.setField(this, 4, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.prototype.clearPartitionKey = function () {
  return jspb.Message.setField(this, 4, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton.prototype.hasPartitionKey = function () {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional Singleton singleton = 1;
 * @return {?proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton}
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.prototype.getSingleton = function () {
  return /** @type{?proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton} */ (
    jspb.Message.getWrapperField(this, proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton, 1)
  );
};

/**
 * @param {?proto.plugins.cosmosdb.v1.Plugin.Sql.Singleton|undefined} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Sql} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.prototype.setSingleton = function (value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.plugins.cosmosdb.v1.Plugin.Sql.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.Sql} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.prototype.clearSingleton = function () {
  return this.setSingleton(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.cosmosdb.v1.Plugin.Sql.prototype.hasSingleton = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.oneofGroups_ = [[2, 3, 4, 5, 6]];

/**
 * @enum {number}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.ActionCase = {
  ACTION_NOT_SET: 0,
  READ: 2,
  REPLACE: 3,
  UPSERT: 4,
  DELETE: 5,
  CREATE: 6
};

/**
 * @return {proto.plugins.cosmosdb.v1.Plugin.PointOperation.ActionCase}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.getActionCase = function () {
  return /** @type {proto.plugins.cosmosdb.v1.Plugin.PointOperation.ActionCase} */ (
    jspb.Message.computeOneofCase(this, proto.plugins.cosmosdb.v1.Plugin.PointOperation.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.cosmosdb.v1.Plugin.PointOperation.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.cosmosdb.v1.Plugin.PointOperation} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        containerId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        read: (f = msg.getRead()) && proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read.toObject(includeInstance, f),
        replace: (f = msg.getReplace()) && proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace.toObject(includeInstance, f),
        upsert: (f = msg.getUpsert()) && proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert.toObject(includeInstance, f),
        pb_delete: (f = msg.getDelete()) && proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete.toObject(includeInstance, f),
        create: (f = msg.getCreate()) && proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.cosmosdb.v1.Plugin.PointOperation();
  return proto.plugins.cosmosdb.v1.Plugin.PointOperation.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.PointOperation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setContainerId(value);
        break;
      case 2:
        var value = new proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read();
        reader.readMessage(value, proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read.deserializeBinaryFromReader);
        msg.setRead(value);
        break;
      case 3:
        var value = new proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace();
        reader.readMessage(value, proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace.deserializeBinaryFromReader);
        msg.setReplace(value);
        break;
      case 4:
        var value = new proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert();
        reader.readMessage(value, proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert.deserializeBinaryFromReader);
        msg.setUpsert(value);
        break;
      case 5:
        var value = new proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete();
        reader.readMessage(value, proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete.deserializeBinaryFromReader);
        msg.setDelete(value);
        break;
      case 6:
        var value = new proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create();
        reader.readMessage(value, proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create.deserializeBinaryFromReader);
        msg.setCreate(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.PointOperation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getContainerId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getRead();
  if (f != null) {
    writer.writeMessage(2, f, proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read.serializeBinaryToWriter);
  }
  f = message.getReplace();
  if (f != null) {
    writer.writeMessage(3, f, proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace.serializeBinaryToWriter);
  }
  f = message.getUpsert();
  if (f != null) {
    writer.writeMessage(4, f, proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert.serializeBinaryToWriter);
  }
  f = message.getDelete();
  if (f != null) {
    writer.writeMessage(5, f, proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete.serializeBinaryToWriter);
  }
  f = message.getCreate();
  if (f != null) {
    writer.writeMessage(6, f, proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create.serializeBinaryToWriter);
  }
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
        partitionKey: jspb.Message.getFieldWithDefault(msg, 3, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read();
  return proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setPartitionKey(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(3, f);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string partition_key = 3;
 * @return {string}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read.prototype.getPartitionKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read.prototype.setPartitionKey = function (value) {
  return jspb.Message.setField(this, 3, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read.prototype.clearPartitionKey = function () {
  return jspb.Message.setField(this, 3, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read.prototype.hasPartitionKey = function () {
  return jspb.Message.getField(this, 3) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
        partitionKey: jspb.Message.getFieldWithDefault(msg, 3, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete();
  return proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setPartitionKey(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(3, f);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string partition_key = 3;
 * @return {string}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete.prototype.getPartitionKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete.prototype.setPartitionKey = function (value) {
  return jspb.Message.setField(this, 3, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete.prototype.clearPartitionKey = function () {
  return jspb.Message.setField(this, 3, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete.prototype.hasPartitionKey = function () {
  return jspb.Message.getField(this, 3) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        body: jspb.Message.getFieldWithDefault(msg, 1, ''),
        partitionKey: jspb.Message.getFieldWithDefault(msg, 3, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace();
  return proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setBody(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setPartitionKey(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(3, f);
  }
};

/**
 * optional string body = 1;
 * @return {string}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace.prototype.getBody = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace.prototype.setBody = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string partition_key = 3;
 * @return {string}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace.prototype.getPartitionKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace.prototype.setPartitionKey = function (value) {
  return jspb.Message.setField(this, 3, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace.prototype.clearPartitionKey = function () {
  return jspb.Message.setField(this, 3, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace.prototype.hasPartitionKey = function () {
  return jspb.Message.getField(this, 3) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        body: jspb.Message.getFieldWithDefault(msg, 1, ''),
        partitionKey: jspb.Message.getFieldWithDefault(msg, 3, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert();
  return proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setBody(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setPartitionKey(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(3, f);
  }
};

/**
 * optional string body = 1;
 * @return {string}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert.prototype.getBody = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert.prototype.setBody = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string partition_key = 3;
 * @return {string}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert.prototype.getPartitionKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert.prototype.setPartitionKey = function (value) {
  return jspb.Message.setField(this, 3, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert.prototype.clearPartitionKey = function () {
  return jspb.Message.setField(this, 3, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert.prototype.hasPartitionKey = function () {
  return jspb.Message.getField(this, 3) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        body: jspb.Message.getFieldWithDefault(msg, 1, ''),
        partitionKey: jspb.Message.getFieldWithDefault(msg, 3, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create();
  return proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setBody(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setPartitionKey(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(3, f);
  }
};

/**
 * optional string body = 1;
 * @return {string}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create.prototype.getBody = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create.prototype.setBody = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string partition_key = 3;
 * @return {string}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create.prototype.getPartitionKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create.prototype.setPartitionKey = function (value) {
  return jspb.Message.setField(this, 3, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create.prototype.clearPartitionKey = function () {
  return jspb.Message.setField(this, 3, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create.prototype.hasPartitionKey = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional string container_id = 1;
 * @return {string}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.getContainerId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.setContainerId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional Read read = 2;
 * @return {?proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.getRead = function () {
  return /** @type{?proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read} */ (
    jspb.Message.getWrapperField(this, proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read, 2)
  );
};

/**
 * @param {?proto.plugins.cosmosdb.v1.Plugin.PointOperation.Read|undefined} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.setRead = function (value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.plugins.cosmosdb.v1.Plugin.PointOperation.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.clearRead = function () {
  return this.setRead(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.hasRead = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional Replace replace = 3;
 * @return {?proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.getReplace = function () {
  return /** @type{?proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace} */ (
    jspb.Message.getWrapperField(this, proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace, 3)
  );
};

/**
 * @param {?proto.plugins.cosmosdb.v1.Plugin.PointOperation.Replace|undefined} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.setReplace = function (value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.plugins.cosmosdb.v1.Plugin.PointOperation.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.clearReplace = function () {
  return this.setReplace(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.hasReplace = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional Upsert upsert = 4;
 * @return {?proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.getUpsert = function () {
  return /** @type{?proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert} */ (
    jspb.Message.getWrapperField(this, proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert, 4)
  );
};

/**
 * @param {?proto.plugins.cosmosdb.v1.Plugin.PointOperation.Upsert|undefined} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.setUpsert = function (value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.plugins.cosmosdb.v1.Plugin.PointOperation.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.clearUpsert = function () {
  return this.setUpsert(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.hasUpsert = function () {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional Delete delete = 5;
 * @return {?proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.getDelete = function () {
  return /** @type{?proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete} */ (
    jspb.Message.getWrapperField(this, proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete, 5)
  );
};

/**
 * @param {?proto.plugins.cosmosdb.v1.Plugin.PointOperation.Delete|undefined} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.setDelete = function (value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.plugins.cosmosdb.v1.Plugin.PointOperation.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.clearDelete = function () {
  return this.setDelete(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.hasDelete = function () {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * optional Create create = 6;
 * @return {?proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.getCreate = function () {
  return /** @type{?proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create} */ (
    jspb.Message.getWrapperField(this, proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create, 6)
  );
};

/**
 * @param {?proto.plugins.cosmosdb.v1.Plugin.PointOperation.Create|undefined} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.setCreate = function (value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.plugins.cosmosdb.v1.Plugin.PointOperation.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.cosmosdb.v1.Plugin.PointOperation} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.clearCreate = function () {
  return this.setCreate(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.cosmosdb.v1.Plugin.PointOperation.prototype.hasCreate = function () {
  return jspb.Message.getField(this, 6) != null;
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.setName = function (value) {
  return jspb.Message.setField(this, 1, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.cosmosdb.v1.Plugin} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.clearName = function () {
  return jspb.Message.setField(this, 1, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.hasName = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional plugins.common.v1.DynamicWorkflowConfiguration dynamic_workflow_configuration = 2;
 * @return {?proto.plugins.common.v1.DynamicWorkflowConfiguration}
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.getDynamicWorkflowConfiguration = function () {
  return /** @type{?proto.plugins.common.v1.DynamicWorkflowConfiguration} */ (
    jspb.Message.getWrapperField(this, plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration, 2)
  );
};

/**
 * @param {?proto.plugins.common.v1.DynamicWorkflowConfiguration|undefined} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.setDynamicWorkflowConfiguration = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.cosmosdb.v1.Plugin} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.clearDynamicWorkflowConfiguration = function () {
  return this.setDynamicWorkflowConfiguration(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.hasDynamicWorkflowConfiguration = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional CosmosDbConnection connection = 3;
 * @return {?proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection}
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.getConnection = function () {
  return /** @type{?proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection} */ (
    jspb.Message.getWrapperField(this, proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection, 3)
  );
};

/**
 * @param {?proto.plugins.cosmosdb.v1.Plugin.CosmosDbConnection|undefined} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.setConnection = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.cosmosdb.v1.Plugin} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.clearConnection = function () {
  return this.setConnection(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.hasConnection = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional Sql sql = 5;
 * @return {?proto.plugins.cosmosdb.v1.Plugin.Sql}
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.getSql = function () {
  return /** @type{?proto.plugins.cosmosdb.v1.Plugin.Sql} */ (jspb.Message.getWrapperField(this, proto.plugins.cosmosdb.v1.Plugin.Sql, 5));
};

/**
 * @param {?proto.plugins.cosmosdb.v1.Plugin.Sql|undefined} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.setSql = function (value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.plugins.cosmosdb.v1.Plugin.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.cosmosdb.v1.Plugin} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.clearSql = function () {
  return this.setSql(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.hasSql = function () {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * optional PointOperation point_operation = 6;
 * @return {?proto.plugins.cosmosdb.v1.Plugin.PointOperation}
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.getPointOperation = function () {
  return /** @type{?proto.plugins.cosmosdb.v1.Plugin.PointOperation} */ (
    jspb.Message.getWrapperField(this, proto.plugins.cosmosdb.v1.Plugin.PointOperation, 6)
  );
};

/**
 * @param {?proto.plugins.cosmosdb.v1.Plugin.PointOperation|undefined} value
 * @return {!proto.plugins.cosmosdb.v1.Plugin} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.setPointOperation = function (value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.plugins.cosmosdb.v1.Plugin.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.cosmosdb.v1.Plugin} returns this
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.clearPointOperation = function () {
  return this.setPointOperation(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.cosmosdb.v1.Plugin.prototype.hasPointOperation = function () {
  return jspb.Message.getField(this, 6) != null;
};

goog.object.extend(exports, proto.plugins.cosmosdb.v1);
