// source: plugins/pinecone/v1/plugin.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

var plugins_common_v1_plugin_pb = require('../../../plugins/common/v1/plugin_pb');
goog.object.extend(proto, plugins_common_v1_plugin_pb);
goog.exportSymbol('proto.plugins.pinecone.v1.Plugin', null, global);
goog.exportSymbol('proto.plugins.pinecone.v1.Plugin.ActionCase', null, global);
goog.exportSymbol('proto.plugins.pinecone.v1.Plugin.Connection', null, global);
goog.exportSymbol('proto.plugins.pinecone.v1.Plugin.CreateIndex', null, global);
goog.exportSymbol('proto.plugins.pinecone.v1.Plugin.ListIndexes', null, global);
goog.exportSymbol('proto.plugins.pinecone.v1.Plugin.Query', null, global);
goog.exportSymbol('proto.plugins.pinecone.v1.Plugin.UpsertVector', null, global);
goog.exportSymbol('proto.plugins.pinecone.v1.Plugin.UpsertVector.DataCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.pinecone.v1.Plugin = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.plugins.pinecone.v1.Plugin.oneofGroups_);
};
goog.inherits(proto.plugins.pinecone.v1.Plugin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.pinecone.v1.Plugin.displayName = 'proto.plugins.pinecone.v1.Plugin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.pinecone.v1.Plugin.Connection = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.pinecone.v1.Plugin.Connection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.pinecone.v1.Plugin.Connection.displayName = 'proto.plugins.pinecone.v1.Plugin.Connection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.pinecone.v1.Plugin.ListIndexes = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.pinecone.v1.Plugin.ListIndexes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.pinecone.v1.Plugin.ListIndexes.displayName = 'proto.plugins.pinecone.v1.Plugin.ListIndexes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.pinecone.v1.Plugin.CreateIndex = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.pinecone.v1.Plugin.CreateIndex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.pinecone.v1.Plugin.CreateIndex.displayName = 'proto.plugins.pinecone.v1.Plugin.CreateIndex';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.pinecone.v1.Plugin.UpsertVector = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.plugins.pinecone.v1.Plugin.UpsertVector.oneofGroups_);
};
goog.inherits(proto.plugins.pinecone.v1.Plugin.UpsertVector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.pinecone.v1.Plugin.UpsertVector.displayName = 'proto.plugins.pinecone.v1.Plugin.UpsertVector';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.pinecone.v1.Plugin.Query = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.pinecone.v1.Plugin.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.pinecone.v1.Plugin.Query.displayName = 'proto.plugins.pinecone.v1.Plugin.Query';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.plugins.pinecone.v1.Plugin.oneofGroups_ = [[4, 5, 6, 7]];

/**
 * @enum {number}
 */
proto.plugins.pinecone.v1.Plugin.ActionCase = {
  ACTION_NOT_SET: 0,
  LIST_INDEXES: 4,
  CREATE_INDEX: 5,
  UPSERT_VECTOR: 6,
  QUERY: 7
};

/**
 * @return {proto.plugins.pinecone.v1.Plugin.ActionCase}
 */
proto.plugins.pinecone.v1.Plugin.prototype.getActionCase = function () {
  return /** @type {proto.plugins.pinecone.v1.Plugin.ActionCase} */ (
    jspb.Message.computeOneofCase(this, proto.plugins.pinecone.v1.Plugin.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.pinecone.v1.Plugin.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.pinecone.v1.Plugin.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.pinecone.v1.Plugin} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.pinecone.v1.Plugin.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ''),
        dynamicWorkflowConfiguration:
          (f = msg.getDynamicWorkflowConfiguration()) &&
          plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration.toObject(includeInstance, f),
        connection: (f = msg.getConnection()) && proto.plugins.pinecone.v1.Plugin.Connection.toObject(includeInstance, f),
        listIndexes: (f = msg.getListIndexes()) && proto.plugins.pinecone.v1.Plugin.ListIndexes.toObject(includeInstance, f),
        createIndex: (f = msg.getCreateIndex()) && proto.plugins.pinecone.v1.Plugin.CreateIndex.toObject(includeInstance, f),
        upsertVector: (f = msg.getUpsertVector()) && proto.plugins.pinecone.v1.Plugin.UpsertVector.toObject(includeInstance, f),
        query: (f = msg.getQuery()) && proto.plugins.pinecone.v1.Plugin.Query.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.pinecone.v1.Plugin}
 */
proto.plugins.pinecone.v1.Plugin.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.pinecone.v1.Plugin();
  return proto.plugins.pinecone.v1.Plugin.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.pinecone.v1.Plugin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.pinecone.v1.Plugin}
 */
proto.plugins.pinecone.v1.Plugin.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 2:
        var value = new plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration();
        reader.readMessage(value, plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration.deserializeBinaryFromReader);
        msg.setDynamicWorkflowConfiguration(value);
        break;
      case 3:
        var value = new proto.plugins.pinecone.v1.Plugin.Connection();
        reader.readMessage(value, proto.plugins.pinecone.v1.Plugin.Connection.deserializeBinaryFromReader);
        msg.setConnection(value);
        break;
      case 4:
        var value = new proto.plugins.pinecone.v1.Plugin.ListIndexes();
        reader.readMessage(value, proto.plugins.pinecone.v1.Plugin.ListIndexes.deserializeBinaryFromReader);
        msg.setListIndexes(value);
        break;
      case 5:
        var value = new proto.plugins.pinecone.v1.Plugin.CreateIndex();
        reader.readMessage(value, proto.plugins.pinecone.v1.Plugin.CreateIndex.deserializeBinaryFromReader);
        msg.setCreateIndex(value);
        break;
      case 6:
        var value = new proto.plugins.pinecone.v1.Plugin.UpsertVector();
        reader.readMessage(value, proto.plugins.pinecone.v1.Plugin.UpsertVector.deserializeBinaryFromReader);
        msg.setUpsertVector(value);
        break;
      case 7:
        var value = new proto.plugins.pinecone.v1.Plugin.Query();
        reader.readMessage(value, proto.plugins.pinecone.v1.Plugin.Query.deserializeBinaryFromReader);
        msg.setQuery(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.pinecone.v1.Plugin.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.pinecone.v1.Plugin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.pinecone.v1.Plugin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.pinecone.v1.Plugin.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(1, f);
  }
  f = message.getDynamicWorkflowConfiguration();
  if (f != null) {
    writer.writeMessage(2, f, plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration.serializeBinaryToWriter);
  }
  f = message.getConnection();
  if (f != null) {
    writer.writeMessage(3, f, proto.plugins.pinecone.v1.Plugin.Connection.serializeBinaryToWriter);
  }
  f = message.getListIndexes();
  if (f != null) {
    writer.writeMessage(4, f, proto.plugins.pinecone.v1.Plugin.ListIndexes.serializeBinaryToWriter);
  }
  f = message.getCreateIndex();
  if (f != null) {
    writer.writeMessage(5, f, proto.plugins.pinecone.v1.Plugin.CreateIndex.serializeBinaryToWriter);
  }
  f = message.getUpsertVector();
  if (f != null) {
    writer.writeMessage(6, f, proto.plugins.pinecone.v1.Plugin.UpsertVector.serializeBinaryToWriter);
  }
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(7, f, proto.plugins.pinecone.v1.Plugin.Query.serializeBinaryToWriter);
  }
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.pinecone.v1.Plugin.Connection.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.pinecone.v1.Plugin.Connection.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.pinecone.v1.Plugin.Connection} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.pinecone.v1.Plugin.Connection.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        environment: jspb.Message.getFieldWithDefault(msg, 1, ''),
        apiKey: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.pinecone.v1.Plugin.Connection}
 */
proto.plugins.pinecone.v1.Plugin.Connection.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.pinecone.v1.Plugin.Connection();
  return proto.plugins.pinecone.v1.Plugin.Connection.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.pinecone.v1.Plugin.Connection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.pinecone.v1.Plugin.Connection}
 */
proto.plugins.pinecone.v1.Plugin.Connection.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setEnvironment(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setApiKey(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.pinecone.v1.Plugin.Connection.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.pinecone.v1.Plugin.Connection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.pinecone.v1.Plugin.Connection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.pinecone.v1.Plugin.Connection.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getEnvironment();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getApiKey();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string environment = 1;
 * @return {string}
 */
proto.plugins.pinecone.v1.Plugin.Connection.prototype.getEnvironment = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.pinecone.v1.Plugin.Connection} returns this
 */
proto.plugins.pinecone.v1.Plugin.Connection.prototype.setEnvironment = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string api_key = 2;
 * @return {string}
 */
proto.plugins.pinecone.v1.Plugin.Connection.prototype.getApiKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.pinecone.v1.Plugin.Connection} returns this
 */
proto.plugins.pinecone.v1.Plugin.Connection.prototype.setApiKey = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.pinecone.v1.Plugin.ListIndexes.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.pinecone.v1.Plugin.ListIndexes.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.pinecone.v1.Plugin.ListIndexes} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.pinecone.v1.Plugin.ListIndexes.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.pinecone.v1.Plugin.ListIndexes}
 */
proto.plugins.pinecone.v1.Plugin.ListIndexes.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.pinecone.v1.Plugin.ListIndexes();
  return proto.plugins.pinecone.v1.Plugin.ListIndexes.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.pinecone.v1.Plugin.ListIndexes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.pinecone.v1.Plugin.ListIndexes}
 */
proto.plugins.pinecone.v1.Plugin.ListIndexes.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.pinecone.v1.Plugin.ListIndexes.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.pinecone.v1.Plugin.ListIndexes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.pinecone.v1.Plugin.ListIndexes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.pinecone.v1.Plugin.ListIndexes.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.pinecone.v1.Plugin.CreateIndex.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.pinecone.v1.Plugin.CreateIndex.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.pinecone.v1.Plugin.CreateIndex} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.pinecone.v1.Plugin.CreateIndex.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.pinecone.v1.Plugin.CreateIndex}
 */
proto.plugins.pinecone.v1.Plugin.CreateIndex.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.pinecone.v1.Plugin.CreateIndex();
  return proto.plugins.pinecone.v1.Plugin.CreateIndex.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.pinecone.v1.Plugin.CreateIndex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.pinecone.v1.Plugin.CreateIndex}
 */
proto.plugins.pinecone.v1.Plugin.CreateIndex.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.pinecone.v1.Plugin.CreateIndex.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.pinecone.v1.Plugin.CreateIndex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.pinecone.v1.Plugin.CreateIndex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.pinecone.v1.Plugin.CreateIndex.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.plugins.pinecone.v1.Plugin.CreateIndex.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.pinecone.v1.Plugin.CreateIndex} returns this
 */
proto.plugins.pinecone.v1.Plugin.CreateIndex.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.plugins.pinecone.v1.Plugin.UpsertVector.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.plugins.pinecone.v1.Plugin.UpsertVector.DataCase = {
  DATA_NOT_SET: 0,
  RAW: 1
};

/**
 * @return {proto.plugins.pinecone.v1.Plugin.UpsertVector.DataCase}
 */
proto.plugins.pinecone.v1.Plugin.UpsertVector.prototype.getDataCase = function () {
  return /** @type {proto.plugins.pinecone.v1.Plugin.UpsertVector.DataCase} */ (
    jspb.Message.computeOneofCase(this, proto.plugins.pinecone.v1.Plugin.UpsertVector.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.pinecone.v1.Plugin.UpsertVector.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.pinecone.v1.Plugin.UpsertVector.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.pinecone.v1.Plugin.UpsertVector} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.pinecone.v1.Plugin.UpsertVector.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        raw: jspb.Message.getFieldWithDefault(msg, 1, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.pinecone.v1.Plugin.UpsertVector}
 */
proto.plugins.pinecone.v1.Plugin.UpsertVector.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.pinecone.v1.Plugin.UpsertVector();
  return proto.plugins.pinecone.v1.Plugin.UpsertVector.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.pinecone.v1.Plugin.UpsertVector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.pinecone.v1.Plugin.UpsertVector}
 */
proto.plugins.pinecone.v1.Plugin.UpsertVector.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setRaw(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.pinecone.v1.Plugin.UpsertVector.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.pinecone.v1.Plugin.UpsertVector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.pinecone.v1.Plugin.UpsertVector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.pinecone.v1.Plugin.UpsertVector.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(1, f);
  }
};

/**
 * optional string raw = 1;
 * @return {string}
 */
proto.plugins.pinecone.v1.Plugin.UpsertVector.prototype.getRaw = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.pinecone.v1.Plugin.UpsertVector} returns this
 */
proto.plugins.pinecone.v1.Plugin.UpsertVector.prototype.setRaw = function (value) {
  return jspb.Message.setOneofField(this, 1, proto.plugins.pinecone.v1.Plugin.UpsertVector.oneofGroups_[0], value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.pinecone.v1.Plugin.UpsertVector} returns this
 */
proto.plugins.pinecone.v1.Plugin.UpsertVector.prototype.clearRaw = function () {
  return jspb.Message.setOneofField(this, 1, proto.plugins.pinecone.v1.Plugin.UpsertVector.oneofGroups_[0], undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.pinecone.v1.Plugin.UpsertVector.prototype.hasRaw = function () {
  return jspb.Message.getField(this, 1) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.pinecone.v1.Plugin.Query.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.pinecone.v1.Plugin.Query.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.pinecone.v1.Plugin.Query} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.pinecone.v1.Plugin.Query.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        vector: jspb.Message.getFieldWithDefault(msg, 1, ''),
        topK: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.pinecone.v1.Plugin.Query}
 */
proto.plugins.pinecone.v1.Plugin.Query.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.pinecone.v1.Plugin.Query();
  return proto.plugins.pinecone.v1.Plugin.Query.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.pinecone.v1.Plugin.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.pinecone.v1.Plugin.Query}
 */
proto.plugins.pinecone.v1.Plugin.Query.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setVector(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setTopK(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.pinecone.v1.Plugin.Query.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.pinecone.v1.Plugin.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.pinecone.v1.Plugin.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.pinecone.v1.Plugin.Query.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getVector();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(2, f);
  }
};

/**
 * optional string vector = 1;
 * @return {string}
 */
proto.plugins.pinecone.v1.Plugin.Query.prototype.getVector = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.pinecone.v1.Plugin.Query} returns this
 */
proto.plugins.pinecone.v1.Plugin.Query.prototype.setVector = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string top_k = 2;
 * @return {string}
 */
proto.plugins.pinecone.v1.Plugin.Query.prototype.getTopK = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.pinecone.v1.Plugin.Query} returns this
 */
proto.plugins.pinecone.v1.Plugin.Query.prototype.setTopK = function (value) {
  return jspb.Message.setField(this, 2, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.pinecone.v1.Plugin.Query} returns this
 */
proto.plugins.pinecone.v1.Plugin.Query.prototype.clearTopK = function () {
  return jspb.Message.setField(this, 2, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.pinecone.v1.Plugin.Query.prototype.hasTopK = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.plugins.pinecone.v1.Plugin.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.pinecone.v1.Plugin} returns this
 */
proto.plugins.pinecone.v1.Plugin.prototype.setName = function (value) {
  return jspb.Message.setField(this, 1, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.pinecone.v1.Plugin} returns this
 */
proto.plugins.pinecone.v1.Plugin.prototype.clearName = function () {
  return jspb.Message.setField(this, 1, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.pinecone.v1.Plugin.prototype.hasName = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional plugins.common.v1.DynamicWorkflowConfiguration dynamic_workflow_configuration = 2;
 * @return {?proto.plugins.common.v1.DynamicWorkflowConfiguration}
 */
proto.plugins.pinecone.v1.Plugin.prototype.getDynamicWorkflowConfiguration = function () {
  return /** @type{?proto.plugins.common.v1.DynamicWorkflowConfiguration} */ (
    jspb.Message.getWrapperField(this, plugins_common_v1_plugin_pb.DynamicWorkflowConfiguration, 2)
  );
};

/**
 * @param {?proto.plugins.common.v1.DynamicWorkflowConfiguration|undefined} value
 * @return {!proto.plugins.pinecone.v1.Plugin} returns this
 */
proto.plugins.pinecone.v1.Plugin.prototype.setDynamicWorkflowConfiguration = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.pinecone.v1.Plugin} returns this
 */
proto.plugins.pinecone.v1.Plugin.prototype.clearDynamicWorkflowConfiguration = function () {
  return this.setDynamicWorkflowConfiguration(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.pinecone.v1.Plugin.prototype.hasDynamicWorkflowConfiguration = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional Connection connection = 3;
 * @return {?proto.plugins.pinecone.v1.Plugin.Connection}
 */
proto.plugins.pinecone.v1.Plugin.prototype.getConnection = function () {
  return /** @type{?proto.plugins.pinecone.v1.Plugin.Connection} */ (
    jspb.Message.getWrapperField(this, proto.plugins.pinecone.v1.Plugin.Connection, 3)
  );
};

/**
 * @param {?proto.plugins.pinecone.v1.Plugin.Connection|undefined} value
 * @return {!proto.plugins.pinecone.v1.Plugin} returns this
 */
proto.plugins.pinecone.v1.Plugin.prototype.setConnection = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.pinecone.v1.Plugin} returns this
 */
proto.plugins.pinecone.v1.Plugin.prototype.clearConnection = function () {
  return this.setConnection(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.pinecone.v1.Plugin.prototype.hasConnection = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional ListIndexes list_indexes = 4;
 * @return {?proto.plugins.pinecone.v1.Plugin.ListIndexes}
 */
proto.plugins.pinecone.v1.Plugin.prototype.getListIndexes = function () {
  return /** @type{?proto.plugins.pinecone.v1.Plugin.ListIndexes} */ (
    jspb.Message.getWrapperField(this, proto.plugins.pinecone.v1.Plugin.ListIndexes, 4)
  );
};

/**
 * @param {?proto.plugins.pinecone.v1.Plugin.ListIndexes|undefined} value
 * @return {!proto.plugins.pinecone.v1.Plugin} returns this
 */
proto.plugins.pinecone.v1.Plugin.prototype.setListIndexes = function (value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.plugins.pinecone.v1.Plugin.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.pinecone.v1.Plugin} returns this
 */
proto.plugins.pinecone.v1.Plugin.prototype.clearListIndexes = function () {
  return this.setListIndexes(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.pinecone.v1.Plugin.prototype.hasListIndexes = function () {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional CreateIndex create_index = 5;
 * @return {?proto.plugins.pinecone.v1.Plugin.CreateIndex}
 */
proto.plugins.pinecone.v1.Plugin.prototype.getCreateIndex = function () {
  return /** @type{?proto.plugins.pinecone.v1.Plugin.CreateIndex} */ (
    jspb.Message.getWrapperField(this, proto.plugins.pinecone.v1.Plugin.CreateIndex, 5)
  );
};

/**
 * @param {?proto.plugins.pinecone.v1.Plugin.CreateIndex|undefined} value
 * @return {!proto.plugins.pinecone.v1.Plugin} returns this
 */
proto.plugins.pinecone.v1.Plugin.prototype.setCreateIndex = function (value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.plugins.pinecone.v1.Plugin.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.pinecone.v1.Plugin} returns this
 */
proto.plugins.pinecone.v1.Plugin.prototype.clearCreateIndex = function () {
  return this.setCreateIndex(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.pinecone.v1.Plugin.prototype.hasCreateIndex = function () {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * optional UpsertVector upsert_vector = 6;
 * @return {?proto.plugins.pinecone.v1.Plugin.UpsertVector}
 */
proto.plugins.pinecone.v1.Plugin.prototype.getUpsertVector = function () {
  return /** @type{?proto.plugins.pinecone.v1.Plugin.UpsertVector} */ (
    jspb.Message.getWrapperField(this, proto.plugins.pinecone.v1.Plugin.UpsertVector, 6)
  );
};

/**
 * @param {?proto.plugins.pinecone.v1.Plugin.UpsertVector|undefined} value
 * @return {!proto.plugins.pinecone.v1.Plugin} returns this
 */
proto.plugins.pinecone.v1.Plugin.prototype.setUpsertVector = function (value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.plugins.pinecone.v1.Plugin.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.pinecone.v1.Plugin} returns this
 */
proto.plugins.pinecone.v1.Plugin.prototype.clearUpsertVector = function () {
  return this.setUpsertVector(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.pinecone.v1.Plugin.prototype.hasUpsertVector = function () {
  return jspb.Message.getField(this, 6) != null;
};

/**
 * optional Query query = 7;
 * @return {?proto.plugins.pinecone.v1.Plugin.Query}
 */
proto.plugins.pinecone.v1.Plugin.prototype.getQuery = function () {
  return /** @type{?proto.plugins.pinecone.v1.Plugin.Query} */ (
    jspb.Message.getWrapperField(this, proto.plugins.pinecone.v1.Plugin.Query, 7)
  );
};

/**
 * @param {?proto.plugins.pinecone.v1.Plugin.Query|undefined} value
 * @return {!proto.plugins.pinecone.v1.Plugin} returns this
 */
proto.plugins.pinecone.v1.Plugin.prototype.setQuery = function (value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.plugins.pinecone.v1.Plugin.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.pinecone.v1.Plugin} returns this
 */
proto.plugins.pinecone.v1.Plugin.prototype.clearQuery = function () {
  return this.setQuery(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.pinecone.v1.Plugin.prototype.hasQuery = function () {
  return jspb.Message.getField(this, 7) != null;
};

goog.object.extend(exports, proto.plugins.pinecone.v1);
