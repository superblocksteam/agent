// source: plugins/common/v1/auth.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

goog.exportSymbol('proto.plugins.common.v1.Auth', null, global);
goog.exportSymbol('proto.plugins.common.v1.Auth.MethodCase', null, global);
goog.exportSymbol('proto.plugins.common.v1.AwsAuth', null, global);
goog.exportSymbol('proto.plugins.common.v1.AwsAuth.AssumeRole', null, global);
goog.exportSymbol('proto.plugins.common.v1.AwsAuth.ConfigCase', null, global);
goog.exportSymbol('proto.plugins.common.v1.AwsAuth.Static', null, global);
goog.exportSymbol('proto.plugins.common.v1.Azure', null, global);
goog.exportSymbol('proto.plugins.common.v1.Azure.ClientCredentials', null, global);
goog.exportSymbol('proto.plugins.common.v1.Azure.ConfigCase', null, global);
goog.exportSymbol('proto.plugins.common.v1.Azure.Key', null, global);
goog.exportSymbol('proto.plugins.common.v1.Basic', null, global);
goog.exportSymbol('proto.plugins.common.v1.GcpAuth', null, global);
goog.exportSymbol('proto.plugins.common.v1.GcpAuth.ConfigCase', null, global);
goog.exportSymbol('proto.plugins.common.v1.OAuth', null, global);
goog.exportSymbol('proto.plugins.common.v1.OAuth.AuthorizationCodeFlow', null, global);
goog.exportSymbol('proto.plugins.common.v1.OAuth.ClientCredentialsFlow', null, global);
goog.exportSymbol('proto.plugins.common.v1.OAuth.PasswordGrantFlow', null, global);
goog.exportSymbol('proto.plugins.common.v1.OAuthCommon', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.OAuthCommon = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.common.v1.OAuthCommon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.OAuthCommon.displayName = 'proto.plugins.common.v1.OAuthCommon';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.OAuth = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.common.v1.OAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.OAuth.displayName = 'proto.plugins.common.v1.OAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.common.v1.OAuth.PasswordGrantFlow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.OAuth.PasswordGrantFlow.displayName = 'proto.plugins.common.v1.OAuth.PasswordGrantFlow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.OAuth.ClientCredentialsFlow = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.common.v1.OAuth.ClientCredentialsFlow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.OAuth.ClientCredentialsFlow.displayName = 'proto.plugins.common.v1.OAuth.ClientCredentialsFlow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.OAuth.AuthorizationCodeFlow = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.common.v1.OAuth.AuthorizationCodeFlow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.displayName = 'proto.plugins.common.v1.OAuth.AuthorizationCodeFlow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.Basic = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.common.v1.Basic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.Basic.displayName = 'proto.plugins.common.v1.Basic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.Azure = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.plugins.common.v1.Azure.oneofGroups_);
};
goog.inherits(proto.plugins.common.v1.Azure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.Azure.displayName = 'proto.plugins.common.v1.Azure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.Azure.Key = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.common.v1.Azure.Key, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.Azure.Key.displayName = 'proto.plugins.common.v1.Azure.Key';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.Azure.ClientCredentials = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.common.v1.Azure.ClientCredentials, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.Azure.ClientCredentials.displayName = 'proto.plugins.common.v1.Azure.ClientCredentials';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.AwsAuth = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.plugins.common.v1.AwsAuth.oneofGroups_);
};
goog.inherits(proto.plugins.common.v1.AwsAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.AwsAuth.displayName = 'proto.plugins.common.v1.AwsAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.AwsAuth.Static = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.common.v1.AwsAuth.Static, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.AwsAuth.Static.displayName = 'proto.plugins.common.v1.AwsAuth.Static';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.AwsAuth.AssumeRole = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.common.v1.AwsAuth.AssumeRole, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.AwsAuth.AssumeRole.displayName = 'proto.plugins.common.v1.AwsAuth.AssumeRole';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.GcpAuth = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.plugins.common.v1.GcpAuth.oneofGroups_);
};
goog.inherits(proto.plugins.common.v1.GcpAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.GcpAuth.displayName = 'proto.plugins.common.v1.GcpAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.common.v1.Auth = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.plugins.common.v1.Auth.oneofGroups_);
};
goog.inherits(proto.plugins.common.v1.Auth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.common.v1.Auth.displayName = 'proto.plugins.common.v1.Auth';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.common.v1.OAuthCommon.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.common.v1.OAuthCommon.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.common.v1.OAuthCommon} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.common.v1.OAuthCommon.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        clientId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        clientSecret: jspb.Message.getFieldWithDefault(msg, 2, ''),
        tokenUrl: jspb.Message.getFieldWithDefault(msg, 3, ''),
        audience: jspb.Message.getFieldWithDefault(msg, 4, ''),
        scope: jspb.Message.getFieldWithDefault(msg, 5, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.OAuthCommon}
 */
proto.plugins.common.v1.OAuthCommon.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.OAuthCommon();
  return proto.plugins.common.v1.OAuthCommon.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.OAuthCommon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.OAuthCommon}
 */
proto.plugins.common.v1.OAuthCommon.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setClientId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setClientSecret(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setTokenUrl(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setAudience(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setScope(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.OAuthCommon.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.OAuthCommon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.OAuthCommon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.OAuthCommon.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getClientSecret();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getTokenUrl();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getAudience();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.plugins.common.v1.OAuthCommon.prototype.getClientId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuthCommon} returns this
 */
proto.plugins.common.v1.OAuthCommon.prototype.setClientId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string client_secret = 2;
 * @return {string}
 */
proto.plugins.common.v1.OAuthCommon.prototype.getClientSecret = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuthCommon} returns this
 */
proto.plugins.common.v1.OAuthCommon.prototype.setClientSecret = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string token_url = 3;
 * @return {string}
 */
proto.plugins.common.v1.OAuthCommon.prototype.getTokenUrl = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuthCommon} returns this
 */
proto.plugins.common.v1.OAuthCommon.prototype.setTokenUrl = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string audience = 4;
 * @return {string}
 */
proto.plugins.common.v1.OAuthCommon.prototype.getAudience = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuthCommon} returns this
 */
proto.plugins.common.v1.OAuthCommon.prototype.setAudience = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string scope = 5;
 * @return {string}
 */
proto.plugins.common.v1.OAuthCommon.prototype.getScope = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuthCommon} returns this
 */
proto.plugins.common.v1.OAuthCommon.prototype.setScope = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.common.v1.OAuth.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.common.v1.OAuth.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.common.v1.OAuth} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.common.v1.OAuth.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.OAuth}
 */
proto.plugins.common.v1.OAuth.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.OAuth();
  return proto.plugins.common.v1.OAuth.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.OAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.OAuth}
 */
proto.plugins.common.v1.OAuth.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.OAuth.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.OAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.OAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.OAuth.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.common.v1.OAuth.PasswordGrantFlow.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.common.v1.OAuth.PasswordGrantFlow} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.common.v1.OAuth.PasswordGrantFlow.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        clientId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        clientSecret: jspb.Message.getFieldWithDefault(msg, 2, ''),
        tokenUrl: jspb.Message.getFieldWithDefault(msg, 3, ''),
        username: jspb.Message.getFieldWithDefault(msg, 4, ''),
        password: jspb.Message.getFieldWithDefault(msg, 5, ''),
        audience: jspb.Message.getFieldWithDefault(msg, 6, ''),
        scope: jspb.Message.getFieldWithDefault(msg, 7, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.OAuth.PasswordGrantFlow}
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.OAuth.PasswordGrantFlow();
  return proto.plugins.common.v1.OAuth.PasswordGrantFlow.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.OAuth.PasswordGrantFlow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.OAuth.PasswordGrantFlow}
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setClientId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setClientSecret(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setTokenUrl(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setUsername(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setPassword(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setAudience(value);
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.setScope(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.OAuth.PasswordGrantFlow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.OAuth.PasswordGrantFlow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getClientSecret();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getTokenUrl();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getAudience();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(7, f);
  }
};

/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.getClientId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.PasswordGrantFlow} returns this
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.setClientId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string client_secret = 2;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.getClientSecret = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.PasswordGrantFlow} returns this
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.setClientSecret = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string token_url = 3;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.getTokenUrl = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.PasswordGrantFlow} returns this
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.setTokenUrl = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string username = 4;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.getUsername = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.PasswordGrantFlow} returns this
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.setUsername = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string password = 5;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.getPassword = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.PasswordGrantFlow} returns this
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.setPassword = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string audience = 6;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.getAudience = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.PasswordGrantFlow} returns this
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.setAudience = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional string scope = 7;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.getScope = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.PasswordGrantFlow} returns this
 */
proto.plugins.common.v1.OAuth.PasswordGrantFlow.prototype.setScope = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.common.v1.OAuth.ClientCredentialsFlow.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.common.v1.OAuth.ClientCredentialsFlow.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.common.v1.OAuth.ClientCredentialsFlow} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.common.v1.OAuth.ClientCredentialsFlow.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        clientId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        clientSecret: jspb.Message.getFieldWithDefault(msg, 2, ''),
        tokenUrl: jspb.Message.getFieldWithDefault(msg, 3, ''),
        audience: jspb.Message.getFieldWithDefault(msg, 4, ''),
        scope: jspb.Message.getFieldWithDefault(msg, 5, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.OAuth.ClientCredentialsFlow}
 */
proto.plugins.common.v1.OAuth.ClientCredentialsFlow.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.OAuth.ClientCredentialsFlow();
  return proto.plugins.common.v1.OAuth.ClientCredentialsFlow.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.OAuth.ClientCredentialsFlow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.OAuth.ClientCredentialsFlow}
 */
proto.plugins.common.v1.OAuth.ClientCredentialsFlow.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setClientId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setClientSecret(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setTokenUrl(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setAudience(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setScope(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.OAuth.ClientCredentialsFlow.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.OAuth.ClientCredentialsFlow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.OAuth.ClientCredentialsFlow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.OAuth.ClientCredentialsFlow.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getClientSecret();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getTokenUrl();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getAudience();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.ClientCredentialsFlow.prototype.getClientId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.ClientCredentialsFlow} returns this
 */
proto.plugins.common.v1.OAuth.ClientCredentialsFlow.prototype.setClientId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string client_secret = 2;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.ClientCredentialsFlow.prototype.getClientSecret = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.ClientCredentialsFlow} returns this
 */
proto.plugins.common.v1.OAuth.ClientCredentialsFlow.prototype.setClientSecret = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string token_url = 3;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.ClientCredentialsFlow.prototype.getTokenUrl = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.ClientCredentialsFlow} returns this
 */
proto.plugins.common.v1.OAuth.ClientCredentialsFlow.prototype.setTokenUrl = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string audience = 4;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.ClientCredentialsFlow.prototype.getAudience = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.ClientCredentialsFlow} returns this
 */
proto.plugins.common.v1.OAuth.ClientCredentialsFlow.prototype.setAudience = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string scope = 5;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.ClientCredentialsFlow.prototype.getScope = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.ClientCredentialsFlow} returns this
 */
proto.plugins.common.v1.OAuth.ClientCredentialsFlow.prototype.setScope = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.common.v1.OAuth.AuthorizationCodeFlow} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        clientId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        clientSecret: jspb.Message.getFieldWithDefault(msg, 2, ''),
        tokenUrl: jspb.Message.getFieldWithDefault(msg, 3, ''),
        authUrl: jspb.Message.getFieldWithDefault(msg, 4, ''),
        audience: jspb.Message.getFieldWithDefault(msg, 5, ''),
        scope: jspb.Message.getFieldWithDefault(msg, 6, ''),
        tokenScope: jspb.Message.getFieldWithDefault(msg, 7, ''),
        refreshTokenFromServer: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.OAuth.AuthorizationCodeFlow}
 */
proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.OAuth.AuthorizationCodeFlow();
  return proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.OAuth.AuthorizationCodeFlow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.OAuth.AuthorizationCodeFlow}
 */
proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setClientId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setClientSecret(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setTokenUrl(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setAuthUrl(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setAudience(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setScope(value);
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.setTokenScope(value);
        break;
      case 8:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setRefreshTokenFromServer(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.OAuth.AuthorizationCodeFlow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getClientSecret();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getTokenUrl();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getAuthUrl();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getAudience();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
  f = message.getTokenScope();
  if (f.length > 0) {
    writer.writeString(7, f);
  }
  f = message.getRefreshTokenFromServer();
  if (f) {
    writer.writeBool(8, f);
  }
};

/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.prototype.getClientId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.AuthorizationCodeFlow} returns this
 */
proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.prototype.setClientId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string client_secret = 2;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.prototype.getClientSecret = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.AuthorizationCodeFlow} returns this
 */
proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.prototype.setClientSecret = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string token_url = 3;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.prototype.getTokenUrl = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.AuthorizationCodeFlow} returns this
 */
proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.prototype.setTokenUrl = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string auth_url = 4;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.prototype.getAuthUrl = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.AuthorizationCodeFlow} returns this
 */
proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.prototype.setAuthUrl = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string audience = 5;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.prototype.getAudience = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.AuthorizationCodeFlow} returns this
 */
proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.prototype.setAudience = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string scope = 6;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.prototype.getScope = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.AuthorizationCodeFlow} returns this
 */
proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.prototype.setScope = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional string token_scope = 7;
 * @return {string}
 */
proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.prototype.getTokenScope = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.OAuth.AuthorizationCodeFlow} returns this
 */
proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.prototype.setTokenScope = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};

/**
 * optional bool refresh_token_from_server = 8;
 * @return {boolean}
 */
proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.prototype.getRefreshTokenFromServer = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};

/**
 * @param {boolean} value
 * @return {!proto.plugins.common.v1.OAuth.AuthorizationCodeFlow} returns this
 */
proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.prototype.setRefreshTokenFromServer = function (value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.common.v1.Basic.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.common.v1.Basic.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.common.v1.Basic} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.common.v1.Basic.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        username: jspb.Message.getFieldWithDefault(msg, 1, ''),
        password: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.Basic}
 */
proto.plugins.common.v1.Basic.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.Basic();
  return proto.plugins.common.v1.Basic.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.Basic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.Basic}
 */
proto.plugins.common.v1.Basic.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setUsername(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPassword(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.Basic.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.Basic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.Basic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.Basic.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string username = 1;
 * @return {string}
 */
proto.plugins.common.v1.Basic.prototype.getUsername = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.Basic} returns this
 */
proto.plugins.common.v1.Basic.prototype.setUsername = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string password = 2;
 * @return {string}
 */
proto.plugins.common.v1.Basic.prototype.getPassword = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.Basic} returns this
 */
proto.plugins.common.v1.Basic.prototype.setPassword = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.plugins.common.v1.Azure.oneofGroups_ = [[1, 2]];

/**
 * @enum {number}
 */
proto.plugins.common.v1.Azure.ConfigCase = {
  CONFIG_NOT_SET: 0,
  KEY: 1,
  CLIENT_CREDENTIALS: 2
};

/**
 * @return {proto.plugins.common.v1.Azure.ConfigCase}
 */
proto.plugins.common.v1.Azure.prototype.getConfigCase = function () {
  return /** @type {proto.plugins.common.v1.Azure.ConfigCase} */ (
    jspb.Message.computeOneofCase(this, proto.plugins.common.v1.Azure.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.common.v1.Azure.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.common.v1.Azure.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.common.v1.Azure} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.common.v1.Azure.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        key: (f = msg.getKey()) && proto.plugins.common.v1.Azure.Key.toObject(includeInstance, f),
        clientCredentials: (f = msg.getClientCredentials()) && proto.plugins.common.v1.Azure.ClientCredentials.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.Azure}
 */
proto.plugins.common.v1.Azure.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.Azure();
  return proto.plugins.common.v1.Azure.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.Azure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.Azure}
 */
proto.plugins.common.v1.Azure.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.plugins.common.v1.Azure.Key();
        reader.readMessage(value, proto.plugins.common.v1.Azure.Key.deserializeBinaryFromReader);
        msg.setKey(value);
        break;
      case 2:
        var value = new proto.plugins.common.v1.Azure.ClientCredentials();
        reader.readMessage(value, proto.plugins.common.v1.Azure.ClientCredentials.deserializeBinaryFromReader);
        msg.setClientCredentials(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.Azure.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.Azure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.Azure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.Azure.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(1, f, proto.plugins.common.v1.Azure.Key.serializeBinaryToWriter);
  }
  f = message.getClientCredentials();
  if (f != null) {
    writer.writeMessage(2, f, proto.plugins.common.v1.Azure.ClientCredentials.serializeBinaryToWriter);
  }
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.common.v1.Azure.Key.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.common.v1.Azure.Key.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.common.v1.Azure.Key} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.common.v1.Azure.Key.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        masterKey: jspb.Message.getFieldWithDefault(msg, 1, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.Azure.Key}
 */
proto.plugins.common.v1.Azure.Key.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.Azure.Key();
  return proto.plugins.common.v1.Azure.Key.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.Azure.Key} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.Azure.Key}
 */
proto.plugins.common.v1.Azure.Key.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setMasterKey(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.Azure.Key.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.Azure.Key.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.Azure.Key} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.Azure.Key.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getMasterKey();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string master_key = 1;
 * @return {string}
 */
proto.plugins.common.v1.Azure.Key.prototype.getMasterKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.Azure.Key} returns this
 */
proto.plugins.common.v1.Azure.Key.prototype.setMasterKey = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.common.v1.Azure.ClientCredentials.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.common.v1.Azure.ClientCredentials.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.common.v1.Azure.ClientCredentials} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.common.v1.Azure.ClientCredentials.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        clientId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        clientSecret: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.Azure.ClientCredentials}
 */
proto.plugins.common.v1.Azure.ClientCredentials.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.Azure.ClientCredentials();
  return proto.plugins.common.v1.Azure.ClientCredentials.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.Azure.ClientCredentials} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.Azure.ClientCredentials}
 */
proto.plugins.common.v1.Azure.ClientCredentials.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setClientId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setClientSecret(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.Azure.ClientCredentials.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.Azure.ClientCredentials.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.Azure.ClientCredentials} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.Azure.ClientCredentials.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getClientSecret();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.plugins.common.v1.Azure.ClientCredentials.prototype.getClientId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.Azure.ClientCredentials} returns this
 */
proto.plugins.common.v1.Azure.ClientCredentials.prototype.setClientId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string client_secret = 2;
 * @return {string}
 */
proto.plugins.common.v1.Azure.ClientCredentials.prototype.getClientSecret = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.Azure.ClientCredentials} returns this
 */
proto.plugins.common.v1.Azure.ClientCredentials.prototype.setClientSecret = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional Key key = 1;
 * @return {?proto.plugins.common.v1.Azure.Key}
 */
proto.plugins.common.v1.Azure.prototype.getKey = function () {
  return /** @type{?proto.plugins.common.v1.Azure.Key} */ (jspb.Message.getWrapperField(this, proto.plugins.common.v1.Azure.Key, 1));
};

/**
 * @param {?proto.plugins.common.v1.Azure.Key|undefined} value
 * @return {!proto.plugins.common.v1.Azure} returns this
 */
proto.plugins.common.v1.Azure.prototype.setKey = function (value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.plugins.common.v1.Azure.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.common.v1.Azure} returns this
 */
proto.plugins.common.v1.Azure.prototype.clearKey = function () {
  return this.setKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.Azure.prototype.hasKey = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional ClientCredentials client_credentials = 2;
 * @return {?proto.plugins.common.v1.Azure.ClientCredentials}
 */
proto.plugins.common.v1.Azure.prototype.getClientCredentials = function () {
  return /** @type{?proto.plugins.common.v1.Azure.ClientCredentials} */ (
    jspb.Message.getWrapperField(this, proto.plugins.common.v1.Azure.ClientCredentials, 2)
  );
};

/**
 * @param {?proto.plugins.common.v1.Azure.ClientCredentials|undefined} value
 * @return {!proto.plugins.common.v1.Azure} returns this
 */
proto.plugins.common.v1.Azure.prototype.setClientCredentials = function (value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.plugins.common.v1.Azure.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.common.v1.Azure} returns this
 */
proto.plugins.common.v1.Azure.prototype.clearClientCredentials = function () {
  return this.setClientCredentials(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.Azure.prototype.hasClientCredentials = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.plugins.common.v1.AwsAuth.oneofGroups_ = [[1, 2]];

/**
 * @enum {number}
 */
proto.plugins.common.v1.AwsAuth.ConfigCase = {
  CONFIG_NOT_SET: 0,
  STATIC: 1,
  ASSUME_ROLE: 2
};

/**
 * @return {proto.plugins.common.v1.AwsAuth.ConfigCase}
 */
proto.plugins.common.v1.AwsAuth.prototype.getConfigCase = function () {
  return /** @type {proto.plugins.common.v1.AwsAuth.ConfigCase} */ (
    jspb.Message.computeOneofCase(this, proto.plugins.common.v1.AwsAuth.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.common.v1.AwsAuth.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.common.v1.AwsAuth.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.common.v1.AwsAuth} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.common.v1.AwsAuth.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        pb_static: (f = msg.getStatic()) && proto.plugins.common.v1.AwsAuth.Static.toObject(includeInstance, f),
        assumeRole: (f = msg.getAssumeRole()) && proto.plugins.common.v1.AwsAuth.AssumeRole.toObject(includeInstance, f),
        region: jspb.Message.getFieldWithDefault(msg, 3, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.AwsAuth}
 */
proto.plugins.common.v1.AwsAuth.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.AwsAuth();
  return proto.plugins.common.v1.AwsAuth.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.AwsAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.AwsAuth}
 */
proto.plugins.common.v1.AwsAuth.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.plugins.common.v1.AwsAuth.Static();
        reader.readMessage(value, proto.plugins.common.v1.AwsAuth.Static.deserializeBinaryFromReader);
        msg.setStatic(value);
        break;
      case 2:
        var value = new proto.plugins.common.v1.AwsAuth.AssumeRole();
        reader.readMessage(value, proto.plugins.common.v1.AwsAuth.AssumeRole.deserializeBinaryFromReader);
        msg.setAssumeRole(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setRegion(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.AwsAuth.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.AwsAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.AwsAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.AwsAuth.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getStatic();
  if (f != null) {
    writer.writeMessage(1, f, proto.plugins.common.v1.AwsAuth.Static.serializeBinaryToWriter);
  }
  f = message.getAssumeRole();
  if (f != null) {
    writer.writeMessage(2, f, proto.plugins.common.v1.AwsAuth.AssumeRole.serializeBinaryToWriter);
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.common.v1.AwsAuth.Static.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.common.v1.AwsAuth.Static.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.common.v1.AwsAuth.Static} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.common.v1.AwsAuth.Static.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        accessKeyId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        secretAccessKey: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.AwsAuth.Static}
 */
proto.plugins.common.v1.AwsAuth.Static.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.AwsAuth.Static();
  return proto.plugins.common.v1.AwsAuth.Static.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.AwsAuth.Static} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.AwsAuth.Static}
 */
proto.plugins.common.v1.AwsAuth.Static.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccessKeyId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setSecretAccessKey(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.AwsAuth.Static.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.AwsAuth.Static.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.AwsAuth.Static} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.AwsAuth.Static.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAccessKeyId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getSecretAccessKey();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string access_key_id = 1;
 * @return {string}
 */
proto.plugins.common.v1.AwsAuth.Static.prototype.getAccessKeyId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.AwsAuth.Static} returns this
 */
proto.plugins.common.v1.AwsAuth.Static.prototype.setAccessKeyId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string secret_access_key = 2;
 * @return {string}
 */
proto.plugins.common.v1.AwsAuth.Static.prototype.getSecretAccessKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.AwsAuth.Static} returns this
 */
proto.plugins.common.v1.AwsAuth.Static.prototype.setSecretAccessKey = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.common.v1.AwsAuth.AssumeRole.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.common.v1.AwsAuth.AssumeRole.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.common.v1.AwsAuth.AssumeRole} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.common.v1.AwsAuth.AssumeRole.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        roleArn: jspb.Message.getFieldWithDefault(msg, 3, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.AwsAuth.AssumeRole}
 */
proto.plugins.common.v1.AwsAuth.AssumeRole.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.AwsAuth.AssumeRole();
  return proto.plugins.common.v1.AwsAuth.AssumeRole.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.AwsAuth.AssumeRole} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.AwsAuth.AssumeRole}
 */
proto.plugins.common.v1.AwsAuth.AssumeRole.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setRoleArn(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.AwsAuth.AssumeRole.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.AwsAuth.AssumeRole.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.AwsAuth.AssumeRole} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.AwsAuth.AssumeRole.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getRoleArn();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional string role_arn = 3;
 * @return {string}
 */
proto.plugins.common.v1.AwsAuth.AssumeRole.prototype.getRoleArn = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.AwsAuth.AssumeRole} returns this
 */
proto.plugins.common.v1.AwsAuth.AssumeRole.prototype.setRoleArn = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional Static static = 1;
 * @return {?proto.plugins.common.v1.AwsAuth.Static}
 */
proto.plugins.common.v1.AwsAuth.prototype.getStatic = function () {
  return /** @type{?proto.plugins.common.v1.AwsAuth.Static} */ (
    jspb.Message.getWrapperField(this, proto.plugins.common.v1.AwsAuth.Static, 1)
  );
};

/**
 * @param {?proto.plugins.common.v1.AwsAuth.Static|undefined} value
 * @return {!proto.plugins.common.v1.AwsAuth} returns this
 */
proto.plugins.common.v1.AwsAuth.prototype.setStatic = function (value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.plugins.common.v1.AwsAuth.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.common.v1.AwsAuth} returns this
 */
proto.plugins.common.v1.AwsAuth.prototype.clearStatic = function () {
  return this.setStatic(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.AwsAuth.prototype.hasStatic = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional AssumeRole assume_role = 2;
 * @return {?proto.plugins.common.v1.AwsAuth.AssumeRole}
 */
proto.plugins.common.v1.AwsAuth.prototype.getAssumeRole = function () {
  return /** @type{?proto.plugins.common.v1.AwsAuth.AssumeRole} */ (
    jspb.Message.getWrapperField(this, proto.plugins.common.v1.AwsAuth.AssumeRole, 2)
  );
};

/**
 * @param {?proto.plugins.common.v1.AwsAuth.AssumeRole|undefined} value
 * @return {!proto.plugins.common.v1.AwsAuth} returns this
 */
proto.plugins.common.v1.AwsAuth.prototype.setAssumeRole = function (value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.plugins.common.v1.AwsAuth.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.common.v1.AwsAuth} returns this
 */
proto.plugins.common.v1.AwsAuth.prototype.clearAssumeRole = function () {
  return this.setAssumeRole(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.AwsAuth.prototype.hasAssumeRole = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional string region = 3;
 * @return {string}
 */
proto.plugins.common.v1.AwsAuth.prototype.getRegion = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.plugins.common.v1.AwsAuth} returns this
 */
proto.plugins.common.v1.AwsAuth.prototype.setRegion = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.plugins.common.v1.GcpAuth.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.plugins.common.v1.GcpAuth.ConfigCase = {
  CONFIG_NOT_SET: 0,
  SERVICE_ACCOUNT: 1
};

/**
 * @return {proto.plugins.common.v1.GcpAuth.ConfigCase}
 */
proto.plugins.common.v1.GcpAuth.prototype.getConfigCase = function () {
  return /** @type {proto.plugins.common.v1.GcpAuth.ConfigCase} */ (
    jspb.Message.computeOneofCase(this, proto.plugins.common.v1.GcpAuth.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.common.v1.GcpAuth.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.common.v1.GcpAuth.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.common.v1.GcpAuth} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.common.v1.GcpAuth.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        serviceAccount: msg.getServiceAccount_asB64()
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.GcpAuth}
 */
proto.plugins.common.v1.GcpAuth.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.GcpAuth();
  return proto.plugins.common.v1.GcpAuth.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.GcpAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.GcpAuth}
 */
proto.plugins.common.v1.GcpAuth.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setServiceAccount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.GcpAuth.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.GcpAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.GcpAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.GcpAuth.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes service_account = 1;
 * @return {string}
 */
proto.plugins.common.v1.GcpAuth.prototype.getServiceAccount = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes service_account = 1;
 * This is a type-conversion wrapper around `getServiceAccount()`
 * @return {string}
 */
proto.plugins.common.v1.GcpAuth.prototype.getServiceAccount_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getServiceAccount()));
};

/**
 * optional bytes service_account = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getServiceAccount()`
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.GcpAuth.prototype.getServiceAccount_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getServiceAccount()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.plugins.common.v1.GcpAuth} returns this
 */
proto.plugins.common.v1.GcpAuth.prototype.setServiceAccount = function (value) {
  return jspb.Message.setOneofField(this, 1, proto.plugins.common.v1.GcpAuth.oneofGroups_[0], value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.plugins.common.v1.GcpAuth} returns this
 */
proto.plugins.common.v1.GcpAuth.prototype.clearServiceAccount = function () {
  return jspb.Message.setOneofField(this, 1, proto.plugins.common.v1.GcpAuth.oneofGroups_[0], undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.GcpAuth.prototype.hasServiceAccount = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.plugins.common.v1.Auth.oneofGroups_ = [[1, 2, 3, 4, 5]];

/**
 * @enum {number}
 */
proto.plugins.common.v1.Auth.MethodCase = {
  METHOD_NOT_SET: 0,
  PASSWORD_GRANT_FLOW: 1,
  AUTHORIZATION_CODE_FLOW: 2,
  BASIC: 3,
  CLIENT_CREDENTIALS_FLOW: 4,
  KEY: 5
};

/**
 * @return {proto.plugins.common.v1.Auth.MethodCase}
 */
proto.plugins.common.v1.Auth.prototype.getMethodCase = function () {
  return /** @type {proto.plugins.common.v1.Auth.MethodCase} */ (
    jspb.Message.computeOneofCase(this, proto.plugins.common.v1.Auth.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.plugins.common.v1.Auth.prototype.toObject = function (opt_includeInstance) {
    return proto.plugins.common.v1.Auth.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.plugins.common.v1.Auth} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.plugins.common.v1.Auth.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        passwordGrantFlow: (f = msg.getPasswordGrantFlow()) && proto.plugins.common.v1.OAuth.PasswordGrantFlow.toObject(includeInstance, f),
        authorizationCodeFlow:
          (f = msg.getAuthorizationCodeFlow()) && proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.toObject(includeInstance, f),
        basic: (f = msg.getBasic()) && proto.plugins.common.v1.Basic.toObject(includeInstance, f),
        clientCredentialsFlow:
          (f = msg.getClientCredentialsFlow()) && proto.plugins.common.v1.OAuth.ClientCredentialsFlow.toObject(includeInstance, f),
        key: (f = msg.getKey()) && proto.plugins.common.v1.Azure.Key.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.common.v1.Auth}
 */
proto.plugins.common.v1.Auth.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.common.v1.Auth();
  return proto.plugins.common.v1.Auth.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.common.v1.Auth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.common.v1.Auth}
 */
proto.plugins.common.v1.Auth.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.plugins.common.v1.OAuth.PasswordGrantFlow();
        reader.readMessage(value, proto.plugins.common.v1.OAuth.PasswordGrantFlow.deserializeBinaryFromReader);
        msg.setPasswordGrantFlow(value);
        break;
      case 2:
        var value = new proto.plugins.common.v1.OAuth.AuthorizationCodeFlow();
        reader.readMessage(value, proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.deserializeBinaryFromReader);
        msg.setAuthorizationCodeFlow(value);
        break;
      case 3:
        var value = new proto.plugins.common.v1.Basic();
        reader.readMessage(value, proto.plugins.common.v1.Basic.deserializeBinaryFromReader);
        msg.setBasic(value);
        break;
      case 4:
        var value = new proto.plugins.common.v1.OAuth.ClientCredentialsFlow();
        reader.readMessage(value, proto.plugins.common.v1.OAuth.ClientCredentialsFlow.deserializeBinaryFromReader);
        msg.setClientCredentialsFlow(value);
        break;
      case 5:
        var value = new proto.plugins.common.v1.Azure.Key();
        reader.readMessage(value, proto.plugins.common.v1.Azure.Key.deserializeBinaryFromReader);
        msg.setKey(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.common.v1.Auth.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.plugins.common.v1.Auth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.common.v1.Auth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.common.v1.Auth.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPasswordGrantFlow();
  if (f != null) {
    writer.writeMessage(1, f, proto.plugins.common.v1.OAuth.PasswordGrantFlow.serializeBinaryToWriter);
  }
  f = message.getAuthorizationCodeFlow();
  if (f != null) {
    writer.writeMessage(2, f, proto.plugins.common.v1.OAuth.AuthorizationCodeFlow.serializeBinaryToWriter);
  }
  f = message.getBasic();
  if (f != null) {
    writer.writeMessage(3, f, proto.plugins.common.v1.Basic.serializeBinaryToWriter);
  }
  f = message.getClientCredentialsFlow();
  if (f != null) {
    writer.writeMessage(4, f, proto.plugins.common.v1.OAuth.ClientCredentialsFlow.serializeBinaryToWriter);
  }
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(5, f, proto.plugins.common.v1.Azure.Key.serializeBinaryToWriter);
  }
};

/**
 * optional OAuth.PasswordGrantFlow password_grant_flow = 1;
 * @return {?proto.plugins.common.v1.OAuth.PasswordGrantFlow}
 */
proto.plugins.common.v1.Auth.prototype.getPasswordGrantFlow = function () {
  return /** @type{?proto.plugins.common.v1.OAuth.PasswordGrantFlow} */ (
    jspb.Message.getWrapperField(this, proto.plugins.common.v1.OAuth.PasswordGrantFlow, 1)
  );
};

/**
 * @param {?proto.plugins.common.v1.OAuth.PasswordGrantFlow|undefined} value
 * @return {!proto.plugins.common.v1.Auth} returns this
 */
proto.plugins.common.v1.Auth.prototype.setPasswordGrantFlow = function (value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.plugins.common.v1.Auth.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.common.v1.Auth} returns this
 */
proto.plugins.common.v1.Auth.prototype.clearPasswordGrantFlow = function () {
  return this.setPasswordGrantFlow(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.Auth.prototype.hasPasswordGrantFlow = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional OAuth.AuthorizationCodeFlow authorization_code_flow = 2;
 * @return {?proto.plugins.common.v1.OAuth.AuthorizationCodeFlow}
 */
proto.plugins.common.v1.Auth.prototype.getAuthorizationCodeFlow = function () {
  return /** @type{?proto.plugins.common.v1.OAuth.AuthorizationCodeFlow} */ (
    jspb.Message.getWrapperField(this, proto.plugins.common.v1.OAuth.AuthorizationCodeFlow, 2)
  );
};

/**
 * @param {?proto.plugins.common.v1.OAuth.AuthorizationCodeFlow|undefined} value
 * @return {!proto.plugins.common.v1.Auth} returns this
 */
proto.plugins.common.v1.Auth.prototype.setAuthorizationCodeFlow = function (value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.plugins.common.v1.Auth.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.common.v1.Auth} returns this
 */
proto.plugins.common.v1.Auth.prototype.clearAuthorizationCodeFlow = function () {
  return this.setAuthorizationCodeFlow(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.Auth.prototype.hasAuthorizationCodeFlow = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional Basic basic = 3;
 * @return {?proto.plugins.common.v1.Basic}
 */
proto.plugins.common.v1.Auth.prototype.getBasic = function () {
  return /** @type{?proto.plugins.common.v1.Basic} */ (jspb.Message.getWrapperField(this, proto.plugins.common.v1.Basic, 3));
};

/**
 * @param {?proto.plugins.common.v1.Basic|undefined} value
 * @return {!proto.plugins.common.v1.Auth} returns this
 */
proto.plugins.common.v1.Auth.prototype.setBasic = function (value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.plugins.common.v1.Auth.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.common.v1.Auth} returns this
 */
proto.plugins.common.v1.Auth.prototype.clearBasic = function () {
  return this.setBasic(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.Auth.prototype.hasBasic = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional OAuth.ClientCredentialsFlow client_credentials_flow = 4;
 * @return {?proto.plugins.common.v1.OAuth.ClientCredentialsFlow}
 */
proto.plugins.common.v1.Auth.prototype.getClientCredentialsFlow = function () {
  return /** @type{?proto.plugins.common.v1.OAuth.ClientCredentialsFlow} */ (
    jspb.Message.getWrapperField(this, proto.plugins.common.v1.OAuth.ClientCredentialsFlow, 4)
  );
};

/**
 * @param {?proto.plugins.common.v1.OAuth.ClientCredentialsFlow|undefined} value
 * @return {!proto.plugins.common.v1.Auth} returns this
 */
proto.plugins.common.v1.Auth.prototype.setClientCredentialsFlow = function (value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.plugins.common.v1.Auth.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.common.v1.Auth} returns this
 */
proto.plugins.common.v1.Auth.prototype.clearClientCredentialsFlow = function () {
  return this.setClientCredentialsFlow(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.Auth.prototype.hasClientCredentialsFlow = function () {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional Azure.Key key = 5;
 * @return {?proto.plugins.common.v1.Azure.Key}
 */
proto.plugins.common.v1.Auth.prototype.getKey = function () {
  return /** @type{?proto.plugins.common.v1.Azure.Key} */ (jspb.Message.getWrapperField(this, proto.plugins.common.v1.Azure.Key, 5));
};

/**
 * @param {?proto.plugins.common.v1.Azure.Key|undefined} value
 * @return {!proto.plugins.common.v1.Auth} returns this
 */
proto.plugins.common.v1.Auth.prototype.setKey = function (value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.plugins.common.v1.Auth.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.common.v1.Auth} returns this
 */
proto.plugins.common.v1.Auth.prototype.clearKey = function () {
  return this.setKey(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.common.v1.Auth.prototype.hasKey = function () {
  return jspb.Message.getField(this, 5) != null;
};

goog.object.extend(exports, proto.plugins.common.v1);
