// source: secrets/v1/secrets.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

var common_v1_common_pb = require('../../common/v1/common_pb');
goog.object.extend(proto, common_v1_common_pb);
var buf_validate_validate_pb = require('../../buf/validate/validate_pb');
goog.object.extend(proto, buf_validate_validate_pb);
var plugins_common_v1_auth_pb = require('../../plugins/common/v1/auth_pb');
goog.object.extend(proto, plugins_common_v1_auth_pb);
goog.exportSymbol('proto.secrets.v1.AwsSecretsManager', null, global);
goog.exportSymbol('proto.secrets.v1.Details', null, global);
goog.exportSymbol('proto.secrets.v1.GcpSecretManager', null, global);
goog.exportSymbol('proto.secrets.v1.HashicorpVault', null, global);
goog.exportSymbol('proto.secrets.v1.HashicorpVault.Auth', null, global);
goog.exportSymbol('proto.secrets.v1.HashicorpVault.Auth.AppRole', null, global);
goog.exportSymbol('proto.secrets.v1.HashicorpVault.Auth.ConfigCase', null, global);
goog.exportSymbol('proto.secrets.v1.HashicorpVault.Version', null, global);
goog.exportSymbol('proto.secrets.v1.Invalidation', null, global);
goog.exportSymbol('proto.secrets.v1.MockStore', null, global);
goog.exportSymbol('proto.secrets.v1.Provider', null, global);
goog.exportSymbol('proto.secrets.v1.Provider.ConfigCase', null, global);
goog.exportSymbol('proto.secrets.v1.Store', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.secrets.v1.AwsSecretsManager = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.secrets.v1.AwsSecretsManager, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.secrets.v1.AwsSecretsManager.displayName = 'proto.secrets.v1.AwsSecretsManager';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.secrets.v1.GcpSecretManager = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.secrets.v1.GcpSecretManager, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.secrets.v1.GcpSecretManager.displayName = 'proto.secrets.v1.GcpSecretManager';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.secrets.v1.HashicorpVault = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.secrets.v1.HashicorpVault, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.secrets.v1.HashicorpVault.displayName = 'proto.secrets.v1.HashicorpVault';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.secrets.v1.HashicorpVault.Auth = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.secrets.v1.HashicorpVault.Auth.oneofGroups_);
};
goog.inherits(proto.secrets.v1.HashicorpVault.Auth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.secrets.v1.HashicorpVault.Auth.displayName = 'proto.secrets.v1.HashicorpVault.Auth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.secrets.v1.HashicorpVault.Auth.AppRole = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.secrets.v1.HashicorpVault.Auth.AppRole, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.secrets.v1.HashicorpVault.Auth.AppRole.displayName = 'proto.secrets.v1.HashicorpVault.Auth.AppRole';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.secrets.v1.MockStore = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.secrets.v1.MockStore, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.secrets.v1.MockStore.displayName = 'proto.secrets.v1.MockStore';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.secrets.v1.Provider = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.secrets.v1.Provider.oneofGroups_);
};
goog.inherits(proto.secrets.v1.Provider, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.secrets.v1.Provider.displayName = 'proto.secrets.v1.Provider';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.secrets.v1.Store = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.secrets.v1.Store, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.secrets.v1.Store.displayName = 'proto.secrets.v1.Store';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.secrets.v1.Details = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.secrets.v1.Details, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.secrets.v1.Details.displayName = 'proto.secrets.v1.Details';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.secrets.v1.Invalidation = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.secrets.v1.Invalidation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.secrets.v1.Invalidation.displayName = 'proto.secrets.v1.Invalidation';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.secrets.v1.AwsSecretsManager.prototype.toObject = function (opt_includeInstance) {
    return proto.secrets.v1.AwsSecretsManager.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.secrets.v1.AwsSecretsManager} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.secrets.v1.AwsSecretsManager.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        auth: (f = msg.getAuth()) && plugins_common_v1_auth_pb.AwsAuth.toObject(includeInstance, f),
        prefix: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.secrets.v1.AwsSecretsManager}
 */
proto.secrets.v1.AwsSecretsManager.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.secrets.v1.AwsSecretsManager();
  return proto.secrets.v1.AwsSecretsManager.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.secrets.v1.AwsSecretsManager} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.secrets.v1.AwsSecretsManager}
 */
proto.secrets.v1.AwsSecretsManager.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new plugins_common_v1_auth_pb.AwsAuth();
        reader.readMessage(value, plugins_common_v1_auth_pb.AwsAuth.deserializeBinaryFromReader);
        msg.setAuth(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPrefix(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.secrets.v1.AwsSecretsManager.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.secrets.v1.AwsSecretsManager.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.secrets.v1.AwsSecretsManager} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.secrets.v1.AwsSecretsManager.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(1, f, plugins_common_v1_auth_pb.AwsAuth.serializeBinaryToWriter);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(2, f);
  }
};

/**
 * optional plugins.common.v1.AwsAuth auth = 1;
 * @return {?proto.plugins.common.v1.AwsAuth}
 */
proto.secrets.v1.AwsSecretsManager.prototype.getAuth = function () {
  return /** @type{?proto.plugins.common.v1.AwsAuth} */ (jspb.Message.getWrapperField(this, plugins_common_v1_auth_pb.AwsAuth, 1));
};

/**
 * @param {?proto.plugins.common.v1.AwsAuth|undefined} value
 * @return {!proto.secrets.v1.AwsSecretsManager} returns this
 */
proto.secrets.v1.AwsSecretsManager.prototype.setAuth = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.secrets.v1.AwsSecretsManager} returns this
 */
proto.secrets.v1.AwsSecretsManager.prototype.clearAuth = function () {
  return this.setAuth(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.secrets.v1.AwsSecretsManager.prototype.hasAuth = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string prefix = 2;
 * @return {string}
 */
proto.secrets.v1.AwsSecretsManager.prototype.getPrefix = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.secrets.v1.AwsSecretsManager} returns this
 */
proto.secrets.v1.AwsSecretsManager.prototype.setPrefix = function (value) {
  return jspb.Message.setField(this, 2, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.secrets.v1.AwsSecretsManager} returns this
 */
proto.secrets.v1.AwsSecretsManager.prototype.clearPrefix = function () {
  return jspb.Message.setField(this, 2, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.secrets.v1.AwsSecretsManager.prototype.hasPrefix = function () {
  return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.secrets.v1.GcpSecretManager.prototype.toObject = function (opt_includeInstance) {
    return proto.secrets.v1.GcpSecretManager.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.secrets.v1.GcpSecretManager} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.secrets.v1.GcpSecretManager.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        auth: (f = msg.getAuth()) && plugins_common_v1_auth_pb.GcpAuth.toObject(includeInstance, f),
        projectId: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.secrets.v1.GcpSecretManager}
 */
proto.secrets.v1.GcpSecretManager.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.secrets.v1.GcpSecretManager();
  return proto.secrets.v1.GcpSecretManager.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.secrets.v1.GcpSecretManager} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.secrets.v1.GcpSecretManager}
 */
proto.secrets.v1.GcpSecretManager.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new plugins_common_v1_auth_pb.GcpAuth();
        reader.readMessage(value, plugins_common_v1_auth_pb.GcpAuth.deserializeBinaryFromReader);
        msg.setAuth(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setProjectId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.secrets.v1.GcpSecretManager.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.secrets.v1.GcpSecretManager.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.secrets.v1.GcpSecretManager} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.secrets.v1.GcpSecretManager.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(1, f, plugins_common_v1_auth_pb.GcpAuth.serializeBinaryToWriter);
  }
  f = message.getProjectId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional plugins.common.v1.GcpAuth auth = 1;
 * @return {?proto.plugins.common.v1.GcpAuth}
 */
proto.secrets.v1.GcpSecretManager.prototype.getAuth = function () {
  return /** @type{?proto.plugins.common.v1.GcpAuth} */ (jspb.Message.getWrapperField(this, plugins_common_v1_auth_pb.GcpAuth, 1));
};

/**
 * @param {?proto.plugins.common.v1.GcpAuth|undefined} value
 * @return {!proto.secrets.v1.GcpSecretManager} returns this
 */
proto.secrets.v1.GcpSecretManager.prototype.setAuth = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.secrets.v1.GcpSecretManager} returns this
 */
proto.secrets.v1.GcpSecretManager.prototype.clearAuth = function () {
  return this.setAuth(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.secrets.v1.GcpSecretManager.prototype.hasAuth = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string project_id = 2;
 * @return {string}
 */
proto.secrets.v1.GcpSecretManager.prototype.getProjectId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.secrets.v1.GcpSecretManager} returns this
 */
proto.secrets.v1.GcpSecretManager.prototype.setProjectId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.secrets.v1.HashicorpVault.prototype.toObject = function (opt_includeInstance) {
    return proto.secrets.v1.HashicorpVault.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.secrets.v1.HashicorpVault} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.secrets.v1.HashicorpVault.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        auth: (f = msg.getAuth()) && proto.secrets.v1.HashicorpVault.Auth.toObject(includeInstance, f),
        address: jspb.Message.getFieldWithDefault(msg, 2, ''),
        path: jspb.Message.getFieldWithDefault(msg, 3, ''),
        namespace: jspb.Message.getFieldWithDefault(msg, 4, ''),
        version: jspb.Message.getFieldWithDefault(msg, 5, 0),
        secretsPath: jspb.Message.getFieldWithDefault(msg, 6, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.secrets.v1.HashicorpVault}
 */
proto.secrets.v1.HashicorpVault.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.secrets.v1.HashicorpVault();
  return proto.secrets.v1.HashicorpVault.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.secrets.v1.HashicorpVault} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.secrets.v1.HashicorpVault}
 */
proto.secrets.v1.HashicorpVault.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.secrets.v1.HashicorpVault.Auth();
        reader.readMessage(value, proto.secrets.v1.HashicorpVault.Auth.deserializeBinaryFromReader);
        msg.setAuth(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddress(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setPath(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setNamespace(value);
        break;
      case 5:
        var value = /** @type {!proto.secrets.v1.HashicorpVault.Version} */ (reader.readEnum());
        msg.setVersion(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setSecretsPath(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.secrets.v1.HashicorpVault.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.secrets.v1.HashicorpVault.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.secrets.v1.HashicorpVault} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.secrets.v1.HashicorpVault.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(1, f, proto.secrets.v1.HashicorpVault.Auth.serializeBinaryToWriter);
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(3, f);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(4, f);
  }
  f = message.getVersion();
  if (f !== 0.0) {
    writer.writeEnum(5, f);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(6, f);
  }
};

/**
 * @enum {number}
 */
proto.secrets.v1.HashicorpVault.Version = {
  VERSION_UNSPECIFIED: 0,
  VERSION_V1: 1,
  VERSION_V2: 2
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.secrets.v1.HashicorpVault.Auth.oneofGroups_ = [[1, 2]];

/**
 * @enum {number}
 */
proto.secrets.v1.HashicorpVault.Auth.ConfigCase = {
  CONFIG_NOT_SET: 0,
  TOKEN: 1,
  APP_ROLE: 2
};

/**
 * @return {proto.secrets.v1.HashicorpVault.Auth.ConfigCase}
 */
proto.secrets.v1.HashicorpVault.Auth.prototype.getConfigCase = function () {
  return /** @type {proto.secrets.v1.HashicorpVault.Auth.ConfigCase} */ (
    jspb.Message.computeOneofCase(this, proto.secrets.v1.HashicorpVault.Auth.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.secrets.v1.HashicorpVault.Auth.prototype.toObject = function (opt_includeInstance) {
    return proto.secrets.v1.HashicorpVault.Auth.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.secrets.v1.HashicorpVault.Auth} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.secrets.v1.HashicorpVault.Auth.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        token: jspb.Message.getFieldWithDefault(msg, 1, ''),
        appRole: (f = msg.getAppRole()) && proto.secrets.v1.HashicorpVault.Auth.AppRole.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.secrets.v1.HashicorpVault.Auth}
 */
proto.secrets.v1.HashicorpVault.Auth.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.secrets.v1.HashicorpVault.Auth();
  return proto.secrets.v1.HashicorpVault.Auth.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.secrets.v1.HashicorpVault.Auth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.secrets.v1.HashicorpVault.Auth}
 */
proto.secrets.v1.HashicorpVault.Auth.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      case 2:
        var value = new proto.secrets.v1.HashicorpVault.Auth.AppRole();
        reader.readMessage(value, proto.secrets.v1.HashicorpVault.Auth.AppRole.deserializeBinaryFromReader);
        msg.setAppRole(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.secrets.v1.HashicorpVault.Auth.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.secrets.v1.HashicorpVault.Auth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.secrets.v1.HashicorpVault.Auth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.secrets.v1.HashicorpVault.Auth.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(1, f);
  }
  f = message.getAppRole();
  if (f != null) {
    writer.writeMessage(2, f, proto.secrets.v1.HashicorpVault.Auth.AppRole.serializeBinaryToWriter);
  }
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.secrets.v1.HashicorpVault.Auth.AppRole.prototype.toObject = function (opt_includeInstance) {
    return proto.secrets.v1.HashicorpVault.Auth.AppRole.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.secrets.v1.HashicorpVault.Auth.AppRole} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.secrets.v1.HashicorpVault.Auth.AppRole.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        roleId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        secretId: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.secrets.v1.HashicorpVault.Auth.AppRole}
 */
proto.secrets.v1.HashicorpVault.Auth.AppRole.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.secrets.v1.HashicorpVault.Auth.AppRole();
  return proto.secrets.v1.HashicorpVault.Auth.AppRole.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.secrets.v1.HashicorpVault.Auth.AppRole} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.secrets.v1.HashicorpVault.Auth.AppRole}
 */
proto.secrets.v1.HashicorpVault.Auth.AppRole.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setRoleId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setSecretId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.secrets.v1.HashicorpVault.Auth.AppRole.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.secrets.v1.HashicorpVault.Auth.AppRole.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.secrets.v1.HashicorpVault.Auth.AppRole} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.secrets.v1.HashicorpVault.Auth.AppRole.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getRoleId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getSecretId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string role_id = 1;
 * @return {string}
 */
proto.secrets.v1.HashicorpVault.Auth.AppRole.prototype.getRoleId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.secrets.v1.HashicorpVault.Auth.AppRole} returns this
 */
proto.secrets.v1.HashicorpVault.Auth.AppRole.prototype.setRoleId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string secret_id = 2;
 * @return {string}
 */
proto.secrets.v1.HashicorpVault.Auth.AppRole.prototype.getSecretId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.secrets.v1.HashicorpVault.Auth.AppRole} returns this
 */
proto.secrets.v1.HashicorpVault.Auth.AppRole.prototype.setSecretId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string token = 1;
 * @return {string}
 */
proto.secrets.v1.HashicorpVault.Auth.prototype.getToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.secrets.v1.HashicorpVault.Auth} returns this
 */
proto.secrets.v1.HashicorpVault.Auth.prototype.setToken = function (value) {
  return jspb.Message.setOneofField(this, 1, proto.secrets.v1.HashicorpVault.Auth.oneofGroups_[0], value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.secrets.v1.HashicorpVault.Auth} returns this
 */
proto.secrets.v1.HashicorpVault.Auth.prototype.clearToken = function () {
  return jspb.Message.setOneofField(this, 1, proto.secrets.v1.HashicorpVault.Auth.oneofGroups_[0], undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.secrets.v1.HashicorpVault.Auth.prototype.hasToken = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional AppRole app_role = 2;
 * @return {?proto.secrets.v1.HashicorpVault.Auth.AppRole}
 */
proto.secrets.v1.HashicorpVault.Auth.prototype.getAppRole = function () {
  return /** @type{?proto.secrets.v1.HashicorpVault.Auth.AppRole} */ (
    jspb.Message.getWrapperField(this, proto.secrets.v1.HashicorpVault.Auth.AppRole, 2)
  );
};

/**
 * @param {?proto.secrets.v1.HashicorpVault.Auth.AppRole|undefined} value
 * @return {!proto.secrets.v1.HashicorpVault.Auth} returns this
 */
proto.secrets.v1.HashicorpVault.Auth.prototype.setAppRole = function (value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.secrets.v1.HashicorpVault.Auth.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.secrets.v1.HashicorpVault.Auth} returns this
 */
proto.secrets.v1.HashicorpVault.Auth.prototype.clearAppRole = function () {
  return this.setAppRole(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.secrets.v1.HashicorpVault.Auth.prototype.hasAppRole = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional Auth auth = 1;
 * @return {?proto.secrets.v1.HashicorpVault.Auth}
 */
proto.secrets.v1.HashicorpVault.prototype.getAuth = function () {
  return /** @type{?proto.secrets.v1.HashicorpVault.Auth} */ (jspb.Message.getWrapperField(this, proto.secrets.v1.HashicorpVault.Auth, 1));
};

/**
 * @param {?proto.secrets.v1.HashicorpVault.Auth|undefined} value
 * @return {!proto.secrets.v1.HashicorpVault} returns this
 */
proto.secrets.v1.HashicorpVault.prototype.setAuth = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.secrets.v1.HashicorpVault} returns this
 */
proto.secrets.v1.HashicorpVault.prototype.clearAuth = function () {
  return this.setAuth(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.secrets.v1.HashicorpVault.prototype.hasAuth = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string address = 2;
 * @return {string}
 */
proto.secrets.v1.HashicorpVault.prototype.getAddress = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.secrets.v1.HashicorpVault} returns this
 */
proto.secrets.v1.HashicorpVault.prototype.setAddress = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string path = 3;
 * @return {string}
 */
proto.secrets.v1.HashicorpVault.prototype.getPath = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.secrets.v1.HashicorpVault} returns this
 */
proto.secrets.v1.HashicorpVault.prototype.setPath = function (value) {
  return jspb.Message.setField(this, 3, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.secrets.v1.HashicorpVault} returns this
 */
proto.secrets.v1.HashicorpVault.prototype.clearPath = function () {
  return jspb.Message.setField(this, 3, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.secrets.v1.HashicorpVault.prototype.hasPath = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional string namespace = 4;
 * @return {string}
 */
proto.secrets.v1.HashicorpVault.prototype.getNamespace = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.secrets.v1.HashicorpVault} returns this
 */
proto.secrets.v1.HashicorpVault.prototype.setNamespace = function (value) {
  return jspb.Message.setField(this, 4, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.secrets.v1.HashicorpVault} returns this
 */
proto.secrets.v1.HashicorpVault.prototype.clearNamespace = function () {
  return jspb.Message.setField(this, 4, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.secrets.v1.HashicorpVault.prototype.hasNamespace = function () {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional Version version = 5;
 * @return {!proto.secrets.v1.HashicorpVault.Version}
 */
proto.secrets.v1.HashicorpVault.prototype.getVersion = function () {
  return /** @type {!proto.secrets.v1.HashicorpVault.Version} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {!proto.secrets.v1.HashicorpVault.Version} value
 * @return {!proto.secrets.v1.HashicorpVault} returns this
 */
proto.secrets.v1.HashicorpVault.prototype.setVersion = function (value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};

/**
 * optional string secrets_path = 6;
 * @return {string}
 */
proto.secrets.v1.HashicorpVault.prototype.getSecretsPath = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * @param {string} value
 * @return {!proto.secrets.v1.HashicorpVault} returns this
 */
proto.secrets.v1.HashicorpVault.prototype.setSecretsPath = function (value) {
  return jspb.Message.setField(this, 6, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.secrets.v1.HashicorpVault} returns this
 */
proto.secrets.v1.HashicorpVault.prototype.clearSecretsPath = function () {
  return jspb.Message.setField(this, 6, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.secrets.v1.HashicorpVault.prototype.hasSecretsPath = function () {
  return jspb.Message.getField(this, 6) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.secrets.v1.MockStore.prototype.toObject = function (opt_includeInstance) {
    return proto.secrets.v1.MockStore.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.secrets.v1.MockStore} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.secrets.v1.MockStore.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        dataMap: (f = msg.getDataMap()) ? f.toObject(includeInstance, undefined) : []
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.secrets.v1.MockStore}
 */
proto.secrets.v1.MockStore.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.secrets.v1.MockStore();
  return proto.secrets.v1.MockStore.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.secrets.v1.MockStore} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.secrets.v1.MockStore}
 */
proto.secrets.v1.MockStore.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = msg.getDataMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            '',
            ''
          );
        });
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.secrets.v1.MockStore.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.secrets.v1.MockStore.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.secrets.v1.MockStore} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.secrets.v1.MockStore.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};

/**
 * map<string, string> data = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.secrets.v1.MockStore.prototype.getDataMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (jspb.Message.getMapField(this, 1, opt_noLazyCreate, null));
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.secrets.v1.MockStore} returns this
 */
proto.secrets.v1.MockStore.prototype.clearDataMap = function () {
  this.getDataMap().clear();
  return this;
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.secrets.v1.Provider.oneofGroups_ = [[1, 2, 3, 4]];

/**
 * @enum {number}
 */
proto.secrets.v1.Provider.ConfigCase = {
  CONFIG_NOT_SET: 0,
  MOCK: 1,
  AWS_SECRETS_MANAGER: 2,
  GCP_SECRET_MANAGER: 3,
  HASHICORP_VAULT: 4
};

/**
 * @return {proto.secrets.v1.Provider.ConfigCase}
 */
proto.secrets.v1.Provider.prototype.getConfigCase = function () {
  return /** @type {proto.secrets.v1.Provider.ConfigCase} */ (
    jspb.Message.computeOneofCase(this, proto.secrets.v1.Provider.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.secrets.v1.Provider.prototype.toObject = function (opt_includeInstance) {
    return proto.secrets.v1.Provider.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.secrets.v1.Provider} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.secrets.v1.Provider.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        mock: (f = msg.getMock()) && proto.secrets.v1.MockStore.toObject(includeInstance, f),
        awsSecretsManager: (f = msg.getAwsSecretsManager()) && proto.secrets.v1.AwsSecretsManager.toObject(includeInstance, f),
        gcpSecretManager: (f = msg.getGcpSecretManager()) && proto.secrets.v1.GcpSecretManager.toObject(includeInstance, f),
        hashicorpVault: (f = msg.getHashicorpVault()) && proto.secrets.v1.HashicorpVault.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.secrets.v1.Provider}
 */
proto.secrets.v1.Provider.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.secrets.v1.Provider();
  return proto.secrets.v1.Provider.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.secrets.v1.Provider} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.secrets.v1.Provider}
 */
proto.secrets.v1.Provider.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.secrets.v1.MockStore();
        reader.readMessage(value, proto.secrets.v1.MockStore.deserializeBinaryFromReader);
        msg.setMock(value);
        break;
      case 2:
        var value = new proto.secrets.v1.AwsSecretsManager();
        reader.readMessage(value, proto.secrets.v1.AwsSecretsManager.deserializeBinaryFromReader);
        msg.setAwsSecretsManager(value);
        break;
      case 3:
        var value = new proto.secrets.v1.GcpSecretManager();
        reader.readMessage(value, proto.secrets.v1.GcpSecretManager.deserializeBinaryFromReader);
        msg.setGcpSecretManager(value);
        break;
      case 4:
        var value = new proto.secrets.v1.HashicorpVault();
        reader.readMessage(value, proto.secrets.v1.HashicorpVault.deserializeBinaryFromReader);
        msg.setHashicorpVault(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.secrets.v1.Provider.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.secrets.v1.Provider.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.secrets.v1.Provider} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.secrets.v1.Provider.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getMock();
  if (f != null) {
    writer.writeMessage(1, f, proto.secrets.v1.MockStore.serializeBinaryToWriter);
  }
  f = message.getAwsSecretsManager();
  if (f != null) {
    writer.writeMessage(2, f, proto.secrets.v1.AwsSecretsManager.serializeBinaryToWriter);
  }
  f = message.getGcpSecretManager();
  if (f != null) {
    writer.writeMessage(3, f, proto.secrets.v1.GcpSecretManager.serializeBinaryToWriter);
  }
  f = message.getHashicorpVault();
  if (f != null) {
    writer.writeMessage(4, f, proto.secrets.v1.HashicorpVault.serializeBinaryToWriter);
  }
};

/**
 * optional MockStore mock = 1;
 * @return {?proto.secrets.v1.MockStore}
 */
proto.secrets.v1.Provider.prototype.getMock = function () {
  return /** @type{?proto.secrets.v1.MockStore} */ (jspb.Message.getWrapperField(this, proto.secrets.v1.MockStore, 1));
};

/**
 * @param {?proto.secrets.v1.MockStore|undefined} value
 * @return {!proto.secrets.v1.Provider} returns this
 */
proto.secrets.v1.Provider.prototype.setMock = function (value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.secrets.v1.Provider.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.secrets.v1.Provider} returns this
 */
proto.secrets.v1.Provider.prototype.clearMock = function () {
  return this.setMock(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.secrets.v1.Provider.prototype.hasMock = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional AwsSecretsManager aws_secrets_manager = 2;
 * @return {?proto.secrets.v1.AwsSecretsManager}
 */
proto.secrets.v1.Provider.prototype.getAwsSecretsManager = function () {
  return /** @type{?proto.secrets.v1.AwsSecretsManager} */ (jspb.Message.getWrapperField(this, proto.secrets.v1.AwsSecretsManager, 2));
};

/**
 * @param {?proto.secrets.v1.AwsSecretsManager|undefined} value
 * @return {!proto.secrets.v1.Provider} returns this
 */
proto.secrets.v1.Provider.prototype.setAwsSecretsManager = function (value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.secrets.v1.Provider.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.secrets.v1.Provider} returns this
 */
proto.secrets.v1.Provider.prototype.clearAwsSecretsManager = function () {
  return this.setAwsSecretsManager(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.secrets.v1.Provider.prototype.hasAwsSecretsManager = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional GcpSecretManager gcp_secret_manager = 3;
 * @return {?proto.secrets.v1.GcpSecretManager}
 */
proto.secrets.v1.Provider.prototype.getGcpSecretManager = function () {
  return /** @type{?proto.secrets.v1.GcpSecretManager} */ (jspb.Message.getWrapperField(this, proto.secrets.v1.GcpSecretManager, 3));
};

/**
 * @param {?proto.secrets.v1.GcpSecretManager|undefined} value
 * @return {!proto.secrets.v1.Provider} returns this
 */
proto.secrets.v1.Provider.prototype.setGcpSecretManager = function (value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.secrets.v1.Provider.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.secrets.v1.Provider} returns this
 */
proto.secrets.v1.Provider.prototype.clearGcpSecretManager = function () {
  return this.setGcpSecretManager(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.secrets.v1.Provider.prototype.hasGcpSecretManager = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional HashicorpVault hashicorp_vault = 4;
 * @return {?proto.secrets.v1.HashicorpVault}
 */
proto.secrets.v1.Provider.prototype.getHashicorpVault = function () {
  return /** @type{?proto.secrets.v1.HashicorpVault} */ (jspb.Message.getWrapperField(this, proto.secrets.v1.HashicorpVault, 4));
};

/**
 * @param {?proto.secrets.v1.HashicorpVault|undefined} value
 * @return {!proto.secrets.v1.Provider} returns this
 */
proto.secrets.v1.Provider.prototype.setHashicorpVault = function (value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.secrets.v1.Provider.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.secrets.v1.Provider} returns this
 */
proto.secrets.v1.Provider.prototype.clearHashicorpVault = function () {
  return this.setHashicorpVault(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.secrets.v1.Provider.prototype.hasHashicorpVault = function () {
  return jspb.Message.getField(this, 4) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.secrets.v1.Store.prototype.toObject = function (opt_includeInstance) {
    return proto.secrets.v1.Store.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.secrets.v1.Store} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.secrets.v1.Store.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        metadata: (f = msg.getMetadata()) && common_v1_common_pb.Metadata.toObject(includeInstance, f),
        provider: (f = msg.getProvider()) && proto.secrets.v1.Provider.toObject(includeInstance, f),
        ttl: jspb.Message.getFieldWithDefault(msg, 3, 0),
        configurationId: jspb.Message.getFieldWithDefault(msg, 4, ''),
        cache: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.secrets.v1.Store}
 */
proto.secrets.v1.Store.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.secrets.v1.Store();
  return proto.secrets.v1.Store.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.secrets.v1.Store} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.secrets.v1.Store}
 */
proto.secrets.v1.Store.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new common_v1_common_pb.Metadata();
        reader.readMessage(value, common_v1_common_pb.Metadata.deserializeBinaryFromReader);
        msg.setMetadata(value);
        break;
      case 2:
        var value = new proto.secrets.v1.Provider();
        reader.readMessage(value, proto.secrets.v1.Provider.deserializeBinaryFromReader);
        msg.setProvider(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setTtl(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setConfigurationId(value);
        break;
      case 5:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setCache(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.secrets.v1.Store.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.secrets.v1.Store.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.secrets.v1.Store} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.secrets.v1.Store.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(1, f, common_v1_common_pb.Metadata.serializeBinaryToWriter);
  }
  f = message.getProvider();
  if (f != null) {
    writer.writeMessage(2, f, proto.secrets.v1.Provider.serializeBinaryToWriter);
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(3, f);
  }
  f = message.getConfigurationId();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getCache();
  if (f) {
    writer.writeBool(5, f);
  }
};

/**
 * optional common.v1.Metadata metadata = 1;
 * @return {?proto.common.v1.Metadata}
 */
proto.secrets.v1.Store.prototype.getMetadata = function () {
  return /** @type{?proto.common.v1.Metadata} */ (jspb.Message.getWrapperField(this, common_v1_common_pb.Metadata, 1));
};

/**
 * @param {?proto.common.v1.Metadata|undefined} value
 * @return {!proto.secrets.v1.Store} returns this
 */
proto.secrets.v1.Store.prototype.setMetadata = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.secrets.v1.Store} returns this
 */
proto.secrets.v1.Store.prototype.clearMetadata = function () {
  return this.setMetadata(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.secrets.v1.Store.prototype.hasMetadata = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional Provider provider = 2;
 * @return {?proto.secrets.v1.Provider}
 */
proto.secrets.v1.Store.prototype.getProvider = function () {
  return /** @type{?proto.secrets.v1.Provider} */ (jspb.Message.getWrapperField(this, proto.secrets.v1.Provider, 2));
};

/**
 * @param {?proto.secrets.v1.Provider|undefined} value
 * @return {!proto.secrets.v1.Store} returns this
 */
proto.secrets.v1.Store.prototype.setProvider = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.secrets.v1.Store} returns this
 */
proto.secrets.v1.Store.prototype.clearProvider = function () {
  return this.setProvider(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.secrets.v1.Store.prototype.hasProvider = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional int32 ttl = 3;
 * @return {number}
 */
proto.secrets.v1.Store.prototype.getTtl = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.secrets.v1.Store} returns this
 */
proto.secrets.v1.Store.prototype.setTtl = function (value) {
  return jspb.Message.setField(this, 3, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.secrets.v1.Store} returns this
 */
proto.secrets.v1.Store.prototype.clearTtl = function () {
  return jspb.Message.setField(this, 3, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.secrets.v1.Store.prototype.hasTtl = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional string configuration_id = 4;
 * @return {string}
 */
proto.secrets.v1.Store.prototype.getConfigurationId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.secrets.v1.Store} returns this
 */
proto.secrets.v1.Store.prototype.setConfigurationId = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional bool cache = 5;
 * @return {boolean}
 */
proto.secrets.v1.Store.prototype.getCache = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};

/**
 * @param {boolean} value
 * @return {!proto.secrets.v1.Store} returns this
 */
proto.secrets.v1.Store.prototype.setCache = function (value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.secrets.v1.Details.prototype.toObject = function (opt_includeInstance) {
    return proto.secrets.v1.Details.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.secrets.v1.Details} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.secrets.v1.Details.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        alias: jspb.Message.getFieldWithDefault(msg, 1, ''),
        name: jspb.Message.getFieldWithDefault(msg, 2, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.secrets.v1.Details}
 */
proto.secrets.v1.Details.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.secrets.v1.Details();
  return proto.secrets.v1.Details.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.secrets.v1.Details} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.secrets.v1.Details}
 */
proto.secrets.v1.Details.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAlias(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.secrets.v1.Details.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.secrets.v1.Details.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.secrets.v1.Details} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.secrets.v1.Details.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string alias = 1;
 * @return {string}
 */
proto.secrets.v1.Details.prototype.getAlias = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.secrets.v1.Details} returns this
 */
proto.secrets.v1.Details.prototype.setAlias = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string name = 2;
 * @return {string}
 */
proto.secrets.v1.Details.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.secrets.v1.Details} returns this
 */
proto.secrets.v1.Details.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.secrets.v1.Invalidation.prototype.toObject = function (opt_includeInstance) {
    return proto.secrets.v1.Invalidation.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.secrets.v1.Invalidation} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.secrets.v1.Invalidation.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        alias: jspb.Message.getFieldWithDefault(msg, 1, ''),
        configurationId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        store: jspb.Message.getFieldWithDefault(msg, 3, '')
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.secrets.v1.Invalidation}
 */
proto.secrets.v1.Invalidation.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.secrets.v1.Invalidation();
  return proto.secrets.v1.Invalidation.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.secrets.v1.Invalidation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.secrets.v1.Invalidation}
 */
proto.secrets.v1.Invalidation.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAlias(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setConfigurationId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setStore(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.secrets.v1.Invalidation.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.secrets.v1.Invalidation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.secrets.v1.Invalidation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.secrets.v1.Invalidation.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getConfigurationId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getStore();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional string alias = 1;
 * @return {string}
 */
proto.secrets.v1.Invalidation.prototype.getAlias = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.secrets.v1.Invalidation} returns this
 */
proto.secrets.v1.Invalidation.prototype.setAlias = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string configuration_id = 2;
 * @return {string}
 */
proto.secrets.v1.Invalidation.prototype.getConfigurationId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.secrets.v1.Invalidation} returns this
 */
proto.secrets.v1.Invalidation.prototype.setConfigurationId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string store = 3;
 * @return {string}
 */
proto.secrets.v1.Invalidation.prototype.getStore = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.secrets.v1.Invalidation} returns this
 */
proto.secrets.v1.Invalidation.prototype.setStore = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

goog.object.extend(exports, proto.secrets.v1);
