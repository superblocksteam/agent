// source: common/v1/errors.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

goog.exportSymbol('proto.common.v1.Code', null, global);
goog.exportSymbol('proto.common.v1.Error', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.v1.Error = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.v1.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.v1.Error.displayName = 'proto.common.v1.Error';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.common.v1.Error.prototype.toObject = function (opt_includeInstance) {
    return proto.common.v1.Error.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.common.v1.Error} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.common.v1.Error.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ''),
        message: jspb.Message.getFieldWithDefault(msg, 2, ''),
        handled: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
        blockPath: jspb.Message.getFieldWithDefault(msg, 4, ''),
        formPath: jspb.Message.getFieldWithDefault(msg, 5, ''),
        code: jspb.Message.getFieldWithDefault(msg, 6, 0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.v1.Error}
 */
proto.common.v1.Error.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.v1.Error();
  return proto.common.v1.Error.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.v1.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.v1.Error}
 */
proto.common.v1.Error.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      case 3:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setHandled(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setBlockPath(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setFormPath(value);
        break;
      case 6:
        var value = /** @type {!proto.common.v1.Code} */ (reader.readEnum());
        msg.setCode(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.v1.Error.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.common.v1.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.v1.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.v1.Error.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getHandled();
  if (f) {
    writer.writeBool(3, f);
  }
  f = message.getBlockPath();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getFormPath();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(6, f);
  }
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.common.v1.Error.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.common.v1.Error} returns this
 */
proto.common.v1.Error.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.common.v1.Error.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.common.v1.Error} returns this
 */
proto.common.v1.Error.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional bool handled = 3;
 * @return {boolean}
 */
proto.common.v1.Error.prototype.getHandled = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};

/**
 * @param {boolean} value
 * @return {!proto.common.v1.Error} returns this
 */
proto.common.v1.Error.prototype.setHandled = function (value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};

/**
 * optional string block_path = 4;
 * @return {string}
 */
proto.common.v1.Error.prototype.getBlockPath = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.common.v1.Error} returns this
 */
proto.common.v1.Error.prototype.setBlockPath = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string form_path = 5;
 * @return {string}
 */
proto.common.v1.Error.prototype.getFormPath = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.common.v1.Error} returns this
 */
proto.common.v1.Error.prototype.setFormPath = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional Code code = 6;
 * @return {!proto.common.v1.Code}
 */
proto.common.v1.Error.prototype.getCode = function () {
  return /** @type {!proto.common.v1.Code} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {!proto.common.v1.Code} value
 * @return {!proto.common.v1.Error} returns this
 */
proto.common.v1.Error.prototype.setCode = function (value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};

/**
 * @enum {number}
 */
proto.common.v1.Code = {
  CODE_UNSPECIFIED: 0,
  CODE_INTEGRATION_AUTHORIZATION: 1,
  CODE_INTEGRATION_NETWORK: 2,
  CODE_INTEGRATION_QUERY_TIMEOUT: 3,
  CODE_INTEGRATION_SYNTAX: 4,
  CODE_INTEGRATION_LOGIC: 5,
  CODE_INTEGRATION_MISSING_REQUIRED_FIELD: 6,
  CODE_INTEGRATION_RATE_LIMIT: 7,
  CODE_INTEGRATION_USER_CANCELLED: 8,
  CODE_INTEGRATION_INTERNAL: 9
};

goog.object.extend(exports, proto.common.v1);
