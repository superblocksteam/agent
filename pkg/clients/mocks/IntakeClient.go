// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	event "github.com/cloudevents/sdk-go/v2/event"

	mock "github.com/stretchr/testify/mock"

	time "time"

	v1 "github.com/superblocksteam/agent/types/gen/go/syncer/v1"
)

// IntakeClient is an autogenerated mock type for the IntakeClient type
type IntakeClient struct {
	mock.Mock
}

// LogCloudEvents provides a mock function with given fields: ctx, timeout, events
func (_m *IntakeClient) LogCloudEvents(ctx context.Context, timeout *time.Duration, events []*event.Event) (*http.Response, error) {
	ret := _m.Called(ctx, timeout, events)

	if len(ret) == 0 {
		panic("no return value specified for LogCloudEvents")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, []*event.Event) (*http.Response, error)); ok {
		return rf(ctx, timeout, events)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, []*event.Event) *http.Response); ok {
		r0 = rf(ctx, timeout, events)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, []*event.Event) error); ok {
		r1 = rf(ctx, timeout, events)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendRemoteLogs provides a mock function with given fields: ctx, timeout, headers, body
func (_m *IntakeClient) SendRemoteLogs(ctx context.Context, timeout *time.Duration, headers http.Header, body interface{}) (*http.Response, error) {
	ret := _m.Called(ctx, timeout, headers, body)

	if len(ret) == 0 {
		panic("no return value specified for SendRemoteLogs")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, interface{}) (*http.Response, error)); ok {
		return rf(ctx, timeout, headers, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, interface{}) *http.Response); ok {
		r0 = rf(ctx, timeout, headers, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, http.Header, interface{}) error); ok {
		r1 = rf(ctx, timeout, headers, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertMetadata provides a mock function with given fields: ctx, timeout, body
func (_m *IntakeClient) UpsertMetadata(ctx context.Context, timeout *time.Duration, body *v1.UpsertMetadataRequest) (*http.Response, error) {
	ret := _m.Called(ctx, timeout, body)

	if len(ret) == 0 {
		panic("no return value specified for UpsertMetadata")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, *v1.UpsertMetadataRequest) (*http.Response, error)); ok {
		return rf(ctx, timeout, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, *v1.UpsertMetadataRequest) *http.Response); ok {
		r0 = rf(ctx, timeout, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, *v1.UpsertMetadataRequest) error); ok {
		r1 = rf(ctx, timeout, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIntakeClient creates a new instance of IntakeClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIntakeClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IntakeClient {
	mock := &IntakeClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
