// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	agentv1 "github.com/superblocksteam/agent/types/gen/go/agent/v1"

	context "context"

	http "net/http"

	mock "github.com/stretchr/testify/mock"

	securityv1 "github.com/superblocksteam/agent/types/gen/go/security/v1"

	time "time"

	url "net/url"

	v1 "github.com/superblocksteam/agent/types/gen/go/api/v1"
)

// ServerClient is an autogenerated mock type for the ServerClient type
type ServerClient struct {
	mock.Mock
}

// DeleteAgent provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ServerClient) DeleteAgent(_a0 context.Context, _a1 *time.Duration, _a2 http.Header, _a3 url.Values) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAgent")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, http.Header, url.Values) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrgUserToken provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ServerClient) DeleteOrgUserToken(_a0 context.Context, _a1 *time.Duration, _a2 http.Header, _a3 url.Values) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrgUserToken")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, http.Header, url.Values) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSpecificUserTokens provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ServerClient) DeleteSpecificUserTokens(_a0 context.Context, _a1 *time.Duration, _a2 http.Header, _a3 url.Values) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSpecificUserTokens")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, http.Header, url.Values) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApi provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6
func (_m *ServerClient) GetApi(_a0 context.Context, _a1 *time.Duration, _a2 http.Header, _a3 url.Values, _a4 string, _a5 bool, _a6 string) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6)

	if len(ret) == 0 {
		panic("no return value specified for GetApi")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, string, bool, string) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, string, bool, string) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, http.Header, url.Values, string, bool, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntegrationConfiguration provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *ServerClient) GetIntegrationConfiguration(_a0 context.Context, _a1 *time.Duration, _a2 http.Header, _a3 url.Values, _a4 string) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for GetIntegrationConfiguration")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, string) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, string) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, http.Header, url.Values, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntegrations provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *ServerClient) GetIntegrations(_a0 context.Context, _a1 *time.Duration, _a2 http.Header, _a3 url.Values, _a4 bool) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for GetIntegrations")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, bool) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, bool) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, http.Header, url.Values, bool) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrgUserToken provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *ServerClient) GetOrgUserToken(_a0 context.Context, _a1 *time.Duration, _a2 http.Header, _a3 url.Values, _a4 interface{}) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgUserToken")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpecificUserToken provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *ServerClient) GetSpecificUserToken(_a0 context.Context, _a1 *time.Duration, _a2 http.Header, _a3 url.Values, _a4 interface{}) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for GetSpecificUserToken")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchApis provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *ServerClient) PatchApis(_a0 context.Context, _a1 *time.Duration, _a2 http.Header, _a3 url.Values, _a4 *v1.PatchApisRequest) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for PatchApis")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, *v1.PatchApisRequest) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, *v1.PatchApisRequest) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, http.Header, url.Values, *v1.PatchApisRequest) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostAuditLogs provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *ServerClient) PostAuditLogs(_a0 context.Context, _a1 *time.Duration, _a2 http.Header, _a3 url.Values, _a4 *agentv1.AuditLogRequest) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for PostAuditLogs")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, *agentv1.AuditLogRequest) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, *agentv1.AuditLogRequest) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, http.Header, url.Values, *agentv1.AuditLogRequest) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostClaimKeyRotationResourcesForSigning provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ServerClient) PostClaimKeyRotationResourcesForSigning(_a0 context.Context, _a1 *time.Duration, _a2 http.Header, _a3 *securityv1.ResourcesToResignRequest) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for PostClaimKeyRotationResourcesForSigning")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, *securityv1.ResourcesToResignRequest) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, *securityv1.ResourcesToResignRequest) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, http.Header, *securityv1.ResourcesToResignRequest) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostClaimKeyRotationResourcesForSigningV2 provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ServerClient) PostClaimKeyRotationResourcesForSigningV2(_a0 context.Context, _a1 *time.Duration, _a2 http.Header, _a3 *securityv1.ResourcesToResignRequest) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for PostClaimKeyRotationResourcesForSigningV2")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, *securityv1.ResourcesToResignRequest) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, *securityv1.ResourcesToResignRequest) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, http.Header, *securityv1.ResourcesToResignRequest) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostDatasource provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *ServerClient) PostDatasource(_a0 context.Context, _a1 *time.Duration, _a2 http.Header, _a3 url.Values, _a4 string) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for PostDatasource")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, string) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, string) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, http.Header, url.Values, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostGSheetsTokenRefresh provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *ServerClient) PostGSheetsTokenRefresh(_a0 context.Context, _a1 *time.Duration, _a2 http.Header, _a3 url.Values, _a4 interface{}) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for PostGSheetsTokenRefresh")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostHealthcheck provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *ServerClient) PostHealthcheck(_a0 context.Context, _a1 *time.Duration, _a2 http.Header, _a3 url.Values, _a4 interface{}) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for PostHealthcheck")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostOrgUserToken provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *ServerClient) PostOrgUserToken(_a0 context.Context, _a1 *time.Duration, _a2 http.Header, _a3 url.Values, _a4 interface{}) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for PostOrgUserToken")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostPendingJobs provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *ServerClient) PostPendingJobs(_a0 context.Context, _a1 *time.Duration, _a2 http.Header, _a3 url.Values, _a4 interface{}) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for PostPendingJobs")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRegister provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *ServerClient) PostRegister(_a0 context.Context, _a1 *time.Duration, _a2 http.Header, _a3 url.Values, _a4 interface{}) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for PostRegister")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostSpecificUserToken provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *ServerClient) PostSpecificUserToken(_a0 context.Context, _a1 *time.Duration, _a2 http.Header, _a3 url.Values, _a4 interface{}) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for PostSpecificUserToken")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, http.Header, url.Values, interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutApplicationSignatures provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *ServerClient) PutApplicationSignatures(_a0 context.Context, _a1 *time.Duration, _a2 http.Header, _a3 url.Values, _a4 *v1.UpdateApplicationSignaturesRequest) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for PutApplicationSignatures")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, *v1.UpdateApplicationSignaturesRequest) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration, http.Header, url.Values, *v1.UpdateApplicationSignaturesRequest) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Duration, http.Header, url.Values, *v1.UpdateApplicationSignaturesRequest) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServerClient creates a new instance of ServerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServerClient {
	mock := &ServerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
