// Code generated by mockery v2.42.0. DO NOT EDIT.

package engine

import (
	mock "github.com/stretchr/testify/mock"
	engine "github.com/superblocksteam/agent/pkg/engine"
)

// Value is an autogenerated mock type for the Value type
type Value struct {
	mock.Mock
}

// Console provides a mock function with given fields:
func (_m *Value) Console() *engine.Console {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Console")
	}

	var r0 *engine.Console
	if rf, ok := ret.Get(0).(func() *engine.Console); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*engine.Console)
		}
	}

	return r0
}

// Err provides a mock function with given fields:
func (_m *Value) Err() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JSON provides a mock function with given fields:
func (_m *Value) JSON() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for JSON")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Result provides a mock function with given fields: _a0
func (_m *Value) Result(_a0 ...engine.ResultOption) (interface{}, error) {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Result")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(...engine.ResultOption) (interface{}, error)); ok {
		return rf(_a0...)
	}
	if rf, ok := ret.Get(0).(func(...engine.ResultOption) interface{}); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(...engine.ResultOption) error); ok {
		r1 = rf(_a0...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewValue creates a new instance of Value. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValue(t interface {
	mock.TestingT
	Cleanup(func())
}) *Value {
	mock := &Value{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
