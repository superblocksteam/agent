// Code generated by mockery v2.42.0. DO NOT EDIT.

package engine

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	engine "github.com/superblocksteam/agent/pkg/engine"

	utils "github.com/superblocksteam/agent/pkg/utils"

	v1 "github.com/superblocksteam/agent/types/gen/go/transport/v1"
)

// Engine is an autogenerated mock type for the Engine type
type Engine struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Engine) Close() {
	_m.Called()
}

// Failed provides a mock function with given fields: _a0
func (_m *Engine) Failed(_a0 error) engine.Value {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Failed")
	}

	var r0 engine.Value
	if rf, ok := ret.Get(0).(func(error) engine.Value); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(engine.Value)
		}
	}

	return r0
}

// Resolve provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Engine) Resolve(_a0 context.Context, _a1 string, _a2 utils.Map[*v1.Variable], _a3 ...engine.ResolveOption) engine.Value {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 engine.Value
	if rf, ok := ret.Get(0).(func(context.Context, string, utils.Map[*v1.Variable], ...engine.ResolveOption) engine.Value); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(engine.Value)
		}
	}

	return r0
}

// NewEngine creates a new instance of Engine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *Engine {
	mock := &Engine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
