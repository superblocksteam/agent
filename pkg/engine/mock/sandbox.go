// Code generated by mockery v2.42.0. DO NOT EDIT.

package engine

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	engine "github.com/superblocksteam/agent/pkg/engine"
)

// Sandbox is an autogenerated mock type for the Sandbox type
type Sandbox struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Sandbox) Close() {
	_m.Called()
}

// Engine provides a mock function with given fields: _a0
func (_m *Sandbox) Engine(_a0 context.Context) (engine.Engine, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Engine")
	}

	var r0 engine.Engine
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (engine.Engine, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) engine.Engine); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(engine.Engine)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSandbox creates a new instance of Sandbox. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSandbox(t interface {
	mock.TestingT
	Cleanup(func())
}) *Sandbox {
	mock := &Sandbox{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
