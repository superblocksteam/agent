// Code generated by mockery v2.42.0. DO NOT EDIT.

package functions

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/superblocksteam/agent/types/gen/go/api/v1"
)

// Bus is an autogenerated mock type for the Bus type
type Bus struct {
	mock.Mock
}

// RoundTrip provides a mock function with given fields: _a0, _a1
func (_m *Bus) RoundTrip(_a0 context.Context, _a1 *v1.Function_Request) (*v1.Function_Response, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RoundTrip")
	}

	var r0 *v1.Function_Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Function_Request) (*v1.Function_Response, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Function_Request) *v1.Function_Response); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Function_Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.Function_Request) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBus creates a new instance of Bus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBus(t interface {
	mock.TestingT
	Cleanup(func())
}) *Bus {
	mock := &Bus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
