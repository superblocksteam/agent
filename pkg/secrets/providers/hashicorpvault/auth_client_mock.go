// Code generated by mockery v2.42.0. DO NOT EDIT.

package hashicorpvault

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	schema "github.com/hashicorp/vault-client-go/schema"

	vault "github.com/hashicorp/vault-client-go"
)

// mockAuthClient is an autogenerated mock type for the authClient type
type mockAuthClient struct {
	mock.Mock
}

// TokenLookUpSelf provides a mock function with given fields: _a0, _a1
func (_m *mockAuthClient) TokenLookUpSelf(_a0 context.Context, _a1 ...vault.RequestOption) (*vault.Response[map[string]interface{}], error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TokenLookUpSelf")
	}

	var r0 *vault.Response[map[string]interface{}]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...vault.RequestOption) (*vault.Response[map[string]interface{}], error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...vault.RequestOption) *vault.Response[map[string]interface{}]); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vault.Response[map[string]interface{}])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...vault.RequestOption) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenRenewSelf provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockAuthClient) TokenRenewSelf(_a0 context.Context, _a1 schema.TokenRenewSelfRequest, _a2 ...vault.RequestOption) (*vault.Response[map[string]interface{}], error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TokenRenewSelf")
	}

	var r0 *vault.Response[map[string]interface{}]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, schema.TokenRenewSelfRequest, ...vault.RequestOption) (*vault.Response[map[string]interface{}], error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, schema.TokenRenewSelfRequest, ...vault.RequestOption) *vault.Response[map[string]interface{}]); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vault.Response[map[string]interface{}])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, schema.TokenRenewSelfRequest, ...vault.RequestOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockAuthClient creates a new instance of mockAuthClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAuthClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAuthClient {
	mock := &mockAuthClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
