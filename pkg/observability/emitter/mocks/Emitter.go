// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	slog "log/slog"

	time "time"

	zap "go.uber.org/zap"
)

// Emitter is an autogenerated mock type for the Emitter type
type Emitter struct {
	mock.Mock
}

// Alive provides a mock function with given fields:
func (_m *Emitter) Alive() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Alive")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Close provides a mock function with given fields: _a0
func (_m *Emitter) Close(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Enabled provides a mock function with given fields:
func (_m *Emitter) Enabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Enabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Fields provides a mock function with given fields:
func (_m *Emitter) Fields() []slog.Attr {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fields")
	}

	var r0 []slog.Attr
	if rf, ok := ret.Get(0).(func() []slog.Attr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]slog.Attr)
		}
	}

	return r0
}

// Flush provides a mock function with given fields: _a0
func (_m *Emitter) Flush(_a0 chan struct{}) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(chan struct{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Logger provides a mock function with given fields: _a0
func (_m *Emitter) Logger(_a0 *zap.Logger) {
	_m.Called(_a0)
}

// Name provides a mock function with given fields:
func (_m *Emitter) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Run provides a mock function with given fields: _a0
func (_m *Emitter) Run(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Trigger provides a mock function with given fields:
func (_m *Emitter) Trigger() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Trigger")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Write provides a mock function with given fields: _a0, level, message, fields
func (_m *Emitter) Write(_a0 time.Time, level string, message string, fields map[string]interface{}) error {
	ret := _m.Called(_a0, level, message, fields)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time, string, string, map[string]interface{}) error); ok {
		r0 = rf(_a0, level, message, fields)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEmitter creates a new instance of Emitter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmitter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Emitter {
	mock := &Emitter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
