// Code generated by mockery v2.42.0. DO NOT EDIT.

package signature

import mock "github.com/stretchr/testify/mock"

// MockSignature is an autogenerated mock type for the Signature type
type MockSignature struct {
	mock.Mock
}

// Algorithm provides a mock function with given fields:
func (_m *MockSignature) Algorithm() SigningAlgorithm {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Algorithm")
	}

	var r0 SigningAlgorithm
	if rf, ok := ret.Get(0).(func() SigningAlgorithm); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(SigningAlgorithm)
	}

	return r0
}

// PublicKey provides a mock function with given fields:
func (_m *MockSignature) PublicKey() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PublicKey")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Sign provides a mock function with given fields: payload
func (_m *MockSignature) Sign(payload []byte) ([]byte, error) {
	ret := _m.Called(payload)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(payload)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: payload, signature
func (_m *MockSignature) Verify(payload []byte, signature []byte) error {
	ret := _m.Called(payload, signature)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = rf(payload, signature)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockSignature creates a new instance of MockSignature. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSignature(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSignature {
	mock := &MockSignature{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
