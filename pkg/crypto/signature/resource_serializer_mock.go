// Code generated by mockery v2.42.0. DO NOT EDIT.

package signature

import (
	mock "github.com/stretchr/testify/mock"
	v1 "github.com/superblocksteam/agent/types/gen/go/security/v1"
)

// MockResourceSerializer is an autogenerated mock type for the ResourceSerializer type
type MockResourceSerializer struct {
	mock.Mock
}

// Serialize provides a mock function with given fields: _a0
func (_m *MockResourceSerializer) Serialize(_a0 *v1.Resource) ([]byte, []byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Serialize")
	}

	var r0 []byte
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(*v1.Resource) ([]byte, []byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*v1.Resource) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1.Resource) []byte); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(*v1.Resource) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateResourceWithSignature provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockResourceSerializer) UpdateResourceWithSignature(_a0 *v1.Resource, _a1 string, _a2 []byte) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResourceWithSignature")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Resource, string, []byte) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockResourceSerializer creates a new instance of MockResourceSerializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResourceSerializer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResourceSerializer {
	mock := &MockResourceSerializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
