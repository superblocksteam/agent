// Code generated by mockery v2.42.0. DO NOT EDIT.

package flagsclient

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	slog "log/slog"
)

// MockFlagsClient is an autogenerated mock type for the FlagsClient type
type MockFlagsClient struct {
	mock.Mock
}

// Alive provides a mock function with given fields:
func (_m *MockFlagsClient) Alive() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Alive")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Close provides a mock function with given fields: _a0
func (_m *MockFlagsClient) Close(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fields provides a mock function with given fields:
func (_m *MockFlagsClient) Fields() []slog.Attr {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fields")
	}

	var r0 []slog.Attr
	if rf, ok := ret.Get(0).(func() []slog.Attr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]slog.Attr)
		}
	}

	return r0
}

// GetBoolVariation provides a mock function with given fields: flag, tier, orgId, fallback
func (_m *MockFlagsClient) GetBoolVariation(flag string, tier string, orgId string, fallback bool) bool {
	ret := _m.Called(flag, tier, orgId, fallback)

	if len(ret) == 0 {
		panic("no return value specified for GetBoolVariation")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, string, bool) bool); ok {
		r0 = rf(flag, tier, orgId, fallback)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetBoolVariationByOrg provides a mock function with given fields: flag, orgId, fallback
func (_m *MockFlagsClient) GetBoolVariationByOrg(flag string, orgId string, fallback bool) bool {
	ret := _m.Called(flag, orgId, fallback)

	if len(ret) == 0 {
		panic("no return value specified for GetBoolVariationByOrg")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, bool) bool); ok {
		r0 = rf(flag, orgId, fallback)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetBoolVariationCustomDims provides a mock function with given fields: flag, orgId, dims, fallback
func (_m *MockFlagsClient) GetBoolVariationCustomDims(flag string, orgId string, dims map[string]string, fallback bool) bool {
	ret := _m.Called(flag, orgId, dims, fallback)

	if len(ret) == 0 {
		panic("no return value specified for GetBoolVariationCustomDims")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, map[string]string, bool) bool); ok {
		r0 = rf(flag, orgId, dims, fallback)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetFloatVariation provides a mock function with given fields: flag, tier, orgId, fallback
func (_m *MockFlagsClient) GetFloatVariation(flag string, tier string, orgId string, fallback float64) float64 {
	ret := _m.Called(flag, tier, orgId, fallback)

	if len(ret) == 0 {
		panic("no return value specified for GetFloatVariation")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, string, string, float64) float64); ok {
		r0 = rf(flag, tier, orgId, fallback)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// GetFloatVariationByOrg provides a mock function with given fields: flag, orgId, fallback
func (_m *MockFlagsClient) GetFloatVariationByOrg(flag string, orgId string, fallback float64) float64 {
	ret := _m.Called(flag, orgId, fallback)

	if len(ret) == 0 {
		panic("no return value specified for GetFloatVariationByOrg")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, string, float64) float64); ok {
		r0 = rf(flag, orgId, fallback)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// GetFloatVariationCustomDims provides a mock function with given fields: flag, orgId, dims, fallback
func (_m *MockFlagsClient) GetFloatVariationCustomDims(flag string, orgId string, dims map[string]string, fallback float64) float64 {
	ret := _m.Called(flag, orgId, dims, fallback)

	if len(ret) == 0 {
		panic("no return value specified for GetFloatVariationCustomDims")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, string, map[string]string, float64) float64); ok {
		r0 = rf(flag, orgId, dims, fallback)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// GetIntVariation provides a mock function with given fields: flag, tier, orgId, fallback
func (_m *MockFlagsClient) GetIntVariation(flag string, tier string, orgId string, fallback int) int {
	ret := _m.Called(flag, tier, orgId, fallback)

	if len(ret) == 0 {
		panic("no return value specified for GetIntVariation")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string, string, int) int); ok {
		r0 = rf(flag, tier, orgId, fallback)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetIntVariationByOrg provides a mock function with given fields: flag, orgId, fallback
func (_m *MockFlagsClient) GetIntVariationByOrg(flag string, orgId string, fallback int) int {
	ret := _m.Called(flag, orgId, fallback)

	if len(ret) == 0 {
		panic("no return value specified for GetIntVariationByOrg")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string, int) int); ok {
		r0 = rf(flag, orgId, fallback)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetIntVariationCustomDims provides a mock function with given fields: flag, orgId, dims, fallback
func (_m *MockFlagsClient) GetIntVariationCustomDims(flag string, orgId string, dims map[string]string, fallback int) int {
	ret := _m.Called(flag, orgId, dims, fallback)

	if len(ret) == 0 {
		panic("no return value specified for GetIntVariationCustomDims")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string, map[string]string, int) int); ok {
		r0 = rf(flag, orgId, dims, fallback)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetStringVariation provides a mock function with given fields: flag, tier, orgId, fallback
func (_m *MockFlagsClient) GetStringVariation(flag string, tier string, orgId string, fallback string) string {
	ret := _m.Called(flag, tier, orgId, fallback)

	if len(ret) == 0 {
		panic("no return value specified for GetStringVariation")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, string) string); ok {
		r0 = rf(flag, tier, orgId, fallback)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetStringVariationByOrg provides a mock function with given fields: flag, orgId, fallback
func (_m *MockFlagsClient) GetStringVariationByOrg(flag string, orgId string, fallback string) string {
	ret := _m.Called(flag, orgId, fallback)

	if len(ret) == 0 {
		panic("no return value specified for GetStringVariationByOrg")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(flag, orgId, fallback)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetStringVariationCustomDims provides a mock function with given fields: flag, orgId, dims, fallback
func (_m *MockFlagsClient) GetStringVariationCustomDims(flag string, orgId string, dims map[string]string, fallback string) string {
	ret := _m.Called(flag, orgId, dims, fallback)

	if len(ret) == 0 {
		panic("no return value specified for GetStringVariationCustomDims")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, map[string]string, string) string); ok {
		r0 = rf(flag, orgId, dims, fallback)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *MockFlagsClient) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Run provides a mock function with given fields: _a0
func (_m *MockFlagsClient) Run(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockFlagsClient creates a new instance of MockFlagsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFlagsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFlagsClient {
	mock := &MockFlagsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
