// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	structpb "google.golang.org/protobuf/types/known/structpb"
)

// Mocker is an autogenerated mock type for the Mocker type
type Mocker struct {
	mock.Mock
}

// Handle provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Mocker) Handle(_a0 context.Context, _a1 string, _a2 string, _a3 *structpb.Struct) (*structpb.Value, bool, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 *structpb.Value
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *structpb.Struct) (*structpb.Value, bool, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *structpb.Struct) *structpb.Value); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structpb.Value)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *structpb.Struct) bool); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, *structpb.Struct) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewMocker creates a new instance of Mocker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mocker {
	mock := &Mocker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
