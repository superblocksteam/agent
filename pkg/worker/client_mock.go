// Code generated by mockery v2.42.0. DO NOT EDIT.

package worker

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	options "github.com/superblocksteam/agent/pkg/worker/options"

	slog "log/slog"

	structpb "google.golang.org/protobuf/types/known/structpb"

	v1 "github.com/superblocksteam/agent/types/gen/go/transport/v1"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// Alive provides a mock function with given fields:
func (_m *MockClient) Alive() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Alive")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Close provides a mock function with given fields: _a0
func (_m *MockClient) Close(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Execute provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockClient) Execute(_a0 context.Context, _a1 string, _a2 *v1.Request_Data_Data, _a3 ...options.Option) (*v1.Performance, string, error) {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *v1.Performance
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Request_Data_Data, ...options.Option) (*v1.Performance, string, error)); ok {
		return rf(_a0, _a1, _a2, _a3...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.Request_Data_Data, ...options.Option) *v1.Performance); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Performance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *v1.Request_Data_Data, ...options.Option) string); ok {
		r1 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *v1.Request_Data_Data, ...options.Option) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Fields provides a mock function with given fields:
func (_m *MockClient) Fields() []slog.Attr {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fields")
	}

	var r0 []slog.Attr
	if rf, ok := ret.Get(0).(func() []slog.Attr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]slog.Attr)
		}
	}

	return r0
}

// Metadata provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockClient) Metadata(_a0 context.Context, _a1 string, _a2 *structpb.Struct, _a3 *structpb.Struct) (*v1.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for Metadata")
	}

	var r0 *v1.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *structpb.Struct, *structpb.Struct) (*v1.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *structpb.Struct, *structpb.Struct) *v1.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *structpb.Struct, *structpb.Struct) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *MockClient) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PreDelete provides a mock function with given fields: ctx, pluginName, datasourceConfig
func (_m *MockClient) PreDelete(ctx context.Context, pluginName string, datasourceConfig *structpb.Struct) (*v1.Response, error) {
	ret := _m.Called(ctx, pluginName, datasourceConfig)

	if len(ret) == 0 {
		panic("no return value specified for PreDelete")
	}

	var r0 *v1.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *structpb.Struct) (*v1.Response, error)); ok {
		return rf(ctx, pluginName, datasourceConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *structpb.Struct) *v1.Response); ok {
		r0 = rf(ctx, pluginName, datasourceConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *structpb.Struct) error); ok {
		r1 = rf(ctx, pluginName, datasourceConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remote provides a mock function with given fields: _a0, _a1
func (_m *MockClient) Remote(_a0 context.Context, _a1 string) (string, string) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Remote")
	}

	var r0 string
	var r1 string
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, string)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// Run provides a mock function with given fields: _a0
func (_m *MockClient) Run(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TestConnection provides a mock function with given fields: ctx, pluginName, datasourceConfig, actionConfig
func (_m *MockClient) TestConnection(ctx context.Context, pluginName string, datasourceConfig *structpb.Struct, actionConfig *structpb.Struct) (*v1.Response, error) {
	ret := _m.Called(ctx, pluginName, datasourceConfig, actionConfig)

	if len(ret) == 0 {
		panic("no return value specified for TestConnection")
	}

	var r0 *v1.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *structpb.Struct, *structpb.Struct) (*v1.Response, error)); ok {
		return rf(ctx, pluginName, datasourceConfig, actionConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *structpb.Struct, *structpb.Struct) *v1.Response); ok {
		r0 = rf(ctx, pluginName, datasourceConfig, actionConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *structpb.Struct, *structpb.Struct) error); ok {
		r1 = rf(ctx, pluginName, datasourceConfig, actionConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
