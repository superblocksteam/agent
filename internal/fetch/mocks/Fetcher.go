// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	commonv1 "github.com/superblocksteam/agent/types/gen/go/common/v1"

	fetch "github.com/superblocksteam/agent/internal/fetch"

	integrationv1 "github.com/superblocksteam/agent/types/gen/go/integration/v1"

	mock "github.com/stretchr/testify/mock"

	structpb "google.golang.org/protobuf/types/known/structpb"

	syncerv1 "github.com/superblocksteam/agent/types/gen/go/syncer/v1"

	transportv1 "github.com/superblocksteam/agent/types/gen/go/transport/v1"

	v1 "github.com/superblocksteam/agent/types/gen/go/api/v1"
)

// Fetcher is an autogenerated mock type for the Fetcher type
type Fetcher struct {
	mock.Mock
}

// DeleteSpecificUserTokens provides a mock function with given fields: _a0
func (_m *Fetcher) DeleteSpecificUserTokens(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSpecificUserTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchApi provides a mock function with given fields: _a0, request, useAgentKey
func (_m *Fetcher) FetchApi(_a0 context.Context, request *v1.ExecuteRequest_Fetch, useAgentKey bool) (*v1.Definition, *structpb.Struct, error) {
	ret := _m.Called(_a0, request, useAgentKey)

	if len(ret) == 0 {
		panic("no return value specified for FetchApi")
	}

	var r0 *v1.Definition
	var r1 *structpb.Struct
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ExecuteRequest_Fetch, bool) (*v1.Definition, *structpb.Struct, error)); ok {
		return rf(_a0, request, useAgentKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ExecuteRequest_Fetch, bool) *v1.Definition); ok {
		r0 = rf(_a0, request, useAgentKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Definition)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.ExecuteRequest_Fetch, bool) *structpb.Struct); ok {
		r1 = rf(_a0, request, useAgentKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*structpb.Struct)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *v1.ExecuteRequest_Fetch, bool) error); ok {
		r2 = rf(_a0, request, useAgentKey)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FetchIntegration provides a mock function with given fields: _a0, integrationId, profile
func (_m *Fetcher) FetchIntegration(_a0 context.Context, integrationId string, profile *commonv1.Profile) (*fetch.Integration, error) {
	ret := _m.Called(_a0, integrationId, profile)

	if len(ret) == 0 {
		panic("no return value specified for FetchIntegration")
	}

	var r0 *fetch.Integration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *commonv1.Profile) (*fetch.Integration, error)); ok {
		return rf(_a0, integrationId, profile)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *commonv1.Profile) *fetch.Integration); ok {
		r0 = rf(_a0, integrationId, profile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fetch.Integration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *commonv1.Profile) error); ok {
		r1 = rf(_a0, integrationId, profile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchIntegrationMetadata provides a mock function with given fields: _a0, _a1
func (_m *Fetcher) FetchIntegrationMetadata(_a0 context.Context, _a1 string) (*integrationv1.GetIntegrationResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FetchIntegrationMetadata")
	}

	var r0 *integrationv1.GetIntegrationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*integrationv1.GetIntegrationResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *integrationv1.GetIntegrationResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integrationv1.GetIntegrationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchIntegrations provides a mock function with given fields: _a0, _a1, _a2
func (_m *Fetcher) FetchIntegrations(_a0 context.Context, _a1 *integrationv1.GetIntegrationsRequest, _a2 bool) (*integrationv1.GetIntegrationsResponse, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for FetchIntegrations")
	}

	var r0 *integrationv1.GetIntegrationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *integrationv1.GetIntegrationsRequest, bool) (*integrationv1.GetIntegrationsResponse, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *integrationv1.GetIntegrationsRequest, bool) *integrationv1.GetIntegrationsResponse); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integrationv1.GetIntegrationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *integrationv1.GetIntegrationsRequest, bool) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchScheduledJobs provides a mock function with given fields: _a0
func (_m *Fetcher) FetchScheduledJobs(_a0 context.Context) (*transportv1.FetchScheduleJobResp, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FetchScheduledJobs")
	}

	var r0 *transportv1.FetchScheduleJobResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*transportv1.FetchScheduleJobResp, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *transportv1.FetchScheduleJobResp); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transportv1.FetchScheduleJobResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertMetadata provides a mock function with given fields: _a0, _a1
func (_m *Fetcher) UpsertMetadata(_a0 context.Context, _a1 *syncerv1.UpsertMetadataRequest) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpsertMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *syncerv1.UpsertMetadataRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFetcher creates a new instance of Fetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Fetcher {
	mock := &Fetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
