// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/superblocksteam/agent/types/gen/go/plugins/common/v1"
)

// OAuthCodeTokenFetcher is an autogenerated mock type for the OAuthCodeTokenFetcher type
type OAuthCodeTokenFetcher struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx, authType, authConfig, datasourceId, configurationId, pluginId
func (_m *OAuthCodeTokenFetcher) Fetch(ctx context.Context, authType string, authConfig *v1.OAuth_AuthorizationCodeFlow, datasourceId string, configurationId string, pluginId string) (string, string, error) {
	ret := _m.Called(ctx, authType, authConfig, datasourceId, configurationId, pluginId)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.OAuth_AuthorizationCodeFlow, string, string, string) (string, string, error)); ok {
		return rf(ctx, authType, authConfig, datasourceId, configurationId, pluginId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *v1.OAuth_AuthorizationCodeFlow, string, string, string) string); ok {
		r0 = rf(ctx, authType, authConfig, datasourceId, configurationId, pluginId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *v1.OAuth_AuthorizationCodeFlow, string, string, string) string); ok {
		r1 = rf(ctx, authType, authConfig, datasourceId, configurationId, pluginId)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *v1.OAuth_AuthorizationCodeFlow, string, string, string) error); ok {
		r2 = rf(ctx, authType, authConfig, datasourceId, configurationId, pluginId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewOAuthCodeTokenFetcher creates a new instance of OAuthCodeTokenFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOAuthCodeTokenFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *OAuthCodeTokenFetcher {
	mock := &OAuthCodeTokenFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
