// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	structpb "google.golang.org/protobuf/types/known/structpb"
)

// FetcherCacher is an autogenerated mock type for the FetcherCacher type
type FetcherCacher struct {
	mock.Mock
}

// CacheSharedToken provides a mock function with given fields: authType, authConfig, tokenType, tokenValue, expiresAt, integrationId, configurationId
func (_m *FetcherCacher) CacheSharedToken(authType string, authConfig *structpb.Struct, tokenType string, tokenValue string, expiresAt int64, integrationId string, configurationId string) error {
	ret := _m.Called(authType, authConfig, tokenType, tokenValue, expiresAt, integrationId, configurationId)

	if len(ret) == 0 {
		panic("no return value specified for CacheSharedToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *structpb.Struct, string, string, int64, string, string) error); ok {
		r0 = rf(authType, authConfig, tokenType, tokenValue, expiresAt, integrationId, configurationId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheUserToken provides a mock function with given fields: ctx, authType, authConfig, tokenType, tokenValue, expiresAt, integrationId, configurationId
func (_m *FetcherCacher) CacheUserToken(ctx context.Context, authType string, authConfig *structpb.Struct, tokenType string, tokenValue string, expiresAt int64, integrationId string, configurationId string) error {
	ret := _m.Called(ctx, authType, authConfig, tokenType, tokenValue, expiresAt, integrationId, configurationId)

	if len(ret) == 0 {
		panic("no return value specified for CacheUserToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *structpb.Struct, string, string, int64, string, string) error); ok {
		r0 = rf(ctx, authType, authConfig, tokenType, tokenValue, expiresAt, integrationId, configurationId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchSharedToken provides a mock function with given fields: authType, authConfig, tokenType, datasourceId, configurationId
func (_m *FetcherCacher) FetchSharedToken(authType string, authConfig *structpb.Struct, tokenType string, datasourceId string, configurationId string) (string, error) {
	ret := _m.Called(authType, authConfig, tokenType, datasourceId, configurationId)

	if len(ret) == 0 {
		panic("no return value specified for FetchSharedToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *structpb.Struct, string, string, string) (string, error)); ok {
		return rf(authType, authConfig, tokenType, datasourceId, configurationId)
	}
	if rf, ok := ret.Get(0).(func(string, *structpb.Struct, string, string, string) string); ok {
		r0 = rf(authType, authConfig, tokenType, datasourceId, configurationId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, *structpb.Struct, string, string, string) error); ok {
		r1 = rf(authType, authConfig, tokenType, datasourceId, configurationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchUserToken provides a mock function with given fields: ctx, authType, authConfig, tokenType
func (_m *FetcherCacher) FetchUserToken(ctx context.Context, authType string, authConfig *structpb.Struct, tokenType string) (string, error) {
	ret := _m.Called(ctx, authType, authConfig, tokenType)

	if len(ret) == 0 {
		panic("no return value specified for FetchUserToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *structpb.Struct, string) (string, error)); ok {
		return rf(ctx, authType, authConfig, tokenType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *structpb.Struct, string) string); ok {
		r0 = rf(ctx, authType, authConfig, tokenType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *structpb.Struct, string) error); ok {
		r1 = rf(ctx, authType, authConfig, tokenType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFetcherCacher creates a new instance of FetcherCacher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFetcherCacher(t interface {
	mock.TestingT
	Cleanup(func())
}) *FetcherCacher {
	mock := &FetcherCacher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
