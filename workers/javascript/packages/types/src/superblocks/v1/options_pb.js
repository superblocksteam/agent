"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file superblocks/v1/options.proto (package superblocks.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationOptions = exports.Integrations = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * @generated from message superblocks.v1.Integrations
 */
class Integrations extends protobuf_1.Message {
    /**
     * @generated from field: bool registry = 1;
     */
    registry = false;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "superblocks.v1.Integrations";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "registry", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    ]);
    static fromBinary(bytes, options) {
        return new Integrations().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Integrations().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Integrations().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Integrations, a, b);
    }
}
exports.Integrations = Integrations;
/**
 * @generated from message superblocks.v1.IntegrationOptions
 */
class IntegrationOptions extends protobuf_1.Message {
    /**
     * @generated from field: string pluginType = 2;
     */
    pluginType = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "superblocks.v1.IntegrationOptions";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 2, name: "pluginType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new IntegrationOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IntegrationOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IntegrationOptions().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(IntegrationOptions, a, b);
    }
}
exports.IntegrationOptions = IntegrationOptions;
//# sourceMappingURL=options_pb.map