// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file intake/v1/logs.proto (package intake.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct } from "@bufbuild/protobuf";

/**
 * @generated from message intake.v1.Logs
 */
export class Logs extends Message<Logs> {
  /**
   * @generated from field: repeated google.protobuf.Struct logs = 1;
   */
  logs: Struct[] = [];

  constructor(data?: PartialMessage<Logs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "intake.v1.Logs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "logs", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Logs {
    return new Logs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Logs {
    return new Logs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Logs {
    return new Logs().fromJsonString(jsonString, options);
  }

  static equals(a: Logs | PlainMessage<Logs> | undefined, b: Logs | PlainMessage<Logs> | undefined): boolean {
    return proto3.util.equals(Logs, a, b);
  }
}

