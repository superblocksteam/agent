// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file api/v1/requests.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct, Timestamp } from "@bufbuild/protobuf";
import { Api } from "./api_pb";
import { Link, Links } from "../../common/v1/api_pb";
import { Error } from "../../common/v1/errors_pb";
import { Signature, Signature_Algorithm } from "../../utils/v1/utils_pb";

/**
 * @generated from message api.v1.PatchApi
 */
export class PatchApi extends Message<PatchApi> {
  /**
   * @generated from field: api.v1.Api api = 1;
   */
  api?: Api;

  /**
   * @generated from oneof api.v1.PatchApi.git_ref
   */
  gitRef: {
    /**
     * @generated from field: string commit_id = 2;
     */
    value: string;
    case: "commitId";
  } | {
    /**
     * @generated from field: string branch_name = 3;
     */
    value: string;
    case: "branchName";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PatchApi>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PatchApi";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "api", kind: "message", T: Api },
    { no: 2, name: "commit_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "git_ref" },
    { no: 3, name: "branch_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "git_ref" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchApi {
    return new PatchApi().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchApi {
    return new PatchApi().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchApi {
    return new PatchApi().fromJsonString(jsonString, options);
  }

  static equals(a: PatchApi | PlainMessage<PatchApi> | undefined, b: PatchApi | PlainMessage<PatchApi> | undefined): boolean {
    return proto3.util.equals(PatchApi, a, b);
  }
}

/**
 * PATCH api/v3/apis
 *
 * @generated from message api.v1.PatchApisRequest
 */
export class PatchApisRequest extends Message<PatchApisRequest> {
  /**
   * @generated from field: repeated api.v1.PatchApi patches = 1;
   */
  patches: PatchApi[] = [];

  constructor(data?: PartialMessage<PatchApisRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PatchApisRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "patches", kind: "message", T: PatchApi, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchApisRequest {
    return new PatchApisRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchApisRequest {
    return new PatchApisRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchApisRequest {
    return new PatchApisRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchApisRequest | PlainMessage<PatchApisRequest> | undefined, b: PatchApisRequest | PlainMessage<PatchApisRequest> | undefined): boolean {
    return proto3.util.equals(PatchApisRequest, a, b);
  }
}

/**
 * @generated from message api.v1.PatchApisResponse
 */
export class PatchApisResponse extends Message<PatchApisResponse> {
  /**
   * @generated from field: repeated api.v1.PatchApisResponse.Status statuses = 1;
   */
  statuses: PatchApisResponse_Status[] = [];

  /**
   * @generated from field: map<string, common.v1.Link> links = 2;
   */
  links: { [key: string]: Link } = {};

  /**
   * @generated from field: repeated common.v1.Links links_v2 = 3;
   */
  linksV2: Links[] = [];

  constructor(data?: PartialMessage<PatchApisResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PatchApisResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "statuses", kind: "message", T: PatchApisResponse_Status, repeated: true },
    { no: 2, name: "links", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Link} },
    { no: 3, name: "links_v2", kind: "message", T: Links, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchApisResponse {
    return new PatchApisResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchApisResponse {
    return new PatchApisResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchApisResponse {
    return new PatchApisResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PatchApisResponse | PlainMessage<PatchApisResponse> | undefined, b: PatchApisResponse | PlainMessage<PatchApisResponse> | undefined): boolean {
    return proto3.util.equals(PatchApisResponse, a, b);
  }
}

/**
 * @generated from message api.v1.PatchApisResponse.Status
 */
export class PatchApisResponse_Status extends Message<PatchApisResponse_Status> {
  /**
   * @generated from field: string api_id = 1;
   */
  apiId = "";

  /**
   * @generated from field: int32 code = 2;
   */
  code = 0;

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  /**
   * @generated from field: common.v1.Error error = 4;
   */
  error?: Error;

  constructor(data?: PartialMessage<PatchApisResponse_Status>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PatchApisResponse.Status";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "api_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "error", kind: "message", T: Error },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchApisResponse_Status {
    return new PatchApisResponse_Status().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchApisResponse_Status {
    return new PatchApisResponse_Status().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchApisResponse_Status {
    return new PatchApisResponse_Status().fromJsonString(jsonString, options);
  }

  static equals(a: PatchApisResponse_Status | PlainMessage<PatchApisResponse_Status> | undefined, b: PatchApisResponse_Status | PlainMessage<PatchApisResponse_Status> | undefined): boolean {
    return proto3.util.equals(PatchApisResponse_Status, a, b);
  }
}

/**
 * @generated from message api.v1.UpdateApiSignature
 */
export class UpdateApiSignature extends Message<UpdateApiSignature> {
  /**
   * @generated from field: string api_id = 1;
   */
  apiId = "";

  /**
   * @generated from oneof api.v1.UpdateApiSignature.git_ref
   */
  gitRef: {
    /**
     * @generated from field: string commit_id = 2;
     */
    value: string;
    case: "commitId";
  } | {
    /**
     * @generated from field: string branch_name = 3;
     */
    value: string;
    case: "branchName";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from oneof api.v1.UpdateApiSignature.result
   */
  result: {
    /**
     * @generated from field: utils.v1.Signature signature = 4;
     */
    value: Signature;
    case: "signature";
  } | {
    /**
     * @generated from field: api.v1.SignatureRotationErrors errors = 6;
     */
    value: SignatureRotationErrors;
    case: "errors";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: google.protobuf.Timestamp updated = 5;
   */
  updated?: Timestamp;

  constructor(data?: PartialMessage<UpdateApiSignature>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.UpdateApiSignature";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "api_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "commit_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "git_ref" },
    { no: 3, name: "branch_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "git_ref" },
    { no: 4, name: "signature", kind: "message", T: Signature, oneof: "result" },
    { no: 6, name: "errors", kind: "message", T: SignatureRotationErrors, oneof: "result" },
    { no: 5, name: "updated", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateApiSignature {
    return new UpdateApiSignature().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateApiSignature {
    return new UpdateApiSignature().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateApiSignature {
    return new UpdateApiSignature().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateApiSignature | PlainMessage<UpdateApiSignature> | undefined, b: UpdateApiSignature | PlainMessage<UpdateApiSignature> | undefined): boolean {
    return proto3.util.equals(UpdateApiSignature, a, b);
  }
}

/**
 * @generated from message api.v1.UpdateApplicationSignature
 */
export class UpdateApplicationSignature extends Message<UpdateApplicationSignature> {
  /**
   * @generated from field: string application_id = 1;
   */
  applicationId = "";

  /**
   * @generated from oneof api.v1.UpdateApplicationSignature.git_ref
   */
  gitRef: {
    /**
     * @generated from field: string commit_id = 2;
     */
    value: string;
    case: "commitId";
  } | {
    /**
     * @generated from field: string branch_name = 3;
     */
    value: string;
    case: "branchName";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from oneof api.v1.UpdateApplicationSignature.result
   */
  result: {
    /**
     * @generated from field: utils.v1.Signature signature = 4;
     */
    value: Signature;
    case: "signature";
  } | {
    /**
     * @generated from field: api.v1.SignatureRotationErrors errors = 7;
     */
    value: SignatureRotationErrors;
    case: "errors";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: google.protobuf.Timestamp updated = 5;
   */
  updated?: Timestamp;

  /**
   * @generated from field: int32 page_version = 6;
   */
  pageVersion = 0;

  constructor(data?: PartialMessage<UpdateApplicationSignature>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.UpdateApplicationSignature";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "application_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "commit_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "git_ref" },
    { no: 3, name: "branch_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "git_ref" },
    { no: 4, name: "signature", kind: "message", T: Signature, oneof: "result" },
    { no: 7, name: "errors", kind: "message", T: SignatureRotationErrors, oneof: "result" },
    { no: 5, name: "updated", kind: "message", T: Timestamp },
    { no: 6, name: "page_version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateApplicationSignature {
    return new UpdateApplicationSignature().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateApplicationSignature {
    return new UpdateApplicationSignature().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateApplicationSignature {
    return new UpdateApplicationSignature().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateApplicationSignature | PlainMessage<UpdateApplicationSignature> | undefined, b: UpdateApplicationSignature | PlainMessage<UpdateApplicationSignature> | undefined): boolean {
    return proto3.util.equals(UpdateApplicationSignature, a, b);
  }
}

/**
 * @generated from message api.v1.SignatureRotationErrors
 */
export class SignatureRotationErrors extends Message<SignatureRotationErrors> {
  /**
   * @generated from field: repeated api.v1.SignatureRotationError errors = 1;
   */
  errors: SignatureRotationError[] = [];

  /**
   * @generated from field: string key_id = 2;
   */
  keyId = "";

  /**
   * @generated from field: bytes public_key = 3;
   */
  publicKey = new Uint8Array(0);

  /**
   * @generated from field: utils.v1.Signature.Algorithm algorithm = 4;
   */
  algorithm = Signature_Algorithm.UNSPECIFIED;

  constructor(data?: PartialMessage<SignatureRotationErrors>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.SignatureRotationErrors";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "message", T: SignatureRotationError, repeated: true },
    { no: 2, name: "key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "public_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "algorithm", kind: "enum", T: proto3.getEnumType(Signature_Algorithm) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignatureRotationErrors {
    return new SignatureRotationErrors().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignatureRotationErrors {
    return new SignatureRotationErrors().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignatureRotationErrors {
    return new SignatureRotationErrors().fromJsonString(jsonString, options);
  }

  static equals(a: SignatureRotationErrors | PlainMessage<SignatureRotationErrors> | undefined, b: SignatureRotationErrors | PlainMessage<SignatureRotationErrors> | undefined): boolean {
    return proto3.util.equals(SignatureRotationErrors, a, b);
  }
}

/**
 * @generated from message api.v1.SignatureRotationError
 */
export class SignatureRotationError extends Message<SignatureRotationError> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<SignatureRotationError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.SignatureRotationError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignatureRotationError {
    return new SignatureRotationError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignatureRotationError {
    return new SignatureRotationError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignatureRotationError {
    return new SignatureRotationError().fromJsonString(jsonString, options);
  }

  static equals(a: SignatureRotationError | PlainMessage<SignatureRotationError> | undefined, b: SignatureRotationError | PlainMessage<SignatureRotationError> | undefined): boolean {
    return proto3.util.equals(SignatureRotationError, a, b);
  }
}

/**
 * PUT api/v3/api/signatures
 *
 * @generated from message api.v1.UpdateApiSignaturesRequest
 */
export class UpdateApiSignaturesRequest extends Message<UpdateApiSignaturesRequest> {
  /**
   * @generated from field: repeated api.v1.UpdateApiSignature updates = 1;
   */
  updates: UpdateApiSignature[] = [];

  constructor(data?: PartialMessage<UpdateApiSignaturesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.UpdateApiSignaturesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updates", kind: "message", T: UpdateApiSignature, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateApiSignaturesRequest {
    return new UpdateApiSignaturesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateApiSignaturesRequest {
    return new UpdateApiSignaturesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateApiSignaturesRequest {
    return new UpdateApiSignaturesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateApiSignaturesRequest | PlainMessage<UpdateApiSignaturesRequest> | undefined, b: UpdateApiSignaturesRequest | PlainMessage<UpdateApiSignaturesRequest> | undefined): boolean {
    return proto3.util.equals(UpdateApiSignaturesRequest, a, b);
  }
}

/**
 * PUT api/v2/application/signatures
 *
 * @generated from message api.v1.UpdateApplicationSignaturesRequest
 */
export class UpdateApplicationSignaturesRequest extends Message<UpdateApplicationSignaturesRequest> {
  /**
   * @generated from field: repeated api.v1.UpdateApplicationSignature updates = 1;
   */
  updates: UpdateApplicationSignature[] = [];

  constructor(data?: PartialMessage<UpdateApplicationSignaturesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.UpdateApplicationSignaturesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updates", kind: "message", T: UpdateApplicationSignature, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateApplicationSignaturesRequest {
    return new UpdateApplicationSignaturesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateApplicationSignaturesRequest {
    return new UpdateApplicationSignaturesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateApplicationSignaturesRequest {
    return new UpdateApplicationSignaturesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateApplicationSignaturesRequest | PlainMessage<UpdateApplicationSignaturesRequest> | undefined, b: UpdateApplicationSignaturesRequest | PlainMessage<UpdateApplicationSignaturesRequest> | undefined): boolean {
    return proto3.util.equals(UpdateApplicationSignaturesRequest, a, b);
  }
}

/**
 * @generated from message api.v1.UpdateApplicationSignaturesResponse
 */
export class UpdateApplicationSignaturesResponse extends Message<UpdateApplicationSignaturesResponse> {
  /**
   * @generated from field: repeated api.v1.UpdateApplicationSignaturesResponse.Status statuses = 1;
   */
  statuses: UpdateApplicationSignaturesResponse_Status[] = [];

  /**
   * @generated from field: map<string, common.v1.Link> links = 2;
   */
  links: { [key: string]: Link } = {};

  /**
   * @generated from field: repeated common.v1.Links links_v2 = 3;
   */
  linksV2: Links[] = [];

  constructor(data?: PartialMessage<UpdateApplicationSignaturesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.UpdateApplicationSignaturesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "statuses", kind: "message", T: UpdateApplicationSignaturesResponse_Status, repeated: true },
    { no: 2, name: "links", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Link} },
    { no: 3, name: "links_v2", kind: "message", T: Links, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateApplicationSignaturesResponse {
    return new UpdateApplicationSignaturesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateApplicationSignaturesResponse {
    return new UpdateApplicationSignaturesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateApplicationSignaturesResponse {
    return new UpdateApplicationSignaturesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateApplicationSignaturesResponse | PlainMessage<UpdateApplicationSignaturesResponse> | undefined, b: UpdateApplicationSignaturesResponse | PlainMessage<UpdateApplicationSignaturesResponse> | undefined): boolean {
    return proto3.util.equals(UpdateApplicationSignaturesResponse, a, b);
  }
}

/**
 * @generated from message api.v1.UpdateApplicationSignaturesResponse.Status
 */
export class UpdateApplicationSignaturesResponse_Status extends Message<UpdateApplicationSignaturesResponse_Status> {
  /**
   * @generated from field: string application_id = 1;
   */
  applicationId = "";

  /**
   * @generated from oneof api.v1.UpdateApplicationSignaturesResponse.Status.git_ref
   */
  gitRef: {
    /**
     * @generated from field: string commit_id = 2;
     */
    value: string;
    case: "commitId";
  } | {
    /**
     * @generated from field: string branch_name = 3;
     */
    value: string;
    case: "branchName";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: int32 code = 4;
   */
  code = 0;

  /**
   * @generated from field: string message = 5;
   */
  message = "";

  /**
   * @generated from field: common.v1.Error error = 6;
   */
  error?: Error;

  constructor(data?: PartialMessage<UpdateApplicationSignaturesResponse_Status>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.UpdateApplicationSignaturesResponse.Status";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "application_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "commit_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "git_ref" },
    { no: 3, name: "branch_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "git_ref" },
    { no: 4, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "error", kind: "message", T: Error },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateApplicationSignaturesResponse_Status {
    return new UpdateApplicationSignaturesResponse_Status().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateApplicationSignaturesResponse_Status {
    return new UpdateApplicationSignaturesResponse_Status().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateApplicationSignaturesResponse_Status {
    return new UpdateApplicationSignaturesResponse_Status().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateApplicationSignaturesResponse_Status | PlainMessage<UpdateApplicationSignaturesResponse_Status> | undefined, b: UpdateApplicationSignaturesResponse_Status | PlainMessage<UpdateApplicationSignaturesResponse_Status> | undefined): boolean {
    return proto3.util.equals(UpdateApplicationSignaturesResponse_Status, a, b);
  }
}

/**
 * @generated from message api.v1.UpdateApiSignaturesResponse
 */
export class UpdateApiSignaturesResponse extends Message<UpdateApiSignaturesResponse> {
  /**
   * @generated from field: repeated api.v1.UpdateApiSignaturesResponse.Status statuses = 1;
   */
  statuses: UpdateApiSignaturesResponse_Status[] = [];

  /**
   * @generated from field: map<string, common.v1.Link> links = 2;
   */
  links: { [key: string]: Link } = {};

  /**
   * @generated from field: repeated common.v1.Links links_v2 = 3;
   */
  linksV2: Links[] = [];

  constructor(data?: PartialMessage<UpdateApiSignaturesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.UpdateApiSignaturesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "statuses", kind: "message", T: UpdateApiSignaturesResponse_Status, repeated: true },
    { no: 2, name: "links", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Link} },
    { no: 3, name: "links_v2", kind: "message", T: Links, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateApiSignaturesResponse {
    return new UpdateApiSignaturesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateApiSignaturesResponse {
    return new UpdateApiSignaturesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateApiSignaturesResponse {
    return new UpdateApiSignaturesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateApiSignaturesResponse | PlainMessage<UpdateApiSignaturesResponse> | undefined, b: UpdateApiSignaturesResponse | PlainMessage<UpdateApiSignaturesResponse> | undefined): boolean {
    return proto3.util.equals(UpdateApiSignaturesResponse, a, b);
  }
}

/**
 * @generated from message api.v1.UpdateApiSignaturesResponse.Status
 */
export class UpdateApiSignaturesResponse_Status extends Message<UpdateApiSignaturesResponse_Status> {
  /**
   * @generated from field: string api_id = 1;
   */
  apiId = "";

  /**
   * @generated from oneof api.v1.UpdateApiSignaturesResponse.Status.git_ref
   */
  gitRef: {
    /**
     * @generated from field: string commit_id = 2;
     */
    value: string;
    case: "commitId";
  } | {
    /**
     * @generated from field: string branch_name = 3;
     */
    value: string;
    case: "branchName";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: int32 code = 4;
   */
  code = 0;

  /**
   * @generated from field: string message = 5;
   */
  message = "";

  /**
   * @generated from field: common.v1.Error error = 6;
   */
  error?: Error;

  constructor(data?: PartialMessage<UpdateApiSignaturesResponse_Status>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.UpdateApiSignaturesResponse.Status";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "api_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "commit_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "git_ref" },
    { no: 3, name: "branch_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "git_ref" },
    { no: 4, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "error", kind: "message", T: Error },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateApiSignaturesResponse_Status {
    return new UpdateApiSignaturesResponse_Status().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateApiSignaturesResponse_Status {
    return new UpdateApiSignaturesResponse_Status().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateApiSignaturesResponse_Status {
    return new UpdateApiSignaturesResponse_Status().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateApiSignaturesResponse_Status | PlainMessage<UpdateApiSignaturesResponse_Status> | undefined, b: UpdateApiSignaturesResponse_Status | PlainMessage<UpdateApiSignaturesResponse_Status> | undefined): boolean {
    return proto3.util.equals(UpdateApiSignaturesResponse_Status, a, b);
  }
}

/**
 * @generated from message api.v1.GenericBatch
 */
export class GenericBatch extends Message<GenericBatch> {
  /**
   * @generated from field: api.v1.GenericBatch.Items data = 1;
   */
  data?: GenericBatch_Items;

  constructor(data?: PartialMessage<GenericBatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GenericBatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: GenericBatch_Items },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenericBatch {
    return new GenericBatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenericBatch {
    return new GenericBatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenericBatch {
    return new GenericBatch().fromJsonString(jsonString, options);
  }

  static equals(a: GenericBatch | PlainMessage<GenericBatch> | undefined, b: GenericBatch | PlainMessage<GenericBatch> | undefined): boolean {
    return proto3.util.equals(GenericBatch, a, b);
  }
}

/**
 * @generated from message api.v1.GenericBatch.Items
 */
export class GenericBatch_Items extends Message<GenericBatch_Items> {
  /**
   * @generated from field: repeated google.protobuf.Struct items = 1;
   */
  items: Struct[] = [];

  constructor(data?: PartialMessage<GenericBatch_Items>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GenericBatch.Items";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenericBatch_Items {
    return new GenericBatch_Items().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenericBatch_Items {
    return new GenericBatch_Items().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenericBatch_Items {
    return new GenericBatch_Items().fromJsonString(jsonString, options);
  }

  static equals(a: GenericBatch_Items | PlainMessage<GenericBatch_Items> | undefined, b: GenericBatch_Items | PlainMessage<GenericBatch_Items> | undefined): boolean {
    return proto3.util.equals(GenericBatch_Items, a, b);
  }
}

/**
 * @generated from message api.v1.GenericBatchResponse
 */
export class GenericBatchResponse extends Message<GenericBatchResponse> {
  /**
   * @generated from field: api.v1.GenericBatch data = 1;
   */
  data?: GenericBatch;

  constructor(data?: PartialMessage<GenericBatchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GenericBatchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: GenericBatch },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenericBatchResponse {
    return new GenericBatchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenericBatchResponse {
    return new GenericBatchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenericBatchResponse {
    return new GenericBatchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenericBatchResponse | PlainMessage<GenericBatchResponse> | undefined, b: GenericBatchResponse | PlainMessage<GenericBatchResponse> | undefined): boolean {
    return proto3.util.equals(GenericBatchResponse, a, b);
  }
}

