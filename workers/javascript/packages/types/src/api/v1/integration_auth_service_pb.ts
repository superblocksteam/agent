// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file api/v1/integration_auth_service.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Profile } from "../../common/v1/common_pb";
import { OAuth_AuthorizationCodeFlow } from "../../plugins/common/v1/auth_pb";

/**
 * @generated from message api.v1.CheckAuthRequest
 */
export class CheckAuthRequest extends Message<CheckAuthRequest> {
  /**
   * @generated from field: string integration_id = 1;
   */
  integrationId = "";

  /**
   * @generated from field: common.v1.Profile profile = 2;
   */
  profile?: Profile;

  constructor(data?: PartialMessage<CheckAuthRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.CheckAuthRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "profile", kind: "message", T: Profile },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckAuthRequest {
    return new CheckAuthRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckAuthRequest {
    return new CheckAuthRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckAuthRequest {
    return new CheckAuthRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckAuthRequest | PlainMessage<CheckAuthRequest> | undefined, b: CheckAuthRequest | PlainMessage<CheckAuthRequest> | undefined): boolean {
    return proto3.util.equals(CheckAuthRequest, a, b);
  }
}

/**
 * @generated from message api.v1.CheckAuthResponse
 */
export class CheckAuthResponse extends Message<CheckAuthResponse> {
  /**
   * @generated from field: bool authenticated = 1;
   */
  authenticated = false;

  constructor(data?: PartialMessage<CheckAuthResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.CheckAuthResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authenticated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckAuthResponse {
    return new CheckAuthResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckAuthResponse {
    return new CheckAuthResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckAuthResponse {
    return new CheckAuthResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckAuthResponse | PlainMessage<CheckAuthResponse> | undefined, b: CheckAuthResponse | PlainMessage<CheckAuthResponse> | undefined): boolean {
    return proto3.util.equals(CheckAuthResponse, a, b);
  }
}

/**
 * @generated from message api.v1.LoginRequest
 */
export class LoginRequest extends Message<LoginRequest> {
  /**
   * @generated from field: string integration_id = 1;
   */
  integrationId = "";

  /**
   * @generated from field: common.v1.Profile profile = 2;
   */
  profile?: Profile;

  /**
   * @generated from field: optional string token = 3;
   */
  token?: string;

  /**
   * @generated from field: optional string refreshToken = 4;
   */
  refreshToken?: string;

  /**
   * firebase
   *
   * @generated from field: optional string idToken = 5;
   */
  idToken?: string;

  /**
   * @generated from field: optional int64 expiryTimestamp = 6;
   */
  expiryTimestamp?: bigint;

  constructor(data?: PartialMessage<LoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.LoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "profile", kind: "message", T: Profile },
    { no: 3, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "refreshToken", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "idToken", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "expiryTimestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginRequest {
    return new LoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginRequest {
    return new LoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginRequest {
    return new LoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LoginRequest | PlainMessage<LoginRequest> | undefined, b: LoginRequest | PlainMessage<LoginRequest> | undefined): boolean {
    return proto3.util.equals(LoginRequest, a, b);
  }
}

/**
 * @generated from message api.v1.LoginResponse
 */
export class LoginResponse extends Message<LoginResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<LoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.LoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginResponse {
    return new LoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginResponse {
    return new LoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginResponse {
    return new LoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LoginResponse | PlainMessage<LoginResponse> | undefined, b: LoginResponse | PlainMessage<LoginResponse> | undefined): boolean {
    return proto3.util.equals(LoginResponse, a, b);
  }
}

/**
 * @generated from message api.v1.ExchangeOauthCodeForTokenRequest
 */
export class ExchangeOauthCodeForTokenRequest extends Message<ExchangeOauthCodeForTokenRequest> {
  /**
   * this is deprecated, use auth_type/auth_config/configuration_id instead
   *
   * @generated from field: string integration_id = 1 [deprecated = true];
   * @deprecated
   */
  integrationId = "";

  /**
   * @generated from field: common.v1.Profile profile = 2;
   */
  profile?: Profile;

  /**
   * @generated from field: string access_code = 3;
   */
  accessCode = "";

  /**
   * @generated from field: string auth_type = 4;
   */
  authType = "";

  /**
   * @generated from field: plugins.common.v1.OAuth.AuthorizationCodeFlow auth_config = 5;
   */
  authConfig?: OAuth_AuthorizationCodeFlow;

  /**
   * this is needed to construct authId for access/refresh token(s)
   *
   * @generated from field: string configuration_id = 6;
   */
  configurationId = "";

  constructor(data?: PartialMessage<ExchangeOauthCodeForTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ExchangeOauthCodeForTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "profile", kind: "message", T: Profile },
    { no: 3, name: "access_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "auth_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "auth_config", kind: "message", T: OAuth_AuthorizationCodeFlow },
    { no: 6, name: "configuration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExchangeOauthCodeForTokenRequest {
    return new ExchangeOauthCodeForTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExchangeOauthCodeForTokenRequest {
    return new ExchangeOauthCodeForTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExchangeOauthCodeForTokenRequest {
    return new ExchangeOauthCodeForTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExchangeOauthCodeForTokenRequest | PlainMessage<ExchangeOauthCodeForTokenRequest> | undefined, b: ExchangeOauthCodeForTokenRequest | PlainMessage<ExchangeOauthCodeForTokenRequest> | undefined): boolean {
    return proto3.util.equals(ExchangeOauthCodeForTokenRequest, a, b);
  }
}

/**
 * @generated from message api.v1.RequestOauthPasswordTokenRequest
 */
export class RequestOauthPasswordTokenRequest extends Message<RequestOauthPasswordTokenRequest> {
  /**
   * @generated from field: string integration_id = 1;
   */
  integrationId = "";

  /**
   * @generated from field: common.v1.Profile profile = 2;
   */
  profile?: Profile;

  /**
   * @generated from field: string username = 3;
   */
  username = "";

  /**
   * @generated from field: string password = 4;
   */
  password = "";

  constructor(data?: PartialMessage<RequestOauthPasswordTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.RequestOauthPasswordTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "profile", kind: "message", T: Profile },
    { no: 3, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestOauthPasswordTokenRequest {
    return new RequestOauthPasswordTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestOauthPasswordTokenRequest {
    return new RequestOauthPasswordTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestOauthPasswordTokenRequest {
    return new RequestOauthPasswordTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RequestOauthPasswordTokenRequest | PlainMessage<RequestOauthPasswordTokenRequest> | undefined, b: RequestOauthPasswordTokenRequest | PlainMessage<RequestOauthPasswordTokenRequest> | undefined): boolean {
    return proto3.util.equals(RequestOauthPasswordTokenRequest, a, b);
  }
}

/**
 * @generated from message api.v1.RequestOauthPasswordTokenResponse
 */
export class RequestOauthPasswordTokenResponse extends Message<RequestOauthPasswordTokenResponse> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * @generated from field: string refresh_token = 2;
   */
  refreshToken = "";

  /**
   * @generated from field: int64 expiry_timestamp = 3;
   */
  expiryTimestamp = protoInt64.zero;

  constructor(data?: PartialMessage<RequestOauthPasswordTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.RequestOauthPasswordTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "refresh_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expiry_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestOauthPasswordTokenResponse {
    return new RequestOauthPasswordTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestOauthPasswordTokenResponse {
    return new RequestOauthPasswordTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestOauthPasswordTokenResponse {
    return new RequestOauthPasswordTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RequestOauthPasswordTokenResponse | PlainMessage<RequestOauthPasswordTokenResponse> | undefined, b: RequestOauthPasswordTokenResponse | PlainMessage<RequestOauthPasswordTokenResponse> | undefined): boolean {
    return proto3.util.equals(RequestOauthPasswordTokenResponse, a, b);
  }
}

