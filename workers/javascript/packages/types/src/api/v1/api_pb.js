"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file api/v1/api.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.Step = exports.Block_Send = exports.Block_Stream_Trigger = exports.Block_Stream_Options = exports.Block_Stream_Variables = exports.Block_Stream = exports.Block_Wait = exports.Block_Throw = exports.Block_Return = exports.Block_Break = exports.Block_TryCatch_Variables = exports.Block_TryCatch = exports.Block_Loop_Variables = exports.Block_Loop_Type = exports.Block_Loop = exports.Block_Conditional_Condition = exports.Block_Conditional = exports.Block_Parallel_Dynamic_Variables = exports.Block_Parallel_Dynamic = exports.Block_Parallel_Static = exports.Block_Parallel_Wait = exports.Block_Parallel = exports.Block = exports.Blocks = exports.Trigger_Job_Days = exports.Trigger_Job_Options = exports.Trigger_Job_Interval = exports.Trigger_Job = exports.Trigger_Workflow_Parameters_QueryParam = exports.Trigger_Workflow_Parameters = exports.Trigger_Workflow_Options = exports.Trigger_Workflow = exports.Trigger_Application_Options = exports.Trigger_Application = exports.Trigger = exports.Profiles_Modes_Settings = exports.Profiles_Modes = exports.Profiles = exports.Api = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const common_pb_1 = require("../../common/v1/common_pb");
const utils_pb_1 = require("../../utils/v1/utils_pb");
const blocks_pb_1 = require("./blocks_pb");
const plugin_pb_1 = require("../../plugins/python/v1/plugin_pb");
const plugin_pb_2 = require("../../plugins/bigquery/v1/plugin_pb");
const plugin_pb_3 = require("../../plugins/dynamodb/v1/plugin_pb");
const plugin_pb_4 = require("../../plugins/email/v1/plugin_pb");
const plugin_pb_5 = require("../../plugins/graphql/v1/plugin_pb");
const plugin_pb_6 = require("../../plugins/gsheets/v1/plugin_pb");
const plugin_pb_7 = require("../../plugins/mariadb/v1/plugin_pb");
const plugin_pb_8 = require("../../plugins/mssql/v1/plugin_pb");
const plugin_pb_9 = require("../../plugins/mysql/v1/plugin_pb");
const plugin_pb_10 = require("../../plugins/postgresql/v1/plugin_pb");
const plugin_pb_11 = require("../../plugins/redshift/v1/plugin_pb");
const plugin_pb_12 = require("../../plugins/restapi/v1/plugin_pb");
const plugin_pb_13 = require("../../plugins/restapiintegration/v1/plugin_pb");
const plugin_pb_14 = require("../../plugins/rockset/v1/plugin_pb");
const plugin_pb_15 = require("../../plugins/s3/v1/plugin_pb");
const plugin_pb_16 = require("../../plugins/snowflake/v1/plugin_pb");
const plugin_pb_17 = require("../../plugins/workflow/v1/plugin_pb");
const plugin_pb_18 = require("../../plugins/javascript/v1/plugin_pb");
const plugin_pb_19 = require("../../plugins/mongodb/v1/plugin_pb");
const plugin_pb_20 = require("../../plugins/gcs/v1/plugin_pb");
const plugin_pb_21 = require("../../plugins/openai/v1/plugin_pb");
const plugin_pb_22 = require("../../plugins/ocr/v1/plugin_pb");
const plugin_pb_23 = require("../../plugins/kafka/v1/plugin_pb");
const plugin_pb_24 = require("../../plugins/cockroachdb/v1/plugin_pb");
const plugin_pb_25 = require("../../plugins/athena/v1/plugin_pb");
const plugin_pb_26 = require("../../plugins/redis/v1/plugin_pb");
const plugin_pb_27 = require("../../plugins/smtp/v1/plugin_pb");
const plugin_pb_28 = require("../../plugins/salesforce/v1/plugin_pb");
const plugin_pb_29 = require("../../plugins/adls/v1/plugin_pb");
const plugin_pb_30 = require("../../plugins/pinecone/v1/plugin_pb");
const plugin_pb_31 = require("../../plugins/cosmosdb/v1/plugin_pb");
const plugin_pb_32 = require("../../plugins/oracledb/v1/plugin_pb");
const plugin_pb_33 = require("../../plugins/databricks/v1/plugin_pb");
const plugin_pb_34 = require("../../plugins/couchbase/v1/plugin_pb");
const plugin_pb_35 = require("../../plugins/custom/v1/plugin_pb");
/**
 * @generated from message api.v1.Api
 */
class Api extends protobuf_1.Message {
    /**
     * @generated from field: common.v1.Metadata metadata = 1;
     */
    metadata;
    /**
     * @generated from field: repeated api.v1.Block blocks = 2;
     */
    blocks = [];
    /**
     * @generated from field: api.v1.Trigger trigger = 3;
     */
    trigger;
    /**
     * @generated from field: optional utils.v1.Signature signature = 4;
     */
    signature;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Api";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "metadata", kind: "message", T: common_pb_1.Metadata },
        { no: 2, name: "blocks", kind: "message", T: Block, repeated: true },
        { no: 3, name: "trigger", kind: "message", T: Trigger },
        { no: 4, name: "signature", kind: "message", T: utils_pb_1.Signature, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Api().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Api().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Api().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Api, a, b);
    }
}
exports.Api = Api;
/**
 * @generated from message api.v1.Profiles
 */
class Profiles extends protobuf_1.Message {
    /**
     * @generated from field: api.v1.Profiles.Modes modes = 1;
     */
    modes;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Profiles";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "modes", kind: "message", T: Profiles_Modes },
    ]);
    static fromBinary(bytes, options) {
        return new Profiles().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Profiles().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Profiles().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Profiles, a, b);
    }
}
exports.Profiles = Profiles;
/**
 * @generated from message api.v1.Profiles.Modes
 */
class Profiles_Modes extends protobuf_1.Message {
    /**
     * @generated from field: api.v1.Profiles.Modes.Settings editor = 1;
     */
    editor;
    /**
     * @generated from field: api.v1.Profiles.Modes.Settings preview = 2;
     */
    preview;
    /**
     * @generated from field: api.v1.Profiles.Modes.Settings deployed = 3;
     */
    deployed;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Profiles.Modes";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "editor", kind: "message", T: Profiles_Modes_Settings },
        { no: 2, name: "preview", kind: "message", T: Profiles_Modes_Settings },
        { no: 3, name: "deployed", kind: "message", T: Profiles_Modes_Settings },
    ]);
    static fromBinary(bytes, options) {
        return new Profiles_Modes().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Profiles_Modes().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Profiles_Modes().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Profiles_Modes, a, b);
    }
}
exports.Profiles_Modes = Profiles_Modes;
/**
 * @generated from message api.v1.Profiles.Modes.Settings
 */
class Profiles_Modes_Settings extends protobuf_1.Message {
    /**
     * @generated from field: string default = 1;
     */
    default = "";
    /**
     * @generated from field: repeated string available = 2;
     */
    available = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Profiles.Modes.Settings";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "default", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "available", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new Profiles_Modes_Settings().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Profiles_Modes_Settings().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Profiles_Modes_Settings().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Profiles_Modes_Settings, a, b);
    }
}
exports.Profiles_Modes_Settings = Profiles_Modes_Settings;
/**
 * @generated from message api.v1.Trigger
 */
class Trigger extends protobuf_1.Message {
    /**
     * @generated from oneof api.v1.Trigger.config
     */
    config = { case: undefined };
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Trigger";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "application", kind: "message", T: Trigger_Application, oneof: "config" },
        { no: 2, name: "workflow", kind: "message", T: Trigger_Workflow, oneof: "config" },
        { no: 3, name: "job", kind: "message", T: Trigger_Job, oneof: "config" },
    ]);
    static fromBinary(bytes, options) {
        return new Trigger().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Trigger().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Trigger().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Trigger, a, b);
    }
}
exports.Trigger = Trigger;
/**
 * @generated from message api.v1.Trigger.Application
 */
class Trigger_Application extends protobuf_1.Message {
    /**
     * @generated from field: api.v1.Trigger.Application.Options options = 1;
     */
    options;
    /**
     * @generated from field: string id = 2;
     */
    id = "";
    /**
     * @generated from field: optional string page_id = 3;
     */
    pageId;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Trigger.Application";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "options", kind: "message", T: Trigger_Application_Options },
        { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "page_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Trigger_Application().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Trigger_Application().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Trigger_Application().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Trigger_Application, a, b);
    }
}
exports.Trigger_Application = Trigger_Application;
/**
 * @generated from message api.v1.Trigger.Application.Options
 */
class Trigger_Application_Options extends protobuf_1.Message {
    /**
     * @generated from field: optional bool execute_on_page_load = 1;
     */
    executeOnPageLoad;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Trigger.Application.Options";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "execute_on_page_load", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Trigger_Application_Options().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Trigger_Application_Options().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Trigger_Application_Options().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Trigger_Application_Options, a, b);
    }
}
exports.Trigger_Application_Options = Trigger_Application_Options;
/**
 * @generated from message api.v1.Trigger.Workflow
 */
class Trigger_Workflow extends protobuf_1.Message {
    /**
     * @generated from field: api.v1.Trigger.Workflow.Options options = 1;
     */
    options;
    /**
     * @generated from field: api.v1.Trigger.Workflow.Parameters parameters = 2;
     */
    parameters;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Trigger.Workflow";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "options", kind: "message", T: Trigger_Workflow_Options },
        { no: 2, name: "parameters", kind: "message", T: Trigger_Workflow_Parameters },
    ]);
    static fromBinary(bytes, options) {
        return new Trigger_Workflow().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Trigger_Workflow().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Trigger_Workflow().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Trigger_Workflow, a, b);
    }
}
exports.Trigger_Workflow = Trigger_Workflow;
/**
 * @generated from message api.v1.Trigger.Workflow.Options
 */
class Trigger_Workflow_Options extends protobuf_1.Message {
    /**
     * @generated from field: api.v1.Profiles profiles = 1;
     */
    profiles;
    /**
     * @generated from field: optional string deployedCommitId = 2;
     */
    deployedCommitId;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Trigger.Workflow.Options";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "profiles", kind: "message", T: Profiles },
        { no: 2, name: "deployedCommitId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Trigger_Workflow_Options().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Trigger_Workflow_Options().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Trigger_Workflow_Options().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Trigger_Workflow_Options, a, b);
    }
}
exports.Trigger_Workflow_Options = Trigger_Workflow_Options;
/**
 * @generated from message api.v1.Trigger.Workflow.Parameters
 */
class Trigger_Workflow_Parameters extends protobuf_1.Message {
    /**
     * @generated from field: map<string, api.v1.Trigger.Workflow.Parameters.QueryParam> query = 1;
     */
    query = {};
    /**
     * @generated from field: map<string, google.protobuf.Value> body = 2;
     */
    body = {};
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Trigger.Workflow.Parameters";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "query", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: Trigger_Workflow_Parameters_QueryParam } },
        { no: 2, name: "body", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: protobuf_1.Value } },
    ]);
    static fromBinary(bytes, options) {
        return new Trigger_Workflow_Parameters().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Trigger_Workflow_Parameters().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Trigger_Workflow_Parameters().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Trigger_Workflow_Parameters, a, b);
    }
}
exports.Trigger_Workflow_Parameters = Trigger_Workflow_Parameters;
/**
 * You can specify multiple values for a single query parameter in a URL
 *
 * @generated from message api.v1.Trigger.Workflow.Parameters.QueryParam
 */
class Trigger_Workflow_Parameters_QueryParam extends protobuf_1.Message {
    /**
     * @generated from field: repeated string values = 1;
     */
    values = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Trigger.Workflow.Parameters.QueryParam";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new Trigger_Workflow_Parameters_QueryParam().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Trigger_Workflow_Parameters_QueryParam().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Trigger_Workflow_Parameters_QueryParam().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Trigger_Workflow_Parameters_QueryParam, a, b);
    }
}
exports.Trigger_Workflow_Parameters_QueryParam = Trigger_Workflow_Parameters_QueryParam;
/**
 * @generated from message api.v1.Trigger.Job
 */
class Trigger_Job extends protobuf_1.Message {
    /**
     * @generated from field: api.v1.Trigger.Job.Options options = 1;
     */
    options;
    /**
     * @generated from field: int32 frequency = 2;
     */
    frequency = 0;
    /**
     * @generated from field: api.v1.Trigger.Job.Interval interval = 3;
     */
    interval = Trigger_Job_Interval.UNSPECIFIED;
    /**
     * @generated from field: int32 day_of_month = 4;
     */
    dayOfMonth = 0;
    /**
     * @generated from field: api.v1.Trigger.Job.Days days = 5;
     */
    days;
    /**
     * @generated from field: google.protobuf.Timestamp time = 6;
     */
    time;
    /**
     * @generated from field: string timezone_locale = 8;
     */
    timezoneLocale = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Trigger.Job";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "options", kind: "message", T: Trigger_Job_Options },
        { no: 2, name: "frequency", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 3, name: "interval", kind: "enum", T: protobuf_1.proto3.getEnumType(Trigger_Job_Interval) },
        { no: 4, name: "day_of_month", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 5, name: "days", kind: "message", T: Trigger_Job_Days },
        { no: 6, name: "time", kind: "message", T: protobuf_1.Timestamp },
        { no: 8, name: "timezone_locale", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Trigger_Job().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Trigger_Job().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Trigger_Job().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Trigger_Job, a, b);
    }
}
exports.Trigger_Job = Trigger_Job;
/**
 * @generated from enum api.v1.Trigger.Job.Interval
 */
var Trigger_Job_Interval;
(function (Trigger_Job_Interval) {
    /**
     * @generated from enum value: INTERVAL_UNSPECIFIED = 0;
     */
    Trigger_Job_Interval[Trigger_Job_Interval["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: INTERVAL_MINUTE = 1;
     */
    Trigger_Job_Interval[Trigger_Job_Interval["MINUTE"] = 1] = "MINUTE";
    /**
     * @generated from enum value: INTERVAL_HOUR = 2;
     */
    Trigger_Job_Interval[Trigger_Job_Interval["HOUR"] = 2] = "HOUR";
    /**
     * @generated from enum value: INTERVAL_DAY = 3;
     */
    Trigger_Job_Interval[Trigger_Job_Interval["DAY"] = 3] = "DAY";
    /**
     * @generated from enum value: INTERVAL_WEEK = 4;
     */
    Trigger_Job_Interval[Trigger_Job_Interval["WEEK"] = 4] = "WEEK";
    /**
     * @generated from enum value: INTERVAL_MONTH = 5;
     */
    Trigger_Job_Interval[Trigger_Job_Interval["MONTH"] = 5] = "MONTH";
})(Trigger_Job_Interval || (exports.Trigger_Job_Interval = Trigger_Job_Interval = {}));
// Retrieve enum metadata with: proto3.getEnumType(Trigger_Job_Interval)
protobuf_1.proto3.util.setEnumType(Trigger_Job_Interval, "api.v1.Trigger.Job.Interval", [
    { no: 0, name: "INTERVAL_UNSPECIFIED" },
    { no: 1, name: "INTERVAL_MINUTE" },
    { no: 2, name: "INTERVAL_HOUR" },
    { no: 3, name: "INTERVAL_DAY" },
    { no: 4, name: "INTERVAL_WEEK" },
    { no: 5, name: "INTERVAL_MONTH" },
]);
/**
 * @generated from message api.v1.Trigger.Job.Options
 */
class Trigger_Job_Options extends protobuf_1.Message {
    /**
     * @generated from field: api.v1.Profiles profiles = 1;
     */
    profiles;
    /**
     * @generated from field: bool send_email_on_failure = 2;
     */
    sendEmailOnFailure = false;
    /**
     * @generated from field: optional string deployedCommitId = 3;
     */
    deployedCommitId;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Trigger.Job.Options";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "profiles", kind: "message", T: Profiles },
        { no: 2, name: "send_email_on_failure", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 3, name: "deployedCommitId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Trigger_Job_Options().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Trigger_Job_Options().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Trigger_Job_Options().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Trigger_Job_Options, a, b);
    }
}
exports.Trigger_Job_Options = Trigger_Job_Options;
/**
 * @generated from message api.v1.Trigger.Job.Days
 */
class Trigger_Job_Days extends protobuf_1.Message {
    /**
     * @generated from field: bool sunday = 1;
     */
    sunday = false;
    /**
     * @generated from field: bool monday = 2;
     */
    monday = false;
    /**
     * @generated from field: bool tuesday = 3;
     */
    tuesday = false;
    /**
     * @generated from field: bool wednesday = 4;
     */
    wednesday = false;
    /**
     * @generated from field: bool thursday = 5;
     */
    thursday = false;
    /**
     * @generated from field: bool friday = 6;
     */
    friday = false;
    /**
     * @generated from field: bool saturday = 7;
     */
    saturday = false;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Trigger.Job.Days";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "sunday", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "monday", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 3, name: "tuesday", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 4, name: "wednesday", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 5, name: "thursday", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 6, name: "friday", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 7, name: "saturday", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    ]);
    static fromBinary(bytes, options) {
        return new Trigger_Job_Days().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Trigger_Job_Days().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Trigger_Job_Days().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Trigger_Job_Days, a, b);
    }
}
exports.Trigger_Job_Days = Trigger_Job_Days;
/**
 * @generated from message api.v1.Blocks
 */
class Blocks extends protobuf_1.Message {
    /**
     * @generated from field: repeated api.v1.Block blocks = 1;
     */
    blocks = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Blocks";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "blocks", kind: "message", T: Block, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new Blocks().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Blocks().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Blocks().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Blocks, a, b);
    }
}
exports.Blocks = Blocks;
/**
 * @generated from message api.v1.Block
 */
class Block extends protobuf_1.Message {
    /**
     * @generated from field: string name = 1;
     */
    name = "";
    /**
     * @generated from oneof api.v1.Block.config
     */
    config = { case: undefined };
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Block";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "break", kind: "message", T: Block_Break, oneof: "config" },
        { no: 3, name: "return", kind: "message", T: Block_Return, oneof: "config" },
        { no: 4, name: "wait", kind: "message", T: Block_Wait, oneof: "config" },
        { no: 5, name: "parallel", kind: "message", T: Block_Parallel, oneof: "config" },
        { no: 6, name: "conditional", kind: "message", T: Block_Conditional, oneof: "config" },
        { no: 7, name: "loop", kind: "message", T: Block_Loop, oneof: "config" },
        { no: 8, name: "try_catch", kind: "message", T: Block_TryCatch, oneof: "config" },
        { no: 9, name: "step", kind: "message", T: Step, oneof: "config" },
        { no: 10, name: "variables", kind: "message", T: blocks_pb_1.Variables, oneof: "config" },
        { no: 11, name: "throw", kind: "message", T: Block_Throw, oneof: "config" },
        { no: 12, name: "stream", kind: "message", T: Block_Stream, oneof: "config" },
        { no: 13, name: "send", kind: "message", T: Block_Send, oneof: "config" },
    ]);
    static fromBinary(bytes, options) {
        return new Block().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Block().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Block().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Block, a, b);
    }
}
exports.Block = Block;
/**
 * @generated from message api.v1.Block.Parallel
 */
class Block_Parallel extends protobuf_1.Message {
    /**
     * @generated from oneof api.v1.Block.Parallel.config
     */
    config = { case: undefined };
    /**
     * @generated from field: api.v1.Block.Parallel.Wait wait = 3;
     */
    wait = Block_Parallel_Wait.UNSPECIFIED;
    /**
     * @generated from field: optional int32 pool_size = 4;
     */
    poolSize;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Block.Parallel";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "static", kind: "message", T: Block_Parallel_Static, oneof: "config" },
        { no: 2, name: "dynamic", kind: "message", T: Block_Parallel_Dynamic, oneof: "config" },
        { no: 3, name: "wait", kind: "enum", T: protobuf_1.proto3.getEnumType(Block_Parallel_Wait) },
        { no: 4, name: "pool_size", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Block_Parallel().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Block_Parallel().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Block_Parallel().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Block_Parallel, a, b);
    }
}
exports.Block_Parallel = Block_Parallel;
/**
 * @generated from enum api.v1.Block.Parallel.Wait
 */
var Block_Parallel_Wait;
(function (Block_Parallel_Wait) {
    /**
     * @generated from enum value: WAIT_UNSPECIFIED = 0;
     */
    Block_Parallel_Wait[Block_Parallel_Wait["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * Wait for every thread to complete.
     *
     * @generated from enum value: WAIT_ALL = 1;
     */
    Block_Parallel_Wait[Block_Parallel_Wait["ALL"] = 1] = "ALL";
    /**
     * Do not wait for any thread to complete.
     *
     * @generated from enum value: WAIT_NONE = 2;
     */
    Block_Parallel_Wait[Block_Parallel_Wait["NONE"] = 2] = "NONE";
})(Block_Parallel_Wait || (exports.Block_Parallel_Wait = Block_Parallel_Wait = {}));
// Retrieve enum metadata with: proto3.getEnumType(Block_Parallel_Wait)
protobuf_1.proto3.util.setEnumType(Block_Parallel_Wait, "api.v1.Block.Parallel.Wait", [
    { no: 0, name: "WAIT_UNSPECIFIED" },
    { no: 1, name: "WAIT_ALL" },
    { no: 2, name: "WAIT_NONE" },
]);
/**
 * @generated from message api.v1.Block.Parallel.Static
 */
class Block_Parallel_Static extends protobuf_1.Message {
    /**
     * @generated from field: map<string, api.v1.Blocks> paths = 1;
     */
    paths = {};
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Block.Parallel.Static";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "paths", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: Blocks } },
    ]);
    static fromBinary(bytes, options) {
        return new Block_Parallel_Static().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Block_Parallel_Static().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Block_Parallel_Static().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Block_Parallel_Static, a, b);
    }
}
exports.Block_Parallel_Static = Block_Parallel_Static;
/**
 * @generated from message api.v1.Block.Parallel.Dynamic
 */
class Block_Parallel_Dynamic extends protobuf_1.Message {
    /**
     * @generated from field: string paths = 1;
     */
    paths = "";
    /**
     * @generated from field: api.v1.Block.Parallel.Dynamic.Variables variables = 2;
     */
    variables;
    /**
     * @generated from field: repeated api.v1.Block blocks = 3;
     */
    blocks = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Block.Parallel.Dynamic";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "paths", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "variables", kind: "message", T: Block_Parallel_Dynamic_Variables },
        { no: 3, name: "blocks", kind: "message", T: Block, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new Block_Parallel_Dynamic().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Block_Parallel_Dynamic().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Block_Parallel_Dynamic().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Block_Parallel_Dynamic, a, b);
    }
}
exports.Block_Parallel_Dynamic = Block_Parallel_Dynamic;
/**
 * @generated from message api.v1.Block.Parallel.Dynamic.Variables
 */
class Block_Parallel_Dynamic_Variables extends protobuf_1.Message {
    /**
     * @generated from field: string item = 1;
     */
    item = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Block.Parallel.Dynamic.Variables";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "item", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Block_Parallel_Dynamic_Variables().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Block_Parallel_Dynamic_Variables().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Block_Parallel_Dynamic_Variables().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Block_Parallel_Dynamic_Variables, a, b);
    }
}
exports.Block_Parallel_Dynamic_Variables = Block_Parallel_Dynamic_Variables;
/**
 * @generated from message api.v1.Block.Conditional
 */
class Block_Conditional extends protobuf_1.Message {
    /**
     * @generated from field: api.v1.Block.Conditional.Condition if = 1;
     */
    if;
    /**
     * @generated from field: repeated api.v1.Block.Conditional.Condition else_if = 2;
     */
    elseIf = [];
    /**
     * @generated from field: api.v1.Blocks else = 3;
     */
    else;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Block.Conditional";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "if", kind: "message", T: Block_Conditional_Condition },
        { no: 2, name: "else_if", kind: "message", T: Block_Conditional_Condition, repeated: true },
        { no: 3, name: "else", kind: "message", T: Blocks },
    ]);
    static fromBinary(bytes, options) {
        return new Block_Conditional().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Block_Conditional().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Block_Conditional().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Block_Conditional, a, b);
    }
}
exports.Block_Conditional = Block_Conditional;
/**
 * @generated from message api.v1.Block.Conditional.Condition
 */
class Block_Conditional_Condition extends protobuf_1.Message {
    /**
     * @generated from field: string condition = 1;
     */
    condition = "";
    /**
     * @generated from field: repeated api.v1.Block blocks = 2;
     */
    blocks = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Block.Conditional.Condition";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "condition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "blocks", kind: "message", T: Block, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new Block_Conditional_Condition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Block_Conditional_Condition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Block_Conditional_Condition().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Block_Conditional_Condition, a, b);
    }
}
exports.Block_Conditional_Condition = Block_Conditional_Condition;
/**
 * @generated from message api.v1.Block.Loop
 */
class Block_Loop extends protobuf_1.Message {
    /**
     * *
     * This can be a binding that evaluates to one of three things:
     *  1. An integer           IF type if TYPE_FOR.
     *  2. A JSON encoded list  IF type is TYPE_FOREACH.
     *  3. A boolean            IF type is TYPE_WHILE. NOTE that this expressition will be re-evaluated on each iteration.
     *
     * @generated from field: string range = 1;
     */
    range = "";
    /**
     * @generated from field: api.v1.Block.Loop.Type type = 2;
     */
    type = Block_Loop_Type.UNSPECIFIED;
    /**
     * @generated from field: api.v1.Block.Loop.Variables variables = 3;
     */
    variables;
    /**
     * @generated from field: repeated api.v1.Block blocks = 4;
     */
    blocks = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Block.Loop";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "range", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "type", kind: "enum", T: protobuf_1.proto3.getEnumType(Block_Loop_Type) },
        { no: 3, name: "variables", kind: "message", T: Block_Loop_Variables },
        { no: 4, name: "blocks", kind: "message", T: Block, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new Block_Loop().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Block_Loop().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Block_Loop().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Block_Loop, a, b);
    }
}
exports.Block_Loop = Block_Loop;
/**
 * @generated from enum api.v1.Block.Loop.Type
 */
var Block_Loop_Type;
(function (Block_Loop_Type) {
    /**
     * @generated from enum value: TYPE_UNSPECIFIED = 0;
     */
    Block_Loop_Type[Block_Loop_Type["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: TYPE_FOR = 1;
     */
    Block_Loop_Type[Block_Loop_Type["FOR"] = 1] = "FOR";
    /**
     * @generated from enum value: TYPE_FOREACH = 2;
     */
    Block_Loop_Type[Block_Loop_Type["FOREACH"] = 2] = "FOREACH";
    /**
     * @generated from enum value: TYPE_WHILE = 3;
     */
    Block_Loop_Type[Block_Loop_Type["WHILE"] = 3] = "WHILE";
})(Block_Loop_Type || (exports.Block_Loop_Type = Block_Loop_Type = {}));
// Retrieve enum metadata with: proto3.getEnumType(Block_Loop_Type)
protobuf_1.proto3.util.setEnumType(Block_Loop_Type, "api.v1.Block.Loop.Type", [
    { no: 0, name: "TYPE_UNSPECIFIED" },
    { no: 1, name: "TYPE_FOR" },
    { no: 2, name: "TYPE_FOREACH" },
    { no: 3, name: "TYPE_WHILE" },
]);
/**
 * @generated from message api.v1.Block.Loop.Variables
 */
class Block_Loop_Variables extends protobuf_1.Message {
    /**
     * The index of the loop.
     *
     * @generated from field: string index = 1;
     */
    index = "";
    /**
     * The current item; index if none.
     *
     * @generated from field: string item = 2;
     */
    item = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Block.Loop.Variables";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "index", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "item", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Block_Loop_Variables().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Block_Loop_Variables().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Block_Loop_Variables().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Block_Loop_Variables, a, b);
    }
}
exports.Block_Loop_Variables = Block_Loop_Variables;
/**
 * @generated from message api.v1.Block.TryCatch
 */
class Block_TryCatch extends protobuf_1.Message {
    /**
     * @generated from field: api.v1.Blocks try = 1;
     */
    try;
    /**
     * @generated from field: api.v1.Blocks catch = 2;
     */
    catch;
    /**
     * @generated from field: api.v1.Blocks finally = 3;
     */
    finally;
    /**
     * @generated from field: api.v1.Block.TryCatch.Variables variables = 4;
     */
    variables;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Block.TryCatch";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "try", kind: "message", T: Blocks },
        { no: 2, name: "catch", kind: "message", T: Blocks },
        { no: 3, name: "finally", kind: "message", T: Blocks },
        { no: 4, name: "variables", kind: "message", T: Block_TryCatch_Variables },
    ]);
    static fromBinary(bytes, options) {
        return new Block_TryCatch().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Block_TryCatch().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Block_TryCatch().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Block_TryCatch, a, b);
    }
}
exports.Block_TryCatch = Block_TryCatch;
/**
 * @generated from message api.v1.Block.TryCatch.Variables
 */
class Block_TryCatch_Variables extends protobuf_1.Message {
    /**
     * The error inside of the catch block.
     *
     * @generated from field: string error = 1;
     */
    error = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Block.TryCatch.Variables";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Block_TryCatch_Variables().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Block_TryCatch_Variables().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Block_TryCatch_Variables().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Block_TryCatch_Variables, a, b);
    }
}
exports.Block_TryCatch_Variables = Block_TryCatch_Variables;
/**
 * @generated from message api.v1.Block.Break
 */
class Block_Break extends protobuf_1.Message {
    /**
     * @generated from field: string condition = 1;
     */
    condition = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Block.Break";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "condition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Block_Break().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Block_Break().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Block_Break().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Block_Break, a, b);
    }
}
exports.Block_Break = Block_Break;
/**
 * @generated from message api.v1.Block.Return
 */
class Block_Return extends protobuf_1.Message {
    /**
     * @generated from field: string data = 1;
     */
    data = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Block.Return";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Block_Return().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Block_Return().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Block_Return().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Block_Return, a, b);
    }
}
exports.Block_Return = Block_Return;
/**
 * @generated from message api.v1.Block.Throw
 */
class Block_Throw extends protobuf_1.Message {
    /**
     * @generated from field: string error = 1;
     */
    error = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Block.Throw";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Block_Throw().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Block_Throw().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Block_Throw().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Block_Throw, a, b);
    }
}
exports.Block_Throw = Block_Throw;
/**
 * @generated from message api.v1.Block.Wait
 */
class Block_Wait extends protobuf_1.Message {
    /**
     * @generated from field: string condition = 1;
     */
    condition = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Block.Wait";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "condition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Block_Wait().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Block_Wait().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Block_Wait().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Block_Wait, a, b);
    }
}
exports.Block_Wait = Block_Wait;
/**
 * @generated from message api.v1.Block.Stream
 */
class Block_Stream extends protobuf_1.Message {
    /**
     * @generated from field: api.v1.Block.Stream.Trigger trigger = 1;
     */
    trigger;
    /**
     * @generated from field: api.v1.Blocks process = 2;
     */
    process;
    /**
     * @generated from field: api.v1.Block.Stream.Variables variables = 3;
     */
    variables;
    /**
     * @generated from field: api.v1.Block.Stream.Options options = 4;
     */
    options;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Block.Stream";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "trigger", kind: "message", T: Block_Stream_Trigger },
        { no: 2, name: "process", kind: "message", T: Blocks },
        { no: 3, name: "variables", kind: "message", T: Block_Stream_Variables },
        { no: 4, name: "options", kind: "message", T: Block_Stream_Options },
    ]);
    static fromBinary(bytes, options) {
        return new Block_Stream().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Block_Stream().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Block_Stream().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Block_Stream, a, b);
    }
}
exports.Block_Stream = Block_Stream;
/**
 * @generated from message api.v1.Block.Stream.Variables
 */
class Block_Stream_Variables extends protobuf_1.Message {
    /**
     * @generated from field: string item = 1;
     */
    item = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Block.Stream.Variables";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "item", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Block_Stream_Variables().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Block_Stream_Variables().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Block_Stream_Variables().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Block_Stream_Variables, a, b);
    }
}
exports.Block_Stream_Variables = Block_Stream_Variables;
/**
 * @generated from message api.v1.Block.Stream.Options
 */
class Block_Stream_Options extends protobuf_1.Message {
    /**
     * The UI has "auto send" but we need the default to be false
     * So our name here needs to be the opposite.
     *
     * @generated from field: bool disable_auto_send = 1;
     */
    disableAutoSend = false;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Block.Stream.Options";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "disable_auto_send", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    ]);
    static fromBinary(bytes, options) {
        return new Block_Stream_Options().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Block_Stream_Options().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Block_Stream_Options().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Block_Stream_Options, a, b);
    }
}
exports.Block_Stream_Options = Block_Stream_Options;
/**
 * @generated from message api.v1.Block.Stream.Trigger
 */
class Block_Stream_Trigger extends protobuf_1.Message {
    /**
     * @generated from field: string name = 1;
     */
    name = "";
    /**
     * @generated from field: api.v1.Step step = 2;
     */
    step;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Block.Stream.Trigger";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "step", kind: "message", T: Step },
    ]);
    static fromBinary(bytes, options) {
        return new Block_Stream_Trigger().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Block_Stream_Trigger().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Block_Stream_Trigger().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Block_Stream_Trigger, a, b);
    }
}
exports.Block_Stream_Trigger = Block_Stream_Trigger;
/**
 * @generated from message api.v1.Block.Send
 */
class Block_Send extends protobuf_1.Message {
    /**
     * @generated from field: string message = 1;
     */
    message = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Block.Send";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Block_Send().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Block_Send().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Block_Send().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Block_Send, a, b);
    }
}
exports.Block_Send = Block_Send;
/**
 * @generated from message api.v1.Step
 */
class Step extends protobuf_1.Message {
    /**
     * Important: integration means integration id
     *
     * @generated from field: string integration = 1;
     */
    integration = "";
    /**
     * @generated from oneof api.v1.Step.config
     */
    config = { case: undefined };
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Step";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "integration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "python", kind: "message", T: plugin_pb_1.Plugin, oneof: "config" },
        { no: 3, name: "bigquery", kind: "message", T: plugin_pb_2.Plugin, oneof: "config" },
        { no: 4, name: "dynamodb", kind: "message", T: plugin_pb_3.Plugin, oneof: "config" },
        { no: 5, name: "email", kind: "message", T: plugin_pb_4.Plugin, oneof: "config" },
        { no: 6, name: "graphql", kind: "message", T: plugin_pb_5.Plugin, oneof: "config" },
        { no: 7, name: "graphqlintegration", kind: "message", T: plugin_pb_5.Plugin, oneof: "config" },
        { no: 8, name: "gsheets", kind: "message", T: plugin_pb_6.Plugin, oneof: "config" },
        { no: 9, name: "mariadb", kind: "message", T: plugin_pb_7.Plugin, oneof: "config" },
        { no: 10, name: "mssql", kind: "message", T: plugin_pb_8.Plugin, oneof: "config" },
        { no: 11, name: "mysql", kind: "message", T: plugin_pb_9.Plugin, oneof: "config" },
        { no: 12, name: "postgres", kind: "message", T: plugin_pb_10.Plugin, oneof: "config" },
        { no: 13, name: "redshift", kind: "message", T: plugin_pb_11.Plugin, oneof: "config" },
        { no: 14, name: "restapi", kind: "message", T: plugin_pb_12.Plugin, oneof: "config" },
        { no: 15, name: "restapiintegration", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 16, name: "rockset", kind: "message", T: plugin_pb_14.Plugin, oneof: "config" },
        { no: 17, name: "s3", kind: "message", T: plugin_pb_15.Plugin, oneof: "config" },
        { no: 18, name: "snowflake", kind: "message", T: plugin_pb_16.Plugin, oneof: "config" },
        { no: 19, name: "workflow", kind: "message", T: plugin_pb_17.Plugin, oneof: "config" },
        { no: 20, name: "javascript", kind: "message", T: plugin_pb_18.Plugin, oneof: "config" },
        { no: 21, name: "mongodb", kind: "message", T: plugin_pb_19.Plugin, oneof: "config" },
        { no: 22, name: "gcs", kind: "message", T: plugin_pb_20.Plugin, oneof: "config" },
        { no: 23, name: "openai", kind: "message", T: plugin_pb_21.Plugin, oneof: "config" },
        { no: 24, name: "ocr", jsonName: "superblocks-ocr", kind: "message", T: plugin_pb_22.Plugin, oneof: "config" },
        { no: 25, name: "kafka", kind: "message", T: plugin_pb_23.Plugin, oneof: "config" },
        { no: 26, name: "confluent", kind: "message", T: plugin_pb_23.Plugin, oneof: "config" },
        { no: 27, name: "msk", kind: "message", T: plugin_pb_23.Plugin, oneof: "config" },
        { no: 28, name: "redpanda", kind: "message", T: plugin_pb_23.Plugin, oneof: "config" },
        { no: 29, name: "aivenkafka", kind: "message", T: plugin_pb_23.Plugin, oneof: "config" },
        { no: 30, name: "cockroachdb", kind: "message", T: plugin_pb_24.Plugin, oneof: "config" },
        { no: 31, name: "airtable", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 32, name: "notion", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 33, name: "pagerduty", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 34, name: "sendgrid", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 35, name: "slack", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 36, name: "athena", kind: "message", T: plugin_pb_25.Plugin, oneof: "config" },
        { no: 37, name: "redis", kind: "message", T: plugin_pb_26.Plugin, oneof: "config" },
        { no: 38, name: "asana", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 39, name: "github", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 40, name: "smtp", kind: "message", T: plugin_pb_27.Plugin, oneof: "config" },
        { no: 41, name: "salesforce", kind: "message", T: plugin_pb_28.Plugin, oneof: "config" },
        { no: 42, name: "bitbucket", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 43, name: "circleci", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 44, name: "front", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 45, name: "intercom", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 46, name: "segment", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 47, name: "launchdarkly", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 48, name: "dropbox", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 49, name: "twilio", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 50, name: "googledrive", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 51, name: "googleanalytics", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 52, name: "box", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 53, name: "hubspot", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 54, name: "stripe", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 55, name: "zoom", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 56, name: "jira", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 57, name: "zendesk", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 58, name: "adls", kind: "message", T: plugin_pb_29.Plugin, oneof: "config" },
        { no: 59, name: "pinecone", kind: "message", T: plugin_pb_30.Plugin, oneof: "config" },
        { no: 60, name: "cosmosdb", kind: "message", T: plugin_pb_31.Plugin, oneof: "config" },
        { no: 61, name: "datadog", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 62, name: "xero", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 63, name: "oracledb", kind: "message", T: plugin_pb_32.Plugin, oneof: "config" },
        { no: 64, name: "elasticsearch", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 65, name: "databricks", kind: "message", T: plugin_pb_33.Plugin, oneof: "config" },
        { no: 66, name: "couchbase", kind: "message", T: plugin_pb_34.Plugin, oneof: "config" },
        { no: 67, name: "custom", kind: "message", T: plugin_pb_35.Plugin, oneof: "config" },
        { no: 68, name: "anthropic", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 69, name: "cohere", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 70, name: "fireworks", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 71, name: "mistral", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 72, name: "groq", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 73, name: "perplexity", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 74, name: "stabilityai", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
        { no: 75, name: "gemini", kind: "message", T: plugin_pb_13.Plugin, oneof: "config" },
    ]);
    static fromBinary(bytes, options) {
        return new Step().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Step().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Step().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Step, a, b);
    }
}
exports.Step = Step;
//# sourceMappingURL=api_pb.map