"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file api/v1/service.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowResponse_ResponseMeta = exports.WorkflowResponse = exports.DownloadResponse = exports.DownloadRequest = exports.MetadataResponse_BucketsMetadata = exports.MetadataResponse_BucketMetadata = exports.MetadataResponse_DatabaseSchemaMetadata_Schema = exports.MetadataResponse_DatabaseSchemaMetadata_Table = exports.MetadataResponse_DatabaseSchemaMetadata_Template = exports.MetadataResponse_DatabaseSchemaMetadata_Key = exports.MetadataResponse_DatabaseSchemaMetadata_Column = exports.MetadataResponse_DatabaseSchemaMetadata = exports.MetadataResponse = exports.MetadataRequest = exports.MetadataRequestDeprecated = exports.Mock_Return = exports.Mock_On = exports.Mock_Params = exports.Mock = exports.TwoWayResponse = exports.TwoWayRequest = exports.Function_Response = exports.Function_Request = exports.Function = exports.DeleteResponse = exports.DeleteRequest = exports.TestResponse = exports.TestRequest = exports.CancelResponse = exports.CancelRequest = exports.OutputResponse = exports.OutputRequest = exports.StreamResponse = exports.AsyncResponse = exports.AwaitResponse_Status = exports.AwaitResponse = exports.StatusRequest = exports.Definition_Metadata = exports.Definition = exports.ExecuteRequest_File = exports.ExecuteRequest_Fetch = exports.ExecuteRequest_Options = exports.ExecuteRequest = exports.ValidateRequest = exports.HealthRequest = exports.ViewMode = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const api_pb_1 = require("./api_pb");
const common_pb_1 = require("../../common/v1/common_pb");
const store_pb_1 = require("../../store/v1/store_pb");
const event_pb_1 = require("./event_pb");
const errors_pb_1 = require("../../common/v1/errors_pb");
const plugin_pb_1 = require("../../plugins/kafka/v1/plugin_pb");
const plugin_pb_2 = require("../../plugins/cosmosdb/v1/plugin_pb");
const plugin_pb_3 = require("../../plugins/adls/v1/plugin_pb");
/**
 * @generated from enum api.v1.ViewMode
 */
var ViewMode;
(function (ViewMode) {
    /**
     * @generated from enum value: VIEW_MODE_UNSPECIFIED = 0;
     */
    ViewMode[ViewMode["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: VIEW_MODE_EDIT = 1;
     */
    ViewMode[ViewMode["EDIT"] = 1] = "EDIT";
    /**
     * @generated from enum value: VIEW_MODE_PREVIEW = 2;
     */
    ViewMode[ViewMode["PREVIEW"] = 2] = "PREVIEW";
    /**
     * @generated from enum value: VIEW_MODE_DEPLOYED = 3;
     */
    ViewMode[ViewMode["DEPLOYED"] = 3] = "DEPLOYED";
})(ViewMode || (exports.ViewMode = ViewMode = {}));
// Retrieve enum metadata with: proto3.getEnumType(ViewMode)
protobuf_1.proto3.util.setEnumType(ViewMode, "api.v1.ViewMode", [
    { no: 0, name: "VIEW_MODE_UNSPECIFIED" },
    { no: 1, name: "VIEW_MODE_EDIT" },
    { no: 2, name: "VIEW_MODE_PREVIEW" },
    { no: 3, name: "VIEW_MODE_DEPLOYED" },
]);
/**
 * @generated from message api.v1.HealthRequest
 */
class HealthRequest extends protobuf_1.Message {
    /**
     * @generated from field: bool detailed = 1;
     */
    detailed = false;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.HealthRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "detailed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    ]);
    static fromBinary(bytes, options) {
        return new HealthRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HealthRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HealthRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(HealthRequest, a, b);
    }
}
exports.HealthRequest = HealthRequest;
/**
 * @generated from message api.v1.ValidateRequest
 */
class ValidateRequest extends protobuf_1.Message {
    /**
     * @generated from field: api.v1.Api api = 1;
     */
    api;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.ValidateRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "api", kind: "message", T: api_pb_1.Api },
    ]);
    static fromBinary(bytes, options) {
        return new ValidateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ValidateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ValidateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ValidateRequest, a, b);
    }
}
exports.ValidateRequest = ValidateRequest;
/**
 * @generated from message api.v1.ExecuteRequest
 */
class ExecuteRequest extends protobuf_1.Message {
    /**
     *
     * Request options.
     *
     * @generated from field: api.v1.ExecuteRequest.Options options = 1;
     */
    options;
    /**
     *
     * Inputs that can be access in steps.
     *
     * @generated from field: map<string, google.protobuf.Value> inputs = 2;
     */
    inputs = {};
    /**
     * @generated from oneof api.v1.ExecuteRequest.request
     */
    request = { case: undefined };
    /**
     * @generated from field: repeated api.v1.ExecuteRequest.File files = 5;
     */
    files = [];
    /**
     * @generated from field: common.v1.Profile profile = 6;
     */
    profile;
    /**
     * @generated from field: repeated api.v1.Mock mocks = 7;
     */
    mocks = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.ExecuteRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "options", kind: "message", T: ExecuteRequest_Options },
        { no: 2, name: "inputs", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: protobuf_1.Value } },
        { no: 3, name: "definition", kind: "message", T: Definition, oneof: "request" },
        { no: 4, name: "fetch", kind: "message", T: ExecuteRequest_Fetch, oneof: "request" },
        { no: 5, name: "files", kind: "message", T: ExecuteRequest_File, repeated: true },
        { no: 6, name: "profile", kind: "message", T: common_pb_1.Profile },
        { no: 7, name: "mocks", kind: "message", T: Mock, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new ExecuteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExecuteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExecuteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ExecuteRequest, a, b);
    }
}
exports.ExecuteRequest = ExecuteRequest;
/**
 * @generated from message api.v1.ExecuteRequest.Options
 */
class ExecuteRequest_Options extends protobuf_1.Message {
    /**
     *
     * If true, the primary output will not be returned.
     *
     * @generated from field: bool exclude_output = 1;
     */
    excludeOutput = false;
    /**
     *
     * If true, all outputs will be returned. If false (default):
     *
     *       STREAM: The block output will not be returned.
     *  ASYNC/AWAIT: Only the final block's output will be returned.
     *
     * WARNING: Returning more than the final block's output may
     *          result in a significant performance regressions.
     * NOTE: If 'exclude_events' is enabled, this flag has no effect.
     *
     * @generated from field: bool include_event_outputs = 2;
     */
    includeEventOutputs = false;
    /**
     *
     * Include system events.
     *
     * @generated from field: bool include_events = 3;
     */
    includeEvents = false;
    /**
     *
     * The block ID to start execution at.
     *
     * @generated from field: string start = 4;
     */
    start = "";
    /**
     *
     * The block ID to stop execution at.
     *
     * @generated from field: string stop = 5;
     */
    stop = "";
    /**
     *
     * If true, values for resolved bindings will be included.
     *
     * @generated from field: bool include_resolved = 6;
     */
    includeResolved = false;
    /**
     *
     * If true, the api will immediately return and execution will continue in a detached manner.
     *
     * @generated from field: bool async = 7;
     */
    async = false;
    /**
     *
     * If true, the begin and complete events will be sent. This flag is need to retain backwards compatibility.
     *
     * @generated from field: bool include_api_events = 8;
     */
    includeApiEvents = false;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.ExecuteRequest.Options";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "exclude_output", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "include_event_outputs", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 3, name: "include_events", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 4, name: "start", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "stop", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 6, name: "include_resolved", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 7, name: "async", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 8, name: "include_api_events", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    ]);
    static fromBinary(bytes, options) {
        return new ExecuteRequest_Options().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExecuteRequest_Options().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExecuteRequest_Options().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ExecuteRequest_Options, a, b);
    }
}
exports.ExecuteRequest_Options = ExecuteRequest_Options;
/**
 * @generated from message api.v1.ExecuteRequest.Fetch
 */
class ExecuteRequest_Fetch extends protobuf_1.Message {
    /**
     *
     * A reference to the API by ID.
     *
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     *
     * The integration profile to use.
     *
     * @generated from field: common.v1.Profile profile = 2;
     */
    profile;
    /**
     *
     * Use unpublished changes.
     *
     * @generated from field: optional bool test = 3;
     */
    test;
    /**
     *
     * The auth token to use when fetching the definition.
     * Used for workflows only.
     *
     * @generated from field: optional string token = 4;
     */
    token;
    /**
     *
     * The view mode that this resource should be executed against.
     *
     * @generated from field: api.v1.ViewMode view_mode = 5;
     */
    viewMode = ViewMode.UNSPECIFIED;
    /**
     *
     * The commit ID to use when fetching the API.
     *
     * @generated from field: optional string commit_id = 6;
     */
    commitId;
    /**
     *
     * The branch name to use when fetching the API
     *
     * @generated from field: optional string branch_name = 7;
     */
    branchName;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.ExecuteRequest.Fetch";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "profile", kind: "message", T: common_pb_1.Profile },
        { no: 3, name: "test", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
        { no: 4, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 5, name: "view_mode", kind: "enum", T: protobuf_1.proto3.getEnumType(ViewMode) },
        { no: 6, name: "commit_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 7, name: "branch_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new ExecuteRequest_Fetch().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExecuteRequest_Fetch().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExecuteRequest_Fetch().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ExecuteRequest_Fetch, a, b);
    }
}
exports.ExecuteRequest_Fetch = ExecuteRequest_Fetch;
/**
 * @generated from message api.v1.ExecuteRequest.File
 */
class ExecuteRequest_File extends protobuf_1.Message {
    /**
     * @generated from field: string originalName = 1;
     */
    originalName = "";
    /**
     * @generated from field: bytes buffer = 2;
     */
    buffer = new Uint8Array(0);
    /**
     * @generated from field: string encoding = 3;
     */
    encoding = "";
    /**
     * @generated from field: string mimeType = 4;
     */
    mimeType = "";
    /**
     * @generated from field: string size = 5;
     */
    size = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.ExecuteRequest.File";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "originalName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "buffer", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 3, name: "encoding", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "mimeType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new ExecuteRequest_File().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExecuteRequest_File().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExecuteRequest_File().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ExecuteRequest_File, a, b);
    }
}
exports.ExecuteRequest_File = ExecuteRequest_File;
/**
 * @generated from message api.v1.Definition
 */
class Definition extends protobuf_1.Message {
    /**
     * @generated from field: api.v1.Api api = 1;
     */
    api;
    /**
     * @generated from field: map<string, google.protobuf.Struct> integrations = 2;
     */
    integrations = {};
    /**
     * @generated from field: api.v1.Definition.Metadata metadata = 3;
     */
    metadata;
    /**
     * @generated from field: store.v1.Stores stores = 4;
     */
    stores;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Definition";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "api", kind: "message", T: api_pb_1.Api },
        { no: 2, name: "integrations", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: protobuf_1.Struct } },
        { no: 3, name: "metadata", kind: "message", T: Definition_Metadata },
        { no: 4, name: "stores", kind: "message", T: store_pb_1.Stores },
    ]);
    static fromBinary(bytes, options) {
        return new Definition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Definition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Definition().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Definition, a, b);
    }
}
exports.Definition = Definition;
/**
 * @generated from message api.v1.Definition.Metadata
 */
class Definition_Metadata extends protobuf_1.Message {
    /**
     * This is the email
     *
     * @generated from field: string requester = 1;
     */
    requester = "";
    /**
     * Because profile isn't a required execution parameter, the default will be different per org.
     *
     * @generated from field: string profile = 2;
     */
    profile = "";
    /**
     * @generated from field: string organization_plan = 3;
     */
    organizationPlan = "";
    /**
     * @generated from field: string organization_name = 4;
     */
    organizationName = "";
    /**
     * This is requester type since the same email could be used by external user as well as by internal
     *
     * @generated from field: optional common.v1.UserType requester_type = 5;
     */
    requesterType;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Definition.Metadata";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "requester", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "profile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "organization_plan", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "requester_type", kind: "enum", T: protobuf_1.proto3.getEnumType(common_pb_1.UserType), opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Definition_Metadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Definition_Metadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Definition_Metadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Definition_Metadata, a, b);
    }
}
exports.Definition_Metadata = Definition_Metadata;
/**
 * @generated from message api.v1.StatusRequest
 */
class StatusRequest extends protobuf_1.Message {
    /**
     *
     * The execution ID of an in-progress API execution.
     *
     * @generated from field: string execution = 1;
     */
    execution = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.StatusRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "execution", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new StatusRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StatusRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StatusRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StatusRequest, a, b);
    }
}
exports.StatusRequest = StatusRequest;
/**
 * @generated from message api.v1.AwaitResponse
 */
class AwaitResponse extends protobuf_1.Message {
    /**
     *
     * The execution ID. This can be used to retrieve outputs after the fact.
     *
     * @generated from field: string execution = 1;
     */
    execution = "";
    /**
     *
     * The block's output.
     *
     * @generated from field: api.v1.Output output = 2;
     */
    output;
    /**
     *
     * The errors, if any.
     *
     * @generated from field: repeated common.v1.Error errors = 3;
     */
    errors = [];
    /**
     *
     * The current status of this execution. If response orginates
     * from an AwaitRequest, the status will always be comppleted.
     *
     * @generated from field: api.v1.AwaitResponse.Status status = 4;
     */
    status = AwaitResponse_Status.UNSPECIFIED;
    /**
     *
     * Aggregated performance stats.
     *
     * @generated from field: api.v1.Performance performance = 5;
     */
    performance;
    /**
     *
     * A log of the cuncurrent events that happened during this API's execution.
     *
     * @generated from field: repeated api.v1.Event events = 6;
     */
    events = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.AwaitResponse";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "execution", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "output", kind: "message", T: event_pb_1.Output },
        { no: 3, name: "errors", kind: "message", T: errors_pb_1.Error, repeated: true },
        { no: 4, name: "status", kind: "enum", T: protobuf_1.proto3.getEnumType(AwaitResponse_Status) },
        { no: 5, name: "performance", kind: "message", T: event_pb_1.Performance },
        { no: 6, name: "events", kind: "message", T: event_pb_1.Event, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new AwaitResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AwaitResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AwaitResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AwaitResponse, a, b);
    }
}
exports.AwaitResponse = AwaitResponse;
/**
 * @generated from enum api.v1.AwaitResponse.Status
 */
var AwaitResponse_Status;
(function (AwaitResponse_Status) {
    /**
     * @generated from enum value: STATUS_UNSPECIFIED = 0;
     */
    AwaitResponse_Status[AwaitResponse_Status["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: STATUS_COMPLETED = 1;
     */
    AwaitResponse_Status[AwaitResponse_Status["COMPLETED"] = 1] = "COMPLETED";
    /**
     * @generated from enum value: STATUS_EXECUTING = 2;
     */
    AwaitResponse_Status[AwaitResponse_Status["EXECUTING"] = 2] = "EXECUTING";
})(AwaitResponse_Status || (exports.AwaitResponse_Status = AwaitResponse_Status = {}));
// Retrieve enum metadata with: proto3.getEnumType(AwaitResponse_Status)
protobuf_1.proto3.util.setEnumType(AwaitResponse_Status, "api.v1.AwaitResponse.Status", [
    { no: 0, name: "STATUS_UNSPECIFIED" },
    { no: 1, name: "STATUS_COMPLETED" },
    { no: 2, name: "STATUS_EXECUTING" },
]);
/**
 * @generated from message api.v1.AsyncResponse
 */
class AsyncResponse extends protobuf_1.Message {
    /**
     *
     * The execution ID. This can be used to retrieve outputs after the fact.
     *
     * @generated from field: string execution = 1;
     */
    execution = "";
    /**
     * @generated from field: common.v1.Error error = 2;
     */
    error;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.AsyncResponse";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "execution", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "error", kind: "message", T: errors_pb_1.Error },
    ]);
    static fromBinary(bytes, options) {
        return new AsyncResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AsyncResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AsyncResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AsyncResponse, a, b);
    }
}
exports.AsyncResponse = AsyncResponse;
/**
 * @generated from message api.v1.StreamResponse
 */
class StreamResponse extends protobuf_1.Message {
    /**
     *
     * The execution ID. This can be used to retrieve outputs after the fact.
     *
     * @generated from field: string execution = 1;
     */
    execution = "";
    /**
     * @generated from field: api.v1.Event event = 2;
     */
    event;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.StreamResponse";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "execution", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "event", kind: "message", T: event_pb_1.Event },
    ]);
    static fromBinary(bytes, options) {
        return new StreamResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StreamResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StreamResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StreamResponse, a, b);
    }
}
exports.StreamResponse = StreamResponse;
/**
 * @generated from message api.v1.OutputRequest
 */
class OutputRequest extends protobuf_1.Message {
    /**
     * @generated from field: string execution = 1;
     */
    execution = "";
    /**
     * @generated from field: string block = 2;
     */
    block = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.OutputRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "execution", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "block", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new OutputRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OutputRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OutputRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(OutputRequest, a, b);
    }
}
exports.OutputRequest = OutputRequest;
/**
 * @generated from message api.v1.OutputResponse
 */
class OutputResponse extends protobuf_1.Message {
    /**
     * @generated from field: common.v1.Metadata metadata = 1;
     */
    metadata;
    /**
     *
     * The block's output.
     *
     * @generated from field: api.v1.Output output = 2;
     */
    output;
    /**
     *
     * The error, if any.
     *
     * @generated from field: common.v1.Error error = 3;
     */
    error;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.OutputResponse";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "metadata", kind: "message", T: common_pb_1.Metadata },
        { no: 2, name: "output", kind: "message", T: event_pb_1.Output },
        { no: 3, name: "error", kind: "message", T: errors_pb_1.Error },
    ]);
    static fromBinary(bytes, options) {
        return new OutputResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OutputResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OutputResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(OutputResponse, a, b);
    }
}
exports.OutputResponse = OutputResponse;
/**
 * @generated from message api.v1.CancelRequest
 */
class CancelRequest extends protobuf_1.Message {
    /**
     * @generated from field: string execution = 1;
     */
    execution = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.CancelRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "execution", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new CancelRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CancelRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CancelRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CancelRequest, a, b);
    }
}
exports.CancelRequest = CancelRequest;
/**
 * @generated from message api.v1.CancelResponse
 */
class CancelResponse extends protobuf_1.Message {
    /**
     * @generated from field: common.v1.Error error = 1;
     */
    error;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.CancelResponse";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "error", kind: "message", T: errors_pb_1.Error },
    ]);
    static fromBinary(bytes, options) {
        return new CancelResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CancelResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CancelResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CancelResponse, a, b);
    }
}
exports.CancelResponse = CancelResponse;
/**
 * @generated from message api.v1.TestRequest
 */
class TestRequest extends protobuf_1.Message {
    /**
     * @generated from field: google.protobuf.Struct datasource_config = 1;
     */
    datasourceConfig;
    /**
     * @generated from field: string integration_type = 2;
     */
    integrationType = "";
    /**
     * @generated from field: string configuration_id = 3;
     */
    configurationId = "";
    /**
     * @generated from field: common.v1.Profile profile = 4;
     */
    profile;
    /**
     * @generated from field: optional google.protobuf.Struct action_config = 5;
     */
    actionConfig;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.TestRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "datasource_config", kind: "message", T: protobuf_1.Struct },
        { no: 2, name: "integration_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "configuration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "profile", kind: "message", T: common_pb_1.Profile },
        { no: 5, name: "action_config", kind: "message", T: protobuf_1.Struct, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new TestRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TestRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TestRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TestRequest, a, b);
    }
}
exports.TestRequest = TestRequest;
/**
 * @generated from message api.v1.TestResponse
 */
class TestResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.TestResponse";
    static fields = protobuf_1.proto3.util.newFieldList(() => []);
    static fromBinary(bytes, options) {
        return new TestResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TestResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TestResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TestResponse, a, b);
    }
}
exports.TestResponse = TestResponse;
/**
 * @generated from message api.v1.DeleteRequest
 */
class DeleteRequest extends protobuf_1.Message {
    /**
     * @generated from field: string integration = 1;
     */
    integration = "";
    /**
     * @generated from field: common.v1.Profile profile = 2;
     */
    profile;
    /**
     * @generated from field: string configuration_id = 3;
     */
    configurationId = "";
    /**
     * @generated from field: string plugin_name = 4;
     */
    pluginName = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.DeleteRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "integration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "profile", kind: "message", T: common_pb_1.Profile },
        { no: 3, name: "configuration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "plugin_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new DeleteRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteRequest, a, b);
    }
}
exports.DeleteRequest = DeleteRequest;
/**
 * @generated from message api.v1.DeleteResponse
 */
class DeleteResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.DeleteResponse";
    static fields = protobuf_1.proto3.util.newFieldList(() => []);
    static fromBinary(bytes, options) {
        return new DeleteResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DeleteResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DeleteResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DeleteResponse, a, b);
    }
}
exports.DeleteResponse = DeleteResponse;
/**
 * @generated from message api.v1.Function
 */
class Function extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Function";
    static fields = protobuf_1.proto3.util.newFieldList(() => []);
    static fromBinary(bytes, options) {
        return new Function().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Function().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Function().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Function, a, b);
    }
}
exports.Function = Function;
/**
 * @generated from message api.v1.Function.Request
 */
class Function_Request extends protobuf_1.Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string name = 2;
     */
    name = "";
    /**
     * @generated from field: repeated google.protobuf.Value parameters = 3;
     */
    parameters = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Function.Request";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "parameters", kind: "message", T: protobuf_1.Value, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new Function_Request().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Function_Request().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Function_Request().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Function_Request, a, b);
    }
}
exports.Function_Request = Function_Request;
/**
 * @generated from message api.v1.Function.Response
 */
class Function_Response extends protobuf_1.Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: google.protobuf.Value value = 2;
     */
    value;
    /**
     * @generated from field: common.v1.Error error = 3;
     */
    error;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Function.Response";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "value", kind: "message", T: protobuf_1.Value },
        { no: 3, name: "error", kind: "message", T: errors_pb_1.Error },
    ]);
    static fromBinary(bytes, options) {
        return new Function_Response().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Function_Response().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Function_Response().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Function_Response, a, b);
    }
}
exports.Function_Response = Function_Response;
/**
 * @generated from message api.v1.TwoWayRequest
 */
class TwoWayRequest extends protobuf_1.Message {
    /**
     * @generated from oneof api.v1.TwoWayRequest.type
     */
    type = { case: undefined };
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.TwoWayRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "execute", kind: "message", T: ExecuteRequest, oneof: "type" },
        { no: 2, name: "function", kind: "message", T: Function_Response, oneof: "type" },
    ]);
    static fromBinary(bytes, options) {
        return new TwoWayRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TwoWayRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TwoWayRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TwoWayRequest, a, b);
    }
}
exports.TwoWayRequest = TwoWayRequest;
/**
 * @generated from message api.v1.TwoWayResponse
 */
class TwoWayResponse extends protobuf_1.Message {
    /**
     * @generated from oneof api.v1.TwoWayResponse.type
     */
    type = { case: undefined };
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.TwoWayResponse";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "stream", kind: "message", T: StreamResponse, oneof: "type" },
        { no: 2, name: "function", kind: "message", T: Function_Request, oneof: "type" },
    ]);
    static fromBinary(bytes, options) {
        return new TwoWayResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TwoWayResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TwoWayResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TwoWayResponse, a, b);
    }
}
exports.TwoWayResponse = TwoWayResponse;
/**
 * @generated from message api.v1.Mock
 */
class Mock extends protobuf_1.Message {
    /**
     * @generated from field: api.v1.Mock.On on = 1;
     */
    on;
    /**
     * @generated from field: api.v1.Mock.Return return = 2;
     */
    return;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Mock";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "on", kind: "message", T: Mock_On },
        { no: 2, name: "return", kind: "message", T: Mock_Return },
    ]);
    static fromBinary(bytes, options) {
        return new Mock().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Mock().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Mock().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Mock, a, b);
    }
}
exports.Mock = Mock;
/**
 * @generated from message api.v1.Mock.Params
 */
class Mock_Params extends protobuf_1.Message {
    /**
     * @generated from field: optional string integration_type = 1;
     */
    integrationType;
    /**
     * @generated from field: optional string step_name = 2;
     */
    stepName;
    /**
     * @generated from field: optional google.protobuf.Value inputs = 3;
     */
    inputs;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Mock.Params";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "integration_type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 2, name: "step_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 3, name: "inputs", kind: "message", T: protobuf_1.Value, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Mock_Params().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Mock_Params().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Mock_Params().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Mock_Params, a, b);
    }
}
exports.Mock_Params = Mock_Params;
/**
 * @generated from message api.v1.Mock.On
 */
class Mock_On extends protobuf_1.Message {
    /**
     * @generated from field: optional api.v1.Mock.Params static = 1;
     */
    static;
    /**
     * function name
     *
     * @generated from field: optional string dynamic = 2;
     */
    dynamic;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Mock.On";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "static", kind: "message", T: Mock_Params, opt: true },
        { no: 2, name: "dynamic", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Mock_On().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Mock_On().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Mock_On().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Mock_On, a, b);
    }
}
exports.Mock_On = Mock_On;
/**
 * @generated from message api.v1.Mock.Return
 */
class Mock_Return extends protobuf_1.Message {
    /**
     * @generated from oneof api.v1.Mock.Return.type
     */
    type = { case: undefined };
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.Mock.Return";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "static", kind: "message", T: protobuf_1.Value, oneof: "type" },
        { no: 2, name: "dynamic", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "type" },
    ]);
    static fromBinary(bytes, options) {
        return new Mock_Return().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Mock_Return().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Mock_Return().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Mock_Return, a, b);
    }
}
exports.Mock_Return = Mock_Return;
/**
 * DEPRECATED
 *
 * @generated from message api.v1.MetadataRequestDeprecated
 */
class MetadataRequestDeprecated extends protobuf_1.Message {
    /**
     * This is confusing, but integration means integration id
     *
     * @generated from field: string integration = 1;
     */
    integration = "";
    /**
     * @generated from field: string api_id = 2;
     */
    apiId = "";
    /**
     * @generated from field: common.v1.Profile profile = 3;
     */
    profile;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.MetadataRequestDeprecated";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "integration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "api_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "profile", kind: "message", T: common_pb_1.Profile },
    ]);
    static fromBinary(bytes, options) {
        return new MetadataRequestDeprecated().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MetadataRequestDeprecated().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MetadataRequestDeprecated().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MetadataRequestDeprecated, a, b);
    }
}
exports.MetadataRequestDeprecated = MetadataRequestDeprecated;
/**
 * @generated from message api.v1.MetadataRequest
 */
class MetadataRequest extends protobuf_1.Message {
    /**
     * The integration id
     *
     * @generated from field: string integration = 1;
     */
    integration = "";
    /**
     * @generated from field: common.v1.Profile profile = 2;
     */
    profile;
    /**
     * @generated from field: google.protobuf.Struct step_configuration = 3;
     */
    stepConfiguration;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.MetadataRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "integration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "profile", kind: "message", T: common_pb_1.Profile },
        { no: 3, name: "step_configuration", kind: "message", T: protobuf_1.Struct },
    ]);
    static fromBinary(bytes, options) {
        return new MetadataRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MetadataRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MetadataRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MetadataRequest, a, b);
    }
}
exports.MetadataRequest = MetadataRequest;
/**
 * @generated from message api.v1.MetadataResponse
 */
class MetadataResponse extends protobuf_1.Message {
    /**
     * @generated from oneof api.v1.MetadataResponse.metadata
     */
    metadata = { case: undefined };
    /**
     * @generated from field: string g_sheets_next_page_token = 6;
     */
    gSheetsNextPageToken = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.MetadataResponse";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "database_schema_metadata", kind: "message", T: MetadataResponse_DatabaseSchemaMetadata, oneof: "metadata" },
        { no: 2, name: "buckets_metadata", kind: "message", T: MetadataResponse_BucketsMetadata, oneof: "metadata" },
        { no: 3, name: "kafka", kind: "message", T: plugin_pb_1.Metadata, oneof: "metadata" },
        { no: 4, name: "cosmosdb", kind: "message", T: plugin_pb_2.Plugin_Metadata, oneof: "metadata" },
        { no: 5, name: "adls", kind: "message", T: plugin_pb_3.Plugin_Metadata, oneof: "metadata" },
        { no: 6, name: "g_sheets_next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new MetadataResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MetadataResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MetadataResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MetadataResponse, a, b);
    }
}
exports.MetadataResponse = MetadataResponse;
/**
 * @generated from message api.v1.MetadataResponse.DatabaseSchemaMetadata
 */
class MetadataResponse_DatabaseSchemaMetadata extends protobuf_1.Message {
    /**
     * @generated from field: repeated api.v1.MetadataResponse.DatabaseSchemaMetadata.Table tables = 1;
     */
    tables = [];
    /**
     * NOTE: (joey) this is optional in the TS version of this model. should be here as well
     *
     * @generated from field: repeated api.v1.MetadataResponse.DatabaseSchemaMetadata.Schema schemas = 2;
     */
    schemas = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.MetadataResponse.DatabaseSchemaMetadata";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "tables", kind: "message", T: MetadataResponse_DatabaseSchemaMetadata_Table, repeated: true },
        { no: 2, name: "schemas", kind: "message", T: MetadataResponse_DatabaseSchemaMetadata_Schema, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new MetadataResponse_DatabaseSchemaMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MetadataResponse_DatabaseSchemaMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MetadataResponse_DatabaseSchemaMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MetadataResponse_DatabaseSchemaMetadata, a, b);
    }
}
exports.MetadataResponse_DatabaseSchemaMetadata = MetadataResponse_DatabaseSchemaMetadata;
/**
 * @generated from message api.v1.MetadataResponse.DatabaseSchemaMetadata.Column
 */
class MetadataResponse_DatabaseSchemaMetadata_Column extends protobuf_1.Message {
    /**
     * @generated from field: string name = 1;
     */
    name = "";
    /**
     * @generated from field: string type = 2;
     */
    type = "";
    /**
     * @generated from field: string escaped_name = 3;
     */
    escapedName = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.MetadataResponse.DatabaseSchemaMetadata.Column";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "escaped_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new MetadataResponse_DatabaseSchemaMetadata_Column().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MetadataResponse_DatabaseSchemaMetadata_Column().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MetadataResponse_DatabaseSchemaMetadata_Column().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MetadataResponse_DatabaseSchemaMetadata_Column, a, b);
    }
}
exports.MetadataResponse_DatabaseSchemaMetadata_Column = MetadataResponse_DatabaseSchemaMetadata_Column;
/**
 * @generated from message api.v1.MetadataResponse.DatabaseSchemaMetadata.Key
 */
class MetadataResponse_DatabaseSchemaMetadata_Key extends protobuf_1.Message {
    /**
     * @generated from field: string name = 1;
     */
    name = "";
    /**
     * @generated from field: string type = 2;
     */
    type = "";
    /**
     * @generated from field: repeated string columns = 3;
     */
    columns = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.MetadataResponse.DatabaseSchemaMetadata.Key";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "columns", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new MetadataResponse_DatabaseSchemaMetadata_Key().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MetadataResponse_DatabaseSchemaMetadata_Key().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MetadataResponse_DatabaseSchemaMetadata_Key().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MetadataResponse_DatabaseSchemaMetadata_Key, a, b);
    }
}
exports.MetadataResponse_DatabaseSchemaMetadata_Key = MetadataResponse_DatabaseSchemaMetadata_Key;
/**
 * @generated from message api.v1.MetadataResponse.DatabaseSchemaMetadata.Template
 */
class MetadataResponse_DatabaseSchemaMetadata_Template extends protobuf_1.Message {
    /**
     * @generated from field: string title = 1;
     */
    title = "";
    /**
     * @generated from field: string body = 2;
     */
    body = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.MetadataResponse.DatabaseSchemaMetadata.Template";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new MetadataResponse_DatabaseSchemaMetadata_Template().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MetadataResponse_DatabaseSchemaMetadata_Template().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MetadataResponse_DatabaseSchemaMetadata_Template().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MetadataResponse_DatabaseSchemaMetadata_Template, a, b);
    }
}
exports.MetadataResponse_DatabaseSchemaMetadata_Template = MetadataResponse_DatabaseSchemaMetadata_Template;
/**
 * @generated from message api.v1.MetadataResponse.DatabaseSchemaMetadata.Table
 */
class MetadataResponse_DatabaseSchemaMetadata_Table extends protobuf_1.Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string type = 2;
     */
    type = "";
    /**
     * @generated from field: string name = 3;
     */
    name = "";
    /**
     * @generated from field: repeated api.v1.MetadataResponse.DatabaseSchemaMetadata.Column columns = 4;
     */
    columns = [];
    /**
     * @generated from field: repeated api.v1.MetadataResponse.DatabaseSchemaMetadata.Key keys = 5;
     */
    keys = [];
    /**
     * @generated from field: repeated api.v1.MetadataResponse.DatabaseSchemaMetadata.Template templates = 6;
     */
    templates = [];
    /**
     * NOTE: (joey) this is optional in the TS version of this model. should be here as well
     *
     * @generated from field: string schema = 7;
     */
    schema = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.MetadataResponse.DatabaseSchemaMetadata.Table";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "columns", kind: "message", T: MetadataResponse_DatabaseSchemaMetadata_Column, repeated: true },
        { no: 5, name: "keys", kind: "message", T: MetadataResponse_DatabaseSchemaMetadata_Key, repeated: true },
        { no: 6, name: "templates", kind: "message", T: MetadataResponse_DatabaseSchemaMetadata_Template, repeated: true },
        { no: 7, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new MetadataResponse_DatabaseSchemaMetadata_Table().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MetadataResponse_DatabaseSchemaMetadata_Table().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MetadataResponse_DatabaseSchemaMetadata_Table().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MetadataResponse_DatabaseSchemaMetadata_Table, a, b);
    }
}
exports.MetadataResponse_DatabaseSchemaMetadata_Table = MetadataResponse_DatabaseSchemaMetadata_Table;
/**
 * @generated from message api.v1.MetadataResponse.DatabaseSchemaMetadata.Schema
 */
class MetadataResponse_DatabaseSchemaMetadata_Schema extends protobuf_1.Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string name = 2;
     */
    name = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.MetadataResponse.DatabaseSchemaMetadata.Schema";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new MetadataResponse_DatabaseSchemaMetadata_Schema().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MetadataResponse_DatabaseSchemaMetadata_Schema().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MetadataResponse_DatabaseSchemaMetadata_Schema().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MetadataResponse_DatabaseSchemaMetadata_Schema, a, b);
    }
}
exports.MetadataResponse_DatabaseSchemaMetadata_Schema = MetadataResponse_DatabaseSchemaMetadata_Schema;
/**
 * @generated from message api.v1.MetadataResponse.BucketMetadata
 */
class MetadataResponse_BucketMetadata extends protobuf_1.Message {
    /**
     * @generated from field: string name = 1;
     */
    name = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.MetadataResponse.BucketMetadata";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new MetadataResponse_BucketMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MetadataResponse_BucketMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MetadataResponse_BucketMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MetadataResponse_BucketMetadata, a, b);
    }
}
exports.MetadataResponse_BucketMetadata = MetadataResponse_BucketMetadata;
/**
 * @generated from message api.v1.MetadataResponse.BucketsMetadata
 */
class MetadataResponse_BucketsMetadata extends protobuf_1.Message {
    /**
     * @generated from field: repeated api.v1.MetadataResponse.BucketMetadata buckets = 1;
     */
    buckets = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.MetadataResponse.BucketsMetadata";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "buckets", kind: "message", T: MetadataResponse_BucketMetadata, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new MetadataResponse_BucketsMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MetadataResponse_BucketsMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MetadataResponse_BucketsMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MetadataResponse_BucketsMetadata, a, b);
    }
}
exports.MetadataResponse_BucketsMetadata = MetadataResponse_BucketsMetadata;
/**
 * @generated from message api.v1.DownloadRequest
 */
class DownloadRequest extends protobuf_1.Message {
    /**
     * @generated from field: string location = 1;
     */
    location = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.DownloadRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new DownloadRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DownloadRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DownloadRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DownloadRequest, a, b);
    }
}
exports.DownloadRequest = DownloadRequest;
/**
 * @generated from message api.v1.DownloadResponse
 */
class DownloadResponse extends protobuf_1.Message {
    /**
     * @generated from field: bytes data = 1;
     */
    data = new Uint8Array(0);
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.DownloadResponse";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    ]);
    static fromBinary(bytes, options) {
        return new DownloadResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DownloadResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DownloadResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DownloadResponse, a, b);
    }
}
exports.DownloadResponse = DownloadResponse;
/**
 *
 * DEPRECATED
 *
 * @generated from message api.v1.WorkflowResponse
 */
class WorkflowResponse extends protobuf_1.Message {
    /**
     * @generated from field: google.protobuf.Value data = 1;
     */
    data;
    /**
     * @generated from field: api.v1.WorkflowResponse.ResponseMeta response_meta = 2;
     */
    responseMeta;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.WorkflowResponse";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "data", kind: "message", T: protobuf_1.Value },
        { no: 2, name: "response_meta", kind: "message", T: WorkflowResponse_ResponseMeta },
    ]);
    static fromBinary(bytes, options) {
        return new WorkflowResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new WorkflowResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new WorkflowResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(WorkflowResponse, a, b);
    }
}
exports.WorkflowResponse = WorkflowResponse;
/**
 * @generated from message api.v1.WorkflowResponse.ResponseMeta
 */
class WorkflowResponse_ResponseMeta extends protobuf_1.Message {
    /**
     * @generated from field: int32 status = 1;
     */
    status = 0;
    /**
     * @generated from field: string message = 2;
     */
    message = "";
    /**
     * NOTE(frank): I'm omitting the timing. This may not be good. I'll revisit.
     *
     * @generated from field: bool success = 3;
     */
    success = false;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.WorkflowResponse.ResponseMeta";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "status", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    ]);
    static fromBinary(bytes, options) {
        return new WorkflowResponse_ResponseMeta().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new WorkflowResponse_ResponseMeta().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new WorkflowResponse_ResponseMeta().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(WorkflowResponse_ResponseMeta, a, b);
    }
}
exports.WorkflowResponse_ResponseMeta = WorkflowResponse_ResponseMeta;
//# sourceMappingURL=service_pb.map