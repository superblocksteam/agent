// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file api/v1/api.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp, Value } from "@bufbuild/protobuf";
import { Metadata } from "../../common/v1/common_pb";
import { Signature } from "../../utils/v1/utils_pb";
import { Variables } from "./blocks_pb";
import { Plugin } from "../../plugins/python/v1/plugin_pb";
import { Plugin as Plugin$1 } from "../../plugins/bigquery/v1/plugin_pb";
import { Plugin as Plugin$2 } from "../../plugins/dynamodb/v1/plugin_pb";
import { Plugin as Plugin$3 } from "../../plugins/email/v1/plugin_pb";
import { Plugin as Plugin$4 } from "../../plugins/graphql/v1/plugin_pb";
import { Plugin as Plugin$5 } from "../../plugins/gsheets/v1/plugin_pb";
import { Plugin as Plugin$6 } from "../../plugins/mariadb/v1/plugin_pb";
import { Plugin as Plugin$7 } from "../../plugins/mssql/v1/plugin_pb";
import { Plugin as Plugin$8 } from "../../plugins/mysql/v1/plugin_pb";
import { Plugin as Plugin$9 } from "../../plugins/postgresql/v1/plugin_pb";
import { Plugin as Plugin$10 } from "../../plugins/redshift/v1/plugin_pb";
import { Plugin as Plugin$11 } from "../../plugins/restapi/v1/plugin_pb";
import { Plugin as Plugin$12 } from "../../plugins/restapiintegration/v1/plugin_pb";
import { Plugin as Plugin$13 } from "../../plugins/rockset/v1/plugin_pb";
import { Plugin as Plugin$14 } from "../../plugins/s3/v1/plugin_pb";
import { Plugin as Plugin$15 } from "../../plugins/snowflake/v1/plugin_pb";
import { Plugin as Plugin$16 } from "../../plugins/workflow/v1/plugin_pb";
import { Plugin as Plugin$17 } from "../../plugins/javascript/v1/plugin_pb";
import { Plugin as Plugin$18 } from "../../plugins/mongodb/v1/plugin_pb";
import { Plugin as Plugin$19 } from "../../plugins/gcs/v1/plugin_pb";
import { Plugin as Plugin$20 } from "../../plugins/openai/v1/plugin_pb";
import { Plugin as Plugin$21 } from "../../plugins/ocr/v1/plugin_pb";
import { Plugin as Plugin$22 } from "../../plugins/kafka/v1/plugin_pb";
import { Plugin as Plugin$23 } from "../../plugins/cockroachdb/v1/plugin_pb";
import { Plugin as Plugin$24 } from "../../plugins/athena/v1/plugin_pb";
import { Plugin as Plugin$25 } from "../../plugins/redis/v1/plugin_pb";
import { Plugin as Plugin$26 } from "../../plugins/smtp/v1/plugin_pb";
import { Plugin as Plugin$27 } from "../../plugins/salesforce/v1/plugin_pb";
import { Plugin as Plugin$28 } from "../../plugins/adls/v1/plugin_pb";
import { Plugin as Plugin$29 } from "../../plugins/pinecone/v1/plugin_pb";
import { Plugin as Plugin$30 } from "../../plugins/cosmosdb/v1/plugin_pb";
import { Plugin as Plugin$31 } from "../../plugins/oracledb/v1/plugin_pb";
import { Plugin as Plugin$32 } from "../../plugins/databricks/v1/plugin_pb";
import { Plugin as Plugin$33 } from "../../plugins/couchbase/v1/plugin_pb";
import { Plugin as Plugin$34 } from "../../plugins/custom/v1/plugin_pb";

/**
 * @generated from message api.v1.Api
 */
export class Api extends Message<Api> {
  /**
   * @generated from field: common.v1.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: repeated api.v1.Block blocks = 2;
   */
  blocks: Block[] = [];

  /**
   * @generated from field: api.v1.Trigger trigger = 3;
   */
  trigger?: Trigger;

  /**
   * @generated from field: optional utils.v1.Signature signature = 4;
   */
  signature?: Signature;

  constructor(data?: PartialMessage<Api>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Api";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "blocks", kind: "message", T: Block, repeated: true },
    { no: 3, name: "trigger", kind: "message", T: Trigger },
    { no: 4, name: "signature", kind: "message", T: Signature, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Api {
    return new Api().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Api {
    return new Api().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Api {
    return new Api().fromJsonString(jsonString, options);
  }

  static equals(a: Api | PlainMessage<Api> | undefined, b: Api | PlainMessage<Api> | undefined): boolean {
    return proto3.util.equals(Api, a, b);
  }
}

/**
 * @generated from message api.v1.Profiles
 */
export class Profiles extends Message<Profiles> {
  /**
   * @generated from field: api.v1.Profiles.Modes modes = 1;
   */
  modes?: Profiles_Modes;

  constructor(data?: PartialMessage<Profiles>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Profiles";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "modes", kind: "message", T: Profiles_Modes },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Profiles {
    return new Profiles().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Profiles {
    return new Profiles().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Profiles {
    return new Profiles().fromJsonString(jsonString, options);
  }

  static equals(a: Profiles | PlainMessage<Profiles> | undefined, b: Profiles | PlainMessage<Profiles> | undefined): boolean {
    return proto3.util.equals(Profiles, a, b);
  }
}

/**
 * @generated from message api.v1.Profiles.Modes
 */
export class Profiles_Modes extends Message<Profiles_Modes> {
  /**
   * @generated from field: api.v1.Profiles.Modes.Settings editor = 1;
   */
  editor?: Profiles_Modes_Settings;

  /**
   * @generated from field: api.v1.Profiles.Modes.Settings preview = 2;
   */
  preview?: Profiles_Modes_Settings;

  /**
   * @generated from field: api.v1.Profiles.Modes.Settings deployed = 3;
   */
  deployed?: Profiles_Modes_Settings;

  constructor(data?: PartialMessage<Profiles_Modes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Profiles.Modes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "editor", kind: "message", T: Profiles_Modes_Settings },
    { no: 2, name: "preview", kind: "message", T: Profiles_Modes_Settings },
    { no: 3, name: "deployed", kind: "message", T: Profiles_Modes_Settings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Profiles_Modes {
    return new Profiles_Modes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Profiles_Modes {
    return new Profiles_Modes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Profiles_Modes {
    return new Profiles_Modes().fromJsonString(jsonString, options);
  }

  static equals(a: Profiles_Modes | PlainMessage<Profiles_Modes> | undefined, b: Profiles_Modes | PlainMessage<Profiles_Modes> | undefined): boolean {
    return proto3.util.equals(Profiles_Modes, a, b);
  }
}

/**
 * @generated from message api.v1.Profiles.Modes.Settings
 */
export class Profiles_Modes_Settings extends Message<Profiles_Modes_Settings> {
  /**
   * @generated from field: string default = 1;
   */
  default = "";

  /**
   * @generated from field: repeated string available = 2;
   */
  available: string[] = [];

  constructor(data?: PartialMessage<Profiles_Modes_Settings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Profiles.Modes.Settings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "default", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "available", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Profiles_Modes_Settings {
    return new Profiles_Modes_Settings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Profiles_Modes_Settings {
    return new Profiles_Modes_Settings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Profiles_Modes_Settings {
    return new Profiles_Modes_Settings().fromJsonString(jsonString, options);
  }

  static equals(a: Profiles_Modes_Settings | PlainMessage<Profiles_Modes_Settings> | undefined, b: Profiles_Modes_Settings | PlainMessage<Profiles_Modes_Settings> | undefined): boolean {
    return proto3.util.equals(Profiles_Modes_Settings, a, b);
  }
}

/**
 * @generated from message api.v1.Trigger
 */
export class Trigger extends Message<Trigger> {
  /**
   * @generated from oneof api.v1.Trigger.config
   */
  config: {
    /**
     * @generated from field: api.v1.Trigger.Application application = 1;
     */
    value: Trigger_Application;
    case: "application";
  } | {
    /**
     * @generated from field: api.v1.Trigger.Workflow workflow = 2;
     */
    value: Trigger_Workflow;
    case: "workflow";
  } | {
    /**
     * @generated from field: api.v1.Trigger.Job job = 3;
     */
    value: Trigger_Job;
    case: "job";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Trigger>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Trigger";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "application", kind: "message", T: Trigger_Application, oneof: "config" },
    { no: 2, name: "workflow", kind: "message", T: Trigger_Workflow, oneof: "config" },
    { no: 3, name: "job", kind: "message", T: Trigger_Job, oneof: "config" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trigger {
    return new Trigger().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trigger {
    return new Trigger().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trigger {
    return new Trigger().fromJsonString(jsonString, options);
  }

  static equals(a: Trigger | PlainMessage<Trigger> | undefined, b: Trigger | PlainMessage<Trigger> | undefined): boolean {
    return proto3.util.equals(Trigger, a, b);
  }
}

/**
 * @generated from message api.v1.Trigger.Application
 */
export class Trigger_Application extends Message<Trigger_Application> {
  /**
   * @generated from field: api.v1.Trigger.Application.Options options = 1;
   */
  options?: Trigger_Application_Options;

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: optional string page_id = 3;
   */
  pageId?: string;

  constructor(data?: PartialMessage<Trigger_Application>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Trigger.Application";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "options", kind: "message", T: Trigger_Application_Options },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trigger_Application {
    return new Trigger_Application().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trigger_Application {
    return new Trigger_Application().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trigger_Application {
    return new Trigger_Application().fromJsonString(jsonString, options);
  }

  static equals(a: Trigger_Application | PlainMessage<Trigger_Application> | undefined, b: Trigger_Application | PlainMessage<Trigger_Application> | undefined): boolean {
    return proto3.util.equals(Trigger_Application, a, b);
  }
}

/**
 * @generated from message api.v1.Trigger.Application.Options
 */
export class Trigger_Application_Options extends Message<Trigger_Application_Options> {
  /**
   * @generated from field: optional bool execute_on_page_load = 1;
   */
  executeOnPageLoad?: boolean;

  constructor(data?: PartialMessage<Trigger_Application_Options>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Trigger.Application.Options";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "execute_on_page_load", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trigger_Application_Options {
    return new Trigger_Application_Options().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trigger_Application_Options {
    return new Trigger_Application_Options().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trigger_Application_Options {
    return new Trigger_Application_Options().fromJsonString(jsonString, options);
  }

  static equals(a: Trigger_Application_Options | PlainMessage<Trigger_Application_Options> | undefined, b: Trigger_Application_Options | PlainMessage<Trigger_Application_Options> | undefined): boolean {
    return proto3.util.equals(Trigger_Application_Options, a, b);
  }
}

/**
 * @generated from message api.v1.Trigger.Workflow
 */
export class Trigger_Workflow extends Message<Trigger_Workflow> {
  /**
   * @generated from field: api.v1.Trigger.Workflow.Options options = 1;
   */
  options?: Trigger_Workflow_Options;

  /**
   * @generated from field: api.v1.Trigger.Workflow.Parameters parameters = 2;
   */
  parameters?: Trigger_Workflow_Parameters;

  constructor(data?: PartialMessage<Trigger_Workflow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Trigger.Workflow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "options", kind: "message", T: Trigger_Workflow_Options },
    { no: 2, name: "parameters", kind: "message", T: Trigger_Workflow_Parameters },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trigger_Workflow {
    return new Trigger_Workflow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trigger_Workflow {
    return new Trigger_Workflow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trigger_Workflow {
    return new Trigger_Workflow().fromJsonString(jsonString, options);
  }

  static equals(a: Trigger_Workflow | PlainMessage<Trigger_Workflow> | undefined, b: Trigger_Workflow | PlainMessage<Trigger_Workflow> | undefined): boolean {
    return proto3.util.equals(Trigger_Workflow, a, b);
  }
}

/**
 * @generated from message api.v1.Trigger.Workflow.Options
 */
export class Trigger_Workflow_Options extends Message<Trigger_Workflow_Options> {
  /**
   * @generated from field: api.v1.Profiles profiles = 1;
   */
  profiles?: Profiles;

  /**
   * @generated from field: optional string deployedCommitId = 2;
   */
  deployedCommitId?: string;

  constructor(data?: PartialMessage<Trigger_Workflow_Options>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Trigger.Workflow.Options";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profiles", kind: "message", T: Profiles },
    { no: 2, name: "deployedCommitId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trigger_Workflow_Options {
    return new Trigger_Workflow_Options().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trigger_Workflow_Options {
    return new Trigger_Workflow_Options().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trigger_Workflow_Options {
    return new Trigger_Workflow_Options().fromJsonString(jsonString, options);
  }

  static equals(a: Trigger_Workflow_Options | PlainMessage<Trigger_Workflow_Options> | undefined, b: Trigger_Workflow_Options | PlainMessage<Trigger_Workflow_Options> | undefined): boolean {
    return proto3.util.equals(Trigger_Workflow_Options, a, b);
  }
}

/**
 * @generated from message api.v1.Trigger.Workflow.Parameters
 */
export class Trigger_Workflow_Parameters extends Message<Trigger_Workflow_Parameters> {
  /**
   * @generated from field: map<string, api.v1.Trigger.Workflow.Parameters.QueryParam> query = 1;
   */
  query: { [key: string]: Trigger_Workflow_Parameters_QueryParam } = {};

  /**
   * @generated from field: map<string, google.protobuf.Value> body = 2;
   */
  body: { [key: string]: Value } = {};

  constructor(data?: PartialMessage<Trigger_Workflow_Parameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Trigger.Workflow.Parameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Trigger_Workflow_Parameters_QueryParam} },
    { no: 2, name: "body", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trigger_Workflow_Parameters {
    return new Trigger_Workflow_Parameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trigger_Workflow_Parameters {
    return new Trigger_Workflow_Parameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trigger_Workflow_Parameters {
    return new Trigger_Workflow_Parameters().fromJsonString(jsonString, options);
  }

  static equals(a: Trigger_Workflow_Parameters | PlainMessage<Trigger_Workflow_Parameters> | undefined, b: Trigger_Workflow_Parameters | PlainMessage<Trigger_Workflow_Parameters> | undefined): boolean {
    return proto3.util.equals(Trigger_Workflow_Parameters, a, b);
  }
}

/**
 * You can specify multiple values for a single query parameter in a URL
 *
 * @generated from message api.v1.Trigger.Workflow.Parameters.QueryParam
 */
export class Trigger_Workflow_Parameters_QueryParam extends Message<Trigger_Workflow_Parameters_QueryParam> {
  /**
   * @generated from field: repeated string values = 1;
   */
  values: string[] = [];

  constructor(data?: PartialMessage<Trigger_Workflow_Parameters_QueryParam>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Trigger.Workflow.Parameters.QueryParam";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trigger_Workflow_Parameters_QueryParam {
    return new Trigger_Workflow_Parameters_QueryParam().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trigger_Workflow_Parameters_QueryParam {
    return new Trigger_Workflow_Parameters_QueryParam().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trigger_Workflow_Parameters_QueryParam {
    return new Trigger_Workflow_Parameters_QueryParam().fromJsonString(jsonString, options);
  }

  static equals(a: Trigger_Workflow_Parameters_QueryParam | PlainMessage<Trigger_Workflow_Parameters_QueryParam> | undefined, b: Trigger_Workflow_Parameters_QueryParam | PlainMessage<Trigger_Workflow_Parameters_QueryParam> | undefined): boolean {
    return proto3.util.equals(Trigger_Workflow_Parameters_QueryParam, a, b);
  }
}

/**
 * @generated from message api.v1.Trigger.Job
 */
export class Trigger_Job extends Message<Trigger_Job> {
  /**
   * @generated from field: api.v1.Trigger.Job.Options options = 1;
   */
  options?: Trigger_Job_Options;

  /**
   * @generated from field: int32 frequency = 2;
   */
  frequency = 0;

  /**
   * @generated from field: api.v1.Trigger.Job.Interval interval = 3;
   */
  interval = Trigger_Job_Interval.UNSPECIFIED;

  /**
   * @generated from field: int32 day_of_month = 4;
   */
  dayOfMonth = 0;

  /**
   * @generated from field: api.v1.Trigger.Job.Days days = 5;
   */
  days?: Trigger_Job_Days;

  /**
   * @generated from field: google.protobuf.Timestamp time = 6;
   */
  time?: Timestamp;

  /**
   * @generated from field: string timezone_locale = 8;
   */
  timezoneLocale = "";

  constructor(data?: PartialMessage<Trigger_Job>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Trigger.Job";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "options", kind: "message", T: Trigger_Job_Options },
    { no: 2, name: "frequency", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "interval", kind: "enum", T: proto3.getEnumType(Trigger_Job_Interval) },
    { no: 4, name: "day_of_month", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "days", kind: "message", T: Trigger_Job_Days },
    { no: 6, name: "time", kind: "message", T: Timestamp },
    { no: 8, name: "timezone_locale", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trigger_Job {
    return new Trigger_Job().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trigger_Job {
    return new Trigger_Job().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trigger_Job {
    return new Trigger_Job().fromJsonString(jsonString, options);
  }

  static equals(a: Trigger_Job | PlainMessage<Trigger_Job> | undefined, b: Trigger_Job | PlainMessage<Trigger_Job> | undefined): boolean {
    return proto3.util.equals(Trigger_Job, a, b);
  }
}

/**
 * @generated from enum api.v1.Trigger.Job.Interval
 */
export enum Trigger_Job_Interval {
  /**
   * @generated from enum value: INTERVAL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: INTERVAL_MINUTE = 1;
   */
  MINUTE = 1,

  /**
   * @generated from enum value: INTERVAL_HOUR = 2;
   */
  HOUR = 2,

  /**
   * @generated from enum value: INTERVAL_DAY = 3;
   */
  DAY = 3,

  /**
   * @generated from enum value: INTERVAL_WEEK = 4;
   */
  WEEK = 4,

  /**
   * @generated from enum value: INTERVAL_MONTH = 5;
   */
  MONTH = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(Trigger_Job_Interval)
proto3.util.setEnumType(Trigger_Job_Interval, "api.v1.Trigger.Job.Interval", [
  { no: 0, name: "INTERVAL_UNSPECIFIED" },
  { no: 1, name: "INTERVAL_MINUTE" },
  { no: 2, name: "INTERVAL_HOUR" },
  { no: 3, name: "INTERVAL_DAY" },
  { no: 4, name: "INTERVAL_WEEK" },
  { no: 5, name: "INTERVAL_MONTH" },
]);

/**
 * @generated from message api.v1.Trigger.Job.Options
 */
export class Trigger_Job_Options extends Message<Trigger_Job_Options> {
  /**
   * @generated from field: api.v1.Profiles profiles = 1;
   */
  profiles?: Profiles;

  /**
   * @generated from field: bool send_email_on_failure = 2;
   */
  sendEmailOnFailure = false;

  /**
   * @generated from field: optional string deployedCommitId = 3;
   */
  deployedCommitId?: string;

  constructor(data?: PartialMessage<Trigger_Job_Options>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Trigger.Job.Options";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profiles", kind: "message", T: Profiles },
    { no: 2, name: "send_email_on_failure", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "deployedCommitId", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trigger_Job_Options {
    return new Trigger_Job_Options().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trigger_Job_Options {
    return new Trigger_Job_Options().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trigger_Job_Options {
    return new Trigger_Job_Options().fromJsonString(jsonString, options);
  }

  static equals(a: Trigger_Job_Options | PlainMessage<Trigger_Job_Options> | undefined, b: Trigger_Job_Options | PlainMessage<Trigger_Job_Options> | undefined): boolean {
    return proto3.util.equals(Trigger_Job_Options, a, b);
  }
}

/**
 * @generated from message api.v1.Trigger.Job.Days
 */
export class Trigger_Job_Days extends Message<Trigger_Job_Days> {
  /**
   * @generated from field: bool sunday = 1;
   */
  sunday = false;

  /**
   * @generated from field: bool monday = 2;
   */
  monday = false;

  /**
   * @generated from field: bool tuesday = 3;
   */
  tuesday = false;

  /**
   * @generated from field: bool wednesday = 4;
   */
  wednesday = false;

  /**
   * @generated from field: bool thursday = 5;
   */
  thursday = false;

  /**
   * @generated from field: bool friday = 6;
   */
  friday = false;

  /**
   * @generated from field: bool saturday = 7;
   */
  saturday = false;

  constructor(data?: PartialMessage<Trigger_Job_Days>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Trigger.Job.Days";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sunday", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "monday", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "tuesday", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "wednesday", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "thursday", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "friday", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "saturday", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trigger_Job_Days {
    return new Trigger_Job_Days().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trigger_Job_Days {
    return new Trigger_Job_Days().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trigger_Job_Days {
    return new Trigger_Job_Days().fromJsonString(jsonString, options);
  }

  static equals(a: Trigger_Job_Days | PlainMessage<Trigger_Job_Days> | undefined, b: Trigger_Job_Days | PlainMessage<Trigger_Job_Days> | undefined): boolean {
    return proto3.util.equals(Trigger_Job_Days, a, b);
  }
}

/**
 * @generated from message api.v1.Blocks
 */
export class Blocks extends Message<Blocks> {
  /**
   * @generated from field: repeated api.v1.Block blocks = 1;
   */
  blocks: Block[] = [];

  constructor(data?: PartialMessage<Blocks>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Blocks";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "blocks", kind: "message", T: Block, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Blocks {
    return new Blocks().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Blocks {
    return new Blocks().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Blocks {
    return new Blocks().fromJsonString(jsonString, options);
  }

  static equals(a: Blocks | PlainMessage<Blocks> | undefined, b: Blocks | PlainMessage<Blocks> | undefined): boolean {
    return proto3.util.equals(Blocks, a, b);
  }
}

/**
 * @generated from message api.v1.Block
 */
export class Block extends Message<Block> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from oneof api.v1.Block.config
   */
  config: {
    /**
     * @generated from field: api.v1.Block.Break break = 2;
     */
    value: Block_Break;
    case: "break";
  } | {
    /**
     * @generated from field: api.v1.Block.Return return = 3;
     */
    value: Block_Return;
    case: "return";
  } | {
    /**
     * @generated from field: api.v1.Block.Wait wait = 4;
     */
    value: Block_Wait;
    case: "wait";
  } | {
    /**
     * @generated from field: api.v1.Block.Parallel parallel = 5;
     */
    value: Block_Parallel;
    case: "parallel";
  } | {
    /**
     * @generated from field: api.v1.Block.Conditional conditional = 6;
     */
    value: Block_Conditional;
    case: "conditional";
  } | {
    /**
     * @generated from field: api.v1.Block.Loop loop = 7;
     */
    value: Block_Loop;
    case: "loop";
  } | {
    /**
     * @generated from field: api.v1.Block.TryCatch try_catch = 8;
     */
    value: Block_TryCatch;
    case: "tryCatch";
  } | {
    /**
     * @generated from field: api.v1.Step step = 9;
     */
    value: Step;
    case: "step";
  } | {
    /**
     * @generated from field: api.v1.Variables variables = 10;
     */
    value: Variables;
    case: "variables";
  } | {
    /**
     * @generated from field: api.v1.Block.Throw throw = 11;
     */
    value: Block_Throw;
    case: "throw";
  } | {
    /**
     * @generated from field: api.v1.Block.Stream stream = 12;
     */
    value: Block_Stream;
    case: "stream";
  } | {
    /**
     * @generated from field: api.v1.Block.Send send = 13;
     */
    value: Block_Send;
    case: "send";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Block>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Block";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "break", kind: "message", T: Block_Break, oneof: "config" },
    { no: 3, name: "return", kind: "message", T: Block_Return, oneof: "config" },
    { no: 4, name: "wait", kind: "message", T: Block_Wait, oneof: "config" },
    { no: 5, name: "parallel", kind: "message", T: Block_Parallel, oneof: "config" },
    { no: 6, name: "conditional", kind: "message", T: Block_Conditional, oneof: "config" },
    { no: 7, name: "loop", kind: "message", T: Block_Loop, oneof: "config" },
    { no: 8, name: "try_catch", kind: "message", T: Block_TryCatch, oneof: "config" },
    { no: 9, name: "step", kind: "message", T: Step, oneof: "config" },
    { no: 10, name: "variables", kind: "message", T: Variables, oneof: "config" },
    { no: 11, name: "throw", kind: "message", T: Block_Throw, oneof: "config" },
    { no: 12, name: "stream", kind: "message", T: Block_Stream, oneof: "config" },
    { no: 13, name: "send", kind: "message", T: Block_Send, oneof: "config" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block {
    return new Block().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block {
    return new Block().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block {
    return new Block().fromJsonString(jsonString, options);
  }

  static equals(a: Block | PlainMessage<Block> | undefined, b: Block | PlainMessage<Block> | undefined): boolean {
    return proto3.util.equals(Block, a, b);
  }
}

/**
 * @generated from message api.v1.Block.Parallel
 */
export class Block_Parallel extends Message<Block_Parallel> {
  /**
   * @generated from oneof api.v1.Block.Parallel.config
   */
  config: {
    /**
     * @generated from field: api.v1.Block.Parallel.Static static = 1;
     */
    value: Block_Parallel_Static;
    case: "static";
  } | {
    /**
     * @generated from field: api.v1.Block.Parallel.Dynamic dynamic = 2;
     */
    value: Block_Parallel_Dynamic;
    case: "dynamic";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: api.v1.Block.Parallel.Wait wait = 3;
   */
  wait = Block_Parallel_Wait.UNSPECIFIED;

  /**
   * @generated from field: optional int32 pool_size = 4;
   */
  poolSize?: number;

  constructor(data?: PartialMessage<Block_Parallel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Block.Parallel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "static", kind: "message", T: Block_Parallel_Static, oneof: "config" },
    { no: 2, name: "dynamic", kind: "message", T: Block_Parallel_Dynamic, oneof: "config" },
    { no: 3, name: "wait", kind: "enum", T: proto3.getEnumType(Block_Parallel_Wait) },
    { no: 4, name: "pool_size", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block_Parallel {
    return new Block_Parallel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block_Parallel {
    return new Block_Parallel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block_Parallel {
    return new Block_Parallel().fromJsonString(jsonString, options);
  }

  static equals(a: Block_Parallel | PlainMessage<Block_Parallel> | undefined, b: Block_Parallel | PlainMessage<Block_Parallel> | undefined): boolean {
    return proto3.util.equals(Block_Parallel, a, b);
  }
}

/**
 * @generated from enum api.v1.Block.Parallel.Wait
 */
export enum Block_Parallel_Wait {
  /**
   * @generated from enum value: WAIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Wait for every thread to complete.
   *
   * @generated from enum value: WAIT_ALL = 1;
   */
  ALL = 1,

  /**
   * Do not wait for any thread to complete.
   *
   * @generated from enum value: WAIT_NONE = 2;
   */
  NONE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Block_Parallel_Wait)
proto3.util.setEnumType(Block_Parallel_Wait, "api.v1.Block.Parallel.Wait", [
  { no: 0, name: "WAIT_UNSPECIFIED" },
  { no: 1, name: "WAIT_ALL" },
  { no: 2, name: "WAIT_NONE" },
]);

/**
 * @generated from message api.v1.Block.Parallel.Static
 */
export class Block_Parallel_Static extends Message<Block_Parallel_Static> {
  /**
   * @generated from field: map<string, api.v1.Blocks> paths = 1;
   */
  paths: { [key: string]: Blocks } = {};

  constructor(data?: PartialMessage<Block_Parallel_Static>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Block.Parallel.Static";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "paths", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Blocks} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block_Parallel_Static {
    return new Block_Parallel_Static().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block_Parallel_Static {
    return new Block_Parallel_Static().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block_Parallel_Static {
    return new Block_Parallel_Static().fromJsonString(jsonString, options);
  }

  static equals(a: Block_Parallel_Static | PlainMessage<Block_Parallel_Static> | undefined, b: Block_Parallel_Static | PlainMessage<Block_Parallel_Static> | undefined): boolean {
    return proto3.util.equals(Block_Parallel_Static, a, b);
  }
}

/**
 * @generated from message api.v1.Block.Parallel.Dynamic
 */
export class Block_Parallel_Dynamic extends Message<Block_Parallel_Dynamic> {
  /**
   * @generated from field: string paths = 1;
   */
  paths = "";

  /**
   * @generated from field: api.v1.Block.Parallel.Dynamic.Variables variables = 2;
   */
  variables?: Block_Parallel_Dynamic_Variables;

  /**
   * @generated from field: repeated api.v1.Block blocks = 3;
   */
  blocks: Block[] = [];

  constructor(data?: PartialMessage<Block_Parallel_Dynamic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Block.Parallel.Dynamic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "paths", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "variables", kind: "message", T: Block_Parallel_Dynamic_Variables },
    { no: 3, name: "blocks", kind: "message", T: Block, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block_Parallel_Dynamic {
    return new Block_Parallel_Dynamic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block_Parallel_Dynamic {
    return new Block_Parallel_Dynamic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block_Parallel_Dynamic {
    return new Block_Parallel_Dynamic().fromJsonString(jsonString, options);
  }

  static equals(a: Block_Parallel_Dynamic | PlainMessage<Block_Parallel_Dynamic> | undefined, b: Block_Parallel_Dynamic | PlainMessage<Block_Parallel_Dynamic> | undefined): boolean {
    return proto3.util.equals(Block_Parallel_Dynamic, a, b);
  }
}

/**
 * @generated from message api.v1.Block.Parallel.Dynamic.Variables
 */
export class Block_Parallel_Dynamic_Variables extends Message<Block_Parallel_Dynamic_Variables> {
  /**
   * @generated from field: string item = 1;
   */
  item = "";

  constructor(data?: PartialMessage<Block_Parallel_Dynamic_Variables>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Block.Parallel.Dynamic.Variables";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block_Parallel_Dynamic_Variables {
    return new Block_Parallel_Dynamic_Variables().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block_Parallel_Dynamic_Variables {
    return new Block_Parallel_Dynamic_Variables().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block_Parallel_Dynamic_Variables {
    return new Block_Parallel_Dynamic_Variables().fromJsonString(jsonString, options);
  }

  static equals(a: Block_Parallel_Dynamic_Variables | PlainMessage<Block_Parallel_Dynamic_Variables> | undefined, b: Block_Parallel_Dynamic_Variables | PlainMessage<Block_Parallel_Dynamic_Variables> | undefined): boolean {
    return proto3.util.equals(Block_Parallel_Dynamic_Variables, a, b);
  }
}

/**
 * @generated from message api.v1.Block.Conditional
 */
export class Block_Conditional extends Message<Block_Conditional> {
  /**
   * @generated from field: api.v1.Block.Conditional.Condition if = 1;
   */
  if?: Block_Conditional_Condition;

  /**
   * @generated from field: repeated api.v1.Block.Conditional.Condition else_if = 2;
   */
  elseIf: Block_Conditional_Condition[] = [];

  /**
   * @generated from field: api.v1.Blocks else = 3;
   */
  else?: Blocks;

  constructor(data?: PartialMessage<Block_Conditional>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Block.Conditional";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "if", kind: "message", T: Block_Conditional_Condition },
    { no: 2, name: "else_if", kind: "message", T: Block_Conditional_Condition, repeated: true },
    { no: 3, name: "else", kind: "message", T: Blocks },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block_Conditional {
    return new Block_Conditional().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block_Conditional {
    return new Block_Conditional().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block_Conditional {
    return new Block_Conditional().fromJsonString(jsonString, options);
  }

  static equals(a: Block_Conditional | PlainMessage<Block_Conditional> | undefined, b: Block_Conditional | PlainMessage<Block_Conditional> | undefined): boolean {
    return proto3.util.equals(Block_Conditional, a, b);
  }
}

/**
 * @generated from message api.v1.Block.Conditional.Condition
 */
export class Block_Conditional_Condition extends Message<Block_Conditional_Condition> {
  /**
   * @generated from field: string condition = 1;
   */
  condition = "";

  /**
   * @generated from field: repeated api.v1.Block blocks = 2;
   */
  blocks: Block[] = [];

  constructor(data?: PartialMessage<Block_Conditional_Condition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Block.Conditional.Condition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "condition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "blocks", kind: "message", T: Block, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block_Conditional_Condition {
    return new Block_Conditional_Condition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block_Conditional_Condition {
    return new Block_Conditional_Condition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block_Conditional_Condition {
    return new Block_Conditional_Condition().fromJsonString(jsonString, options);
  }

  static equals(a: Block_Conditional_Condition | PlainMessage<Block_Conditional_Condition> | undefined, b: Block_Conditional_Condition | PlainMessage<Block_Conditional_Condition> | undefined): boolean {
    return proto3.util.equals(Block_Conditional_Condition, a, b);
  }
}

/**
 * @generated from message api.v1.Block.Loop
 */
export class Block_Loop extends Message<Block_Loop> {
  /**
   * *
   * This can be a binding that evaluates to one of three things:
   *  1. An integer           IF type if TYPE_FOR.
   *  2. A JSON encoded list  IF type is TYPE_FOREACH.
   *  3. A boolean            IF type is TYPE_WHILE. NOTE that this expressition will be re-evaluated on each iteration.
   *
   * @generated from field: string range = 1;
   */
  range = "";

  /**
   * @generated from field: api.v1.Block.Loop.Type type = 2;
   */
  type = Block_Loop_Type.UNSPECIFIED;

  /**
   * @generated from field: api.v1.Block.Loop.Variables variables = 3;
   */
  variables?: Block_Loop_Variables;

  /**
   * @generated from field: repeated api.v1.Block blocks = 4;
   */
  blocks: Block[] = [];

  constructor(data?: PartialMessage<Block_Loop>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Block.Loop";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "range", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(Block_Loop_Type) },
    { no: 3, name: "variables", kind: "message", T: Block_Loop_Variables },
    { no: 4, name: "blocks", kind: "message", T: Block, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block_Loop {
    return new Block_Loop().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block_Loop {
    return new Block_Loop().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block_Loop {
    return new Block_Loop().fromJsonString(jsonString, options);
  }

  static equals(a: Block_Loop | PlainMessage<Block_Loop> | undefined, b: Block_Loop | PlainMessage<Block_Loop> | undefined): boolean {
    return proto3.util.equals(Block_Loop, a, b);
  }
}

/**
 * @generated from enum api.v1.Block.Loop.Type
 */
export enum Block_Loop_Type {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TYPE_FOR = 1;
   */
  FOR = 1,

  /**
   * @generated from enum value: TYPE_FOREACH = 2;
   */
  FOREACH = 2,

  /**
   * @generated from enum value: TYPE_WHILE = 3;
   */
  WHILE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Block_Loop_Type)
proto3.util.setEnumType(Block_Loop_Type, "api.v1.Block.Loop.Type", [
  { no: 0, name: "TYPE_UNSPECIFIED" },
  { no: 1, name: "TYPE_FOR" },
  { no: 2, name: "TYPE_FOREACH" },
  { no: 3, name: "TYPE_WHILE" },
]);

/**
 * @generated from message api.v1.Block.Loop.Variables
 */
export class Block_Loop_Variables extends Message<Block_Loop_Variables> {
  /**
   * The index of the loop.
   *
   * @generated from field: string index = 1;
   */
  index = "";

  /**
   * The current item; index if none.
   *
   * @generated from field: string item = 2;
   */
  item = "";

  constructor(data?: PartialMessage<Block_Loop_Variables>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Block.Loop.Variables";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "item", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block_Loop_Variables {
    return new Block_Loop_Variables().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block_Loop_Variables {
    return new Block_Loop_Variables().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block_Loop_Variables {
    return new Block_Loop_Variables().fromJsonString(jsonString, options);
  }

  static equals(a: Block_Loop_Variables | PlainMessage<Block_Loop_Variables> | undefined, b: Block_Loop_Variables | PlainMessage<Block_Loop_Variables> | undefined): boolean {
    return proto3.util.equals(Block_Loop_Variables, a, b);
  }
}

/**
 * @generated from message api.v1.Block.TryCatch
 */
export class Block_TryCatch extends Message<Block_TryCatch> {
  /**
   * @generated from field: api.v1.Blocks try = 1;
   */
  try?: Blocks;

  /**
   * @generated from field: api.v1.Blocks catch = 2;
   */
  catch?: Blocks;

  /**
   * @generated from field: api.v1.Blocks finally = 3;
   */
  finally?: Blocks;

  /**
   * @generated from field: api.v1.Block.TryCatch.Variables variables = 4;
   */
  variables?: Block_TryCatch_Variables;

  constructor(data?: PartialMessage<Block_TryCatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Block.TryCatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "try", kind: "message", T: Blocks },
    { no: 2, name: "catch", kind: "message", T: Blocks },
    { no: 3, name: "finally", kind: "message", T: Blocks },
    { no: 4, name: "variables", kind: "message", T: Block_TryCatch_Variables },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block_TryCatch {
    return new Block_TryCatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block_TryCatch {
    return new Block_TryCatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block_TryCatch {
    return new Block_TryCatch().fromJsonString(jsonString, options);
  }

  static equals(a: Block_TryCatch | PlainMessage<Block_TryCatch> | undefined, b: Block_TryCatch | PlainMessage<Block_TryCatch> | undefined): boolean {
    return proto3.util.equals(Block_TryCatch, a, b);
  }
}

/**
 * @generated from message api.v1.Block.TryCatch.Variables
 */
export class Block_TryCatch_Variables extends Message<Block_TryCatch_Variables> {
  /**
   * The error inside of the catch block.
   *
   * @generated from field: string error = 1;
   */
  error = "";

  constructor(data?: PartialMessage<Block_TryCatch_Variables>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Block.TryCatch.Variables";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block_TryCatch_Variables {
    return new Block_TryCatch_Variables().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block_TryCatch_Variables {
    return new Block_TryCatch_Variables().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block_TryCatch_Variables {
    return new Block_TryCatch_Variables().fromJsonString(jsonString, options);
  }

  static equals(a: Block_TryCatch_Variables | PlainMessage<Block_TryCatch_Variables> | undefined, b: Block_TryCatch_Variables | PlainMessage<Block_TryCatch_Variables> | undefined): boolean {
    return proto3.util.equals(Block_TryCatch_Variables, a, b);
  }
}

/**
 * @generated from message api.v1.Block.Break
 */
export class Block_Break extends Message<Block_Break> {
  /**
   * @generated from field: string condition = 1;
   */
  condition = "";

  constructor(data?: PartialMessage<Block_Break>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Block.Break";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "condition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block_Break {
    return new Block_Break().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block_Break {
    return new Block_Break().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block_Break {
    return new Block_Break().fromJsonString(jsonString, options);
  }

  static equals(a: Block_Break | PlainMessage<Block_Break> | undefined, b: Block_Break | PlainMessage<Block_Break> | undefined): boolean {
    return proto3.util.equals(Block_Break, a, b);
  }
}

/**
 * @generated from message api.v1.Block.Return
 */
export class Block_Return extends Message<Block_Return> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<Block_Return>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Block.Return";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block_Return {
    return new Block_Return().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block_Return {
    return new Block_Return().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block_Return {
    return new Block_Return().fromJsonString(jsonString, options);
  }

  static equals(a: Block_Return | PlainMessage<Block_Return> | undefined, b: Block_Return | PlainMessage<Block_Return> | undefined): boolean {
    return proto3.util.equals(Block_Return, a, b);
  }
}

/**
 * @generated from message api.v1.Block.Throw
 */
export class Block_Throw extends Message<Block_Throw> {
  /**
   * @generated from field: string error = 1;
   */
  error = "";

  constructor(data?: PartialMessage<Block_Throw>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Block.Throw";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block_Throw {
    return new Block_Throw().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block_Throw {
    return new Block_Throw().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block_Throw {
    return new Block_Throw().fromJsonString(jsonString, options);
  }

  static equals(a: Block_Throw | PlainMessage<Block_Throw> | undefined, b: Block_Throw | PlainMessage<Block_Throw> | undefined): boolean {
    return proto3.util.equals(Block_Throw, a, b);
  }
}

/**
 * @generated from message api.v1.Block.Wait
 */
export class Block_Wait extends Message<Block_Wait> {
  /**
   * @generated from field: string condition = 1;
   */
  condition = "";

  constructor(data?: PartialMessage<Block_Wait>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Block.Wait";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "condition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block_Wait {
    return new Block_Wait().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block_Wait {
    return new Block_Wait().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block_Wait {
    return new Block_Wait().fromJsonString(jsonString, options);
  }

  static equals(a: Block_Wait | PlainMessage<Block_Wait> | undefined, b: Block_Wait | PlainMessage<Block_Wait> | undefined): boolean {
    return proto3.util.equals(Block_Wait, a, b);
  }
}

/**
 * @generated from message api.v1.Block.Stream
 */
export class Block_Stream extends Message<Block_Stream> {
  /**
   * @generated from field: api.v1.Block.Stream.Trigger trigger = 1;
   */
  trigger?: Block_Stream_Trigger;

  /**
   * @generated from field: api.v1.Blocks process = 2;
   */
  process?: Blocks;

  /**
   * @generated from field: api.v1.Block.Stream.Variables variables = 3;
   */
  variables?: Block_Stream_Variables;

  /**
   * @generated from field: api.v1.Block.Stream.Options options = 4;
   */
  options?: Block_Stream_Options;

  constructor(data?: PartialMessage<Block_Stream>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Block.Stream";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trigger", kind: "message", T: Block_Stream_Trigger },
    { no: 2, name: "process", kind: "message", T: Blocks },
    { no: 3, name: "variables", kind: "message", T: Block_Stream_Variables },
    { no: 4, name: "options", kind: "message", T: Block_Stream_Options },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block_Stream {
    return new Block_Stream().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block_Stream {
    return new Block_Stream().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block_Stream {
    return new Block_Stream().fromJsonString(jsonString, options);
  }

  static equals(a: Block_Stream | PlainMessage<Block_Stream> | undefined, b: Block_Stream | PlainMessage<Block_Stream> | undefined): boolean {
    return proto3.util.equals(Block_Stream, a, b);
  }
}

/**
 * @generated from message api.v1.Block.Stream.Variables
 */
export class Block_Stream_Variables extends Message<Block_Stream_Variables> {
  /**
   * @generated from field: string item = 1;
   */
  item = "";

  constructor(data?: PartialMessage<Block_Stream_Variables>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Block.Stream.Variables";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block_Stream_Variables {
    return new Block_Stream_Variables().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block_Stream_Variables {
    return new Block_Stream_Variables().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block_Stream_Variables {
    return new Block_Stream_Variables().fromJsonString(jsonString, options);
  }

  static equals(a: Block_Stream_Variables | PlainMessage<Block_Stream_Variables> | undefined, b: Block_Stream_Variables | PlainMessage<Block_Stream_Variables> | undefined): boolean {
    return proto3.util.equals(Block_Stream_Variables, a, b);
  }
}

/**
 * @generated from message api.v1.Block.Stream.Options
 */
export class Block_Stream_Options extends Message<Block_Stream_Options> {
  /**
   * The UI has "auto send" but we need the default to be false
   * So our name here needs to be the opposite.
   *
   * @generated from field: bool disable_auto_send = 1;
   */
  disableAutoSend = false;

  constructor(data?: PartialMessage<Block_Stream_Options>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Block.Stream.Options";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "disable_auto_send", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block_Stream_Options {
    return new Block_Stream_Options().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block_Stream_Options {
    return new Block_Stream_Options().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block_Stream_Options {
    return new Block_Stream_Options().fromJsonString(jsonString, options);
  }

  static equals(a: Block_Stream_Options | PlainMessage<Block_Stream_Options> | undefined, b: Block_Stream_Options | PlainMessage<Block_Stream_Options> | undefined): boolean {
    return proto3.util.equals(Block_Stream_Options, a, b);
  }
}

/**
 * @generated from message api.v1.Block.Stream.Trigger
 */
export class Block_Stream_Trigger extends Message<Block_Stream_Trigger> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: api.v1.Step step = 2;
   */
  step?: Step;

  constructor(data?: PartialMessage<Block_Stream_Trigger>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Block.Stream.Trigger";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "step", kind: "message", T: Step },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block_Stream_Trigger {
    return new Block_Stream_Trigger().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block_Stream_Trigger {
    return new Block_Stream_Trigger().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block_Stream_Trigger {
    return new Block_Stream_Trigger().fromJsonString(jsonString, options);
  }

  static equals(a: Block_Stream_Trigger | PlainMessage<Block_Stream_Trigger> | undefined, b: Block_Stream_Trigger | PlainMessage<Block_Stream_Trigger> | undefined): boolean {
    return proto3.util.equals(Block_Stream_Trigger, a, b);
  }
}

/**
 * @generated from message api.v1.Block.Send
 */
export class Block_Send extends Message<Block_Send> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<Block_Send>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Block.Send";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block_Send {
    return new Block_Send().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block_Send {
    return new Block_Send().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block_Send {
    return new Block_Send().fromJsonString(jsonString, options);
  }

  static equals(a: Block_Send | PlainMessage<Block_Send> | undefined, b: Block_Send | PlainMessage<Block_Send> | undefined): boolean {
    return proto3.util.equals(Block_Send, a, b);
  }
}

/**
 * @generated from message api.v1.Step
 */
export class Step extends Message<Step> {
  /**
   * Important: integration means integration id
   *
   * @generated from field: string integration = 1;
   */
  integration = "";

  /**
   * @generated from oneof api.v1.Step.config
   */
  config: {
    /**
     * @generated from field: plugins.python.v1.Plugin python = 2;
     */
    value: Plugin;
    case: "python";
  } | {
    /**
     * @generated from field: plugins.bigquery.v1.Plugin bigquery = 3;
     */
    value: Plugin$1;
    case: "bigquery";
  } | {
    /**
     * @generated from field: plugins.dynamodb.v1.Plugin dynamodb = 4;
     */
    value: Plugin$2;
    case: "dynamodb";
  } | {
    /**
     * @generated from field: plugins.email.v1.Plugin email = 5;
     */
    value: Plugin$3;
    case: "email";
  } | {
    /**
     * @generated from field: plugins.graphql.v1.Plugin graphql = 6;
     */
    value: Plugin$4;
    case: "graphql";
  } | {
    /**
     * @generated from field: plugins.graphql.v1.Plugin graphqlintegration = 7;
     */
    value: Plugin$4;
    case: "graphqlintegration";
  } | {
    /**
     * @generated from field: plugins.gsheets.v1.Plugin gsheets = 8;
     */
    value: Plugin$5;
    case: "gsheets";
  } | {
    /**
     * @generated from field: plugins.mariadb.v1.Plugin mariadb = 9;
     */
    value: Plugin$6;
    case: "mariadb";
  } | {
    /**
     * @generated from field: plugins.mssql.v1.Plugin mssql = 10;
     */
    value: Plugin$7;
    case: "mssql";
  } | {
    /**
     * @generated from field: plugins.mysql.v1.Plugin mysql = 11;
     */
    value: Plugin$8;
    case: "mysql";
  } | {
    /**
     * @generated from field: plugins.postgresql.v1.Plugin postgres = 12;
     */
    value: Plugin$9;
    case: "postgres";
  } | {
    /**
     * @generated from field: plugins.redshift.v1.Plugin redshift = 13;
     */
    value: Plugin$10;
    case: "redshift";
  } | {
    /**
     * @generated from field: plugins.restapi.v1.Plugin restapi = 14;
     */
    value: Plugin$11;
    case: "restapi";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin restapiintegration = 15;
     */
    value: Plugin$12;
    case: "restapiintegration";
  } | {
    /**
     * @generated from field: plugins.rockset.v1.Plugin rockset = 16;
     */
    value: Plugin$13;
    case: "rockset";
  } | {
    /**
     * @generated from field: plugins.s3.v1.Plugin s3 = 17;
     */
    value: Plugin$14;
    case: "s3";
  } | {
    /**
     * @generated from field: plugins.snowflake.v1.Plugin snowflake = 18;
     */
    value: Plugin$15;
    case: "snowflake";
  } | {
    /**
     * @generated from field: plugins.workflow.v1.Plugin workflow = 19;
     */
    value: Plugin$16;
    case: "workflow";
  } | {
    /**
     * @generated from field: plugins.javascript.v1.Plugin javascript = 20;
     */
    value: Plugin$17;
    case: "javascript";
  } | {
    /**
     * @generated from field: plugins.mongodb.v1.Plugin mongodb = 21;
     */
    value: Plugin$18;
    case: "mongodb";
  } | {
    /**
     * @generated from field: plugins.gcs.v1.Plugin gcs = 22;
     */
    value: Plugin$19;
    case: "gcs";
  } | {
    /**
     * @generated from field: plugins.openai.v1.Plugin openai = 23;
     */
    value: Plugin$20;
    case: "openai";
  } | {
    /**
     * Remapped due to proto not allowing dashes in field names
     *
     * @generated from field: plugins.ocr.v1.Plugin ocr = 24 [json_name = "superblocks-ocr"];
     */
    value: Plugin$21;
    case: "ocr";
  } | {
    /**
     * @generated from field: plugins.kafka.v1.Plugin kafka = 25;
     */
    value: Plugin$22;
    case: "kafka";
  } | {
    /**
     * @generated from field: plugins.kafka.v1.Plugin confluent = 26;
     */
    value: Plugin$22;
    case: "confluent";
  } | {
    /**
     * @generated from field: plugins.kafka.v1.Plugin msk = 27;
     */
    value: Plugin$22;
    case: "msk";
  } | {
    /**
     * @generated from field: plugins.kafka.v1.Plugin redpanda = 28;
     */
    value: Plugin$22;
    case: "redpanda";
  } | {
    /**
     * There's also aiven(postgres|opensearch|redis|mysql|cassandra)
     *
     * @generated from field: plugins.kafka.v1.Plugin aivenkafka = 29;
     */
    value: Plugin$22;
    case: "aivenkafka";
  } | {
    /**
     * @generated from field: plugins.cockroachdb.v1.Plugin cockroachdb = 30;
     */
    value: Plugin$23;
    case: "cockroachdb";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin airtable = 31;
     */
    value: Plugin$12;
    case: "airtable";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin notion = 32;
     */
    value: Plugin$12;
    case: "notion";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin pagerduty = 33;
     */
    value: Plugin$12;
    case: "pagerduty";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin sendgrid = 34;
     */
    value: Plugin$12;
    case: "sendgrid";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin slack = 35;
     */
    value: Plugin$12;
    case: "slack";
  } | {
    /**
     * @generated from field: plugins.athena.v1.Plugin athena = 36;
     */
    value: Plugin$24;
    case: "athena";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin redis = 37;
     */
    value: Plugin$25;
    case: "redis";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin asana = 38;
     */
    value: Plugin$12;
    case: "asana";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin github = 39;
     */
    value: Plugin$12;
    case: "github";
  } | {
    /**
     * @generated from field: plugins.smtp.v1.Plugin smtp = 40;
     */
    value: Plugin$26;
    case: "smtp";
  } | {
    /**
     * @generated from field: plugins.salesforce.v1.Plugin salesforce = 41;
     */
    value: Plugin$27;
    case: "salesforce";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin bitbucket = 42;
     */
    value: Plugin$12;
    case: "bitbucket";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin circleci = 43;
     */
    value: Plugin$12;
    case: "circleci";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin front = 44;
     */
    value: Plugin$12;
    case: "front";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin intercom = 45;
     */
    value: Plugin$12;
    case: "intercom";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin segment = 46;
     */
    value: Plugin$12;
    case: "segment";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin launchdarkly = 47;
     */
    value: Plugin$12;
    case: "launchdarkly";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin dropbox = 48;
     */
    value: Plugin$12;
    case: "dropbox";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin twilio = 49;
     */
    value: Plugin$12;
    case: "twilio";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin googledrive = 50;
     */
    value: Plugin$12;
    case: "googledrive";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin googleanalytics = 51;
     */
    value: Plugin$12;
    case: "googleanalytics";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin box = 52;
     */
    value: Plugin$12;
    case: "box";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin hubspot = 53;
     */
    value: Plugin$12;
    case: "hubspot";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin stripe = 54;
     */
    value: Plugin$12;
    case: "stripe";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin zoom = 55;
     */
    value: Plugin$12;
    case: "zoom";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin jira = 56;
     */
    value: Plugin$12;
    case: "jira";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin zendesk = 57;
     */
    value: Plugin$12;
    case: "zendesk";
  } | {
    /**
     * @generated from field: plugins.adls.v1.Plugin adls = 58;
     */
    value: Plugin$28;
    case: "adls";
  } | {
    /**
     * @generated from field: plugins.pinecone.v1.Plugin pinecone = 59;
     */
    value: Plugin$29;
    case: "pinecone";
  } | {
    /**
     * @generated from field: plugins.cosmosdb.v1.Plugin cosmosdb = 60;
     */
    value: Plugin$30;
    case: "cosmosdb";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin datadog = 61;
     */
    value: Plugin$12;
    case: "datadog";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin xero = 62;
     */
    value: Plugin$12;
    case: "xero";
  } | {
    /**
     * @generated from field: plugins.oracledb.v1.Plugin oracledb = 63;
     */
    value: Plugin$31;
    case: "oracledb";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin elasticsearch = 64;
     */
    value: Plugin$12;
    case: "elasticsearch";
  } | {
    /**
     * @generated from field: plugins.databricks.v1.Plugin databricks = 65;
     */
    value: Plugin$32;
    case: "databricks";
  } | {
    /**
     * @generated from field: plugins.couchbase.v1.Plugin couchbase = 66;
     */
    value: Plugin$33;
    case: "couchbase";
  } | {
    /**
     * @generated from field: plugins.custom.v1.Plugin custom = 67;
     */
    value: Plugin$34;
    case: "custom";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin anthropic = 68;
     */
    value: Plugin$12;
    case: "anthropic";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin cohere = 69;
     */
    value: Plugin$12;
    case: "cohere";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin fireworks = 70;
     */
    value: Plugin$12;
    case: "fireworks";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin mistral = 71;
     */
    value: Plugin$12;
    case: "mistral";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin groq = 72;
     */
    value: Plugin$12;
    case: "groq";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin perplexity = 73;
     */
    value: Plugin$12;
    case: "perplexity";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin stabilityai = 74;
     */
    value: Plugin$12;
    case: "stabilityai";
  } | {
    /**
     * @generated from field: plugins.restapiintegration.v1.Plugin gemini = 75;
     */
    value: Plugin$12;
    case: "gemini";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Step>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Step";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "python", kind: "message", T: Plugin, oneof: "config" },
    { no: 3, name: "bigquery", kind: "message", T: Plugin$1, oneof: "config" },
    { no: 4, name: "dynamodb", kind: "message", T: Plugin$2, oneof: "config" },
    { no: 5, name: "email", kind: "message", T: Plugin$3, oneof: "config" },
    { no: 6, name: "graphql", kind: "message", T: Plugin$4, oneof: "config" },
    { no: 7, name: "graphqlintegration", kind: "message", T: Plugin$4, oneof: "config" },
    { no: 8, name: "gsheets", kind: "message", T: Plugin$5, oneof: "config" },
    { no: 9, name: "mariadb", kind: "message", T: Plugin$6, oneof: "config" },
    { no: 10, name: "mssql", kind: "message", T: Plugin$7, oneof: "config" },
    { no: 11, name: "mysql", kind: "message", T: Plugin$8, oneof: "config" },
    { no: 12, name: "postgres", kind: "message", T: Plugin$9, oneof: "config" },
    { no: 13, name: "redshift", kind: "message", T: Plugin$10, oneof: "config" },
    { no: 14, name: "restapi", kind: "message", T: Plugin$11, oneof: "config" },
    { no: 15, name: "restapiintegration", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 16, name: "rockset", kind: "message", T: Plugin$13, oneof: "config" },
    { no: 17, name: "s3", kind: "message", T: Plugin$14, oneof: "config" },
    { no: 18, name: "snowflake", kind: "message", T: Plugin$15, oneof: "config" },
    { no: 19, name: "workflow", kind: "message", T: Plugin$16, oneof: "config" },
    { no: 20, name: "javascript", kind: "message", T: Plugin$17, oneof: "config" },
    { no: 21, name: "mongodb", kind: "message", T: Plugin$18, oneof: "config" },
    { no: 22, name: "gcs", kind: "message", T: Plugin$19, oneof: "config" },
    { no: 23, name: "openai", kind: "message", T: Plugin$20, oneof: "config" },
    { no: 24, name: "ocr", jsonName: "superblocks-ocr", kind: "message", T: Plugin$21, oneof: "config" },
    { no: 25, name: "kafka", kind: "message", T: Plugin$22, oneof: "config" },
    { no: 26, name: "confluent", kind: "message", T: Plugin$22, oneof: "config" },
    { no: 27, name: "msk", kind: "message", T: Plugin$22, oneof: "config" },
    { no: 28, name: "redpanda", kind: "message", T: Plugin$22, oneof: "config" },
    { no: 29, name: "aivenkafka", kind: "message", T: Plugin$22, oneof: "config" },
    { no: 30, name: "cockroachdb", kind: "message", T: Plugin$23, oneof: "config" },
    { no: 31, name: "airtable", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 32, name: "notion", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 33, name: "pagerduty", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 34, name: "sendgrid", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 35, name: "slack", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 36, name: "athena", kind: "message", T: Plugin$24, oneof: "config" },
    { no: 37, name: "redis", kind: "message", T: Plugin$25, oneof: "config" },
    { no: 38, name: "asana", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 39, name: "github", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 40, name: "smtp", kind: "message", T: Plugin$26, oneof: "config" },
    { no: 41, name: "salesforce", kind: "message", T: Plugin$27, oneof: "config" },
    { no: 42, name: "bitbucket", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 43, name: "circleci", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 44, name: "front", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 45, name: "intercom", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 46, name: "segment", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 47, name: "launchdarkly", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 48, name: "dropbox", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 49, name: "twilio", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 50, name: "googledrive", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 51, name: "googleanalytics", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 52, name: "box", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 53, name: "hubspot", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 54, name: "stripe", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 55, name: "zoom", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 56, name: "jira", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 57, name: "zendesk", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 58, name: "adls", kind: "message", T: Plugin$28, oneof: "config" },
    { no: 59, name: "pinecone", kind: "message", T: Plugin$29, oneof: "config" },
    { no: 60, name: "cosmosdb", kind: "message", T: Plugin$30, oneof: "config" },
    { no: 61, name: "datadog", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 62, name: "xero", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 63, name: "oracledb", kind: "message", T: Plugin$31, oneof: "config" },
    { no: 64, name: "elasticsearch", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 65, name: "databricks", kind: "message", T: Plugin$32, oneof: "config" },
    { no: 66, name: "couchbase", kind: "message", T: Plugin$33, oneof: "config" },
    { no: 67, name: "custom", kind: "message", T: Plugin$34, oneof: "config" },
    { no: 68, name: "anthropic", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 69, name: "cohere", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 70, name: "fireworks", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 71, name: "mistral", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 72, name: "groq", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 73, name: "perplexity", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 74, name: "stabilityai", kind: "message", T: Plugin$12, oneof: "config" },
    { no: 75, name: "gemini", kind: "message", T: Plugin$12, oneof: "config" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Step {
    return new Step().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Step {
    return new Step().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Step {
    return new Step().fromJsonString(jsonString, options);
  }

  static equals(a: Step | PlainMessage<Step> | undefined, b: Step | PlainMessage<Step> | undefined): boolean {
    return proto3.util.equals(Step, a, b);
  }
}

