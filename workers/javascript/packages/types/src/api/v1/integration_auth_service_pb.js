"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file api/v1/integration_auth_service.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestOauthPasswordTokenResponse = exports.RequestOauthPasswordTokenRequest = exports.ExchangeOauthCodeForTokenRequest = exports.LoginResponse = exports.LoginRequest = exports.CheckAuthResponse = exports.CheckAuthRequest = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const common_pb_1 = require("../../common/v1/common_pb");
const auth_pb_1 = require("../../plugins/common/v1/auth_pb");
/**
 * @generated from message api.v1.CheckAuthRequest
 */
class CheckAuthRequest extends protobuf_1.Message {
    /**
     * @generated from field: string integration_id = 1;
     */
    integrationId = "";
    /**
     * @generated from field: common.v1.Profile profile = 2;
     */
    profile;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.CheckAuthRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "integration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "profile", kind: "message", T: common_pb_1.Profile },
    ]);
    static fromBinary(bytes, options) {
        return new CheckAuthRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CheckAuthRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CheckAuthRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CheckAuthRequest, a, b);
    }
}
exports.CheckAuthRequest = CheckAuthRequest;
/**
 * @generated from message api.v1.CheckAuthResponse
 */
class CheckAuthResponse extends protobuf_1.Message {
    /**
     * @generated from field: bool authenticated = 1;
     */
    authenticated = false;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.CheckAuthResponse";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "authenticated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    ]);
    static fromBinary(bytes, options) {
        return new CheckAuthResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CheckAuthResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CheckAuthResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CheckAuthResponse, a, b);
    }
}
exports.CheckAuthResponse = CheckAuthResponse;
/**
 * @generated from message api.v1.LoginRequest
 */
class LoginRequest extends protobuf_1.Message {
    /**
     * @generated from field: string integration_id = 1;
     */
    integrationId = "";
    /**
     * @generated from field: common.v1.Profile profile = 2;
     */
    profile;
    /**
     * @generated from field: optional string token = 3;
     */
    token;
    /**
     * @generated from field: optional string refreshToken = 4;
     */
    refreshToken;
    /**
     * firebase
     *
     * @generated from field: optional string idToken = 5;
     */
    idToken;
    /**
     * @generated from field: optional int64 expiryTimestamp = 6;
     */
    expiryTimestamp;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.LoginRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "integration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "profile", kind: "message", T: common_pb_1.Profile },
        { no: 3, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 4, name: "refreshToken", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 5, name: "idToken", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 6, name: "expiryTimestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new LoginRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LoginRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LoginRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LoginRequest, a, b);
    }
}
exports.LoginRequest = LoginRequest;
/**
 * @generated from message api.v1.LoginResponse
 */
class LoginResponse extends protobuf_1.Message {
    /**
     * @generated from field: bool success = 1;
     */
    success = false;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.LoginResponse";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    ]);
    static fromBinary(bytes, options) {
        return new LoginResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LoginResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LoginResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LoginResponse, a, b);
    }
}
exports.LoginResponse = LoginResponse;
/**
 * @generated from message api.v1.ExchangeOauthCodeForTokenRequest
 */
class ExchangeOauthCodeForTokenRequest extends protobuf_1.Message {
    /**
     * this is deprecated, use auth_type/auth_config/configuration_id instead
     *
     * @generated from field: string integration_id = 1 [deprecated = true];
     * @deprecated
     */
    integrationId = "";
    /**
     * @generated from field: common.v1.Profile profile = 2;
     */
    profile;
    /**
     * @generated from field: string access_code = 3;
     */
    accessCode = "";
    /**
     * @generated from field: string auth_type = 4;
     */
    authType = "";
    /**
     * @generated from field: plugins.common.v1.OAuth.AuthorizationCodeFlow auth_config = 5;
     */
    authConfig;
    /**
     * this is needed to construct authId for access/refresh token(s)
     *
     * @generated from field: string configuration_id = 6;
     */
    configurationId = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.ExchangeOauthCodeForTokenRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "integration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "profile", kind: "message", T: common_pb_1.Profile },
        { no: 3, name: "access_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "auth_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "auth_config", kind: "message", T: auth_pb_1.OAuth_AuthorizationCodeFlow },
        { no: 6, name: "configuration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new ExchangeOauthCodeForTokenRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ExchangeOauthCodeForTokenRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ExchangeOauthCodeForTokenRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ExchangeOauthCodeForTokenRequest, a, b);
    }
}
exports.ExchangeOauthCodeForTokenRequest = ExchangeOauthCodeForTokenRequest;
/**
 * @generated from message api.v1.RequestOauthPasswordTokenRequest
 */
class RequestOauthPasswordTokenRequest extends protobuf_1.Message {
    /**
     * @generated from field: string integration_id = 1;
     */
    integrationId = "";
    /**
     * @generated from field: common.v1.Profile profile = 2;
     */
    profile;
    /**
     * @generated from field: string username = 3;
     */
    username = "";
    /**
     * @generated from field: string password = 4;
     */
    password = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.RequestOauthPasswordTokenRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "integration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "profile", kind: "message", T: common_pb_1.Profile },
        { no: 3, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new RequestOauthPasswordTokenRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RequestOauthPasswordTokenRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RequestOauthPasswordTokenRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RequestOauthPasswordTokenRequest, a, b);
    }
}
exports.RequestOauthPasswordTokenRequest = RequestOauthPasswordTokenRequest;
/**
 * @generated from message api.v1.RequestOauthPasswordTokenResponse
 */
class RequestOauthPasswordTokenResponse extends protobuf_1.Message {
    /**
     * @generated from field: string access_token = 1;
     */
    accessToken = "";
    /**
     * @generated from field: string refresh_token = 2;
     */
    refreshToken = "";
    /**
     * @generated from field: int64 expiry_timestamp = 3;
     */
    expiryTimestamp = protobuf_1.protoInt64.zero;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "api.v1.RequestOauthPasswordTokenResponse";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "refresh_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "expiry_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    ]);
    static fromBinary(bytes, options) {
        return new RequestOauthPasswordTokenResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new RequestOauthPasswordTokenResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new RequestOauthPasswordTokenResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(RequestOauthPasswordTokenResponse, a, b);
    }
}
exports.RequestOauthPasswordTokenResponse = RequestOauthPasswordTokenResponse;
//# sourceMappingURL=integration_auth_service_pb.map