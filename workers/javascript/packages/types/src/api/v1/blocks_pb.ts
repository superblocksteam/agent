// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file api/v1/blocks.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message api.v1.Variables
 */
export class Variables extends Message<Variables> {
  /**
   * @generated from field: repeated api.v1.Variables.Config items = 1;
   */
  items: Variables_Config[] = [];

  constructor(data?: PartialMessage<Variables>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Variables";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Variables_Config, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Variables {
    return new Variables().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Variables {
    return new Variables().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Variables {
    return new Variables().fromJsonString(jsonString, options);
  }

  static equals(a: Variables | PlainMessage<Variables> | undefined, b: Variables | PlainMessage<Variables> | undefined): boolean {
    return proto3.util.equals(Variables, a, b);
  }
}

/**
 * @generated from enum api.v1.Variables.Type
 */
export enum Variables_Type {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   *
   * myVar1.get()
   * myVar1.set()
   *
   * @generated from enum value: TYPE_SIMPLE = 1;
   */
  SIMPLE = 1,

  /**
   *
   * await myVar1.get()
   * await myVar1.set()
   *
   * @generated from enum value: TYPE_ADVANCED = 2;
   */
  ADVANCED = 2,

  /**
   *
   * myVar1
   * myVar1 = 5; // NOTE(frank): We won't implement MODE_READWRITE for this yet.
   *
   * @generated from enum value: TYPE_NATIVE = 3;
   */
  NATIVE = 3,

  /**
   *
   * await myVar1.readContentsAsync()
   * await myVar1.readContentsAsync(someMode)
   * myVar1.readContents()
   * myVar1.readContents(someMode)
   *
   * @generated from enum value: TYPE_FILEPICKER = 4;
   */
  FILEPICKER = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(Variables_Type)
proto3.util.setEnumType(Variables_Type, "api.v1.Variables.Type", [
  { no: 0, name: "TYPE_UNSPECIFIED" },
  { no: 1, name: "TYPE_SIMPLE" },
  { no: 2, name: "TYPE_ADVANCED" },
  { no: 3, name: "TYPE_NATIVE" },
  { no: 4, name: "TYPE_FILEPICKER" },
]);

/**
 * @generated from enum api.v1.Variables.Mode
 */
export enum Variables_Mode {
  /**
   * @generated from enum value: MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: MODE_READ = 1;
   */
  READ = 1,

  /**
   * @generated from enum value: MODE_READWRITE = 2;
   */
  READWRITE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Variables_Mode)
proto3.util.setEnumType(Variables_Mode, "api.v1.Variables.Mode", [
  { no: 0, name: "MODE_UNSPECIFIED" },
  { no: 1, name: "MODE_READ" },
  { no: 2, name: "MODE_READWRITE" },
]);

/**
 * @generated from message api.v1.Variables.Config
 */
export class Variables_Config extends Message<Variables_Config> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * @generated from field: api.v1.Variables.Type type = 2;
   */
  type = Variables_Type.UNSPECIFIED;

  /**
   * @generated from field: api.v1.Variables.Mode mode = 3;
   */
  mode = Variables_Mode.UNSPECIFIED;

  /**
   * @generated from field: string key = 4;
   */
  key = "";

  constructor(data?: PartialMessage<Variables_Config>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Variables.Config";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(Variables_Type) },
    { no: 3, name: "mode", kind: "enum", T: proto3.getEnumType(Variables_Mode) },
    { no: 4, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Variables_Config {
    return new Variables_Config().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Variables_Config {
    return new Variables_Config().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Variables_Config {
    return new Variables_Config().fromJsonString(jsonString, options);
  }

  static equals(a: Variables_Config | PlainMessage<Variables_Config> | undefined, b: Variables_Config | PlainMessage<Variables_Config> | undefined): boolean {
    return proto3.util.equals(Variables_Config, a, b);
  }
}

