// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file api/v1/event.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Struct, Timestamp, Value } from "@bufbuild/protobuf";
import { Error } from "../../common/v1/errors_pb";

/**
 * @generated from enum api.v1.BlockStatus
 */
export enum BlockStatus {
  /**
   * @generated from enum value: BLOCK_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: BLOCK_STATUS_SUCCEEDED = 1;
   */
  SUCCEEDED = 1,

  /**
   * @generated from enum value: BLOCK_STATUS_ERRORED = 2;
   */
  ERRORED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(BlockStatus)
proto3.util.setEnumType(BlockStatus, "api.v1.BlockStatus", [
  { no: 0, name: "BLOCK_STATUS_UNSPECIFIED" },
  { no: 1, name: "BLOCK_STATUS_SUCCEEDED" },
  { no: 2, name: "BLOCK_STATUS_ERRORED" },
]);

/**
 * @generated from enum api.v1.BlockType
 */
export enum BlockType {
  /**
   * @generated from enum value: BLOCK_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: BLOCK_TYPE_BREAK = 1;
   */
  BREAK = 1,

  /**
   * @generated from enum value: BLOCK_TYPE_RETURN = 2;
   */
  RETURN = 2,

  /**
   * @generated from enum value: BLOCK_TYPE_WAIT = 3;
   */
  WAIT = 3,

  /**
   * @generated from enum value: BLOCK_TYPE_PARALLEL = 4;
   */
  PARALLEL = 4,

  /**
   * @generated from enum value: BLOCK_TYPE_CONDITIONAL = 5;
   */
  CONDITIONAL = 5,

  /**
   * @generated from enum value: BLOCK_TYPE_LOOP = 6;
   */
  LOOP = 6,

  /**
   * @generated from enum value: BLOCK_TYPE_TRYCATCH = 7;
   */
  TRYCATCH = 7,

  /**
   * @generated from enum value: BLOCK_TYPE_STEP = 8;
   */
  STEP = 8,

  /**
   * @generated from enum value: BLOCK_TYPE_VARIABLES = 9;
   */
  VARIABLES = 9,

  /**
   * @generated from enum value: BLOCK_TYPE_THROW = 10;
   */
  THROW = 10,

  /**
   * @generated from enum value: BLOCK_TYPE_SEND = 11;
   */
  SEND = 11,

  /**
   * @generated from enum value: BLOCK_TYPE_STREAM = 12;
   */
  STREAM = 12,
}
// Retrieve enum metadata with: proto3.getEnumType(BlockType)
proto3.util.setEnumType(BlockType, "api.v1.BlockType", [
  { no: 0, name: "BLOCK_TYPE_UNSPECIFIED" },
  { no: 1, name: "BLOCK_TYPE_BREAK" },
  { no: 2, name: "BLOCK_TYPE_RETURN" },
  { no: 3, name: "BLOCK_TYPE_WAIT" },
  { no: 4, name: "BLOCK_TYPE_PARALLEL" },
  { no: 5, name: "BLOCK_TYPE_CONDITIONAL" },
  { no: 6, name: "BLOCK_TYPE_LOOP" },
  { no: 7, name: "BLOCK_TYPE_TRYCATCH" },
  { no: 8, name: "BLOCK_TYPE_STEP" },
  { no: 9, name: "BLOCK_TYPE_VARIABLES" },
  { no: 10, name: "BLOCK_TYPE_THROW" },
  { no: 11, name: "BLOCK_TYPE_SEND" },
  { no: 12, name: "BLOCK_TYPE_STREAM" },
]);

/**
 * @generated from message api.v1.Resolved
 */
export class Resolved extends Message<Resolved> {
  /**
   * @generated from field: google.protobuf.Value value = 1;
   */
  value?: Value;

  /**
   *
   * If the value was comprised of more than one bindings, the individual resolutions will be here.
   *
   * @generated from field: repeated google.protobuf.Value bindings = 2;
   */
  bindings: Value[] = [];

  constructor(data?: PartialMessage<Resolved>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Resolved";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: Value },
    { no: 2, name: "bindings", kind: "message", T: Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Resolved {
    return new Resolved().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Resolved {
    return new Resolved().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Resolved {
    return new Resolved().fromJsonString(jsonString, options);
  }

  static equals(a: Resolved | PlainMessage<Resolved> | undefined, b: Resolved | PlainMessage<Resolved> | undefined): boolean {
    return proto3.util.equals(Resolved, a, b);
  }
}

/**
 * @generated from message api.v1.Event
 */
export class Event extends Message<Event> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: api.v1.BlockType type = 2;
   */
  type = BlockType.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;

  /**
   * @generated from oneof api.v1.Event.event
   */
  event: {
    /**
     * @generated from field: api.v1.Event.Start start = 4;
     */
    value: Event_Start;
    case: "start";
  } | {
    /**
     * @generated from field: api.v1.Event.End end = 5;
     */
    value: Event_End;
    case: "end";
  } | {
    /**
     * @generated from field: api.v1.Event.Data data = 7;
     */
    value: Event_Data;
    case: "data";
  } | {
    /**
     * @generated from field: api.v1.Event.Request request = 9;
     */
    value: Event_Request;
    case: "request";
  } | {
    /**
     * TODO(frank): Whoops; move function requests here.
     *
     * @generated from field: api.v1.Event.Response response = 10;
     */
    value: Event_Response;
    case: "response";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   *
   * The name of the parent block, if any.
   *
   * @generated from field: optional string parent = 6;
   */
  parent?: string;

  /**
   * *
   * The execution index if this is child step of parallels and loops.
   *
   * @generated from field: optional string execution_index = 8;
   */
  executionIndex?: string;

  constructor(data?: PartialMessage<Event>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Event";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(BlockType) },
    { no: 3, name: "timestamp", kind: "message", T: Timestamp },
    { no: 4, name: "start", kind: "message", T: Event_Start, oneof: "event" },
    { no: 5, name: "end", kind: "message", T: Event_End, oneof: "event" },
    { no: 7, name: "data", kind: "message", T: Event_Data, oneof: "event" },
    { no: 9, name: "request", kind: "message", T: Event_Request, oneof: "event" },
    { no: 10, name: "response", kind: "message", T: Event_Response, oneof: "event" },
    { no: 6, name: "parent", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "execution_index", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event {
    return new Event().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJsonString(jsonString, options);
  }

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean {
    return proto3.util.equals(Event, a, b);
  }
}

/**
 * @generated from message api.v1.Event.Data
 */
export class Event_Data extends Message<Event_Data> {
  /**
   * @generated from field: google.protobuf.Value value = 1;
   */
  value?: Value;

  constructor(data?: PartialMessage<Event_Data>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Event.Data";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event_Data {
    return new Event_Data().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event_Data {
    return new Event_Data().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event_Data {
    return new Event_Data().fromJsonString(jsonString, options);
  }

  static equals(a: Event_Data | PlainMessage<Event_Data> | undefined, b: Event_Data | PlainMessage<Event_Data> | undefined): boolean {
    return proto3.util.equals(Event_Data, a, b);
  }
}

/**
 *
 * Represents the start of an Api.
 *
 * @generated from message api.v1.Event.Request
 */
export class Event_Request extends Message<Event_Request> {
  constructor(data?: PartialMessage<Event_Request>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Event.Request";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event_Request {
    return new Event_Request().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event_Request {
    return new Event_Request().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event_Request {
    return new Event_Request().fromJsonString(jsonString, options);
  }

  static equals(a: Event_Request | PlainMessage<Event_Request> | undefined, b: Event_Request | PlainMessage<Event_Request> | undefined): boolean {
    return proto3.util.equals(Event_Request, a, b);
  }
}

/**
 *
 * Represents the completion of an Api.
 *
 * @generated from message api.v1.Event.Response
 */
export class Event_Response extends Message<Event_Response> {
  /**
   *
   * The name of the block that represents the response of the Api.
   *
   * @generated from field: string last = 1;
   */
  last = "";

  /**
   *
   * The errors, if any.
   *
   * @generated from field: repeated common.v1.Error errors = 3;
   */
  errors: Error[] = [];

  constructor(data?: PartialMessage<Event_Response>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Event.Response";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "last", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "errors", kind: "message", T: Error, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event_Response {
    return new Event_Response().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event_Response {
    return new Event_Response().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event_Response {
    return new Event_Response().fromJsonString(jsonString, options);
  }

  static equals(a: Event_Response | PlainMessage<Event_Response> | undefined, b: Event_Response | PlainMessage<Event_Response> | undefined): boolean {
    return proto3.util.equals(Event_Response, a, b);
  }
}

/**
 * @generated from message api.v1.Event.Start
 */
export class Event_Start extends Message<Event_Start> {
  constructor(data?: PartialMessage<Event_Start>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Event.Start";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event_Start {
    return new Event_Start().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event_Start {
    return new Event_Start().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event_Start {
    return new Event_Start().fromJsonString(jsonString, options);
  }

  static equals(a: Event_Start | PlainMessage<Event_Start> | undefined, b: Event_Start | PlainMessage<Event_Start> | undefined): boolean {
    return proto3.util.equals(Event_Start, a, b);
  }
}

/**
 * @generated from message api.v1.Event.End
 */
export class Event_End extends Message<Event_End> {
  /**
   *
   * Performance data for the block that just ended.
   *
   * @generated from field: api.v1.Performance performance = 1;
   */
  performance?: Performance;

  /**
   *
   * The block's output.
   *
   * @generated from field: api.v1.Output output = 2;
   */
  output?: Output;

  /**
   *
   * The error, if any.
   *
   * @generated from field: common.v1.Error error = 3;
   */
  error?: Error;

  /**
   * @generated from field: api.v1.BlockStatus status = 4;
   */
  status = BlockStatus.UNSPECIFIED;

  /**
   *
   * Any resolved bindings.
   *
   * @generated from field: map<string, api.v1.Resolved> resolved = 5;
   */
  resolved: { [key: string]: Resolved } = {};

  constructor(data?: PartialMessage<Event_End>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Event.End";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "performance", kind: "message", T: Performance },
    { no: 2, name: "output", kind: "message", T: Output },
    { no: 3, name: "error", kind: "message", T: Error },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(BlockStatus) },
    { no: 5, name: "resolved", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Resolved} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event_End {
    return new Event_End().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event_End {
    return new Event_End().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event_End {
    return new Event_End().fromJsonString(jsonString, options);
  }

  static equals(a: Event_End | PlainMessage<Event_End> | undefined, b: Event_End | PlainMessage<Event_End> | undefined): boolean {
    return proto3.util.equals(Event_End, a, b);
  }
}

/**
 * @generated from message api.v1.Performance
 */
export class Performance extends Message<Performance> {
  /**
   * @generated from field: int64 start = 1;
   */
  start = protoInt64.zero;

  /**
   * @generated from field: int64 finish = 2;
   */
  finish = protoInt64.zero;

  /**
   * @generated from field: int64 total = 3;
   */
  total = protoInt64.zero;

  /**
   * @generated from field: int64 execution = 4;
   */
  execution = protoInt64.zero;

  /**
   * @generated from field: int64 overhead = 5;
   */
  overhead = protoInt64.zero;

  /**
   * @generated from field: map<string, int64> custom = 6;
   */
  custom: { [key: string]: bigint } = {};

  constructor(data?: PartialMessage<Performance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Performance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "finish", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "execution", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "overhead", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "custom", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 3 /* ScalarType.INT64 */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Performance {
    return new Performance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Performance {
    return new Performance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Performance {
    return new Performance().fromJsonString(jsonString, options);
  }

  static equals(a: Performance | PlainMessage<Performance> | undefined, b: Performance | PlainMessage<Performance> | undefined): boolean {
    return proto3.util.equals(Performance, a, b);
  }
}

/**
 * @generated from message api.v1.Output
 */
export class Output extends Message<Output> {
  /**
   *
   * The JSON encoded response.
   *
   * @generated from field: google.protobuf.Value result = 1;
   */
  result?: Value;

  /**
   *
   * The original request.
   *
   * @generated from field: string request = 2;
   */
  request = "";

  /**
   * @generated from field: repeated string stdout = 3;
   */
  stdout: string[] = [];

  /**
   * @generated from field: repeated string stderr = 4;
   */
  stderr: string[] = [];

  /**
   * @generated from field: api.v1.Output.Request request_v2 = 5;
   */
  requestV2?: Output_Request;

  constructor(data?: PartialMessage<Output>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Output";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "message", T: Value },
    { no: 2, name: "request", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "stdout", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "stderr", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "request_v2", kind: "message", T: Output_Request },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Output {
    return new Output().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Output {
    return new Output().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Output {
    return new Output().fromJsonString(jsonString, options);
  }

  static equals(a: Output | PlainMessage<Output> | undefined, b: Output | PlainMessage<Output> | undefined): boolean {
    return proto3.util.equals(Output, a, b);
  }
}

/**
 * @generated from message api.v1.Output.Request
 */
export class Output_Request extends Message<Output_Request> {
  /**
   * @generated from field: string summary = 1;
   */
  summary = "";

  /**
   * @generated from field: optional google.protobuf.Struct metadata = 5;
   */
  metadata?: Struct;

  constructor(data?: PartialMessage<Output_Request>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Output.Request";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "summary", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "metadata", kind: "message", T: Struct, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Output_Request {
    return new Output_Request().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Output_Request {
    return new Output_Request().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Output_Request {
    return new Output_Request().fromJsonString(jsonString, options);
  }

  static equals(a: Output_Request | PlainMessage<Output_Request> | undefined, b: Output_Request | PlainMessage<Output_Request> | undefined): boolean {
    return proto3.util.equals(Output_Request, a, b);
  }
}

/**
 * @generated from message api.v1.OutputOld
 */
export class OutputOld extends Message<OutputOld> {
  /**
   * @generated from field: google.protobuf.Value output = 1;
   */
  output?: Value;

  /**
   * @generated from field: repeated string log = 2;
   */
  log: string[] = [];

  /**
   * @generated from field: string request = 3;
   */
  request = "";

  /**
   * @generated from field: google.protobuf.Value place_holders_info = 4;
   */
  placeHoldersInfo?: Value;

  constructor(data?: PartialMessage<OutputOld>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.OutputOld";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "output", kind: "message", T: Value },
    { no: 2, name: "log", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "request", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "place_holders_info", kind: "message", T: Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OutputOld {
    return new OutputOld().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OutputOld {
    return new OutputOld().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OutputOld {
    return new OutputOld().fromJsonString(jsonString, options);
  }

  static equals(a: OutputOld | PlainMessage<OutputOld> | undefined, b: OutputOld | PlainMessage<OutputOld> | undefined): boolean {
    return proto3.util.equals(OutputOld, a, b);
  }
}

