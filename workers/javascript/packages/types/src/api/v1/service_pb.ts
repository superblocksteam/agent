// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file api/v1/service.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct, Value } from "@bufbuild/protobuf";
import { Api } from "./api_pb";
import { Metadata, Profile, UserType } from "../../common/v1/common_pb";
import { Stores } from "../../store/v1/store_pb";
import { Event, Output, Performance } from "./event_pb";
import { Error } from "../../common/v1/errors_pb";
import { Metadata as Metadata$1 } from "../../plugins/kafka/v1/plugin_pb";
import { Plugin_Metadata } from "../../plugins/cosmosdb/v1/plugin_pb";
import { Plugin_Metadata as Plugin_Metadata$1 } from "../../plugins/adls/v1/plugin_pb";

/**
 * @generated from enum api.v1.ViewMode
 */
export enum ViewMode {
  /**
   * @generated from enum value: VIEW_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: VIEW_MODE_EDIT = 1;
   */
  EDIT = 1,

  /**
   * @generated from enum value: VIEW_MODE_PREVIEW = 2;
   */
  PREVIEW = 2,

  /**
   * @generated from enum value: VIEW_MODE_DEPLOYED = 3;
   */
  DEPLOYED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ViewMode)
proto3.util.setEnumType(ViewMode, "api.v1.ViewMode", [
  { no: 0, name: "VIEW_MODE_UNSPECIFIED" },
  { no: 1, name: "VIEW_MODE_EDIT" },
  { no: 2, name: "VIEW_MODE_PREVIEW" },
  { no: 3, name: "VIEW_MODE_DEPLOYED" },
]);

/**
 * @generated from message api.v1.HealthRequest
 */
export class HealthRequest extends Message<HealthRequest> {
  /**
   * @generated from field: bool detailed = 1;
   */
  detailed = false;

  constructor(data?: PartialMessage<HealthRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.HealthRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "detailed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthRequest {
    return new HealthRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthRequest {
    return new HealthRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthRequest {
    return new HealthRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HealthRequest | PlainMessage<HealthRequest> | undefined, b: HealthRequest | PlainMessage<HealthRequest> | undefined): boolean {
    return proto3.util.equals(HealthRequest, a, b);
  }
}

/**
 * @generated from message api.v1.ValidateRequest
 */
export class ValidateRequest extends Message<ValidateRequest> {
  /**
   * @generated from field: api.v1.Api api = 1;
   */
  api?: Api;

  constructor(data?: PartialMessage<ValidateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ValidateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "api", kind: "message", T: Api },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateRequest {
    return new ValidateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateRequest {
    return new ValidateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateRequest {
    return new ValidateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateRequest | PlainMessage<ValidateRequest> | undefined, b: ValidateRequest | PlainMessage<ValidateRequest> | undefined): boolean {
    return proto3.util.equals(ValidateRequest, a, b);
  }
}

/**
 * @generated from message api.v1.ExecuteRequest
 */
export class ExecuteRequest extends Message<ExecuteRequest> {
  /**
   *
   * Request options.
   *
   * @generated from field: api.v1.ExecuteRequest.Options options = 1;
   */
  options?: ExecuteRequest_Options;

  /**
   *
   * Inputs that can be access in steps.
   *
   * @generated from field: map<string, google.protobuf.Value> inputs = 2;
   */
  inputs: { [key: string]: Value } = {};

  /**
   * @generated from oneof api.v1.ExecuteRequest.request
   */
  request: {
    /**
     *
     * The literal API specification.
     *
     * @generated from field: api.v1.Definition definition = 3;
     */
    value: Definition;
    case: "definition";
  } | {
    /**
     *
     * Details on how to fetch the API specification.
     *
     * @generated from field: api.v1.ExecuteRequest.Fetch fetch = 4;
     */
    value: ExecuteRequest_Fetch;
    case: "fetch";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated api.v1.ExecuteRequest.File files = 5;
   */
  files: ExecuteRequest_File[] = [];

  /**
   * @generated from field: common.v1.Profile profile = 6;
   */
  profile?: Profile;

  /**
   * @generated from field: repeated api.v1.Mock mocks = 7;
   */
  mocks: Mock[] = [];

  constructor(data?: PartialMessage<ExecuteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ExecuteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "options", kind: "message", T: ExecuteRequest_Options },
    { no: 2, name: "inputs", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
    { no: 3, name: "definition", kind: "message", T: Definition, oneof: "request" },
    { no: 4, name: "fetch", kind: "message", T: ExecuteRequest_Fetch, oneof: "request" },
    { no: 5, name: "files", kind: "message", T: ExecuteRequest_File, repeated: true },
    { no: 6, name: "profile", kind: "message", T: Profile },
    { no: 7, name: "mocks", kind: "message", T: Mock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteRequest {
    return new ExecuteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteRequest {
    return new ExecuteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteRequest {
    return new ExecuteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteRequest | PlainMessage<ExecuteRequest> | undefined, b: ExecuteRequest | PlainMessage<ExecuteRequest> | undefined): boolean {
    return proto3.util.equals(ExecuteRequest, a, b);
  }
}

/**
 * @generated from message api.v1.ExecuteRequest.Options
 */
export class ExecuteRequest_Options extends Message<ExecuteRequest_Options> {
  /**
   *
   * If true, the primary output will not be returned.
   *
   * @generated from field: bool exclude_output = 1;
   */
  excludeOutput = false;

  /**
   *
   * If true, all outputs will be returned. If false (default):
   *
   *       STREAM: The block output will not be returned.
   *  ASYNC/AWAIT: Only the final block's output will be returned.
   *
   * WARNING: Returning more than the final block's output may
   *          result in a significant performance regressions.
   * NOTE: If 'exclude_events' is enabled, this flag has no effect.
   *
   * @generated from field: bool include_event_outputs = 2;
   */
  includeEventOutputs = false;

  /**
   *
   * Include system events.
   *
   * @generated from field: bool include_events = 3;
   */
  includeEvents = false;

  /**
   *
   * The block ID to start execution at.
   *
   * @generated from field: string start = 4;
   */
  start = "";

  /**
   *
   * The block ID to stop execution at.
   *
   * @generated from field: string stop = 5;
   */
  stop = "";

  /**
   *
   * If true, values for resolved bindings will be included.
   *
   * @generated from field: bool include_resolved = 6;
   */
  includeResolved = false;

  /**
   *
   * If true, the api will immediately return and execution will continue in a detached manner.
   *
   * @generated from field: bool async = 7;
   */
  async = false;

  /**
   *
   * If true, the begin and complete events will be sent. This flag is need to retain backwards compatibility.
   *
   * @generated from field: bool include_api_events = 8;
   */
  includeApiEvents = false;

  constructor(data?: PartialMessage<ExecuteRequest_Options>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ExecuteRequest.Options";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exclude_output", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "include_event_outputs", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "include_events", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "start", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "stop", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "include_resolved", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "async", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "include_api_events", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteRequest_Options {
    return new ExecuteRequest_Options().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteRequest_Options {
    return new ExecuteRequest_Options().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteRequest_Options {
    return new ExecuteRequest_Options().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteRequest_Options | PlainMessage<ExecuteRequest_Options> | undefined, b: ExecuteRequest_Options | PlainMessage<ExecuteRequest_Options> | undefined): boolean {
    return proto3.util.equals(ExecuteRequest_Options, a, b);
  }
}

/**
 * @generated from message api.v1.ExecuteRequest.Fetch
 */
export class ExecuteRequest_Fetch extends Message<ExecuteRequest_Fetch> {
  /**
   *
   * A reference to the API by ID.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   *
   * The integration profile to use.
   *
   * @generated from field: common.v1.Profile profile = 2;
   */
  profile?: Profile;

  /**
   *
   * Use unpublished changes.
   *
   * @generated from field: optional bool test = 3;
   */
  test?: boolean;

  /**
   *
   * The auth token to use when fetching the definition.
   * Used for workflows only.
   *
   * @generated from field: optional string token = 4;
   */
  token?: string;

  /**
   *
   * The view mode that this resource should be executed against.
   *
   * @generated from field: api.v1.ViewMode view_mode = 5;
   */
  viewMode = ViewMode.UNSPECIFIED;

  /**
   *
   * The commit ID to use when fetching the API.
   *
   * @generated from field: optional string commit_id = 6;
   */
  commitId?: string;

  /**
   *
   * The branch name to use when fetching the API
   *
   * @generated from field: optional string branch_name = 7;
   */
  branchName?: string;

  constructor(data?: PartialMessage<ExecuteRequest_Fetch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ExecuteRequest.Fetch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "profile", kind: "message", T: Profile },
    { no: 3, name: "test", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "view_mode", kind: "enum", T: proto3.getEnumType(ViewMode) },
    { no: 6, name: "commit_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "branch_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteRequest_Fetch {
    return new ExecuteRequest_Fetch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteRequest_Fetch {
    return new ExecuteRequest_Fetch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteRequest_Fetch {
    return new ExecuteRequest_Fetch().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteRequest_Fetch | PlainMessage<ExecuteRequest_Fetch> | undefined, b: ExecuteRequest_Fetch | PlainMessage<ExecuteRequest_Fetch> | undefined): boolean {
    return proto3.util.equals(ExecuteRequest_Fetch, a, b);
  }
}

/**
 * @generated from message api.v1.ExecuteRequest.File
 */
export class ExecuteRequest_File extends Message<ExecuteRequest_File> {
  /**
   * @generated from field: string originalName = 1;
   */
  originalName = "";

  /**
   * @generated from field: bytes buffer = 2;
   */
  buffer = new Uint8Array(0);

  /**
   * @generated from field: string encoding = 3;
   */
  encoding = "";

  /**
   * @generated from field: string mimeType = 4;
   */
  mimeType = "";

  /**
   * @generated from field: string size = 5;
   */
  size = "";

  constructor(data?: PartialMessage<ExecuteRequest_File>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ExecuteRequest.File";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "originalName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "buffer", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "encoding", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "mimeType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteRequest_File {
    return new ExecuteRequest_File().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteRequest_File {
    return new ExecuteRequest_File().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteRequest_File {
    return new ExecuteRequest_File().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteRequest_File | PlainMessage<ExecuteRequest_File> | undefined, b: ExecuteRequest_File | PlainMessage<ExecuteRequest_File> | undefined): boolean {
    return proto3.util.equals(ExecuteRequest_File, a, b);
  }
}

/**
 * @generated from message api.v1.Definition
 */
export class Definition extends Message<Definition> {
  /**
   * @generated from field: api.v1.Api api = 1;
   */
  api?: Api;

  /**
   * @generated from field: map<string, google.protobuf.Struct> integrations = 2;
   */
  integrations: { [key: string]: Struct } = {};

  /**
   * @generated from field: api.v1.Definition.Metadata metadata = 3;
   */
  metadata?: Definition_Metadata;

  /**
   * @generated from field: store.v1.Stores stores = 4;
   */
  stores?: Stores;

  constructor(data?: PartialMessage<Definition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Definition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "api", kind: "message", T: Api },
    { no: 2, name: "integrations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Struct} },
    { no: 3, name: "metadata", kind: "message", T: Definition_Metadata },
    { no: 4, name: "stores", kind: "message", T: Stores },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Definition {
    return new Definition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Definition {
    return new Definition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Definition {
    return new Definition().fromJsonString(jsonString, options);
  }

  static equals(a: Definition | PlainMessage<Definition> | undefined, b: Definition | PlainMessage<Definition> | undefined): boolean {
    return proto3.util.equals(Definition, a, b);
  }
}

/**
 * @generated from message api.v1.Definition.Metadata
 */
export class Definition_Metadata extends Message<Definition_Metadata> {
  /**
   * This is the email
   *
   * @generated from field: string requester = 1;
   */
  requester = "";

  /**
   * Because profile isn't a required execution parameter, the default will be different per org.
   *
   * @generated from field: string profile = 2;
   */
  profile = "";

  /**
   * @generated from field: string organization_plan = 3;
   */
  organizationPlan = "";

  /**
   * @generated from field: string organization_name = 4;
   */
  organizationName = "";

  /**
   * This is requester type since the same email could be used by external user as well as by internal
   *
   * @generated from field: optional common.v1.UserType requester_type = 5;
   */
  requesterType?: UserType;

  constructor(data?: PartialMessage<Definition_Metadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Definition.Metadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requester", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "profile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "organization_plan", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "requester_type", kind: "enum", T: proto3.getEnumType(UserType), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Definition_Metadata {
    return new Definition_Metadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Definition_Metadata {
    return new Definition_Metadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Definition_Metadata {
    return new Definition_Metadata().fromJsonString(jsonString, options);
  }

  static equals(a: Definition_Metadata | PlainMessage<Definition_Metadata> | undefined, b: Definition_Metadata | PlainMessage<Definition_Metadata> | undefined): boolean {
    return proto3.util.equals(Definition_Metadata, a, b);
  }
}

/**
 * @generated from message api.v1.StatusRequest
 */
export class StatusRequest extends Message<StatusRequest> {
  /**
   *
   * The execution ID of an in-progress API execution.
   *
   * @generated from field: string execution = 1;
   */
  execution = "";

  constructor(data?: PartialMessage<StatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.StatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "execution", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatusRequest {
    return new StatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatusRequest {
    return new StatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatusRequest {
    return new StatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StatusRequest | PlainMessage<StatusRequest> | undefined, b: StatusRequest | PlainMessage<StatusRequest> | undefined): boolean {
    return proto3.util.equals(StatusRequest, a, b);
  }
}

/**
 * @generated from message api.v1.AwaitResponse
 */
export class AwaitResponse extends Message<AwaitResponse> {
  /**
   *
   * The execution ID. This can be used to retrieve outputs after the fact.
   *
   * @generated from field: string execution = 1;
   */
  execution = "";

  /**
   *
   * The block's output.
   *
   * @generated from field: api.v1.Output output = 2;
   */
  output?: Output;

  /**
   *
   * The errors, if any.
   *
   * @generated from field: repeated common.v1.Error errors = 3;
   */
  errors: Error[] = [];

  /**
   *
   * The current status of this execution. If response orginates
   * from an AwaitRequest, the status will always be comppleted.
   *
   * @generated from field: api.v1.AwaitResponse.Status status = 4;
   */
  status = AwaitResponse_Status.UNSPECIFIED;

  /**
   *
   * Aggregated performance stats.
   *
   * @generated from field: api.v1.Performance performance = 5;
   */
  performance?: Performance;

  /**
   *
   * A log of the cuncurrent events that happened during this API's execution.
   *
   * @generated from field: repeated api.v1.Event events = 6;
   */
  events: Event[] = [];

  constructor(data?: PartialMessage<AwaitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.AwaitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "execution", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "output", kind: "message", T: Output },
    { no: 3, name: "errors", kind: "message", T: Error, repeated: true },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(AwaitResponse_Status) },
    { no: 5, name: "performance", kind: "message", T: Performance },
    { no: 6, name: "events", kind: "message", T: Event, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AwaitResponse {
    return new AwaitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AwaitResponse {
    return new AwaitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AwaitResponse {
    return new AwaitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AwaitResponse | PlainMessage<AwaitResponse> | undefined, b: AwaitResponse | PlainMessage<AwaitResponse> | undefined): boolean {
    return proto3.util.equals(AwaitResponse, a, b);
  }
}

/**
 * @generated from enum api.v1.AwaitResponse.Status
 */
export enum AwaitResponse_Status {
  /**
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STATUS_COMPLETED = 1;
   */
  COMPLETED = 1,

  /**
   * @generated from enum value: STATUS_EXECUTING = 2;
   */
  EXECUTING = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AwaitResponse_Status)
proto3.util.setEnumType(AwaitResponse_Status, "api.v1.AwaitResponse.Status", [
  { no: 0, name: "STATUS_UNSPECIFIED" },
  { no: 1, name: "STATUS_COMPLETED" },
  { no: 2, name: "STATUS_EXECUTING" },
]);

/**
 * @generated from message api.v1.AsyncResponse
 */
export class AsyncResponse extends Message<AsyncResponse> {
  /**
   *
   * The execution ID. This can be used to retrieve outputs after the fact.
   *
   * @generated from field: string execution = 1;
   */
  execution = "";

  /**
   * @generated from field: common.v1.Error error = 2;
   */
  error?: Error;

  constructor(data?: PartialMessage<AsyncResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.AsyncResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "execution", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "error", kind: "message", T: Error },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AsyncResponse {
    return new AsyncResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AsyncResponse {
    return new AsyncResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AsyncResponse {
    return new AsyncResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AsyncResponse | PlainMessage<AsyncResponse> | undefined, b: AsyncResponse | PlainMessage<AsyncResponse> | undefined): boolean {
    return proto3.util.equals(AsyncResponse, a, b);
  }
}

/**
 * @generated from message api.v1.StreamResponse
 */
export class StreamResponse extends Message<StreamResponse> {
  /**
   *
   * The execution ID. This can be used to retrieve outputs after the fact.
   *
   * @generated from field: string execution = 1;
   */
  execution = "";

  /**
   * @generated from field: api.v1.Event event = 2;
   */
  event?: Event;

  constructor(data?: PartialMessage<StreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.StreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "execution", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "event", kind: "message", T: Event },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamResponse {
    return new StreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamResponse {
    return new StreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamResponse {
    return new StreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamResponse | PlainMessage<StreamResponse> | undefined, b: StreamResponse | PlainMessage<StreamResponse> | undefined): boolean {
    return proto3.util.equals(StreamResponse, a, b);
  }
}

/**
 * @generated from message api.v1.OutputRequest
 */
export class OutputRequest extends Message<OutputRequest> {
  /**
   * @generated from field: string execution = 1;
   */
  execution = "";

  /**
   * @generated from field: string block = 2;
   */
  block = "";

  constructor(data?: PartialMessage<OutputRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.OutputRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "execution", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "block", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OutputRequest {
    return new OutputRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OutputRequest {
    return new OutputRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OutputRequest {
    return new OutputRequest().fromJsonString(jsonString, options);
  }

  static equals(a: OutputRequest | PlainMessage<OutputRequest> | undefined, b: OutputRequest | PlainMessage<OutputRequest> | undefined): boolean {
    return proto3.util.equals(OutputRequest, a, b);
  }
}

/**
 * @generated from message api.v1.OutputResponse
 */
export class OutputResponse extends Message<OutputResponse> {
  /**
   * @generated from field: common.v1.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   *
   * The block's output.
   *
   * @generated from field: api.v1.Output output = 2;
   */
  output?: Output;

  /**
   *
   * The error, if any.
   *
   * @generated from field: common.v1.Error error = 3;
   */
  error?: Error;

  constructor(data?: PartialMessage<OutputResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.OutputResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "output", kind: "message", T: Output },
    { no: 3, name: "error", kind: "message", T: Error },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OutputResponse {
    return new OutputResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OutputResponse {
    return new OutputResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OutputResponse {
    return new OutputResponse().fromJsonString(jsonString, options);
  }

  static equals(a: OutputResponse | PlainMessage<OutputResponse> | undefined, b: OutputResponse | PlainMessage<OutputResponse> | undefined): boolean {
    return proto3.util.equals(OutputResponse, a, b);
  }
}

/**
 * @generated from message api.v1.CancelRequest
 */
export class CancelRequest extends Message<CancelRequest> {
  /**
   * @generated from field: string execution = 1;
   */
  execution = "";

  constructor(data?: PartialMessage<CancelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.CancelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "execution", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelRequest {
    return new CancelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelRequest {
    return new CancelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelRequest {
    return new CancelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CancelRequest | PlainMessage<CancelRequest> | undefined, b: CancelRequest | PlainMessage<CancelRequest> | undefined): boolean {
    return proto3.util.equals(CancelRequest, a, b);
  }
}

/**
 * @generated from message api.v1.CancelResponse
 */
export class CancelResponse extends Message<CancelResponse> {
  /**
   * @generated from field: common.v1.Error error = 1;
   */
  error?: Error;

  constructor(data?: PartialMessage<CancelResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.CancelResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "message", T: Error },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelResponse {
    return new CancelResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelResponse {
    return new CancelResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelResponse {
    return new CancelResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CancelResponse | PlainMessage<CancelResponse> | undefined, b: CancelResponse | PlainMessage<CancelResponse> | undefined): boolean {
    return proto3.util.equals(CancelResponse, a, b);
  }
}

/**
 * @generated from message api.v1.TestRequest
 */
export class TestRequest extends Message<TestRequest> {
  /**
   * @generated from field: google.protobuf.Struct datasource_config = 1;
   */
  datasourceConfig?: Struct;

  /**
   * @generated from field: string integration_type = 2;
   */
  integrationType = "";

  /**
   * @generated from field: string configuration_id = 3;
   */
  configurationId = "";

  /**
   * @generated from field: common.v1.Profile profile = 4;
   */
  profile?: Profile;

  /**
   * @generated from field: optional google.protobuf.Struct action_config = 5;
   */
  actionConfig?: Struct;

  constructor(data?: PartialMessage<TestRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TestRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "datasource_config", kind: "message", T: Struct },
    { no: 2, name: "integration_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "configuration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "profile", kind: "message", T: Profile },
    { no: 5, name: "action_config", kind: "message", T: Struct, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestRequest {
    return new TestRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestRequest {
    return new TestRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestRequest {
    return new TestRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TestRequest | PlainMessage<TestRequest> | undefined, b: TestRequest | PlainMessage<TestRequest> | undefined): boolean {
    return proto3.util.equals(TestRequest, a, b);
  }
}

/**
 * @generated from message api.v1.TestResponse
 */
export class TestResponse extends Message<TestResponse> {
  constructor(data?: PartialMessage<TestResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TestResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestResponse {
    return new TestResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestResponse {
    return new TestResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestResponse {
    return new TestResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TestResponse | PlainMessage<TestResponse> | undefined, b: TestResponse | PlainMessage<TestResponse> | undefined): boolean {
    return proto3.util.equals(TestResponse, a, b);
  }
}

/**
 * @generated from message api.v1.DeleteRequest
 */
export class DeleteRequest extends Message<DeleteRequest> {
  /**
   * @generated from field: string integration = 1;
   */
  integration = "";

  /**
   * @generated from field: common.v1.Profile profile = 2;
   */
  profile?: Profile;

  /**
   * @generated from field: string configuration_id = 3;
   */
  configurationId = "";

  /**
   * @generated from field: string plugin_name = 4;
   */
  pluginName = "";

  constructor(data?: PartialMessage<DeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.DeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "profile", kind: "message", T: Profile },
    { no: 3, name: "configuration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "plugin_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRequest {
    return new DeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRequest {
    return new DeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRequest {
    return new DeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRequest | PlainMessage<DeleteRequest> | undefined, b: DeleteRequest | PlainMessage<DeleteRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRequest, a, b);
  }
}

/**
 * @generated from message api.v1.DeleteResponse
 */
export class DeleteResponse extends Message<DeleteResponse> {
  constructor(data?: PartialMessage<DeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.DeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteResponse {
    return new DeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteResponse {
    return new DeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteResponse {
    return new DeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteResponse | PlainMessage<DeleteResponse> | undefined, b: DeleteResponse | PlainMessage<DeleteResponse> | undefined): boolean {
    return proto3.util.equals(DeleteResponse, a, b);
  }
}

/**
 * @generated from message api.v1.Function
 */
export class Function extends Message<Function> {
  constructor(data?: PartialMessage<Function>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Function";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Function {
    return new Function().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Function {
    return new Function().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Function {
    return new Function().fromJsonString(jsonString, options);
  }

  static equals(a: Function | PlainMessage<Function> | undefined, b: Function | PlainMessage<Function> | undefined): boolean {
    return proto3.util.equals(Function, a, b);
  }
}

/**
 * @generated from message api.v1.Function.Request
 */
export class Function_Request extends Message<Function_Request> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: repeated google.protobuf.Value parameters = 3;
   */
  parameters: Value[] = [];

  constructor(data?: PartialMessage<Function_Request>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Function.Request";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "parameters", kind: "message", T: Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Function_Request {
    return new Function_Request().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Function_Request {
    return new Function_Request().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Function_Request {
    return new Function_Request().fromJsonString(jsonString, options);
  }

  static equals(a: Function_Request | PlainMessage<Function_Request> | undefined, b: Function_Request | PlainMessage<Function_Request> | undefined): boolean {
    return proto3.util.equals(Function_Request, a, b);
  }
}

/**
 * @generated from message api.v1.Function.Response
 */
export class Function_Response extends Message<Function_Response> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.Value value = 2;
   */
  value?: Value;

  /**
   * @generated from field: common.v1.Error error = 3;
   */
  error?: Error;

  constructor(data?: PartialMessage<Function_Response>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Function.Response";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "message", T: Value },
    { no: 3, name: "error", kind: "message", T: Error },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Function_Response {
    return new Function_Response().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Function_Response {
    return new Function_Response().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Function_Response {
    return new Function_Response().fromJsonString(jsonString, options);
  }

  static equals(a: Function_Response | PlainMessage<Function_Response> | undefined, b: Function_Response | PlainMessage<Function_Response> | undefined): boolean {
    return proto3.util.equals(Function_Response, a, b);
  }
}

/**
 * @generated from message api.v1.TwoWayRequest
 */
export class TwoWayRequest extends Message<TwoWayRequest> {
  /**
   * @generated from oneof api.v1.TwoWayRequest.type
   */
  type: {
    /**
     * @generated from field: api.v1.ExecuteRequest execute = 1;
     */
    value: ExecuteRequest;
    case: "execute";
  } | {
    /**
     * @generated from field: api.v1.Function.Response function = 2;
     */
    value: Function_Response;
    case: "function";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<TwoWayRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TwoWayRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "execute", kind: "message", T: ExecuteRequest, oneof: "type" },
    { no: 2, name: "function", kind: "message", T: Function_Response, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TwoWayRequest {
    return new TwoWayRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TwoWayRequest {
    return new TwoWayRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TwoWayRequest {
    return new TwoWayRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TwoWayRequest | PlainMessage<TwoWayRequest> | undefined, b: TwoWayRequest | PlainMessage<TwoWayRequest> | undefined): boolean {
    return proto3.util.equals(TwoWayRequest, a, b);
  }
}

/**
 * @generated from message api.v1.TwoWayResponse
 */
export class TwoWayResponse extends Message<TwoWayResponse> {
  /**
   * @generated from oneof api.v1.TwoWayResponse.type
   */
  type: {
    /**
     * @generated from field: api.v1.StreamResponse stream = 1;
     */
    value: StreamResponse;
    case: "stream";
  } | {
    /**
     * @generated from field: api.v1.Function.Request function = 2;
     */
    value: Function_Request;
    case: "function";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<TwoWayResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.TwoWayResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream", kind: "message", T: StreamResponse, oneof: "type" },
    { no: 2, name: "function", kind: "message", T: Function_Request, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TwoWayResponse {
    return new TwoWayResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TwoWayResponse {
    return new TwoWayResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TwoWayResponse {
    return new TwoWayResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TwoWayResponse | PlainMessage<TwoWayResponse> | undefined, b: TwoWayResponse | PlainMessage<TwoWayResponse> | undefined): boolean {
    return proto3.util.equals(TwoWayResponse, a, b);
  }
}

/**
 * @generated from message api.v1.Mock
 */
export class Mock extends Message<Mock> {
  /**
   * @generated from field: api.v1.Mock.On on = 1;
   */
  on?: Mock_On;

  /**
   * @generated from field: api.v1.Mock.Return return = 2;
   */
  return?: Mock_Return;

  constructor(data?: PartialMessage<Mock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Mock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "on", kind: "message", T: Mock_On },
    { no: 2, name: "return", kind: "message", T: Mock_Return },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Mock {
    return new Mock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Mock {
    return new Mock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Mock {
    return new Mock().fromJsonString(jsonString, options);
  }

  static equals(a: Mock | PlainMessage<Mock> | undefined, b: Mock | PlainMessage<Mock> | undefined): boolean {
    return proto3.util.equals(Mock, a, b);
  }
}

/**
 * @generated from message api.v1.Mock.Params
 */
export class Mock_Params extends Message<Mock_Params> {
  /**
   * @generated from field: optional string integration_type = 1;
   */
  integrationType?: string;

  /**
   * @generated from field: optional string step_name = 2;
   */
  stepName?: string;

  /**
   * @generated from field: optional google.protobuf.Value inputs = 3;
   */
  inputs?: Value;

  constructor(data?: PartialMessage<Mock_Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Mock.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integration_type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "step_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "inputs", kind: "message", T: Value, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Mock_Params {
    return new Mock_Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Mock_Params {
    return new Mock_Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Mock_Params {
    return new Mock_Params().fromJsonString(jsonString, options);
  }

  static equals(a: Mock_Params | PlainMessage<Mock_Params> | undefined, b: Mock_Params | PlainMessage<Mock_Params> | undefined): boolean {
    return proto3.util.equals(Mock_Params, a, b);
  }
}

/**
 * @generated from message api.v1.Mock.On
 */
export class Mock_On extends Message<Mock_On> {
  /**
   * @generated from field: optional api.v1.Mock.Params static = 1;
   */
  static?: Mock_Params;

  /**
   * function name
   *
   * @generated from field: optional string dynamic = 2;
   */
  dynamic?: string;

  constructor(data?: PartialMessage<Mock_On>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Mock.On";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "static", kind: "message", T: Mock_Params, opt: true },
    { no: 2, name: "dynamic", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Mock_On {
    return new Mock_On().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Mock_On {
    return new Mock_On().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Mock_On {
    return new Mock_On().fromJsonString(jsonString, options);
  }

  static equals(a: Mock_On | PlainMessage<Mock_On> | undefined, b: Mock_On | PlainMessage<Mock_On> | undefined): boolean {
    return proto3.util.equals(Mock_On, a, b);
  }
}

/**
 * @generated from message api.v1.Mock.Return
 */
export class Mock_Return extends Message<Mock_Return> {
  /**
   * @generated from oneof api.v1.Mock.Return.type
   */
  type: {
    /**
     * @generated from field: google.protobuf.Value static = 1;
     */
    value: Value;
    case: "static";
  } | {
    /**
     * function name
     *
     * @generated from field: string dynamic = 2;
     */
    value: string;
    case: "dynamic";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Mock_Return>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Mock.Return";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "static", kind: "message", T: Value, oneof: "type" },
    { no: 2, name: "dynamic", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Mock_Return {
    return new Mock_Return().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Mock_Return {
    return new Mock_Return().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Mock_Return {
    return new Mock_Return().fromJsonString(jsonString, options);
  }

  static equals(a: Mock_Return | PlainMessage<Mock_Return> | undefined, b: Mock_Return | PlainMessage<Mock_Return> | undefined): boolean {
    return proto3.util.equals(Mock_Return, a, b);
  }
}

/**
 * DEPRECATED
 *
 * @generated from message api.v1.MetadataRequestDeprecated
 */
export class MetadataRequestDeprecated extends Message<MetadataRequestDeprecated> {
  /**
   * This is confusing, but integration means integration id
   *
   * @generated from field: string integration = 1;
   */
  integration = "";

  /**
   * @generated from field: string api_id = 2;
   */
  apiId = "";

  /**
   * @generated from field: common.v1.Profile profile = 3;
   */
  profile?: Profile;

  constructor(data?: PartialMessage<MetadataRequestDeprecated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MetadataRequestDeprecated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "api_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "profile", kind: "message", T: Profile },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataRequestDeprecated {
    return new MetadataRequestDeprecated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataRequestDeprecated {
    return new MetadataRequestDeprecated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataRequestDeprecated {
    return new MetadataRequestDeprecated().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataRequestDeprecated | PlainMessage<MetadataRequestDeprecated> | undefined, b: MetadataRequestDeprecated | PlainMessage<MetadataRequestDeprecated> | undefined): boolean {
    return proto3.util.equals(MetadataRequestDeprecated, a, b);
  }
}

/**
 * @generated from message api.v1.MetadataRequest
 */
export class MetadataRequest extends Message<MetadataRequest> {
  /**
   * The integration id
   *
   * @generated from field: string integration = 1;
   */
  integration = "";

  /**
   * @generated from field: common.v1.Profile profile = 2;
   */
  profile?: Profile;

  /**
   * @generated from field: google.protobuf.Struct step_configuration = 3;
   */
  stepConfiguration?: Struct;

  constructor(data?: PartialMessage<MetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MetadataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "profile", kind: "message", T: Profile },
    { no: 3, name: "step_configuration", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataRequest {
    return new MetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataRequest {
    return new MetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataRequest {
    return new MetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataRequest | PlainMessage<MetadataRequest> | undefined, b: MetadataRequest | PlainMessage<MetadataRequest> | undefined): boolean {
    return proto3.util.equals(MetadataRequest, a, b);
  }
}

/**
 * @generated from message api.v1.MetadataResponse
 */
export class MetadataResponse extends Message<MetadataResponse> {
  /**
   * @generated from oneof api.v1.MetadataResponse.metadata
   */
  metadata: {
    /**
     * @generated from field: api.v1.MetadataResponse.DatabaseSchemaMetadata database_schema_metadata = 1;
     */
    value: MetadataResponse_DatabaseSchemaMetadata;
    case: "databaseSchemaMetadata";
  } | {
    /**
     * @generated from field: api.v1.MetadataResponse.BucketsMetadata buckets_metadata = 2;
     */
    value: MetadataResponse_BucketsMetadata;
    case: "bucketsMetadata";
  } | {
    /**
     * @generated from field: plugins.kafka.v1.Metadata kafka = 3;
     */
    value: Metadata$1;
    case: "kafka";
  } | {
    /**
     * @generated from field: plugins.cosmosdb.v1.Plugin.Metadata cosmosdb = 4;
     */
    value: Plugin_Metadata;
    case: "cosmosdb";
  } | {
    /**
     * @generated from field: plugins.adls.v1.Plugin.Metadata adls = 5;
     */
    value: Plugin_Metadata$1;
    case: "adls";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: string g_sheets_next_page_token = 6;
   */
  gSheetsNextPageToken = "";

  constructor(data?: PartialMessage<MetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "database_schema_metadata", kind: "message", T: MetadataResponse_DatabaseSchemaMetadata, oneof: "metadata" },
    { no: 2, name: "buckets_metadata", kind: "message", T: MetadataResponse_BucketsMetadata, oneof: "metadata" },
    { no: 3, name: "kafka", kind: "message", T: Metadata$1, oneof: "metadata" },
    { no: 4, name: "cosmosdb", kind: "message", T: Plugin_Metadata, oneof: "metadata" },
    { no: 5, name: "adls", kind: "message", T: Plugin_Metadata$1, oneof: "metadata" },
    { no: 6, name: "g_sheets_next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataResponse {
    return new MetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataResponse {
    return new MetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataResponse {
    return new MetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataResponse | PlainMessage<MetadataResponse> | undefined, b: MetadataResponse | PlainMessage<MetadataResponse> | undefined): boolean {
    return proto3.util.equals(MetadataResponse, a, b);
  }
}

/**
 * @generated from message api.v1.MetadataResponse.DatabaseSchemaMetadata
 */
export class MetadataResponse_DatabaseSchemaMetadata extends Message<MetadataResponse_DatabaseSchemaMetadata> {
  /**
   * @generated from field: repeated api.v1.MetadataResponse.DatabaseSchemaMetadata.Table tables = 1;
   */
  tables: MetadataResponse_DatabaseSchemaMetadata_Table[] = [];

  /**
   * NOTE: (joey) this is optional in the TS version of this model. should be here as well
   *
   * @generated from field: repeated api.v1.MetadataResponse.DatabaseSchemaMetadata.Schema schemas = 2;
   */
  schemas: MetadataResponse_DatabaseSchemaMetadata_Schema[] = [];

  constructor(data?: PartialMessage<MetadataResponse_DatabaseSchemaMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MetadataResponse.DatabaseSchemaMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tables", kind: "message", T: MetadataResponse_DatabaseSchemaMetadata_Table, repeated: true },
    { no: 2, name: "schemas", kind: "message", T: MetadataResponse_DatabaseSchemaMetadata_Schema, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataResponse_DatabaseSchemaMetadata {
    return new MetadataResponse_DatabaseSchemaMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataResponse_DatabaseSchemaMetadata {
    return new MetadataResponse_DatabaseSchemaMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataResponse_DatabaseSchemaMetadata {
    return new MetadataResponse_DatabaseSchemaMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataResponse_DatabaseSchemaMetadata | PlainMessage<MetadataResponse_DatabaseSchemaMetadata> | undefined, b: MetadataResponse_DatabaseSchemaMetadata | PlainMessage<MetadataResponse_DatabaseSchemaMetadata> | undefined): boolean {
    return proto3.util.equals(MetadataResponse_DatabaseSchemaMetadata, a, b);
  }
}

/**
 * @generated from message api.v1.MetadataResponse.DatabaseSchemaMetadata.Column
 */
export class MetadataResponse_DatabaseSchemaMetadata_Column extends Message<MetadataResponse_DatabaseSchemaMetadata_Column> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: string escaped_name = 3;
   */
  escapedName = "";

  constructor(data?: PartialMessage<MetadataResponse_DatabaseSchemaMetadata_Column>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MetadataResponse.DatabaseSchemaMetadata.Column";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "escaped_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataResponse_DatabaseSchemaMetadata_Column {
    return new MetadataResponse_DatabaseSchemaMetadata_Column().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataResponse_DatabaseSchemaMetadata_Column {
    return new MetadataResponse_DatabaseSchemaMetadata_Column().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataResponse_DatabaseSchemaMetadata_Column {
    return new MetadataResponse_DatabaseSchemaMetadata_Column().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataResponse_DatabaseSchemaMetadata_Column | PlainMessage<MetadataResponse_DatabaseSchemaMetadata_Column> | undefined, b: MetadataResponse_DatabaseSchemaMetadata_Column | PlainMessage<MetadataResponse_DatabaseSchemaMetadata_Column> | undefined): boolean {
    return proto3.util.equals(MetadataResponse_DatabaseSchemaMetadata_Column, a, b);
  }
}

/**
 * @generated from message api.v1.MetadataResponse.DatabaseSchemaMetadata.Key
 */
export class MetadataResponse_DatabaseSchemaMetadata_Key extends Message<MetadataResponse_DatabaseSchemaMetadata_Key> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: repeated string columns = 3;
   */
  columns: string[] = [];

  constructor(data?: PartialMessage<MetadataResponse_DatabaseSchemaMetadata_Key>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MetadataResponse.DatabaseSchemaMetadata.Key";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "columns", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataResponse_DatabaseSchemaMetadata_Key {
    return new MetadataResponse_DatabaseSchemaMetadata_Key().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataResponse_DatabaseSchemaMetadata_Key {
    return new MetadataResponse_DatabaseSchemaMetadata_Key().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataResponse_DatabaseSchemaMetadata_Key {
    return new MetadataResponse_DatabaseSchemaMetadata_Key().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataResponse_DatabaseSchemaMetadata_Key | PlainMessage<MetadataResponse_DatabaseSchemaMetadata_Key> | undefined, b: MetadataResponse_DatabaseSchemaMetadata_Key | PlainMessage<MetadataResponse_DatabaseSchemaMetadata_Key> | undefined): boolean {
    return proto3.util.equals(MetadataResponse_DatabaseSchemaMetadata_Key, a, b);
  }
}

/**
 * @generated from message api.v1.MetadataResponse.DatabaseSchemaMetadata.Template
 */
export class MetadataResponse_DatabaseSchemaMetadata_Template extends Message<MetadataResponse_DatabaseSchemaMetadata_Template> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string body = 2;
   */
  body = "";

  constructor(data?: PartialMessage<MetadataResponse_DatabaseSchemaMetadata_Template>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MetadataResponse.DatabaseSchemaMetadata.Template";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataResponse_DatabaseSchemaMetadata_Template {
    return new MetadataResponse_DatabaseSchemaMetadata_Template().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataResponse_DatabaseSchemaMetadata_Template {
    return new MetadataResponse_DatabaseSchemaMetadata_Template().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataResponse_DatabaseSchemaMetadata_Template {
    return new MetadataResponse_DatabaseSchemaMetadata_Template().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataResponse_DatabaseSchemaMetadata_Template | PlainMessage<MetadataResponse_DatabaseSchemaMetadata_Template> | undefined, b: MetadataResponse_DatabaseSchemaMetadata_Template | PlainMessage<MetadataResponse_DatabaseSchemaMetadata_Template> | undefined): boolean {
    return proto3.util.equals(MetadataResponse_DatabaseSchemaMetadata_Template, a, b);
  }
}

/**
 * @generated from message api.v1.MetadataResponse.DatabaseSchemaMetadata.Table
 */
export class MetadataResponse_DatabaseSchemaMetadata_Table extends Message<MetadataResponse_DatabaseSchemaMetadata_Table> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: repeated api.v1.MetadataResponse.DatabaseSchemaMetadata.Column columns = 4;
   */
  columns: MetadataResponse_DatabaseSchemaMetadata_Column[] = [];

  /**
   * @generated from field: repeated api.v1.MetadataResponse.DatabaseSchemaMetadata.Key keys = 5;
   */
  keys: MetadataResponse_DatabaseSchemaMetadata_Key[] = [];

  /**
   * @generated from field: repeated api.v1.MetadataResponse.DatabaseSchemaMetadata.Template templates = 6;
   */
  templates: MetadataResponse_DatabaseSchemaMetadata_Template[] = [];

  /**
   * NOTE: (joey) this is optional in the TS version of this model. should be here as well
   *
   * @generated from field: string schema = 7;
   */
  schema = "";

  constructor(data?: PartialMessage<MetadataResponse_DatabaseSchemaMetadata_Table>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MetadataResponse.DatabaseSchemaMetadata.Table";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "columns", kind: "message", T: MetadataResponse_DatabaseSchemaMetadata_Column, repeated: true },
    { no: 5, name: "keys", kind: "message", T: MetadataResponse_DatabaseSchemaMetadata_Key, repeated: true },
    { no: 6, name: "templates", kind: "message", T: MetadataResponse_DatabaseSchemaMetadata_Template, repeated: true },
    { no: 7, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataResponse_DatabaseSchemaMetadata_Table {
    return new MetadataResponse_DatabaseSchemaMetadata_Table().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataResponse_DatabaseSchemaMetadata_Table {
    return new MetadataResponse_DatabaseSchemaMetadata_Table().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataResponse_DatabaseSchemaMetadata_Table {
    return new MetadataResponse_DatabaseSchemaMetadata_Table().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataResponse_DatabaseSchemaMetadata_Table | PlainMessage<MetadataResponse_DatabaseSchemaMetadata_Table> | undefined, b: MetadataResponse_DatabaseSchemaMetadata_Table | PlainMessage<MetadataResponse_DatabaseSchemaMetadata_Table> | undefined): boolean {
    return proto3.util.equals(MetadataResponse_DatabaseSchemaMetadata_Table, a, b);
  }
}

/**
 * @generated from message api.v1.MetadataResponse.DatabaseSchemaMetadata.Schema
 */
export class MetadataResponse_DatabaseSchemaMetadata_Schema extends Message<MetadataResponse_DatabaseSchemaMetadata_Schema> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<MetadataResponse_DatabaseSchemaMetadata_Schema>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MetadataResponse.DatabaseSchemaMetadata.Schema";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataResponse_DatabaseSchemaMetadata_Schema {
    return new MetadataResponse_DatabaseSchemaMetadata_Schema().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataResponse_DatabaseSchemaMetadata_Schema {
    return new MetadataResponse_DatabaseSchemaMetadata_Schema().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataResponse_DatabaseSchemaMetadata_Schema {
    return new MetadataResponse_DatabaseSchemaMetadata_Schema().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataResponse_DatabaseSchemaMetadata_Schema | PlainMessage<MetadataResponse_DatabaseSchemaMetadata_Schema> | undefined, b: MetadataResponse_DatabaseSchemaMetadata_Schema | PlainMessage<MetadataResponse_DatabaseSchemaMetadata_Schema> | undefined): boolean {
    return proto3.util.equals(MetadataResponse_DatabaseSchemaMetadata_Schema, a, b);
  }
}

/**
 * @generated from message api.v1.MetadataResponse.BucketMetadata
 */
export class MetadataResponse_BucketMetadata extends Message<MetadataResponse_BucketMetadata> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<MetadataResponse_BucketMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MetadataResponse.BucketMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataResponse_BucketMetadata {
    return new MetadataResponse_BucketMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataResponse_BucketMetadata {
    return new MetadataResponse_BucketMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataResponse_BucketMetadata {
    return new MetadataResponse_BucketMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataResponse_BucketMetadata | PlainMessage<MetadataResponse_BucketMetadata> | undefined, b: MetadataResponse_BucketMetadata | PlainMessage<MetadataResponse_BucketMetadata> | undefined): boolean {
    return proto3.util.equals(MetadataResponse_BucketMetadata, a, b);
  }
}

/**
 * @generated from message api.v1.MetadataResponse.BucketsMetadata
 */
export class MetadataResponse_BucketsMetadata extends Message<MetadataResponse_BucketsMetadata> {
  /**
   * @generated from field: repeated api.v1.MetadataResponse.BucketMetadata buckets = 1;
   */
  buckets: MetadataResponse_BucketMetadata[] = [];

  constructor(data?: PartialMessage<MetadataResponse_BucketsMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MetadataResponse.BucketsMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "buckets", kind: "message", T: MetadataResponse_BucketMetadata, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataResponse_BucketsMetadata {
    return new MetadataResponse_BucketsMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataResponse_BucketsMetadata {
    return new MetadataResponse_BucketsMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataResponse_BucketsMetadata {
    return new MetadataResponse_BucketsMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: MetadataResponse_BucketsMetadata | PlainMessage<MetadataResponse_BucketsMetadata> | undefined, b: MetadataResponse_BucketsMetadata | PlainMessage<MetadataResponse_BucketsMetadata> | undefined): boolean {
    return proto3.util.equals(MetadataResponse_BucketsMetadata, a, b);
  }
}

/**
 * @generated from message api.v1.DownloadRequest
 */
export class DownloadRequest extends Message<DownloadRequest> {
  /**
   * @generated from field: string location = 1;
   */
  location = "";

  constructor(data?: PartialMessage<DownloadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.DownloadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownloadRequest {
    return new DownloadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownloadRequest {
    return new DownloadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownloadRequest {
    return new DownloadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DownloadRequest | PlainMessage<DownloadRequest> | undefined, b: DownloadRequest | PlainMessage<DownloadRequest> | undefined): boolean {
    return proto3.util.equals(DownloadRequest, a, b);
  }
}

/**
 * @generated from message api.v1.DownloadResponse
 */
export class DownloadResponse extends Message<DownloadResponse> {
  /**
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<DownloadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.DownloadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownloadResponse {
    return new DownloadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownloadResponse {
    return new DownloadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownloadResponse {
    return new DownloadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DownloadResponse | PlainMessage<DownloadResponse> | undefined, b: DownloadResponse | PlainMessage<DownloadResponse> | undefined): boolean {
    return proto3.util.equals(DownloadResponse, a, b);
  }
}

/**
 *
 * DEPRECATED
 *
 * @generated from message api.v1.WorkflowResponse
 */
export class WorkflowResponse extends Message<WorkflowResponse> {
  /**
   * @generated from field: google.protobuf.Value data = 1;
   */
  data?: Value;

  /**
   * @generated from field: api.v1.WorkflowResponse.ResponseMeta response_meta = 2;
   */
  responseMeta?: WorkflowResponse_ResponseMeta;

  constructor(data?: PartialMessage<WorkflowResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.WorkflowResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Value },
    { no: 2, name: "response_meta", kind: "message", T: WorkflowResponse_ResponseMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowResponse {
    return new WorkflowResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowResponse {
    return new WorkflowResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowResponse {
    return new WorkflowResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowResponse | PlainMessage<WorkflowResponse> | undefined, b: WorkflowResponse | PlainMessage<WorkflowResponse> | undefined): boolean {
    return proto3.util.equals(WorkflowResponse, a, b);
  }
}

/**
 * @generated from message api.v1.WorkflowResponse.ResponseMeta
 */
export class WorkflowResponse_ResponseMeta extends Message<WorkflowResponse_ResponseMeta> {
  /**
   * @generated from field: int32 status = 1;
   */
  status = 0;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * NOTE(frank): I'm omitting the timing. This may not be good. I'll revisit.
   *
   * @generated from field: bool success = 3;
   */
  success = false;

  constructor(data?: PartialMessage<WorkflowResponse_ResponseMeta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.WorkflowResponse.ResponseMeta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowResponse_ResponseMeta {
    return new WorkflowResponse_ResponseMeta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowResponse_ResponseMeta {
    return new WorkflowResponse_ResponseMeta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowResponse_ResponseMeta {
    return new WorkflowResponse_ResponseMeta().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowResponse_ResponseMeta | PlainMessage<WorkflowResponse_ResponseMeta> | undefined, b: WorkflowResponse_ResponseMeta | PlainMessage<WorkflowResponse_ResponseMeta> | undefined): boolean {
    return proto3.util.equals(WorkflowResponse_ResponseMeta, a, b);
  }
}

