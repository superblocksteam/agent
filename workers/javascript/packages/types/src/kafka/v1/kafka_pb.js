"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kafka/v1/kafka.proto (package kafka.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationMetadataEvent_Upsert = exports.IntegrationMetadataEvent = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * @generated from message kafka.v1.IntegrationMetadataEvent
 */
class IntegrationMetadataEvent extends protobuf_1.Message {
    /**
     * @generated from oneof kafka.v1.IntegrationMetadataEvent.event
     */
    event = { case: undefined };
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "kafka.v1.IntegrationMetadataEvent";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "upsert", kind: "message", T: IntegrationMetadataEvent_Upsert, oneof: "event" },
    ]);
    static fromBinary(bytes, options) {
        return new IntegrationMetadataEvent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IntegrationMetadataEvent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IntegrationMetadataEvent().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(IntegrationMetadataEvent, a, b);
    }
}
exports.IntegrationMetadataEvent = IntegrationMetadataEvent;
/**
 * @generated from message kafka.v1.IntegrationMetadataEvent.Upsert
 */
class IntegrationMetadataEvent_Upsert extends protobuf_1.Message {
    /**
     * @generated from field: google.protobuf.Struct datasource_configuration = 1;
     */
    datasourceConfiguration;
    /**
     * @generated from field: string integration_id = 2;
     */
    integrationId = "";
    /**
     * @generated from field: string configuration_id = 3;
     */
    configurationId = "";
    /**
     * @generated from field: string integration_type = 4;
     */
    integrationType = "";
    /**
     * @generated from field: string organization_id = 5;
     */
    organizationId = "";
    /**
     * @generated from field: string schema_version = 6;
     */
    schemaVersion = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "kafka.v1.IntegrationMetadataEvent.Upsert";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "datasource_configuration", kind: "message", T: protobuf_1.Struct },
        { no: 2, name: "integration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "configuration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "integration_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 6, name: "schema_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new IntegrationMetadataEvent_Upsert().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IntegrationMetadataEvent_Upsert().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IntegrationMetadataEvent_Upsert().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(IntegrationMetadataEvent_Upsert, a, b);
    }
}
exports.IntegrationMetadataEvent_Upsert = IntegrationMetadataEvent_Upsert;
//# sourceMappingURL=kafka_pb.map