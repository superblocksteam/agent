// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file kafka/v1/kafka.proto (package kafka.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct } from "@bufbuild/protobuf";

/**
 * @generated from message kafka.v1.IntegrationMetadataEvent
 */
export class IntegrationMetadataEvent extends Message<IntegrationMetadataEvent> {
  /**
   * @generated from oneof kafka.v1.IntegrationMetadataEvent.event
   */
  event: {
    /**
     * @generated from field: kafka.v1.IntegrationMetadataEvent.Upsert upsert = 1;
     */
    value: IntegrationMetadataEvent_Upsert;
    case: "upsert";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<IntegrationMetadataEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kafka.v1.IntegrationMetadataEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "upsert", kind: "message", T: IntegrationMetadataEvent_Upsert, oneof: "event" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntegrationMetadataEvent {
    return new IntegrationMetadataEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntegrationMetadataEvent {
    return new IntegrationMetadataEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntegrationMetadataEvent {
    return new IntegrationMetadataEvent().fromJsonString(jsonString, options);
  }

  static equals(a: IntegrationMetadataEvent | PlainMessage<IntegrationMetadataEvent> | undefined, b: IntegrationMetadataEvent | PlainMessage<IntegrationMetadataEvent> | undefined): boolean {
    return proto3.util.equals(IntegrationMetadataEvent, a, b);
  }
}

/**
 * @generated from message kafka.v1.IntegrationMetadataEvent.Upsert
 */
export class IntegrationMetadataEvent_Upsert extends Message<IntegrationMetadataEvent_Upsert> {
  /**
   * @generated from field: google.protobuf.Struct datasource_configuration = 1;
   */
  datasourceConfiguration?: Struct;

  /**
   * @generated from field: string integration_id = 2;
   */
  integrationId = "";

  /**
   * @generated from field: string configuration_id = 3;
   */
  configurationId = "";

  /**
   * @generated from field: string integration_type = 4;
   */
  integrationType = "";

  /**
   * @generated from field: string organization_id = 5;
   */
  organizationId = "";

  /**
   * @generated from field: string schema_version = 6;
   */
  schemaVersion = "";

  constructor(data?: PartialMessage<IntegrationMetadataEvent_Upsert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kafka.v1.IntegrationMetadataEvent.Upsert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "datasource_configuration", kind: "message", T: Struct },
    { no: 2, name: "integration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "configuration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "integration_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "schema_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntegrationMetadataEvent_Upsert {
    return new IntegrationMetadataEvent_Upsert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntegrationMetadataEvent_Upsert {
    return new IntegrationMetadataEvent_Upsert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntegrationMetadataEvent_Upsert {
    return new IntegrationMetadataEvent_Upsert().fromJsonString(jsonString, options);
  }

  static equals(a: IntegrationMetadataEvent_Upsert | PlainMessage<IntegrationMetadataEvent_Upsert> | undefined, b: IntegrationMetadataEvent_Upsert | PlainMessage<IntegrationMetadataEvent_Upsert> | undefined): boolean {
    return proto3.util.equals(IntegrationMetadataEvent_Upsert, a, b);
  }
}

