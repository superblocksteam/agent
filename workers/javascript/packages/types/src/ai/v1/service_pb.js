"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ai/v1/service.proto (package ai.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskEvent = exports.CreateTaskRequest = exports.Overrides = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const ai_pb_1 = require("./ai_pb");
/**
 * @generated from message ai.v1.Overrides
 */
class Overrides extends protobuf_1.Message {
    /**
     * @generated from field: ai.v1.LLM llm = 1;
     */
    llm = ai_pb_1.LLM.LLM_UNSPECIFIED;
    /**
     * @generated from field: ai.v1.MODEL model = 2;
     */
    model = ai_pb_1.MODEL.MODEL_UNSPECIFIED;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "ai.v1.Overrides";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "llm", kind: "enum", T: protobuf_1.proto3.getEnumType(ai_pb_1.LLM) },
        { no: 2, name: "model", kind: "enum", T: protobuf_1.proto3.getEnumType(ai_pb_1.MODEL) },
    ]);
    static fromBinary(bytes, options) {
        return new Overrides().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Overrides().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Overrides().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Overrides, a, b);
    }
}
exports.Overrides = Overrides;
/**
 * @generated from message ai.v1.CreateTaskRequest
 */
class CreateTaskRequest extends protobuf_1.Message {
    /**
     * @generated from field: ai.v1.Task task = 1;
     */
    task;
    /**
     * @generated from field: ai.v1.Overrides overrides = 2;
     */
    overrides;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "ai.v1.CreateTaskRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "task", kind: "message", T: ai_pb_1.Task },
        { no: 2, name: "overrides", kind: "message", T: Overrides },
    ]);
    static fromBinary(bytes, options) {
        return new CreateTaskRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CreateTaskRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CreateTaskRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CreateTaskRequest, a, b);
    }
}
exports.CreateTaskRequest = CreateTaskRequest;
/**
 * NOTE(frank): I'm considering having two event types. I'm not sure how I feel about sending
 * inforamation that doesn't need to be sent every message in every message (i.e. id). Rather,
 * we could send a "hello" event at the beginning with any metadata.
 *
 * @generated from message ai.v1.TaskEvent
 */
class TaskEvent extends protobuf_1.Message {
    /**
     * @generated from field: string chunk = 1;
     */
    chunk = "";
    /**
     * @generated from field: ai.v1.LLM llm = 2;
     */
    llm = ai_pb_1.LLM.LLM_UNSPECIFIED;
    /**
     * @generated from field: ai.v1.MODEL model = 3;
     */
    model = ai_pb_1.MODEL.MODEL_UNSPECIFIED;
    /**
     * @generated from field: string id = 4;
     */
    id = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "ai.v1.TaskEvent";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "chunk", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "llm", kind: "enum", T: protobuf_1.proto3.getEnumType(ai_pb_1.LLM) },
        { no: 3, name: "model", kind: "enum", T: protobuf_1.proto3.getEnumType(ai_pb_1.MODEL) },
        { no: 4, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new TaskEvent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TaskEvent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TaskEvent().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TaskEvent, a, b);
    }
}
exports.TaskEvent = TaskEvent;
//# sourceMappingURL=service_pb.map