// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ai/v1/service.proto (package ai.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { LLM, MODEL, Task } from "./ai_pb";

/**
 * @generated from message ai.v1.Overrides
 */
export class Overrides extends Message<Overrides> {
  /**
   * @generated from field: ai.v1.LLM llm = 1;
   */
  llm = LLM.LLM_UNSPECIFIED;

  /**
   * @generated from field: ai.v1.MODEL model = 2;
   */
  model = MODEL.MODEL_UNSPECIFIED;

  constructor(data?: PartialMessage<Overrides>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ai.v1.Overrides";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "llm", kind: "enum", T: proto3.getEnumType(LLM) },
    { no: 2, name: "model", kind: "enum", T: proto3.getEnumType(MODEL) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Overrides {
    return new Overrides().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Overrides {
    return new Overrides().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Overrides {
    return new Overrides().fromJsonString(jsonString, options);
  }

  static equals(a: Overrides | PlainMessage<Overrides> | undefined, b: Overrides | PlainMessage<Overrides> | undefined): boolean {
    return proto3.util.equals(Overrides, a, b);
  }
}

/**
 * @generated from message ai.v1.CreateTaskRequest
 */
export class CreateTaskRequest extends Message<CreateTaskRequest> {
  /**
   * @generated from field: ai.v1.Task task = 1;
   */
  task?: Task;

  /**
   * @generated from field: ai.v1.Overrides overrides = 2;
   */
  overrides?: Overrides;

  constructor(data?: PartialMessage<CreateTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ai.v1.CreateTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task", kind: "message", T: Task },
    { no: 2, name: "overrides", kind: "message", T: Overrides },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTaskRequest {
    return new CreateTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTaskRequest {
    return new CreateTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTaskRequest {
    return new CreateTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTaskRequest | PlainMessage<CreateTaskRequest> | undefined, b: CreateTaskRequest | PlainMessage<CreateTaskRequest> | undefined): boolean {
    return proto3.util.equals(CreateTaskRequest, a, b);
  }
}

/**
 * NOTE(frank): I'm considering having two event types. I'm not sure how I feel about sending
 * inforamation that doesn't need to be sent every message in every message (i.e. id). Rather,
 * we could send a "hello" event at the beginning with any metadata.
 *
 * @generated from message ai.v1.TaskEvent
 */
export class TaskEvent extends Message<TaskEvent> {
  /**
   * @generated from field: string chunk = 1;
   */
  chunk = "";

  /**
   * @generated from field: ai.v1.LLM llm = 2;
   */
  llm = LLM.LLM_UNSPECIFIED;

  /**
   * @generated from field: ai.v1.MODEL model = 3;
   */
  model = MODEL.MODEL_UNSPECIFIED;

  /**
   * @generated from field: string id = 4;
   */
  id = "";

  constructor(data?: PartialMessage<TaskEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ai.v1.TaskEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chunk", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "llm", kind: "enum", T: proto3.getEnumType(LLM) },
    { no: 3, name: "model", kind: "enum", T: proto3.getEnumType(MODEL) },
    { no: 4, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskEvent {
    return new TaskEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskEvent {
    return new TaskEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskEvent {
    return new TaskEvent().fromJsonString(jsonString, options);
  }

  static equals(a: TaskEvent | PlainMessage<TaskEvent> | undefined, b: TaskEvent | PlainMessage<TaskEvent> | undefined): boolean {
    return proto3.util.equals(TaskEvent, a, b);
  }
}

