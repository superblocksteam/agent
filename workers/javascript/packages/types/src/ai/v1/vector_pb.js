"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ai/v1/vector.proto (package ai.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.Vector = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * @generated from message ai.v1.Vector
 */
class Vector extends protobuf_1.Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: repeated float values = 2;
     */
    values = [];
    /**
     * @generated from field: google.protobuf.Struct metadata = 3;
     */
    metadata;
    /**
     * @generated from field: optional float score = 4;
     */
    score;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "ai.v1.Vector";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "values", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
        { no: 3, name: "metadata", kind: "message", T: protobuf_1.Struct },
        { no: 4, name: "score", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Vector().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Vector().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Vector().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Vector, a, b);
    }
}
exports.Vector = Vector;
//# sourceMappingURL=vector_pb.map