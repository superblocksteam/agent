// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ai/v1/ai.proto (package ai.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message as Message$1, proto3, Struct } from "@bufbuild/protobuf";
import { StringList } from "../../common/v1/utils_pb";
import { Language } from "../../common/v1/language_pb";

/**
 * @generated from enum ai.v1.LLM
 */
export enum LLM {
  /**
   * @generated from enum value: LLM_UNSPECIFIED = 0;
   */
  LLM_UNSPECIFIED = 0,

  /**
   * @generated from enum value: LLM_OPENAI = 1;
   */
  LLM_OPENAI = 1,

  /**
   * @generated from enum value: LLM_ANTHROPIC = 2;
   */
  LLM_ANTHROPIC = 2,

  /**
   * @generated from enum value: LLM_MOCK = 3;
   */
  LLM_MOCK = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(LLM)
proto3.util.setEnumType(LLM, "ai.v1.LLM", [
  { no: 0, name: "LLM_UNSPECIFIED" },
  { no: 1, name: "LLM_OPENAI" },
  { no: 2, name: "LLM_ANTHROPIC" },
  { no: 3, name: "LLM_MOCK" },
]);

/**
 * @generated from enum ai.v1.MODEL
 */
export enum MODEL {
  /**
   * @generated from enum value: MODEL_UNSPECIFIED = 0;
   */
  MODEL_UNSPECIFIED = 0,

  /**
   * @generated from enum value: MODEL_ANTHROPIC_CLAUDE_V1 = 1;
   */
  MODEL_ANTHROPIC_CLAUDE_V1 = 1,

  /**
   * @generated from enum value: MODEL_ANTHROPIC_CLAUDE_V1_0 = 2;
   */
  MODEL_ANTHROPIC_CLAUDE_V1_0 = 2,

  /**
   * @generated from enum value: MODEL_ANTHROPIC_CLAUDE_V1_2 = 3;
   */
  MODEL_ANTHROPIC_CLAUDE_V1_2 = 3,

  /**
   * @generated from enum value: MODEL_ANTHROPIC_CLAUDE_INSTANT_V1 = 4;
   */
  MODEL_ANTHROPIC_CLAUDE_INSTANT_V1 = 4,

  /**
   * @generated from enum value: MODEL_ANTHROPIC_CLAUDE_INSTANT_V1_0 = 5;
   */
  MODEL_ANTHROPIC_CLAUDE_INSTANT_V1_0 = 5,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT432K0314 = 6;
   */
  MODEL_OPENAI_GPT432K0314 = 6,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT432K0613 = 26;
   */
  MODEL_OPENAI_GPT432K0613 = 26,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT432K = 7;
   */
  MODEL_OPENAI_GPT432K = 7,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT40314 = 8;
   */
  MODEL_OPENAI_GPT40314 = 8,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT40613 = 27;
   */
  MODEL_OPENAI_GPT40613 = 27,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT4 = 9;
   */
  MODEL_OPENAI_GPT4 = 9,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT3_5_TURBO_0301 = 10;
   */
  MODEL_OPENAI_GPT3_5_TURBO_0301 = 10,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT3_5_TURBO_0613 = 28;
   */
  MODEL_OPENAI_GPT3_5_TURBO_0613 = 28,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT3_5_TURBO = 11;
   */
  MODEL_OPENAI_GPT3_5_TURBO = 11,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT3_5_TURBO_16K = 29;
   */
  MODEL_OPENAI_GPT3_5_TURBO_16K = 29,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT3_5_TURBO_16K_0613 = 30;
   */
  MODEL_OPENAI_GPT3_5_TURBO_16K_0613 = 30,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT3_TEXT_DAVINCI_003 = 12;
   */
  MODEL_OPENAI_GPT3_TEXT_DAVINCI_003 = 12,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT3_TEXT_DAVINCI_002 = 13;
   */
  MODEL_OPENAI_GPT3_TEXT_DAVINCI_002 = 13,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT3_TEXT_CURIE_001 = 14;
   */
  MODEL_OPENAI_GPT3_TEXT_CURIE_001 = 14,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT3_TEXT_BAGGAGE_001 = 15;
   */
  MODEL_OPENAI_GPT3_TEXT_BAGGAGE_001 = 15,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT3_TEXT_ADA_001 = 16;
   */
  MODEL_OPENAI_GPT3_TEXT_ADA_001 = 16,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT3_TEXT_DAVINCI_001 = 17;
   */
  MODEL_OPENAI_GPT3_TEXT_DAVINCI_001 = 17,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT3_DAVINCI_INSTRUCT_BETA = 18;
   */
  MODEL_OPENAI_GPT3_DAVINCI_INSTRUCT_BETA = 18,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT3_DAVINCI = 19;
   */
  MODEL_OPENAI_GPT3_DAVINCI = 19,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT3_CURIE_INSTRUCT_BETA = 20;
   */
  MODEL_OPENAI_GPT3_CURIE_INSTRUCT_BETA = 20,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT3_CURIE = 21;
   */
  MODEL_OPENAI_GPT3_CURIE = 21,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT3_ADA = 22;
   */
  MODEL_OPENAI_GPT3_ADA = 22,

  /**
   * @generated from enum value: MODEL_OPENAI_GPT3_BAGGAGE = 23;
   */
  MODEL_OPENAI_GPT3_BAGGAGE = 23,

  /**
   * @generated from enum value: MODEL_MOCK_TIER_ONE = 24;
   */
  MODEL_MOCK_TIER_ONE = 24,

  /**
   * @generated from enum value: MODEL_MOCK_TIER_TWO = 25;
   */
  MODEL_MOCK_TIER_TWO = 25,
}
// Retrieve enum metadata with: proto3.getEnumType(MODEL)
proto3.util.setEnumType(MODEL, "ai.v1.MODEL", [
  { no: 0, name: "MODEL_UNSPECIFIED" },
  { no: 1, name: "MODEL_ANTHROPIC_CLAUDE_V1" },
  { no: 2, name: "MODEL_ANTHROPIC_CLAUDE_V1_0" },
  { no: 3, name: "MODEL_ANTHROPIC_CLAUDE_V1_2" },
  { no: 4, name: "MODEL_ANTHROPIC_CLAUDE_INSTANT_V1" },
  { no: 5, name: "MODEL_ANTHROPIC_CLAUDE_INSTANT_V1_0" },
  { no: 6, name: "MODEL_OPENAI_GPT432K0314" },
  { no: 26, name: "MODEL_OPENAI_GPT432K0613" },
  { no: 7, name: "MODEL_OPENAI_GPT432K" },
  { no: 8, name: "MODEL_OPENAI_GPT40314" },
  { no: 27, name: "MODEL_OPENAI_GPT40613" },
  { no: 9, name: "MODEL_OPENAI_GPT4" },
  { no: 10, name: "MODEL_OPENAI_GPT3_5_TURBO_0301" },
  { no: 28, name: "MODEL_OPENAI_GPT3_5_TURBO_0613" },
  { no: 11, name: "MODEL_OPENAI_GPT3_5_TURBO" },
  { no: 29, name: "MODEL_OPENAI_GPT3_5_TURBO_16K" },
  { no: 30, name: "MODEL_OPENAI_GPT3_5_TURBO_16K_0613" },
  { no: 12, name: "MODEL_OPENAI_GPT3_TEXT_DAVINCI_003" },
  { no: 13, name: "MODEL_OPENAI_GPT3_TEXT_DAVINCI_002" },
  { no: 14, name: "MODEL_OPENAI_GPT3_TEXT_CURIE_001" },
  { no: 15, name: "MODEL_OPENAI_GPT3_TEXT_BAGGAGE_001" },
  { no: 16, name: "MODEL_OPENAI_GPT3_TEXT_ADA_001" },
  { no: 17, name: "MODEL_OPENAI_GPT3_TEXT_DAVINCI_001" },
  { no: 18, name: "MODEL_OPENAI_GPT3_DAVINCI_INSTRUCT_BETA" },
  { no: 19, name: "MODEL_OPENAI_GPT3_DAVINCI" },
  { no: 20, name: "MODEL_OPENAI_GPT3_CURIE_INSTRUCT_BETA" },
  { no: 21, name: "MODEL_OPENAI_GPT3_CURIE" },
  { no: 22, name: "MODEL_OPENAI_GPT3_ADA" },
  { no: 23, name: "MODEL_OPENAI_GPT3_BAGGAGE" },
  { no: 24, name: "MODEL_MOCK_TIER_ONE" },
  { no: 25, name: "MODEL_MOCK_TIER_TWO" },
]);

/**
 * @generated from enum ai.v1.Role
 */
export enum Role {
  /**
   * @generated from enum value: ROLE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ROLE_USER = 1;
   */
  USER = 1,

  /**
   * @generated from enum value: ROLE_ASSISTANT = 2;
   */
  ASSISTANT = 2,

  /**
   * @generated from enum value: ROLE_SYSTEM = 3;
   */
  SYSTEM = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Role)
proto3.util.setEnumType(Role, "ai.v1.Role", [
  { no: 0, name: "ROLE_UNSPECIFIED" },
  { no: 1, name: "ROLE_USER" },
  { no: 2, name: "ROLE_ASSISTANT" },
  { no: 3, name: "ROLE_SYSTEM" },
]);

/**
 * NOTE(frank): I guess these could just be in the Lnaguage enum.
 *
 * @generated from enum ai.v1.Syntax
 */
export enum Syntax {
  /**
   * @generated from enum value: SYNTAX_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SYNTAX_JAVASCRIPT = 1;
   */
  JAVASCRIPT = 1,

  /**
   * @generated from enum value: SYNTAX_PYTHON = 2;
   */
  PYTHON = 2,

  /**
   * @generated from enum value: SYNTAX_POSTGRESQL = 3;
   */
  POSTGRESQL = 3,

  /**
   * @generated from enum value: SYNTAX_MSSQL = 4;
   */
  MSSQL = 4,

  /**
   * @generated from enum value: SYNTAX_MYSQL = 5;
   */
  MYSQL = 5,

  /**
   * @generated from enum value: SYNTAX_MARIADB = 6;
   */
  MARIADB = 6,

  /**
   * @generated from enum value: SYNTAX_SNOWFLAKE = 7;
   */
  SNOWFLAKE = 7,

  /**
   * @generated from enum value: SYNTAX_COCKROACHDB = 8;
   */
  COCKROACHDB = 8,

  /**
   * @generated from enum value: SYNTAX_ROCKSET = 9;
   */
  ROCKSET = 9,

  /**
   * @generated from enum value: SYNTAX_REDSHIFT = 10;
   */
  REDSHIFT = 10,

  /**
   * @generated from enum value: SYNTAX_BIGQUERY = 11;
   */
  BIGQUERY = 11,

  /**
   * @generated from enum value: SYNTAX_DYNAMODB = 12;
   */
  DYNAMODB = 12,

  /**
   * @generated from enum value: SYNTAX_MONGODB = 13;
   */
  MONGODB = 13,

  /**
   * @generated from enum value: SYNTAX_BINDING = 14;
   */
  BINDING = 14,

  /**
   * @generated from enum value: SYNTAX_JSON = 15;
   */
  JSON = 15,

  /**
   * @generated from enum value: SYNTAX_HTML = 16;
   */
  HTML = 16,

  /**
   * @generated from enum value: SYNTAX_API = 17;
   */
  API = 17,

  /**
   * @generated from enum value: SYNTAX_PLUGIN_RESTAPI = 18;
   */
  PLUGIN_RESTAPI = 18,

  /**
   * @generated from enum value: SYNTAX_PLUGIN_GRAPHQL = 19;
   */
  PLUGIN_GRAPHQL = 19,

  /**
   * @generated from enum value: SYNTAX_ORACLEDB = 20;
   */
  ORACLEDB = 20,

  /**
   * @generated from enum value: SYNTAX_DATABRICKS = 21;
   */
  DATABRICKS = 21,
}
// Retrieve enum metadata with: proto3.getEnumType(Syntax)
proto3.util.setEnumType(Syntax, "ai.v1.Syntax", [
  { no: 0, name: "SYNTAX_UNSPECIFIED" },
  { no: 1, name: "SYNTAX_JAVASCRIPT" },
  { no: 2, name: "SYNTAX_PYTHON" },
  { no: 3, name: "SYNTAX_POSTGRESQL" },
  { no: 4, name: "SYNTAX_MSSQL" },
  { no: 5, name: "SYNTAX_MYSQL" },
  { no: 6, name: "SYNTAX_MARIADB" },
  { no: 7, name: "SYNTAX_SNOWFLAKE" },
  { no: 8, name: "SYNTAX_COCKROACHDB" },
  { no: 9, name: "SYNTAX_ROCKSET" },
  { no: 10, name: "SYNTAX_REDSHIFT" },
  { no: 11, name: "SYNTAX_BIGQUERY" },
  { no: 12, name: "SYNTAX_DYNAMODB" },
  { no: 13, name: "SYNTAX_MONGODB" },
  { no: 14, name: "SYNTAX_BINDING" },
  { no: 15, name: "SYNTAX_JSON" },
  { no: 16, name: "SYNTAX_HTML" },
  { no: 17, name: "SYNTAX_API" },
  { no: 18, name: "SYNTAX_PLUGIN_RESTAPI" },
  { no: 19, name: "SYNTAX_PLUGIN_GRAPHQL" },
  { no: 20, name: "SYNTAX_ORACLEDB" },
  { no: 21, name: "SYNTAX_DATABRICKS" },
]);

/**
 * @generated from enum ai.v1.Persona
 */
export enum Persona {
  /**
   * @generated from enum value: PERSONA_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PERSONA_DEVELOPER = 1;
   */
  DEVELOPER = 1,

  /**
   * @generated from enum value: PERSONA_TEACHER = 2;
   */
  TEACHER = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Persona)
proto3.util.setEnumType(Persona, "ai.v1.Persona", [
  { no: 0, name: "PERSONA_UNSPECIFIED" },
  { no: 1, name: "PERSONA_DEVELOPER" },
  { no: 2, name: "PERSONA_TEACHER" },
]);

/**
 * @generated from message ai.v1.Message
 */
export class Message extends Message$1<Message> {
  /**
   * @generated from field: ai.v1.Role role = 1;
   */
  role = Role.UNSPECIFIED;

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  constructor(data?: PartialMessage<Message>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ai.v1.Message";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "enum", T: proto3.getEnumType(Role) },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Message {
    return new Message().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJsonString(jsonString, options);
  }

  static equals(a: Message | PlainMessage<Message> | undefined, b: Message | PlainMessage<Message> | undefined): boolean {
    return proto3.util.equals(Message, a, b);
  }
}

/**
 * @generated from message ai.v1.Task
 */
export class Task extends Message$1<Task> {
  /**
   * @generated from oneof ai.v1.Task.kind
   */
  kind: {
    /**
     * @generated from field: ai.v1.Task.Optimize optimize = 1;
     */
    value: Task_Optimize;
    case: "optimize";
  } | {
    /**
     * @generated from field: ai.v1.Task.Edit edit = 2;
     */
    value: Task_Edit;
    case: "edit";
  } | {
    /**
     * @generated from field: ai.v1.Task.Explain explain = 3;
     */
    value: Task_Explain;
    case: "explain";
  } | {
    /**
     * @generated from field: ai.v1.Task.Create create = 4;
     */
    value: Task_Create;
    case: "create";
  } | {
    /**
     * @generated from field: ai.v1.Task.Debug debug = 5;
     */
    value: Task_Debug;
    case: "debug";
  } | {
    /**
     * @generated from field: ai.v1.Task.Transpile transpile = 7;
     */
    value: Task_Transpile;
    case: "transpile";
  } | {
    /**
     * @generated from field: ai.v1.Task.Mock mock = 8;
     */
    value: Task_Mock;
    case: "mock";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated ai.v1.Message history = 6;
   */
  history: Message[] = [];

  constructor(data?: PartialMessage<Task>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ai.v1.Task";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "optimize", kind: "message", T: Task_Optimize, oneof: "kind" },
    { no: 2, name: "edit", kind: "message", T: Task_Edit, oneof: "kind" },
    { no: 3, name: "explain", kind: "message", T: Task_Explain, oneof: "kind" },
    { no: 4, name: "create", kind: "message", T: Task_Create, oneof: "kind" },
    { no: 5, name: "debug", kind: "message", T: Task_Debug, oneof: "kind" },
    { no: 7, name: "transpile", kind: "message", T: Task_Transpile, oneof: "kind" },
    { no: 8, name: "mock", kind: "message", T: Task_Mock, oneof: "kind" },
    { no: 6, name: "history", kind: "message", T: Message, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Task {
    return new Task().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Task {
    return new Task().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Task {
    return new Task().fromJsonString(jsonString, options);
  }

  static equals(a: Task | PlainMessage<Task> | undefined, b: Task | PlainMessage<Task> | undefined): boolean {
    return proto3.util.equals(Task, a, b);
  }
}

/**
 *
 *
 * @generated from message ai.v1.Task.Optimize
 */
export class Task_Optimize extends Message$1<Task_Optimize> {
  constructor(data?: PartialMessage<Task_Optimize>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ai.v1.Task.Optimize";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Task_Optimize {
    return new Task_Optimize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Task_Optimize {
    return new Task_Optimize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Task_Optimize {
    return new Task_Optimize().fromJsonString(jsonString, options);
  }

  static equals(a: Task_Optimize | PlainMessage<Task_Optimize> | undefined, b: Task_Optimize | PlainMessage<Task_Optimize> | undefined): boolean {
    return proto3.util.equals(Task_Optimize, a, b);
  }
}

/**
 *
 *
 * @generated from message ai.v1.Task.Debug
 */
export class Task_Debug extends Message$1<Task_Debug> {
  constructor(data?: PartialMessage<Task_Debug>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ai.v1.Task.Debug";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Task_Debug {
    return new Task_Debug().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Task_Debug {
    return new Task_Debug().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Task_Debug {
    return new Task_Debug().fromJsonString(jsonString, options);
  }

  static equals(a: Task_Debug | PlainMessage<Task_Debug> | undefined, b: Task_Debug | PlainMessage<Task_Debug> | undefined): boolean {
    return proto3.util.equals(Task_Debug, a, b);
  }
}

/**
 *
 *
 * @generated from message ai.v1.Task.Transpile
 */
export class Task_Transpile extends Message$1<Task_Transpile> {
  constructor(data?: PartialMessage<Task_Transpile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ai.v1.Task.Transpile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Task_Transpile {
    return new Task_Transpile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Task_Transpile {
    return new Task_Transpile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Task_Transpile {
    return new Task_Transpile().fromJsonString(jsonString, options);
  }

  static equals(a: Task_Transpile | PlainMessage<Task_Transpile> | undefined, b: Task_Transpile | PlainMessage<Task_Transpile> | undefined): boolean {
    return proto3.util.equals(Task_Transpile, a, b);
  }
}

/**
 * @generated from message ai.v1.Task.Edit
 */
export class Task_Edit extends Message$1<Task_Edit> {
  /**
   * @generated from field: string prompt = 1;
   */
  prompt = "";

  /**
   * @generated from field: ai.v1.Syntax syntax = 2;
   */
  syntax = Syntax.UNSPECIFIED;

  /**
   * @generated from field: string snippet = 3;
   */
  snippet = "";

  /**
   * @generated from field: ai.v1.Task.Edit.Context context = 4;
   */
  context?: Task_Edit_Context;

  constructor(data?: PartialMessage<Task_Edit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ai.v1.Task.Edit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prompt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "syntax", kind: "enum", T: proto3.getEnumType(Syntax) },
    { no: 3, name: "snippet", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "context", kind: "message", T: Task_Edit_Context },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Task_Edit {
    return new Task_Edit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Task_Edit {
    return new Task_Edit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Task_Edit {
    return new Task_Edit().fromJsonString(jsonString, options);
  }

  static equals(a: Task_Edit | PlainMessage<Task_Edit> | undefined, b: Task_Edit | PlainMessage<Task_Edit> | undefined): boolean {
    return proto3.util.equals(Task_Edit, a, b);
  }
}

/**
 * @generated from message ai.v1.Task.Edit.Context
 */
export class Task_Edit_Context extends Message$1<Task_Edit_Context> {
  /**
   * @generated from oneof ai.v1.Task.Edit.Context.configuration
   */
  configuration: {
    /**
     * @generated from field: google.protobuf.Struct metadata = 1;
     */
    value: Struct;
    case: "metadata";
  } | {
    /**
     * @generated from field: common.v1.StringList configuration_ids = 2;
     */
    value: StringList;
    case: "configurationIds";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Task_Edit_Context>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ai.v1.Task.Edit.Context";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Struct, oneof: "configuration" },
    { no: 2, name: "configuration_ids", kind: "message", T: StringList, oneof: "configuration" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Task_Edit_Context {
    return new Task_Edit_Context().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Task_Edit_Context {
    return new Task_Edit_Context().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Task_Edit_Context {
    return new Task_Edit_Context().fromJsonString(jsonString, options);
  }

  static equals(a: Task_Edit_Context | PlainMessage<Task_Edit_Context> | undefined, b: Task_Edit_Context | PlainMessage<Task_Edit_Context> | undefined): boolean {
    return proto3.util.equals(Task_Edit_Context, a, b);
  }
}

/**
 * @generated from message ai.v1.Task.Create
 */
export class Task_Create extends Message$1<Task_Create> {
  /**
   * @generated from field: string prompt = 1;
   */
  prompt = "";

  /**
   * @generated from field: ai.v1.Syntax syntax = 2;
   */
  syntax = Syntax.UNSPECIFIED;

  /**
   * @generated from field: ai.v1.Task.Create.Context context = 3;
   */
  context?: Task_Create_Context;

  constructor(data?: PartialMessage<Task_Create>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ai.v1.Task.Create";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prompt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "syntax", kind: "enum", T: proto3.getEnumType(Syntax) },
    { no: 3, name: "context", kind: "message", T: Task_Create_Context },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Task_Create {
    return new Task_Create().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Task_Create {
    return new Task_Create().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Task_Create {
    return new Task_Create().fromJsonString(jsonString, options);
  }

  static equals(a: Task_Create | PlainMessage<Task_Create> | undefined, b: Task_Create | PlainMessage<Task_Create> | undefined): boolean {
    return proto3.util.equals(Task_Create, a, b);
  }
}

/**
 * @generated from message ai.v1.Task.Create.Context
 */
export class Task_Create_Context extends Message$1<Task_Create_Context> {
  /**
   * @generated from oneof ai.v1.Task.Create.Context.configuration
   */
  configuration: {
    /**
     * @generated from field: google.protobuf.Struct metadata = 1;
     */
    value: Struct;
    case: "metadata";
  } | {
    /**
     * @generated from field: common.v1.StringList configuration_ids = 2;
     */
    value: StringList;
    case: "configurationIds";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Task_Create_Context>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ai.v1.Task.Create.Context";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Struct, oneof: "configuration" },
    { no: 2, name: "configuration_ids", kind: "message", T: StringList, oneof: "configuration" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Task_Create_Context {
    return new Task_Create_Context().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Task_Create_Context {
    return new Task_Create_Context().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Task_Create_Context {
    return new Task_Create_Context().fromJsonString(jsonString, options);
  }

  static equals(a: Task_Create_Context | PlainMessage<Task_Create_Context> | undefined, b: Task_Create_Context | PlainMessage<Task_Create_Context> | undefined): boolean {
    return proto3.util.equals(Task_Create_Context, a, b);
  }
}

/**
 * @generated from message ai.v1.Task.Explain
 */
export class Task_Explain extends Message$1<Task_Explain> {
  /**
   * @generated from field: ai.v1.Syntax syntax = 1;
   */
  syntax = Syntax.UNSPECIFIED;

  /**
   * @generated from field: string snippet = 2;
   */
  snippet = "";

  /**
   * @generated from field: string contents = 3;
   */
  contents = "";

  /**
   * @generated from field: common.v1.Language language = 4;
   */
  language = Language.UNSPECIFIED;

  constructor(data?: PartialMessage<Task_Explain>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ai.v1.Task.Explain";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "syntax", kind: "enum", T: proto3.getEnumType(Syntax) },
    { no: 2, name: "snippet", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "contents", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "language", kind: "enum", T: proto3.getEnumType(Language) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Task_Explain {
    return new Task_Explain().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Task_Explain {
    return new Task_Explain().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Task_Explain {
    return new Task_Explain().fromJsonString(jsonString, options);
  }

  static equals(a: Task_Explain | PlainMessage<Task_Explain> | undefined, b: Task_Explain | PlainMessage<Task_Explain> | undefined): boolean {
    return proto3.util.equals(Task_Explain, a, b);
  }
}

/**
 * @generated from message ai.v1.Task.Mock
 */
export class Task_Mock extends Message$1<Task_Mock> {
  /**
   * @generated from field: ai.v1.Syntax syntax = 1;
   */
  syntax = Syntax.UNSPECIFIED;

  /**
   * @generated from field: string shape = 2;
   */
  shape = "";

  /**
   * @generated from field: string prompt = 3;
   */
  prompt = "";

  constructor(data?: PartialMessage<Task_Mock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ai.v1.Task.Mock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "syntax", kind: "enum", T: proto3.getEnumType(Syntax) },
    { no: 2, name: "shape", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "prompt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Task_Mock {
    return new Task_Mock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Task_Mock {
    return new Task_Mock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Task_Mock {
    return new Task_Mock().fromJsonString(jsonString, options);
  }

  static equals(a: Task_Mock | PlainMessage<Task_Mock> | undefined, b: Task_Mock | PlainMessage<Task_Mock> | undefined): boolean {
    return proto3.util.equals(Task_Mock, a, b);
  }
}

