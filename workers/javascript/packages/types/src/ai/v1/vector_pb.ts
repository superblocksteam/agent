// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file ai/v1/vector.proto (package ai.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct } from "@bufbuild/protobuf";

/**
 * @generated from message ai.v1.Vector
 */
export class Vector extends Message<Vector> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: repeated float values = 2;
   */
  values: number[] = [];

  /**
   * @generated from field: google.protobuf.Struct metadata = 3;
   */
  metadata?: Struct;

  /**
   * @generated from field: optional float score = 4;
   */
  score?: number;

  constructor(data?: PartialMessage<Vector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ai.v1.Vector";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "values", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
    { no: 3, name: "metadata", kind: "message", T: Struct },
    { no: 4, name: "score", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Vector {
    return new Vector().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Vector {
    return new Vector().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Vector {
    return new Vector().fromJsonString(jsonString, options);
  }

  static equals(a: Vector | PlainMessage<Vector> | undefined, b: Vector | PlainMessage<Vector> | undefined): boolean {
    return proto3.util.equals(Vector, a, b);
  }
}

