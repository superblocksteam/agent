"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cache/v1/cache.proto (package cache.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.MutationBatch = exports.Mutation = exports.Operation = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * @generated from enum cache.v1.Operation
 */
var Operation;
(function (Operation) {
    /**
     * @generated from enum value: OPERATION_UNSPECIFIED = 0;
     */
    Operation[Operation["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: OPERATION_UPSERT = 1;
     */
    Operation[Operation["UPSERT"] = 1] = "UPSERT";
    /**
     * @generated from enum value: OPERATION_DELETE = 2;
     */
    Operation[Operation["DELETE"] = 2] = "DELETE";
})(Operation || (exports.Operation = Operation = {}));
// Retrieve enum metadata with: proto3.getEnumType(Operation)
protobuf_1.proto3.util.setEnumType(Operation, "cache.v1.Operation", [
    { no: 0, name: "OPERATION_UNSPECIFIED" },
    { no: 1, name: "OPERATION_UPSERT" },
    { no: 2, name: "OPERATION_DELETE" },
]);
/**
 * @generated from message cache.v1.Mutation
 */
class Mutation extends protobuf_1.Message {
    /**
     * @generated from field: string resource = 1;
     */
    resource = "";
    /**
     * @generated from field: string id = 2;
     */
    id = "";
    /**
     * @generated from field: google.protobuf.Value data = 3;
     */
    data;
    /**
     * @generated from field: string organization_id = 4;
     */
    organizationId = "";
    /**
     * @generated from field: bool tombstone = 5;
     */
    tombstone = false;
    /**
     * this is an edge case that needs to be addressed and removed
     *
     * @generated from field: string rbac_role = 6;
     */
    rbacRole = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "cache.v1.Mutation";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "data", kind: "message", T: protobuf_1.Value },
        { no: 4, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "tombstone", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 6, name: "rbac_role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Mutation().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Mutation().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Mutation().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Mutation, a, b);
    }
}
exports.Mutation = Mutation;
/**
 * @generated from message cache.v1.MutationBatch
 */
class MutationBatch extends protobuf_1.Message {
    /**
     * @generated from field: cache.v1.Operation operation = 1;
     */
    operation = Operation.UNSPECIFIED;
    /**
     * @generated from field: repeated cache.v1.Mutation batch = 2;
     */
    batch = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "cache.v1.MutationBatch";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "operation", kind: "enum", T: protobuf_1.proto3.getEnumType(Operation) },
        { no: 2, name: "batch", kind: "message", T: Mutation, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new MutationBatch().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MutationBatch().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MutationBatch().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MutationBatch, a, b);
    }
}
exports.MutationBatch = MutationBatch;
//# sourceMappingURL=cache_pb.map