// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file cache/v1/cache.proto (package cache.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Value } from "@bufbuild/protobuf";

/**
 * @generated from enum cache.v1.Operation
 */
export enum Operation {
  /**
   * @generated from enum value: OPERATION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: OPERATION_UPSERT = 1;
   */
  UPSERT = 1,

  /**
   * @generated from enum value: OPERATION_DELETE = 2;
   */
  DELETE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Operation)
proto3.util.setEnumType(Operation, "cache.v1.Operation", [
  { no: 0, name: "OPERATION_UNSPECIFIED" },
  { no: 1, name: "OPERATION_UPSERT" },
  { no: 2, name: "OPERATION_DELETE" },
]);

/**
 * @generated from message cache.v1.Mutation
 */
export class Mutation extends Message<Mutation> {
  /**
   * @generated from field: string resource = 1;
   */
  resource = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.Value data = 3;
   */
  data?: Value;

  /**
   * @generated from field: string organization_id = 4;
   */
  organizationId = "";

  /**
   * @generated from field: bool tombstone = 5;
   */
  tombstone = false;

  /**
   * this is an edge case that needs to be addressed and removed
   *
   * @generated from field: string rbac_role = 6;
   */
  rbacRole = "";

  constructor(data?: PartialMessage<Mutation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cache.v1.Mutation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "data", kind: "message", T: Value },
    { no: 4, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "tombstone", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "rbac_role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Mutation {
    return new Mutation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Mutation {
    return new Mutation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Mutation {
    return new Mutation().fromJsonString(jsonString, options);
  }

  static equals(a: Mutation | PlainMessage<Mutation> | undefined, b: Mutation | PlainMessage<Mutation> | undefined): boolean {
    return proto3.util.equals(Mutation, a, b);
  }
}

/**
 * @generated from message cache.v1.MutationBatch
 */
export class MutationBatch extends Message<MutationBatch> {
  /**
   * @generated from field: cache.v1.Operation operation = 1;
   */
  operation = Operation.UNSPECIFIED;

  /**
   * @generated from field: repeated cache.v1.Mutation batch = 2;
   */
  batch: Mutation[] = [];

  constructor(data?: PartialMessage<MutationBatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cache.v1.MutationBatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operation", kind: "enum", T: proto3.getEnumType(Operation) },
    { no: 2, name: "batch", kind: "message", T: Mutation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MutationBatch {
    return new MutationBatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MutationBatch {
    return new MutationBatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MutationBatch {
    return new MutationBatch().fromJsonString(jsonString, options);
  }

  static equals(a: MutationBatch | PlainMessage<MutationBatch> | undefined, b: MutationBatch | PlainMessage<MutationBatch> | undefined): boolean {
    return proto3.util.equals(MutationBatch, a, b);
  }
}

