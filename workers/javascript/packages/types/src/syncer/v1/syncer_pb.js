"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file syncer/v1/syncer.proto (package syncer.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.Metadata = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const metadata_pb_1 = require("../../ai/v1/metadata_pb");
/**
 * @generated from message syncer.v1.Metadata
 */
class Metadata extends protobuf_1.Message {
    /**
     * @generated from field: string configuration_id = 1;
     */
    configurationId = "";
    /**
     * @generated from field: string integration_id = 2;
     */
    integrationId = "";
    /**
     * @generated from field: ai.v1.Metadata raw_metadata = 3;
     */
    rawMetadata;
    /**
     * @generated from field: google.protobuf.Timestamp updated_datetime_utc = 4;
     */
    updatedDatetimeUtc;
    /**
     * @generated from field: string integration_type = 5;
     */
    integrationType = "";
    /**
     * @generated from field: string organization_id = 6;
     */
    organizationId = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "syncer.v1.Metadata";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "configuration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "integration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "raw_metadata", kind: "message", T: metadata_pb_1.Metadata },
        { no: 4, name: "updated_datetime_utc", kind: "message", T: protobuf_1.Timestamp },
        { no: 5, name: "integration_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 6, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Metadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Metadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Metadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Metadata, a, b);
    }
}
exports.Metadata = Metadata;
//# sourceMappingURL=syncer_pb.map