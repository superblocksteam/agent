// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file syncer/v1/service.proto (package syncer.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct } from "@bufbuild/protobuf";
import { Error } from "../../common/v1/errors_pb";
import { Metadata } from "./syncer_pb";

/**
 * @generated from message syncer.v1.GetConfigurationMetadataRequest
 */
export class GetConfigurationMetadataRequest extends Message<GetConfigurationMetadataRequest> {
  /**
   * @generated from field: string integration_id = 1;
   */
  integrationId = "";

  constructor(data?: PartialMessage<GetConfigurationMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "syncer.v1.GetConfigurationMetadataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConfigurationMetadataRequest {
    return new GetConfigurationMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConfigurationMetadataRequest {
    return new GetConfigurationMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConfigurationMetadataRequest {
    return new GetConfigurationMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetConfigurationMetadataRequest | PlainMessage<GetConfigurationMetadataRequest> | undefined, b: GetConfigurationMetadataRequest | PlainMessage<GetConfigurationMetadataRequest> | undefined): boolean {
    return proto3.util.equals(GetConfigurationMetadataRequest, a, b);
  }
}

/**
 * @generated from message syncer.v1.GetConfigurationMetadataResponse
 */
export class GetConfigurationMetadataResponse extends Message<GetConfigurationMetadataResponse> {
  /**
   * @generated from field: string integration_id = 1;
   */
  integrationId = "";

  /**
   * @generated from field: map<string, google.protobuf.Struct> configurations = 2;
   */
  configurations: { [key: string]: Struct } = {};

  /**
   * @generated from field: string integration_type = 3;
   */
  integrationType = "";

  /**
   * @generated from field: string organization_id = 4;
   */
  organizationId = "";

  /**
   * @generated from field: repeated common.v1.Error errors = 5;
   */
  errors: Error[] = [];

  constructor(data?: PartialMessage<GetConfigurationMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "syncer.v1.GetConfigurationMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "configurations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Struct} },
    { no: 3, name: "integration_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "errors", kind: "message", T: Error, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConfigurationMetadataResponse {
    return new GetConfigurationMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConfigurationMetadataResponse {
    return new GetConfigurationMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConfigurationMetadataResponse {
    return new GetConfigurationMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetConfigurationMetadataResponse | PlainMessage<GetConfigurationMetadataResponse> | undefined, b: GetConfigurationMetadataResponse | PlainMessage<GetConfigurationMetadataResponse> | undefined): boolean {
    return proto3.util.equals(GetConfigurationMetadataResponse, a, b);
  }
}

/**
 * @generated from message syncer.v1.SyncRequest
 */
export class SyncRequest extends Message<SyncRequest> {
  /**
   * @generated from field: repeated string integration_ids = 1;
   */
  integrationIds: string[] = [];

  constructor(data?: PartialMessage<SyncRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "syncer.v1.SyncRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integration_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncRequest {
    return new SyncRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncRequest {
    return new SyncRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncRequest {
    return new SyncRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SyncRequest | PlainMessage<SyncRequest> | undefined, b: SyncRequest | PlainMessage<SyncRequest> | undefined): boolean {
    return proto3.util.equals(SyncRequest, a, b);
  }
}

/**
 * @generated from message syncer.v1.SyncResponse
 */
export class SyncResponse extends Message<SyncResponse> {
  /**
   * @generated from field: map<string, syncer.v1.SyncResponse.Integration> integrations_synced = 1;
   */
  integrationsSynced: { [key: string]: SyncResponse_Integration } = {};

  /**
   * @generated from field: repeated common.v1.Error errors = 2;
   */
  errors: Error[] = [];

  constructor(data?: PartialMessage<SyncResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "syncer.v1.SyncResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integrations_synced", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: SyncResponse_Integration} },
    { no: 2, name: "errors", kind: "message", T: Error, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncResponse {
    return new SyncResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncResponse {
    return new SyncResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncResponse {
    return new SyncResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SyncResponse | PlainMessage<SyncResponse> | undefined, b: SyncResponse | PlainMessage<SyncResponse> | undefined): boolean {
    return proto3.util.equals(SyncResponse, a, b);
  }
}

/**
 * @generated from message syncer.v1.SyncResponse.Integration
 */
export class SyncResponse_Integration extends Message<SyncResponse_Integration> {
  /**
   * @generated from field: repeated string configurationIds = 1;
   */
  configurationIds: string[] = [];

  constructor(data?: PartialMessage<SyncResponse_Integration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "syncer.v1.SyncResponse.Integration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "configurationIds", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncResponse_Integration {
    return new SyncResponse_Integration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncResponse_Integration {
    return new SyncResponse_Integration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncResponse_Integration {
    return new SyncResponse_Integration().fromJsonString(jsonString, options);
  }

  static equals(a: SyncResponse_Integration | PlainMessage<SyncResponse_Integration> | undefined, b: SyncResponse_Integration | PlainMessage<SyncResponse_Integration> | undefined): boolean {
    return proto3.util.equals(SyncResponse_Integration, a, b);
  }
}

/**
 * @generated from message syncer.v1.UpsertMetadataRequest
 */
export class UpsertMetadataRequest extends Message<UpsertMetadataRequest> {
  /**
   * @generated from field: repeated syncer.v1.Metadata metadata = 1;
   */
  metadata: Metadata[] = [];

  constructor(data?: PartialMessage<UpsertMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "syncer.v1.UpsertMetadataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertMetadataRequest {
    return new UpsertMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertMetadataRequest {
    return new UpsertMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertMetadataRequest {
    return new UpsertMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertMetadataRequest | PlainMessage<UpsertMetadataRequest> | undefined, b: UpsertMetadataRequest | PlainMessage<UpsertMetadataRequest> | undefined): boolean {
    return proto3.util.equals(UpsertMetadataRequest, a, b);
  }
}

/**
 * @generated from message syncer.v1.UpsertMetadataResponse
 */
export class UpsertMetadataResponse extends Message<UpsertMetadataResponse> {
  /**
   * @generated from field: repeated common.v1.Error errors = 1;
   */
  errors: Error[] = [];

  constructor(data?: PartialMessage<UpsertMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "syncer.v1.UpsertMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "message", T: Error, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertMetadataResponse {
    return new UpsertMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertMetadataResponse {
    return new UpsertMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertMetadataResponse {
    return new UpsertMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertMetadataResponse | PlainMessage<UpsertMetadataResponse> | undefined, b: UpsertMetadataResponse | PlainMessage<UpsertMetadataResponse> | undefined): boolean {
    return proto3.util.equals(UpsertMetadataResponse, a, b);
  }
}

/**
 * @generated from message syncer.v1.DeleteMetadataRequest
 */
export class DeleteMetadataRequest extends Message<DeleteMetadataRequest> {
  /**
   * @generated from field: string integration_id = 1;
   */
  integrationId = "";

  /**
   * @generated from field: repeated string configuration_ids = 2;
   */
  configurationIds: string[] = [];

  constructor(data?: PartialMessage<DeleteMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "syncer.v1.DeleteMetadataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "configuration_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteMetadataRequest {
    return new DeleteMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteMetadataRequest {
    return new DeleteMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteMetadataRequest {
    return new DeleteMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteMetadataRequest | PlainMessage<DeleteMetadataRequest> | undefined, b: DeleteMetadataRequest | PlainMessage<DeleteMetadataRequest> | undefined): boolean {
    return proto3.util.equals(DeleteMetadataRequest, a, b);
  }
}

/**
 * @generated from message syncer.v1.DeleteMetadataResponse
 */
export class DeleteMetadataResponse extends Message<DeleteMetadataResponse> {
  /**
   * @generated from field: repeated common.v1.Error errors = 1;
   */
  errors: Error[] = [];

  constructor(data?: PartialMessage<DeleteMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "syncer.v1.DeleteMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "message", T: Error, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteMetadataResponse {
    return new DeleteMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteMetadataResponse {
    return new DeleteMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteMetadataResponse {
    return new DeleteMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteMetadataResponse | PlainMessage<DeleteMetadataResponse> | undefined, b: DeleteMetadataResponse | PlainMessage<DeleteMetadataResponse> | undefined): boolean {
    return proto3.util.equals(DeleteMetadataResponse, a, b);
  }
}

