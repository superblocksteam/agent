// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file plugins/common/v1/oauth.proto (package plugins.common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message plugins.common.v1.OAuth
 */
export class OAuth extends Message<OAuth> {
  constructor(data?: PartialMessage<OAuth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.common.v1.OAuth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OAuth {
    return new OAuth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OAuth {
    return new OAuth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OAuth {
    return new OAuth().fromJsonString(jsonString, options);
  }

  static equals(a: OAuth | PlainMessage<OAuth> | undefined, b: OAuth | PlainMessage<OAuth> | undefined): boolean {
    return proto3.util.equals(OAuth, a, b);
  }
}

/**
 * @generated from message plugins.common.v1.OAuth.PasswordGrantFlow
 */
export class OAuth_PasswordGrantFlow extends Message<OAuth_PasswordGrantFlow> {
  /**
   * @generated from field: string client_id = 2;
   */
  clientId = "";

  /**
   * @generated from field: string client_secret = 3;
   */
  clientSecret = "";

  /**
   * @generated from field: string token_url = 4;
   */
  tokenUrl = "";

  /**
   * @generated from field: string username = 5;
   */
  username = "";

  /**
   * @generated from field: string password = 6;
   */
  password = "";

  constructor(data?: PartialMessage<OAuth_PasswordGrantFlow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.common.v1.OAuth.PasswordGrantFlow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "token_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OAuth_PasswordGrantFlow {
    return new OAuth_PasswordGrantFlow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OAuth_PasswordGrantFlow {
    return new OAuth_PasswordGrantFlow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OAuth_PasswordGrantFlow {
    return new OAuth_PasswordGrantFlow().fromJsonString(jsonString, options);
  }

  static equals(a: OAuth_PasswordGrantFlow | PlainMessage<OAuth_PasswordGrantFlow> | undefined, b: OAuth_PasswordGrantFlow | PlainMessage<OAuth_PasswordGrantFlow> | undefined): boolean {
    return proto3.util.equals(OAuth_PasswordGrantFlow, a, b);
  }
}

/**
 * @generated from message plugins.common.v1.OAuth.CodeFlow
 */
export class OAuth_CodeFlow extends Message<OAuth_CodeFlow> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * @generated from field: string client_secret = 2;
   */
  clientSecret = "";

  /**
   * @generated from field: string token_url = 3;
   */
  tokenUrl = "";

  /**
   * @generated from field: string auth_url = 4;
   */
  authUrl = "";

  constructor(data?: PartialMessage<OAuth_CodeFlow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.common.v1.OAuth.CodeFlow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "token_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "auth_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OAuth_CodeFlow {
    return new OAuth_CodeFlow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OAuth_CodeFlow {
    return new OAuth_CodeFlow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OAuth_CodeFlow {
    return new OAuth_CodeFlow().fromJsonString(jsonString, options);
  }

  static equals(a: OAuth_CodeFlow | PlainMessage<OAuth_CodeFlow> | undefined, b: OAuth_CodeFlow | PlainMessage<OAuth_CodeFlow> | undefined): boolean {
    return proto3.util.equals(OAuth_CodeFlow, a, b);
  }
}

/**
 * @generated from message plugins.common.v1.Basic
 */
export class Basic extends Message<Basic> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<Basic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.common.v1.Basic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Basic {
    return new Basic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Basic {
    return new Basic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Basic {
    return new Basic().fromJsonString(jsonString, options);
  }

  static equals(a: Basic | PlainMessage<Basic> | undefined, b: Basic | PlainMessage<Basic> | undefined): boolean {
    return proto3.util.equals(Basic, a, b);
  }
}

/**
 * @generated from message plugins.common.v1.Auth
 */
export class Auth extends Message<Auth> {
  /**
   * @generated from oneof plugins.common.v1.Auth.auth
   */
  auth: {
    /**
     * @generated from field: plugins.common.v1.OAuth.PasswordGrantFlow password_grant_flow = 1;
     */
    value: OAuth_PasswordGrantFlow;
    case: "passwordGrantFlow";
  } | {
    /**
     * @generated from field: plugins.common.v1.OAuth.CodeFlow code_flow = 2;
     */
    value: OAuth_CodeFlow;
    case: "codeFlow";
  } | {
    /**
     * @generated from field: plugins.common.v1.Basic basic = 3;
     */
    value: Basic;
    case: "basic";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Auth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.common.v1.Auth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "password_grant_flow", kind: "message", T: OAuth_PasswordGrantFlow, oneof: "auth" },
    { no: 2, name: "code_flow", kind: "message", T: OAuth_CodeFlow, oneof: "auth" },
    { no: 3, name: "basic", kind: "message", T: Basic, oneof: "auth" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Auth {
    return new Auth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Auth {
    return new Auth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Auth {
    return new Auth().fromJsonString(jsonString, options);
  }

  static equals(a: Auth | PlainMessage<Auth> | undefined, b: Auth | PlainMessage<Auth> | undefined): boolean {
    return proto3.util.equals(Auth, a, b);
  }
}

