"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file plugins/common/v1/oauth.proto (package plugins.common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.Auth = exports.Basic = exports.OAuth_CodeFlow = exports.OAuth_PasswordGrantFlow = exports.OAuth = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * @generated from message plugins.common.v1.OAuth
 */
class OAuth extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.common.v1.OAuth";
    static fields = protobuf_1.proto3.util.newFieldList(() => []);
    static fromBinary(bytes, options) {
        return new OAuth().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OAuth().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OAuth().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(OAuth, a, b);
    }
}
exports.OAuth = OAuth;
/**
 * @generated from message plugins.common.v1.OAuth.PasswordGrantFlow
 */
class OAuth_PasswordGrantFlow extends protobuf_1.Message {
    /**
     * @generated from field: string client_id = 2;
     */
    clientId = "";
    /**
     * @generated from field: string client_secret = 3;
     */
    clientSecret = "";
    /**
     * @generated from field: string token_url = 4;
     */
    tokenUrl = "";
    /**
     * @generated from field: string username = 5;
     */
    username = "";
    /**
     * @generated from field: string password = 6;
     */
    password = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.common.v1.OAuth.PasswordGrantFlow";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "token_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 6, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new OAuth_PasswordGrantFlow().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OAuth_PasswordGrantFlow().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OAuth_PasswordGrantFlow().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(OAuth_PasswordGrantFlow, a, b);
    }
}
exports.OAuth_PasswordGrantFlow = OAuth_PasswordGrantFlow;
/**
 * @generated from message plugins.common.v1.OAuth.CodeFlow
 */
class OAuth_CodeFlow extends protobuf_1.Message {
    /**
     * @generated from field: string client_id = 1;
     */
    clientId = "";
    /**
     * @generated from field: string client_secret = 2;
     */
    clientSecret = "";
    /**
     * @generated from field: string token_url = 3;
     */
    tokenUrl = "";
    /**
     * @generated from field: string auth_url = 4;
     */
    authUrl = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.common.v1.OAuth.CodeFlow";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "token_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "auth_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new OAuth_CodeFlow().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new OAuth_CodeFlow().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new OAuth_CodeFlow().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(OAuth_CodeFlow, a, b);
    }
}
exports.OAuth_CodeFlow = OAuth_CodeFlow;
/**
 * @generated from message plugins.common.v1.Basic
 */
class Basic extends protobuf_1.Message {
    /**
     * @generated from field: string username = 1;
     */
    username = "";
    /**
     * @generated from field: string password = 2;
     */
    password = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.common.v1.Basic";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Basic().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Basic().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Basic().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Basic, a, b);
    }
}
exports.Basic = Basic;
/**
 * @generated from message plugins.common.v1.Auth
 */
class Auth extends protobuf_1.Message {
    /**
     * @generated from oneof plugins.common.v1.Auth.auth
     */
    auth = { case: undefined };
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.common.v1.Auth";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "password_grant_flow", kind: "message", T: OAuth_PasswordGrantFlow, oneof: "auth" },
        { no: 2, name: "code_flow", kind: "message", T: OAuth_CodeFlow, oneof: "auth" },
        { no: 3, name: "basic", kind: "message", T: Basic, oneof: "auth" },
    ]);
    static fromBinary(bytes, options) {
        return new Auth().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Auth().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Auth().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Auth, a, b);
    }
}
exports.Auth = Auth;
//# sourceMappingURL=oauth_pb.map