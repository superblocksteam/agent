"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file plugins/common/v1/plugin.proto (package plugins.common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.SQLBulkEdit = exports.SSHConfiguration = exports.SQLMappedColumns = exports.SQLExecution = exports.AWSConfig_Auth = exports.AWSConfig = exports.DynamicWorkflowConfiguration = exports.SQLOperation = exports.SQLMatchingMode = exports.SQLMappingMode = exports.SSHAuthMethod = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * @generated from enum plugins.common.v1.SSHAuthMethod
 */
var SSHAuthMethod;
(function (SSHAuthMethod) {
    /**
     * @generated from enum value: SSH_AUTH_METHOD_UNSPECIFIED = 0;
     */
    SSHAuthMethod[SSHAuthMethod["SSH_AUTH_METHOD_UNSPECIFIED"] = 0] = "SSH_AUTH_METHOD_UNSPECIFIED";
    /**
     * @generated from enum value: SSH_AUTH_METHOD_PASSWORD = 1;
     */
    SSHAuthMethod[SSHAuthMethod["SSH_AUTH_METHOD_PASSWORD"] = 1] = "SSH_AUTH_METHOD_PASSWORD";
    /**
     * @generated from enum value: SSH_AUTH_METHOD_PUB_KEY_RSA = 2;
     */
    SSHAuthMethod[SSHAuthMethod["SSH_AUTH_METHOD_PUB_KEY_RSA"] = 2] = "SSH_AUTH_METHOD_PUB_KEY_RSA";
    /**
     * @generated from enum value: SSH_AUTH_METHOD_PUB_KEY_ED25519 = 3;
     */
    SSHAuthMethod[SSHAuthMethod["SSH_AUTH_METHOD_PUB_KEY_ED25519"] = 3] = "SSH_AUTH_METHOD_PUB_KEY_ED25519";
    /**
     * @generated from enum value: SSH_AUTH_METHOD_USER_PRIVATE_KEY = 4;
     */
    SSHAuthMethod[SSHAuthMethod["SSH_AUTH_METHOD_USER_PRIVATE_KEY"] = 4] = "SSH_AUTH_METHOD_USER_PRIVATE_KEY";
})(SSHAuthMethod || (exports.SSHAuthMethod = SSHAuthMethod = {}));
// Retrieve enum metadata with: proto3.getEnumType(SSHAuthMethod)
protobuf_1.proto3.util.setEnumType(SSHAuthMethod, "plugins.common.v1.SSHAuthMethod", [
    { no: 0, name: "SSH_AUTH_METHOD_UNSPECIFIED" },
    { no: 1, name: "SSH_AUTH_METHOD_PASSWORD" },
    { no: 2, name: "SSH_AUTH_METHOD_PUB_KEY_RSA" },
    { no: 3, name: "SSH_AUTH_METHOD_PUB_KEY_ED25519" },
    { no: 4, name: "SSH_AUTH_METHOD_USER_PRIVATE_KEY" },
]);
/**
 * @generated from enum plugins.common.v1.SQLMappingMode
 */
var SQLMappingMode;
(function (SQLMappingMode) {
    /**
     * @generated from enum value: SQL_MAPPING_MODE_UNSPECIFIED = 0;
     */
    SQLMappingMode[SQLMappingMode["SQL_MAPPING_MODE_UNSPECIFIED"] = 0] = "SQL_MAPPING_MODE_UNSPECIFIED";
    /**
     * @generated from enum value: SQL_MAPPING_MODE_AUTO = 1;
     */
    SQLMappingMode[SQLMappingMode["SQL_MAPPING_MODE_AUTO"] = 1] = "SQL_MAPPING_MODE_AUTO";
    /**
     * @generated from enum value: SQL_MAPPING_MODE_MANUAL = 2;
     */
    SQLMappingMode[SQLMappingMode["SQL_MAPPING_MODE_MANUAL"] = 2] = "SQL_MAPPING_MODE_MANUAL";
})(SQLMappingMode || (exports.SQLMappingMode = SQLMappingMode = {}));
// Retrieve enum metadata with: proto3.getEnumType(SQLMappingMode)
protobuf_1.proto3.util.setEnumType(SQLMappingMode, "plugins.common.v1.SQLMappingMode", [
    { no: 0, name: "SQL_MAPPING_MODE_UNSPECIFIED" },
    { no: 1, name: "SQL_MAPPING_MODE_AUTO" },
    { no: 2, name: "SQL_MAPPING_MODE_MANUAL" },
]);
/**
 * @generated from enum plugins.common.v1.SQLMatchingMode
 */
var SQLMatchingMode;
(function (SQLMatchingMode) {
    /**
     * @generated from enum value: SQL_MATCHING_MODE_UNSPECIFIED = 0;
     */
    SQLMatchingMode[SQLMatchingMode["SQL_MATCHING_MODE_UNSPECIFIED"] = 0] = "SQL_MATCHING_MODE_UNSPECIFIED";
    /**
     * @generated from enum value: SQL_MATCHING_MODE_AUTO = 1;
     */
    SQLMatchingMode[SQLMatchingMode["SQL_MATCHING_MODE_AUTO"] = 1] = "SQL_MATCHING_MODE_AUTO";
    /**
     * @generated from enum value: SQL_MATCHING_MODE_ADVANCED = 2;
     */
    SQLMatchingMode[SQLMatchingMode["SQL_MATCHING_MODE_ADVANCED"] = 2] = "SQL_MATCHING_MODE_ADVANCED";
})(SQLMatchingMode || (exports.SQLMatchingMode = SQLMatchingMode = {}));
// Retrieve enum metadata with: proto3.getEnumType(SQLMatchingMode)
protobuf_1.proto3.util.setEnumType(SQLMatchingMode, "plugins.common.v1.SQLMatchingMode", [
    { no: 0, name: "SQL_MATCHING_MODE_UNSPECIFIED" },
    { no: 1, name: "SQL_MATCHING_MODE_AUTO" },
    { no: 2, name: "SQL_MATCHING_MODE_ADVANCED" },
]);
/**
 * @generated from enum plugins.common.v1.SQLOperation
 */
var SQLOperation;
(function (SQLOperation) {
    /**
     * @generated from enum value: SQL_OPERATION_UNSPECIFIED = 0;
     */
    SQLOperation[SQLOperation["SQL_OPERATION_UNSPECIFIED"] = 0] = "SQL_OPERATION_UNSPECIFIED";
    /**
     * @generated from enum value: SQL_OPERATION_RUN_SQL = 1;
     */
    SQLOperation[SQLOperation["SQL_OPERATION_RUN_SQL"] = 1] = "SQL_OPERATION_RUN_SQL";
    /**
     * @generated from enum value: SQL_OPERATION_UPDATE_ROWS = 2;
     */
    SQLOperation[SQLOperation["SQL_OPERATION_UPDATE_ROWS"] = 2] = "SQL_OPERATION_UPDATE_ROWS";
})(SQLOperation || (exports.SQLOperation = SQLOperation = {}));
// Retrieve enum metadata with: proto3.getEnumType(SQLOperation)
protobuf_1.proto3.util.setEnumType(SQLOperation, "plugins.common.v1.SQLOperation", [
    { no: 0, name: "SQL_OPERATION_UNSPECIFIED" },
    { no: 1, name: "SQL_OPERATION_RUN_SQL" },
    { no: 2, name: "SQL_OPERATION_UPDATE_ROWS" },
]);
/**
 * @generated from message plugins.common.v1.DynamicWorkflowConfiguration
 */
class DynamicWorkflowConfiguration extends protobuf_1.Message {
    /**
     * @generated from field: optional bool enabled = 1;
     */
    enabled;
    /**
     * @generated from field: optional string workflow_id = 2;
     */
    workflowId;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.common.v1.DynamicWorkflowConfiguration";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
        { no: 2, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new DynamicWorkflowConfiguration().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DynamicWorkflowConfiguration().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DynamicWorkflowConfiguration().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DynamicWorkflowConfiguration, a, b);
    }
}
exports.DynamicWorkflowConfiguration = DynamicWorkflowConfiguration;
/**
 * @generated from message plugins.common.v1.AWSConfig
 */
class AWSConfig extends protobuf_1.Message {
    /**
     * @generated from field: optional string region = 1;
     */
    region;
    /**
     * @generated from field: optional plugins.common.v1.AWSConfig.Auth auth = 2;
     */
    auth;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.common.v1.AWSConfig";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 2, name: "auth", kind: "message", T: AWSConfig_Auth, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new AWSConfig().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AWSConfig().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AWSConfig().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AWSConfig, a, b);
    }
}
exports.AWSConfig = AWSConfig;
/**
 * @generated from message plugins.common.v1.AWSConfig.Auth
 */
class AWSConfig_Auth extends protobuf_1.Message {
    /**
     * @generated from field: optional string access_key_id = 1;
     */
    accessKeyId;
    /**
     * @generated from field: optional string secret_key = 2;
     */
    secretKey;
    /**
     * @generated from field: optional string iam_role_arn = 3;
     */
    iamRoleArn;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.common.v1.AWSConfig.Auth";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "access_key_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 2, name: "secret_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 3, name: "iam_role_arn", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new AWSConfig_Auth().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new AWSConfig_Auth().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new AWSConfig_Auth().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(AWSConfig_Auth, a, b);
    }
}
exports.AWSConfig_Auth = AWSConfig_Auth;
/**
 * @generated from message plugins.common.v1.SQLExecution
 */
class SQLExecution extends protobuf_1.Message {
    /**
     * @generated from field: string sql_body = 1;
     */
    sqlBody = "";
    /**
     * @generated from field: bool use_parameterized = 2;
     */
    useParameterized = false;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.common.v1.SQLExecution";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "sql_body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "use_parameterized", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    ]);
    static fromBinary(bytes, options) {
        return new SQLExecution().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SQLExecution().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SQLExecution().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SQLExecution, a, b);
    }
}
exports.SQLExecution = SQLExecution;
/**
 * @generated from message plugins.common.v1.SQLMappedColumns
 */
class SQLMappedColumns extends protobuf_1.Message {
    /**
     * @generated from field: string json = 1;
     */
    json = "";
    /**
     * @generated from field: string sql = 2;
     */
    sql = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.common.v1.SQLMappedColumns";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new SQLMappedColumns().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SQLMappedColumns().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SQLMappedColumns().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SQLMappedColumns, a, b);
    }
}
exports.SQLMappedColumns = SQLMappedColumns;
/**
 * @generated from message plugins.common.v1.SSHConfiguration
 */
class SSHConfiguration extends protobuf_1.Message {
    /**
     * @generated from field: optional plugins.common.v1.SSHAuthMethod authentication_method = 1;
     */
    authenticationMethod;
    /**
     * @generated from field: optional bool enabled = 2;
     */
    enabled;
    /**
     * @generated from field: optional string host = 3;
     */
    host;
    /**
     * @generated from field: optional string passphrase = 4;
     */
    passphrase;
    /**
     * @generated from field: optional string password = 5;
     */
    password;
    /**
     * @generated from field: optional int32 port = 6;
     */
    port;
    /**
     * @generated from field: optional string private_key = 7;
     */
    privateKey;
    /**
     * @generated from field: optional string public_key = 8;
     */
    publicKey;
    /**
     * @generated from field: optional string username = 9;
     */
    username;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.common.v1.SSHConfiguration";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "authentication_method", kind: "enum", T: protobuf_1.proto3.getEnumType(SSHAuthMethod), opt: true },
        { no: 2, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
        { no: 3, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 4, name: "passphrase", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 5, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 6, name: "port", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
        { no: 7, name: "private_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 8, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 9, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new SSHConfiguration().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SSHConfiguration().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SSHConfiguration().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SSHConfiguration, a, b);
    }
}
exports.SSHConfiguration = SSHConfiguration;
/**
 * @generated from message plugins.common.v1.SQLBulkEdit
 */
class SQLBulkEdit extends protobuf_1.Message {
    /**
     * @generated from field: optional plugins.common.v1.SQLMatchingMode matching_mode = 1;
     */
    matchingMode;
    /**
     * @generated from field: optional string schema = 2;
     */
    schema;
    /**
     * @generated from field: optional string table = 3;
     */
    table;
    /**
     * @generated from field: optional string updated_rows = 4;
     */
    updatedRows;
    /**
     * @generated from field: optional string old_rows = 5;
     */
    oldRows;
    /**
     * @generated from field: repeated string filter_by = 6;
     */
    filterBy = [];
    /**
     * @generated from field: optional plugins.common.v1.SQLMappingMode mapping_mode = 7;
     */
    mappingMode;
    /**
     * @generated from field: repeated plugins.common.v1.SQLMappedColumns mapped_columns = 8;
     */
    mappedColumns = [];
    /**
     * @generated from field: optional string inserted_rows = 9;
     */
    insertedRows;
    /**
     * @generated from field: optional string deleted_rows = 10;
     */
    deletedRows;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.common.v1.SQLBulkEdit";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "matching_mode", kind: "enum", T: protobuf_1.proto3.getEnumType(SQLMatchingMode), opt: true },
        { no: 2, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 3, name: "table", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 4, name: "updated_rows", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 5, name: "old_rows", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 6, name: "filter_by", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 7, name: "mapping_mode", kind: "enum", T: protobuf_1.proto3.getEnumType(SQLMappingMode), opt: true },
        { no: 8, name: "mapped_columns", kind: "message", T: SQLMappedColumns, repeated: true },
        { no: 9, name: "inserted_rows", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 10, name: "deleted_rows", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new SQLBulkEdit().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SQLBulkEdit().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SQLBulkEdit().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SQLBulkEdit, a, b);
    }
}
exports.SQLBulkEdit = SQLBulkEdit;
//# sourceMappingURL=plugin_pb.map