// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file plugins/common/v1/common.proto (package plugins.common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * SQLActionConfiguration represents the action configuration for any SQL based plugin.
 *
 * @generated from message plugins.common.v1.SQLActionConfiguration
 */
export class SQLActionConfiguration extends Message<SQLActionConfiguration> {
  /**
   * @generated from field: string body = 1;
   */
  body = "";

  /**
   * @generated from field: bool usePreparedSql = 2;
   */
  usePreparedSql = false;

  constructor(data?: PartialMessage<SQLActionConfiguration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.common.v1.SQLActionConfiguration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "usePreparedSql", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SQLActionConfiguration {
    return new SQLActionConfiguration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SQLActionConfiguration {
    return new SQLActionConfiguration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SQLActionConfiguration {
    return new SQLActionConfiguration().fromJsonString(jsonString, options);
  }

  static equals(a: SQLActionConfiguration | PlainMessage<SQLActionConfiguration> | undefined, b: SQLActionConfiguration | PlainMessage<SQLActionConfiguration> | undefined): boolean {
    return proto3.util.equals(SQLActionConfiguration, a, b);
  }
}

