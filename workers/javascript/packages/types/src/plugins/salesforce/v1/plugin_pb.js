"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file plugins/salesforce/v1/plugin.proto (package plugins.salesforce.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plugin_Bulk_BulkAction = exports.Plugin_Bulk = exports.Plugin_Crud_CrudAction = exports.Plugin_Crud = exports.Plugin_Soql_SoqlAction = exports.Plugin_Soql = exports.Plugin_Metadata_Object_Field = exports.Plugin_Metadata_Object = exports.Plugin_Metadata = exports.Plugin_SalesforceConnection = exports.Plugin = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const plugin_pb_1 = require("../../common/v1/plugin_pb");
const auth_pb_1 = require("../../common/v1/auth_pb");
/**
 * @generated from message plugins.salesforce.v1.Plugin
 */
class Plugin extends protobuf_1.Message {
    /**
     * Plugin fields
     *
     * @generated from field: optional string name = 1;
     */
    name;
    /**
     * @generated from field: plugins.salesforce.v1.Plugin.SalesforceConnection connection = 2;
     */
    connection;
    /**
     * @generated from oneof plugins.salesforce.v1.Plugin.salesforce_action
     */
    salesforceAction = { case: undefined };
    /**
     * @generated from field: optional plugins.common.v1.DynamicWorkflowConfiguration dynamic_workflow_configuration = 6;
     */
    dynamicWorkflowConfiguration;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.salesforce.v1.Plugin";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 2, name: "connection", kind: "message", T: Plugin_SalesforceConnection },
        { no: 3, name: "soql", kind: "message", T: Plugin_Soql, oneof: "salesforce_action" },
        { no: 4, name: "crud", kind: "message", T: Plugin_Crud, oneof: "salesforce_action" },
        { no: 5, name: "bulk", kind: "message", T: Plugin_Bulk, oneof: "salesforce_action" },
        { no: 6, name: "dynamic_workflow_configuration", kind: "message", T: plugin_pb_1.DynamicWorkflowConfiguration, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin, a, b);
    }
}
exports.Plugin = Plugin;
/**
 * children messages
 *
 * @generated from message plugins.salesforce.v1.Plugin.SalesforceConnection
 */
class Plugin_SalesforceConnection extends protobuf_1.Message {
    /**
     * @generated from field: string instance_url = 1;
     */
    instanceUrl = "";
    /**
     * @generated from field: plugins.common.v1.Auth auth = 2;
     */
    auth;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.salesforce.v1.Plugin.SalesforceConnection";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "instance_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "auth", kind: "message", T: auth_pb_1.Auth },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_SalesforceConnection().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_SalesforceConnection().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_SalesforceConnection().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_SalesforceConnection, a, b);
    }
}
exports.Plugin_SalesforceConnection = Plugin_SalesforceConnection;
/**
 * @generated from message plugins.salesforce.v1.Plugin.Metadata
 */
class Plugin_Metadata extends protobuf_1.Message {
    /**
     * @generated from field: repeated plugins.salesforce.v1.Plugin.Metadata.Object objects = 1;
     */
    objects = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.salesforce.v1.Plugin.Metadata";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "objects", kind: "message", T: Plugin_Metadata_Object, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_Metadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_Metadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_Metadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_Metadata, a, b);
    }
}
exports.Plugin_Metadata = Plugin_Metadata;
/**
 * @generated from message plugins.salesforce.v1.Plugin.Metadata.Object
 */
class Plugin_Metadata_Object extends protobuf_1.Message {
    /**
     * @generated from field: repeated plugins.salesforce.v1.Plugin.Metadata.Object.Field fields = 1;
     */
    fields = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.salesforce.v1.Plugin.Metadata.Object";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "fields", kind: "message", T: Plugin_Metadata_Object_Field, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_Metadata_Object().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_Metadata_Object().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_Metadata_Object().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_Metadata_Object, a, b);
    }
}
exports.Plugin_Metadata_Object = Plugin_Metadata_Object;
/**
 * @generated from message plugins.salesforce.v1.Plugin.Metadata.Object.Field
 */
class Plugin_Metadata_Object_Field extends protobuf_1.Message {
    /**
     * @generated from field: string name = 1;
     */
    name = "";
    /**
     * @generated from field: string label = 2;
     */
    label = "";
    /**
     * @generated from field: string type = 3;
     */
    type = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.salesforce.v1.Plugin.Metadata.Object.Field";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_Metadata_Object_Field().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_Metadata_Object_Field().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_Metadata_Object_Field().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_Metadata_Object_Field, a, b);
    }
}
exports.Plugin_Metadata_Object_Field = Plugin_Metadata_Object_Field;
/**
 * Action Fields
 *
 * @generated from message plugins.salesforce.v1.Plugin.Soql
 */
class Plugin_Soql extends protobuf_1.Message {
    /**
     * @generated from field: string sql_body = 1;
     */
    sqlBody = "";
    /**
     * @generated from field: plugins.salesforce.v1.Plugin.Soql.SoqlAction action = 2;
     */
    action = Plugin_Soql_SoqlAction.UNSPECIFIED;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.salesforce.v1.Plugin.Soql";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "sql_body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "action", kind: "enum", T: protobuf_1.proto3.getEnumType(Plugin_Soql_SoqlAction) },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_Soql().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_Soql().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_Soql().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_Soql, a, b);
    }
}
exports.Plugin_Soql = Plugin_Soql;
/**
 * Specified for singleton types.
 *
 * @generated from enum plugins.salesforce.v1.Plugin.Soql.SoqlAction
 */
var Plugin_Soql_SoqlAction;
(function (Plugin_Soql_SoqlAction) {
    /**
     * @generated from enum value: SOQL_ACTION_UNSPECIFIED = 0;
     */
    Plugin_Soql_SoqlAction[Plugin_Soql_SoqlAction["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: SOQL_ACTION_SOQL = 1;
     */
    Plugin_Soql_SoqlAction[Plugin_Soql_SoqlAction["SOQL"] = 1] = "SOQL";
})(Plugin_Soql_SoqlAction || (exports.Plugin_Soql_SoqlAction = Plugin_Soql_SoqlAction = {}));
// Retrieve enum metadata with: proto3.getEnumType(Plugin_Soql_SoqlAction)
protobuf_1.proto3.util.setEnumType(Plugin_Soql_SoqlAction, "plugins.salesforce.v1.Plugin.Soql.SoqlAction", [
    { no: 0, name: "SOQL_ACTION_UNSPECIFIED" },
    { no: 1, name: "SOQL_ACTION_SOQL" },
]);
/**
 * @generated from message plugins.salesforce.v1.Plugin.Crud
 */
class Plugin_Crud extends protobuf_1.Message {
    /**
     * @generated from field: string resource_type = 1;
     */
    resourceType = "";
    /**
     * @generated from field: plugins.salesforce.v1.Plugin.Crud.CrudAction action = 2;
     */
    action = Plugin_Crud_CrudAction.UNSPECIFIED;
    /**
     * delete doesn't require body, other actions do
     *
     * @generated from field: string resource_body = 3;
     */
    resourceBody = "";
    /**
     * delete requires resource_id, other actions don't
     *
     * @generated from field: string resource_id = 4;
     */
    resourceId = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.salesforce.v1.Plugin.Crud";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "action", kind: "enum", T: protobuf_1.proto3.getEnumType(Plugin_Crud_CrudAction) },
        { no: 3, name: "resource_body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "resource_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_Crud().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_Crud().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_Crud().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_Crud, a, b);
    }
}
exports.Plugin_Crud = Plugin_Crud;
/**
 * @generated from enum plugins.salesforce.v1.Plugin.Crud.CrudAction
 */
var Plugin_Crud_CrudAction;
(function (Plugin_Crud_CrudAction) {
    /**
     * @generated from enum value: CRUD_ACTION_UNSPECIFIED = 0;
     */
    Plugin_Crud_CrudAction[Plugin_Crud_CrudAction["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: CRUD_ACTION_CREATE = 1;
     */
    Plugin_Crud_CrudAction[Plugin_Crud_CrudAction["CREATE"] = 1] = "CREATE";
    /**
     * @generated from enum value: CRUD_ACTION_UPDATE = 2;
     */
    Plugin_Crud_CrudAction[Plugin_Crud_CrudAction["UPDATE"] = 2] = "UPDATE";
    /**
     * @generated from enum value: CRUD_ACTION_DELETE = 3;
     */
    Plugin_Crud_CrudAction[Plugin_Crud_CrudAction["DELETE"] = 3] = "DELETE";
    /**
     * @generated from enum value: CRUD_ACTION_READ = 4;
     */
    Plugin_Crud_CrudAction[Plugin_Crud_CrudAction["READ"] = 4] = "READ";
})(Plugin_Crud_CrudAction || (exports.Plugin_Crud_CrudAction = Plugin_Crud_CrudAction = {}));
// Retrieve enum metadata with: proto3.getEnumType(Plugin_Crud_CrudAction)
protobuf_1.proto3.util.setEnumType(Plugin_Crud_CrudAction, "plugins.salesforce.v1.Plugin.Crud.CrudAction", [
    { no: 0, name: "CRUD_ACTION_UNSPECIFIED" },
    { no: 1, name: "CRUD_ACTION_CREATE" },
    { no: 2, name: "CRUD_ACTION_UPDATE" },
    { no: 3, name: "CRUD_ACTION_DELETE" },
    { no: 4, name: "CRUD_ACTION_READ" },
]);
/**
 * @generated from message plugins.salesforce.v1.Plugin.Bulk
 */
class Plugin_Bulk extends protobuf_1.Message {
    /**
     * @generated from field: string resource_type = 1;
     */
    resourceType = "";
    /**
     * @generated from field: plugins.salesforce.v1.Plugin.Bulk.BulkAction action = 2;
     */
    action = Plugin_Bulk_BulkAction.UNSPECIFIED;
    /**
     * delete and update require Id, which will be part of body
     *
     * @generated from field: string resource_body = 3;
     */
    resourceBody = "";
    /**
     * only used for upsert https://developer.salesforce.com/docs/atlas.en-us.api_asynch.meta/api_asynch/walkthrough_upsert.htm
     *
     * @generated from field: string external_id = 4;
     */
    externalId = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.salesforce.v1.Plugin.Bulk";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "action", kind: "enum", T: protobuf_1.proto3.getEnumType(Plugin_Bulk_BulkAction) },
        { no: 3, name: "resource_body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "external_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_Bulk().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_Bulk().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_Bulk().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_Bulk, a, b);
    }
}
exports.Plugin_Bulk = Plugin_Bulk;
/**
 * @generated from enum plugins.salesforce.v1.Plugin.Bulk.BulkAction
 */
var Plugin_Bulk_BulkAction;
(function (Plugin_Bulk_BulkAction) {
    /**
     * @generated from enum value: BULK_ACTION_UNSPECIFIED = 0;
     */
    Plugin_Bulk_BulkAction[Plugin_Bulk_BulkAction["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: BULK_ACTION_CREATE = 1;
     */
    Plugin_Bulk_BulkAction[Plugin_Bulk_BulkAction["CREATE"] = 1] = "CREATE";
    /**
     * @generated from enum value: BULK_ACTION_UPDATE = 2;
     */
    Plugin_Bulk_BulkAction[Plugin_Bulk_BulkAction["UPDATE"] = 2] = "UPDATE";
    /**
     * @generated from enum value: BULK_ACTION_DELETE = 3;
     */
    Plugin_Bulk_BulkAction[Plugin_Bulk_BulkAction["DELETE"] = 3] = "DELETE";
    /**
     * @generated from enum value: BULK_ACTION_UPSERT = 4;
     */
    Plugin_Bulk_BulkAction[Plugin_Bulk_BulkAction["UPSERT"] = 4] = "UPSERT";
})(Plugin_Bulk_BulkAction || (exports.Plugin_Bulk_BulkAction = Plugin_Bulk_BulkAction = {}));
// Retrieve enum metadata with: proto3.getEnumType(Plugin_Bulk_BulkAction)
protobuf_1.proto3.util.setEnumType(Plugin_Bulk_BulkAction, "plugins.salesforce.v1.Plugin.Bulk.BulkAction", [
    { no: 0, name: "BULK_ACTION_UNSPECIFIED" },
    { no: 1, name: "BULK_ACTION_CREATE" },
    { no: 2, name: "BULK_ACTION_UPDATE" },
    { no: 3, name: "BULK_ACTION_DELETE" },
    { no: 4, name: "BULK_ACTION_UPSERT" },
]);
//# sourceMappingURL=plugin_pb.map