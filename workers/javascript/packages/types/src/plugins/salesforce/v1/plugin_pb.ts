// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file plugins/salesforce/v1/plugin.proto (package plugins.salesforce.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { DynamicWorkflowConfiguration } from "../../common/v1/plugin_pb";
import { Auth } from "../../common/v1/auth_pb";

/**
 * @generated from message plugins.salesforce.v1.Plugin
 */
export class Plugin extends Message<Plugin> {
  /**
   * Plugin fields
   *
   * @generated from field: optional string name = 1;
   */
  name?: string;

  /**
   * @generated from field: plugins.salesforce.v1.Plugin.SalesforceConnection connection = 2;
   */
  connection?: Plugin_SalesforceConnection;

  /**
   * @generated from oneof plugins.salesforce.v1.Plugin.salesforce_action
   */
  salesforceAction: {
    /**
     * @generated from field: plugins.salesforce.v1.Plugin.Soql soql = 3;
     */
    value: Plugin_Soql;
    case: "soql";
  } | {
    /**
     * @generated from field: plugins.salesforce.v1.Plugin.Crud crud = 4;
     */
    value: Plugin_Crud;
    case: "crud";
  } | {
    /**
     * @generated from field: plugins.salesforce.v1.Plugin.Bulk bulk = 5;
     */
    value: Plugin_Bulk;
    case: "bulk";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: optional plugins.common.v1.DynamicWorkflowConfiguration dynamic_workflow_configuration = 6;
   */
  dynamicWorkflowConfiguration?: DynamicWorkflowConfiguration;

  constructor(data?: PartialMessage<Plugin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.salesforce.v1.Plugin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "connection", kind: "message", T: Plugin_SalesforceConnection },
    { no: 3, name: "soql", kind: "message", T: Plugin_Soql, oneof: "salesforce_action" },
    { no: 4, name: "crud", kind: "message", T: Plugin_Crud, oneof: "salesforce_action" },
    { no: 5, name: "bulk", kind: "message", T: Plugin_Bulk, oneof: "salesforce_action" },
    { no: 6, name: "dynamic_workflow_configuration", kind: "message", T: DynamicWorkflowConfiguration, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin {
    return new Plugin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin | PlainMessage<Plugin> | undefined, b: Plugin | PlainMessage<Plugin> | undefined): boolean {
    return proto3.util.equals(Plugin, a, b);
  }
}

/**
 * children messages
 *
 * @generated from message plugins.salesforce.v1.Plugin.SalesforceConnection
 */
export class Plugin_SalesforceConnection extends Message<Plugin_SalesforceConnection> {
  /**
   * @generated from field: string instance_url = 1;
   */
  instanceUrl = "";

  /**
   * @generated from field: plugins.common.v1.Auth auth = 2;
   */
  auth?: Auth;

  constructor(data?: PartialMessage<Plugin_SalesforceConnection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.salesforce.v1.Plugin.SalesforceConnection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "auth", kind: "message", T: Auth },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_SalesforceConnection {
    return new Plugin_SalesforceConnection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_SalesforceConnection {
    return new Plugin_SalesforceConnection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_SalesforceConnection {
    return new Plugin_SalesforceConnection().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_SalesforceConnection | PlainMessage<Plugin_SalesforceConnection> | undefined, b: Plugin_SalesforceConnection | PlainMessage<Plugin_SalesforceConnection> | undefined): boolean {
    return proto3.util.equals(Plugin_SalesforceConnection, a, b);
  }
}

/**
 * @generated from message plugins.salesforce.v1.Plugin.Metadata
 */
export class Plugin_Metadata extends Message<Plugin_Metadata> {
  /**
   * @generated from field: repeated plugins.salesforce.v1.Plugin.Metadata.Object objects = 1;
   */
  objects: Plugin_Metadata_Object[] = [];

  constructor(data?: PartialMessage<Plugin_Metadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.salesforce.v1.Plugin.Metadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "objects", kind: "message", T: Plugin_Metadata_Object, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Metadata {
    return new Plugin_Metadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Metadata {
    return new Plugin_Metadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Metadata {
    return new Plugin_Metadata().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Metadata | PlainMessage<Plugin_Metadata> | undefined, b: Plugin_Metadata | PlainMessage<Plugin_Metadata> | undefined): boolean {
    return proto3.util.equals(Plugin_Metadata, a, b);
  }
}

/**
 * @generated from message plugins.salesforce.v1.Plugin.Metadata.Object
 */
export class Plugin_Metadata_Object extends Message<Plugin_Metadata_Object> {
  /**
   * @generated from field: repeated plugins.salesforce.v1.Plugin.Metadata.Object.Field fields = 1;
   */
  fields: Plugin_Metadata_Object_Field[] = [];

  constructor(data?: PartialMessage<Plugin_Metadata_Object>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.salesforce.v1.Plugin.Metadata.Object";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fields", kind: "message", T: Plugin_Metadata_Object_Field, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Metadata_Object {
    return new Plugin_Metadata_Object().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Metadata_Object {
    return new Plugin_Metadata_Object().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Metadata_Object {
    return new Plugin_Metadata_Object().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Metadata_Object | PlainMessage<Plugin_Metadata_Object> | undefined, b: Plugin_Metadata_Object | PlainMessage<Plugin_Metadata_Object> | undefined): boolean {
    return proto3.util.equals(Plugin_Metadata_Object, a, b);
  }
}

/**
 * @generated from message plugins.salesforce.v1.Plugin.Metadata.Object.Field
 */
export class Plugin_Metadata_Object_Field extends Message<Plugin_Metadata_Object_Field> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string label = 2;
   */
  label = "";

  /**
   * @generated from field: string type = 3;
   */
  type = "";

  constructor(data?: PartialMessage<Plugin_Metadata_Object_Field>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.salesforce.v1.Plugin.Metadata.Object.Field";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Metadata_Object_Field {
    return new Plugin_Metadata_Object_Field().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Metadata_Object_Field {
    return new Plugin_Metadata_Object_Field().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Metadata_Object_Field {
    return new Plugin_Metadata_Object_Field().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Metadata_Object_Field | PlainMessage<Plugin_Metadata_Object_Field> | undefined, b: Plugin_Metadata_Object_Field | PlainMessage<Plugin_Metadata_Object_Field> | undefined): boolean {
    return proto3.util.equals(Plugin_Metadata_Object_Field, a, b);
  }
}

/**
 * Action Fields
 *
 * @generated from message plugins.salesforce.v1.Plugin.Soql
 */
export class Plugin_Soql extends Message<Plugin_Soql> {
  /**
   * @generated from field: string sql_body = 1;
   */
  sqlBody = "";

  /**
   * @generated from field: plugins.salesforce.v1.Plugin.Soql.SoqlAction action = 2;
   */
  action = Plugin_Soql_SoqlAction.UNSPECIFIED;

  constructor(data?: PartialMessage<Plugin_Soql>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.salesforce.v1.Plugin.Soql";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sql_body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "action", kind: "enum", T: proto3.getEnumType(Plugin_Soql_SoqlAction) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Soql {
    return new Plugin_Soql().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Soql {
    return new Plugin_Soql().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Soql {
    return new Plugin_Soql().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Soql | PlainMessage<Plugin_Soql> | undefined, b: Plugin_Soql | PlainMessage<Plugin_Soql> | undefined): boolean {
    return proto3.util.equals(Plugin_Soql, a, b);
  }
}

/**
 * Specified for singleton types.
 *
 * @generated from enum plugins.salesforce.v1.Plugin.Soql.SoqlAction
 */
export enum Plugin_Soql_SoqlAction {
  /**
   * @generated from enum value: SOQL_ACTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SOQL_ACTION_SOQL = 1;
   */
  SOQL = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Plugin_Soql_SoqlAction)
proto3.util.setEnumType(Plugin_Soql_SoqlAction, "plugins.salesforce.v1.Plugin.Soql.SoqlAction", [
  { no: 0, name: "SOQL_ACTION_UNSPECIFIED" },
  { no: 1, name: "SOQL_ACTION_SOQL" },
]);

/**
 * @generated from message plugins.salesforce.v1.Plugin.Crud
 */
export class Plugin_Crud extends Message<Plugin_Crud> {
  /**
   * @generated from field: string resource_type = 1;
   */
  resourceType = "";

  /**
   * @generated from field: plugins.salesforce.v1.Plugin.Crud.CrudAction action = 2;
   */
  action = Plugin_Crud_CrudAction.UNSPECIFIED;

  /**
   * delete doesn't require body, other actions do
   *
   * @generated from field: string resource_body = 3;
   */
  resourceBody = "";

  /**
   * delete requires resource_id, other actions don't
   *
   * @generated from field: string resource_id = 4;
   */
  resourceId = "";

  constructor(data?: PartialMessage<Plugin_Crud>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.salesforce.v1.Plugin.Crud";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "action", kind: "enum", T: proto3.getEnumType(Plugin_Crud_CrudAction) },
    { no: 3, name: "resource_body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "resource_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Crud {
    return new Plugin_Crud().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Crud {
    return new Plugin_Crud().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Crud {
    return new Plugin_Crud().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Crud | PlainMessage<Plugin_Crud> | undefined, b: Plugin_Crud | PlainMessage<Plugin_Crud> | undefined): boolean {
    return proto3.util.equals(Plugin_Crud, a, b);
  }
}

/**
 * @generated from enum plugins.salesforce.v1.Plugin.Crud.CrudAction
 */
export enum Plugin_Crud_CrudAction {
  /**
   * @generated from enum value: CRUD_ACTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CRUD_ACTION_CREATE = 1;
   */
  CREATE = 1,

  /**
   * @generated from enum value: CRUD_ACTION_UPDATE = 2;
   */
  UPDATE = 2,

  /**
   * @generated from enum value: CRUD_ACTION_DELETE = 3;
   */
  DELETE = 3,

  /**
   * @generated from enum value: CRUD_ACTION_READ = 4;
   */
  READ = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(Plugin_Crud_CrudAction)
proto3.util.setEnumType(Plugin_Crud_CrudAction, "plugins.salesforce.v1.Plugin.Crud.CrudAction", [
  { no: 0, name: "CRUD_ACTION_UNSPECIFIED" },
  { no: 1, name: "CRUD_ACTION_CREATE" },
  { no: 2, name: "CRUD_ACTION_UPDATE" },
  { no: 3, name: "CRUD_ACTION_DELETE" },
  { no: 4, name: "CRUD_ACTION_READ" },
]);

/**
 * @generated from message plugins.salesforce.v1.Plugin.Bulk
 */
export class Plugin_Bulk extends Message<Plugin_Bulk> {
  /**
   * @generated from field: string resource_type = 1;
   */
  resourceType = "";

  /**
   * @generated from field: plugins.salesforce.v1.Plugin.Bulk.BulkAction action = 2;
   */
  action = Plugin_Bulk_BulkAction.UNSPECIFIED;

  /**
   * delete and update require Id, which will be part of body
   *
   * @generated from field: string resource_body = 3;
   */
  resourceBody = "";

  /**
   * only used for upsert https://developer.salesforce.com/docs/atlas.en-us.api_asynch.meta/api_asynch/walkthrough_upsert.htm
   *
   * @generated from field: string external_id = 4;
   */
  externalId = "";

  constructor(data?: PartialMessage<Plugin_Bulk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.salesforce.v1.Plugin.Bulk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "action", kind: "enum", T: proto3.getEnumType(Plugin_Bulk_BulkAction) },
    { no: 3, name: "resource_body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "external_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Bulk {
    return new Plugin_Bulk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Bulk {
    return new Plugin_Bulk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Bulk {
    return new Plugin_Bulk().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Bulk | PlainMessage<Plugin_Bulk> | undefined, b: Plugin_Bulk | PlainMessage<Plugin_Bulk> | undefined): boolean {
    return proto3.util.equals(Plugin_Bulk, a, b);
  }
}

/**
 * @generated from enum plugins.salesforce.v1.Plugin.Bulk.BulkAction
 */
export enum Plugin_Bulk_BulkAction {
  /**
   * @generated from enum value: BULK_ACTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: BULK_ACTION_CREATE = 1;
   */
  CREATE = 1,

  /**
   * @generated from enum value: BULK_ACTION_UPDATE = 2;
   */
  UPDATE = 2,

  /**
   * @generated from enum value: BULK_ACTION_DELETE = 3;
   */
  DELETE = 3,

  /**
   * @generated from enum value: BULK_ACTION_UPSERT = 4;
   */
  UPSERT = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(Plugin_Bulk_BulkAction)
proto3.util.setEnumType(Plugin_Bulk_BulkAction, "plugins.salesforce.v1.Plugin.Bulk.BulkAction", [
  { no: 0, name: "BULK_ACTION_UNSPECIFIED" },
  { no: 1, name: "BULK_ACTION_CREATE" },
  { no: 2, name: "BULK_ACTION_UPDATE" },
  { no: 3, name: "BULK_ACTION_DELETE" },
  { no: 4, name: "BULK_ACTION_UPSERT" },
]);

