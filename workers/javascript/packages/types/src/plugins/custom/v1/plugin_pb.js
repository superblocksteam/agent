"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file plugins/custom/v1/plugin.proto (package plugins.custom.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plugin = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * NOTE(frank): THIS IS EXPERIMENTAL AND SUBJECT TO CHANGE
 *
 * @generated from message plugins.custom.v1.Plugin
 */
class Plugin extends protobuf_1.Message {
    /**
     * @generated from field: string name = 1;
     */
    name = "";
    /**
     * @generated from field: string version = 2;
     */
    version = "";
    /**
     * NOTE(frank): Need to support JSON in the UI
     *
     * @generated from field: string config = 3;
     */
    config = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.custom.v1.Plugin";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "config", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin, a, b);
    }
}
exports.Plugin = Plugin;
//# sourceMappingURL=plugin_pb.map