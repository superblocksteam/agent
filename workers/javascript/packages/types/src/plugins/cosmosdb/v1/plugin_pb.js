"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file plugins/cosmosdb/v1/plugin.proto (package plugins.cosmosdb.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plugin_PointOperation_Create = exports.Plugin_PointOperation_Upsert = exports.Plugin_PointOperation_Replace = exports.Plugin_PointOperation_Delete = exports.Plugin_PointOperation_Read = exports.Plugin_PointOperation = exports.Plugin_Sql_Singleton = exports.Plugin_Sql = exports.Plugin_Metadata_Container_PartitionKey = exports.Plugin_Metadata_Container = exports.Plugin_Metadata = exports.Plugin_CosmosDbConnection = exports.Plugin = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const plugin_pb_1 = require("../../common/v1/plugin_pb");
const auth_pb_1 = require("../../common/v1/auth_pb");
/**
 * @generated from message plugins.cosmosdb.v1.Plugin
 */
class Plugin extends protobuf_1.Message {
    /**
     * @generated from field: optional string name = 1;
     */
    name;
    /**
     * @generated from field: optional plugins.common.v1.DynamicWorkflowConfiguration dynamic_workflow_configuration = 2;
     */
    dynamicWorkflowConfiguration;
    /**
     * @generated from field: plugins.cosmosdb.v1.Plugin.CosmosDbConnection connection = 3;
     */
    connection;
    /**
     * ideally, this would be inside the connection_type but due to our auth flow we do this.
     *
     * @generated from oneof plugins.cosmosdb.v1.Plugin.cosmosdb_action
     */
    cosmosdbAction = { case: undefined };
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.cosmosdb.v1.Plugin";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 2, name: "dynamic_workflow_configuration", kind: "message", T: plugin_pb_1.DynamicWorkflowConfiguration, opt: true },
        { no: 3, name: "connection", kind: "message", T: Plugin_CosmosDbConnection },
        { no: 5, name: "sql", kind: "message", T: Plugin_Sql, oneof: "cosmosdb_action" },
        { no: 6, name: "point_operation", kind: "message", T: Plugin_PointOperation, oneof: "cosmosdb_action" },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin, a, b);
    }
}
exports.Plugin = Plugin;
/**
 * @generated from message plugins.cosmosdb.v1.Plugin.CosmosDbConnection
 */
class Plugin_CosmosDbConnection extends protobuf_1.Message {
    /**
     * @generated from field: string host = 1;
     */
    host = "";
    /**
     * @generated from field: int32 port = 2;
     */
    port = 0;
    /**
     * @generated from field: string database_id = 3;
     */
    databaseId = "";
    /**
     * @generated from field: plugins.common.v1.Azure auth = 4;
     */
    auth;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.cosmosdb.v1.Plugin.CosmosDbConnection";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 3, name: "database_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "auth", kind: "message", T: auth_pb_1.Azure },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_CosmosDbConnection().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_CosmosDbConnection().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_CosmosDbConnection().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_CosmosDbConnection, a, b);
    }
}
exports.Plugin_CosmosDbConnection = Plugin_CosmosDbConnection;
/**
 * @generated from message plugins.cosmosdb.v1.Plugin.Metadata
 */
class Plugin_Metadata extends protobuf_1.Message {
    /**
     * @generated from field: repeated plugins.cosmosdb.v1.Plugin.Metadata.Container containers = 1;
     */
    containers = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.cosmosdb.v1.Plugin.Metadata";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "containers", kind: "message", T: Plugin_Metadata_Container, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_Metadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_Metadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_Metadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_Metadata, a, b);
    }
}
exports.Plugin_Metadata = Plugin_Metadata;
/**
 * @generated from message plugins.cosmosdb.v1.Plugin.Metadata.Container
 */
class Plugin_Metadata_Container extends protobuf_1.Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey partition_key = 2;
     */
    partitionKey;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.cosmosdb.v1.Plugin.Metadata.Container";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "partition_key", kind: "message", T: Plugin_Metadata_Container_PartitionKey },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_Metadata_Container().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_Metadata_Container().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_Metadata_Container().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_Metadata_Container, a, b);
    }
}
exports.Plugin_Metadata_Container = Plugin_Metadata_Container;
/**
 * @generated from message plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey
 */
class Plugin_Metadata_Container_PartitionKey extends protobuf_1.Message {
    /**
     * @generated from field: repeated string paths = 1;
     */
    paths = [];
    /**
     * @generated from field: string kind = 2;
     */
    kind = "";
    /**
     * @generated from field: optional int32 version = 3;
     */
    version;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.cosmosdb.v1.Plugin.Metadata.Container.PartitionKey";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 2, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_Metadata_Container_PartitionKey().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_Metadata_Container_PartitionKey().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_Metadata_Container_PartitionKey().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_Metadata_Container_PartitionKey, a, b);
    }
}
exports.Plugin_Metadata_Container_PartitionKey = Plugin_Metadata_Container_PartitionKey;
/**
 * Action Fields
 *
 * @generated from message plugins.cosmosdb.v1.Plugin.Sql
 */
class Plugin_Sql extends protobuf_1.Message {
    /**
     * @generated from oneof plugins.cosmosdb.v1.Plugin.Sql.action
     */
    action = { case: undefined };
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.cosmosdb.v1.Plugin.Sql";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "singleton", kind: "message", T: Plugin_Sql_Singleton, oneof: "action" },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_Sql().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_Sql().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_Sql().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_Sql, a, b);
    }
}
exports.Plugin_Sql = Plugin_Sql;
/**
 * https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cosmosdb/cosmos/src/client/Item/Items.ts#L87
 *
 * @generated from message plugins.cosmosdb.v1.Plugin.Sql.Singleton
 */
class Plugin_Sql_Singleton extends protobuf_1.Message {
    /**
     * @generated from field: string container_id = 1;
     */
    containerId = "";
    /**
     * @generated from field: string query = 2;
     */
    query = "";
    /**
     * @generated from field: bool cross_partition = 3;
     */
    crossPartition = false;
    /**
     * @generated from field: optional string partition_key = 4;
     */
    partitionKey;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.cosmosdb.v1.Plugin.Sql.Singleton";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "container_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "cross_partition", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 4, name: "partition_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_Sql_Singleton().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_Sql_Singleton().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_Sql_Singleton().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_Sql_Singleton, a, b);
    }
}
exports.Plugin_Sql_Singleton = Plugin_Sql_Singleton;
/**
 * @generated from message plugins.cosmosdb.v1.Plugin.PointOperation
 */
class Plugin_PointOperation extends protobuf_1.Message {
    /**
     * @generated from field: string container_id = 1;
     */
    containerId = "";
    /**
     * @generated from oneof plugins.cosmosdb.v1.Plugin.PointOperation.action
     */
    action = { case: undefined };
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.cosmosdb.v1.Plugin.PointOperation";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "container_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "read", kind: "message", T: Plugin_PointOperation_Read, oneof: "action" },
        { no: 3, name: "replace", kind: "message", T: Plugin_PointOperation_Replace, oneof: "action" },
        { no: 4, name: "upsert", kind: "message", T: Plugin_PointOperation_Upsert, oneof: "action" },
        { no: 5, name: "delete", kind: "message", T: Plugin_PointOperation_Delete, oneof: "action" },
        { no: 6, name: "create", kind: "message", T: Plugin_PointOperation_Create, oneof: "action" },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_PointOperation().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_PointOperation().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_PointOperation().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_PointOperation, a, b);
    }
}
exports.Plugin_PointOperation = Plugin_PointOperation;
/**
 * https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cosmosdb/cosmos/src/client/Item/Item.ts#L78
 *
 * @generated from message plugins.cosmosdb.v1.Plugin.PointOperation.Read
 */
class Plugin_PointOperation_Read extends protobuf_1.Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: optional string partition_key = 3;
     */
    partitionKey;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.cosmosdb.v1.Plugin.PointOperation.Read";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "partition_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_PointOperation_Read().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_PointOperation_Read().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_PointOperation_Read().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_PointOperation_Read, a, b);
    }
}
exports.Plugin_PointOperation_Read = Plugin_PointOperation_Read;
/**
 * https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cosmosdb/cosmos/src/client/Item/Item.ts#L196
 *
 * @generated from message plugins.cosmosdb.v1.Plugin.PointOperation.Delete
 */
class Plugin_PointOperation_Delete extends protobuf_1.Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: optional string partition_key = 3;
     */
    partitionKey;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.cosmosdb.v1.Plugin.PointOperation.Delete";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "partition_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_PointOperation_Delete().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_PointOperation_Delete().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_PointOperation_Delete().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_PointOperation_Delete, a, b);
    }
}
exports.Plugin_PointOperation_Delete = Plugin_PointOperation_Delete;
/**
 * https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cosmosdb/cosmos/src/client/Item/Item.ts#L128
 *
 * @generated from message plugins.cosmosdb.v1.Plugin.PointOperation.Replace
 */
class Plugin_PointOperation_Replace extends protobuf_1.Message {
    /**
     * @generated from field: string body = 1;
     */
    body = "";
    /**
     * @generated from field: optional string partition_key = 3;
     */
    partitionKey;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.cosmosdb.v1.Plugin.PointOperation.Replace";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "partition_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_PointOperation_Replace().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_PointOperation_Replace().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_PointOperation_Replace().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_PointOperation_Replace, a, b);
    }
}
exports.Plugin_PointOperation_Replace = Plugin_PointOperation_Replace;
/**
 * https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cosmosdb/cosmos/src/client/Item/Items.ts#L355
 *
 * @generated from message plugins.cosmosdb.v1.Plugin.PointOperation.Upsert
 */
class Plugin_PointOperation_Upsert extends protobuf_1.Message {
    /**
     * @generated from field: string body = 1;
     */
    body = "";
    /**
     * @generated from field: optional string partition_key = 3;
     */
    partitionKey;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.cosmosdb.v1.Plugin.PointOperation.Upsert";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "partition_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_PointOperation_Upsert().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_PointOperation_Upsert().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_PointOperation_Upsert().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_PointOperation_Upsert, a, b);
    }
}
exports.Plugin_PointOperation_Upsert = Plugin_PointOperation_Upsert;
/**
 * https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/cosmosdb/cosmos/src/client/Item/Items.ts#L295
 *
 * @generated from message plugins.cosmosdb.v1.Plugin.PointOperation.Create
 */
class Plugin_PointOperation_Create extends protobuf_1.Message {
    /**
     * @generated from field: string body = 1;
     */
    body = "";
    /**
     * @generated from field: optional string partition_key = 3;
     */
    partitionKey;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.cosmosdb.v1.Plugin.PointOperation.Create";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "partition_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_PointOperation_Create().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_PointOperation_Create().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_PointOperation_Create().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_PointOperation_Create, a, b);
    }
}
exports.Plugin_PointOperation_Create = Plugin_PointOperation_Create;
//# sourceMappingURL=plugin_pb.map