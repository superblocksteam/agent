"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file plugins/pinecone/v1/plugin.proto (package plugins.pinecone.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plugin_Query = exports.Plugin_UpsertVector = exports.Plugin_CreateIndex = exports.Plugin_ListIndexes = exports.Plugin_Connection = exports.Plugin = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const plugin_pb_1 = require("../../common/v1/plugin_pb");
/**
 * @generated from message plugins.pinecone.v1.Plugin
 */
class Plugin extends protobuf_1.Message {
    /**
     * @generated from field: optional string name = 1;
     */
    name;
    /**
     * @generated from field: optional plugins.common.v1.DynamicWorkflowConfiguration dynamic_workflow_configuration = 2;
     */
    dynamicWorkflowConfiguration;
    /**
     * @generated from field: plugins.pinecone.v1.Plugin.Connection connection = 3;
     */
    connection;
    /**
     * @generated from oneof plugins.pinecone.v1.Plugin.action
     */
    action = { case: undefined };
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.pinecone.v1.Plugin";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 2, name: "dynamic_workflow_configuration", kind: "message", T: plugin_pb_1.DynamicWorkflowConfiguration, opt: true },
        { no: 3, name: "connection", kind: "message", T: Plugin_Connection },
        { no: 4, name: "list_indexes", kind: "message", T: Plugin_ListIndexes, oneof: "action" },
        { no: 5, name: "create_index", kind: "message", T: Plugin_CreateIndex, oneof: "action" },
        { no: 6, name: "upsert_vector", kind: "message", T: Plugin_UpsertVector, oneof: "action" },
        { no: 7, name: "query", kind: "message", T: Plugin_Query, oneof: "action" },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin, a, b);
    }
}
exports.Plugin = Plugin;
/**
 * @generated from message plugins.pinecone.v1.Plugin.Connection
 */
class Plugin_Connection extends protobuf_1.Message {
    /**
     * @generated from field: string environment = 1;
     */
    environment = "";
    /**
     * @generated from field: string api_key = 2;
     */
    apiKey = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.pinecone.v1.Plugin.Connection";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "environment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "api_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_Connection().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_Connection().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_Connection().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_Connection, a, b);
    }
}
exports.Plugin_Connection = Plugin_Connection;
/**
 * @generated from message plugins.pinecone.v1.Plugin.ListIndexes
 */
class Plugin_ListIndexes extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.pinecone.v1.Plugin.ListIndexes";
    static fields = protobuf_1.proto3.util.newFieldList(() => []);
    static fromBinary(bytes, options) {
        return new Plugin_ListIndexes().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_ListIndexes().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_ListIndexes().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_ListIndexes, a, b);
    }
}
exports.Plugin_ListIndexes = Plugin_ListIndexes;
/**
 * @generated from message plugins.pinecone.v1.Plugin.CreateIndex
 */
class Plugin_CreateIndex extends protobuf_1.Message {
    /**
     * @generated from field: string name = 1;
     */
    name = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.pinecone.v1.Plugin.CreateIndex";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_CreateIndex().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_CreateIndex().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_CreateIndex().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_CreateIndex, a, b);
    }
}
exports.Plugin_CreateIndex = Plugin_CreateIndex;
/**
 * @generated from message plugins.pinecone.v1.Plugin.UpsertVector
 */
class Plugin_UpsertVector extends protobuf_1.Message {
    /**
     * @generated from oneof plugins.pinecone.v1.Plugin.UpsertVector.data
     */
    data = { case: undefined };
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.pinecone.v1.Plugin.UpsertVector";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "raw", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "data" },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_UpsertVector().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_UpsertVector().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_UpsertVector().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_UpsertVector, a, b);
    }
}
exports.Plugin_UpsertVector = Plugin_UpsertVector;
/**
 * @generated from message plugins.pinecone.v1.Plugin.Query
 */
class Plugin_Query extends protobuf_1.Message {
    /**
     * @generated from field: string vector = 1;
     */
    vector = "";
    /**
     * @generated from field: optional string top_k = 2;
     */
    topK;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.pinecone.v1.Plugin.Query";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "vector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "top_k", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin_Query().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin_Query().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin_Query().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin_Query, a, b);
    }
}
exports.Plugin_Query = Plugin_Query;
//# sourceMappingURL=plugin_pb.map