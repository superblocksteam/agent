// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file plugins/mongodb/v1/plugin.proto (package plugins.mongodb.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message plugins.mongodb.v1.SuperblocksMetadata
 */
export class SuperblocksMetadata extends Message<SuperblocksMetadata> {
  /**
   * @generated from field: string pluginVersion = 1;
   */
  pluginVersion = "";

  constructor(data?: PartialMessage<SuperblocksMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.mongodb.v1.SuperblocksMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pluginVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuperblocksMetadata {
    return new SuperblocksMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuperblocksMetadata {
    return new SuperblocksMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuperblocksMetadata {
    return new SuperblocksMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: SuperblocksMetadata | PlainMessage<SuperblocksMetadata> | undefined, b: SuperblocksMetadata | PlainMessage<SuperblocksMetadata> | undefined): boolean {
    return proto3.util.equals(SuperblocksMetadata, a, b);
  }
}

/**
 * @generated from message plugins.mongodb.v1.Plugin
 */
export class Plugin extends Message<Plugin> {
  /**
   * @generated from field: string resource = 1;
   */
  resource = "";

  /**
   * @generated from field: string action = 2;
   */
  action = "";

  /**
   * @generated from field: string pipeline = 3;
   */
  pipeline = "";

  /**
   * @generated from field: string projection = 4;
   */
  projection = "";

  /**
   * @generated from field: string query = 5;
   */
  query = "";

  /**
   * @generated from field: string field = 6;
   */
  field = "";

  /**
   * @generated from field: string sortby = 7;
   */
  sortby = "";

  /**
   * Super confusing, but these could be bindings or string ints
   * If they were not potential bindings, we should let them be int32s instead
   *
   * @generated from field: string limit = 8;
   */
  limit = "";

  /**
   * @generated from field: string skip = 9;
   */
  skip = "";

  /**
   * @generated from field: string document = 10;
   */
  document = "";

  /**
   * @generated from field: string replacement = 11;
   */
  replacement = "";

  /**
   * @generated from field: string filter = 12;
   */
  filter = "";

  /**
   * @generated from field: string options = 13;
   */
  options = "";

  /**
   * @generated from field: string update = 14;
   */
  update = "";

  /**
   * @generated from field: string distinctKey = 15;
   */
  distinctKey = "";

  /**
   * @generated from field: plugins.mongodb.v1.SuperblocksMetadata superblocksMetadata = 16;
   */
  superblocksMetadata?: SuperblocksMetadata;

  constructor(data?: PartialMessage<Plugin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.mongodb.v1.Plugin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pipeline", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "projection", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "sortby", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "limit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "skip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "document", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "replacement", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "filter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "options", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "update", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "distinctKey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "superblocksMetadata", kind: "message", T: SuperblocksMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin {
    return new Plugin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin | PlainMessage<Plugin> | undefined, b: Plugin | PlainMessage<Plugin> | undefined): boolean {
    return proto3.util.equals(Plugin, a, b);
  }
}

