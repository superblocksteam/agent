"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file plugins/cockroachdb/v1/plugin.proto (package plugins.cockroachdb.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plugin = exports.SuperblocksMetadata = exports.MappedColumns = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * @generated from message plugins.cockroachdb.v1.MappedColumns
 */
class MappedColumns extends protobuf_1.Message {
    /**
     * @generated from field: string json = 1;
     */
    json = "";
    /**
     * @generated from field: string sql = 2;
     */
    sql = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.cockroachdb.v1.MappedColumns";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new MappedColumns().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MappedColumns().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MappedColumns().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(MappedColumns, a, b);
    }
}
exports.MappedColumns = MappedColumns;
/**
 * @generated from message plugins.cockroachdb.v1.SuperblocksMetadata
 */
class SuperblocksMetadata extends protobuf_1.Message {
    /**
     * @generated from field: string pluginVersion = 1;
     */
    pluginVersion = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.cockroachdb.v1.SuperblocksMetadata";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "pluginVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new SuperblocksMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SuperblocksMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SuperblocksMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SuperblocksMetadata, a, b);
    }
}
exports.SuperblocksMetadata = SuperblocksMetadata;
/**
 * @generated from message plugins.cockroachdb.v1.Plugin
 */
class Plugin extends protobuf_1.Message {
    /**
     * @generated from field: string body = 1;
     */
    body = "";
    /**
     * @generated from field: bool usePreparedSql = 2;
     */
    usePreparedSql = false;
    /**
     * @generated from field: optional string operation = 3;
     */
    operation;
    /**
     * @generated from field: optional string useAdvancedMatching = 4;
     */
    useAdvancedMatching;
    /**
     * @generated from field: optional string table = 5;
     */
    table;
    /**
     * @generated from field: optional string newValues = 6;
     */
    newValues;
    /**
     * @generated from field: optional string oldValues = 7;
     */
    oldValues;
    /**
     * @generated from field: repeated string filterBy = 8;
     */
    filterBy = [];
    /**
     * @generated from field: optional string mappingMode = 9;
     */
    mappingMode;
    /**
     * @generated from field: repeated plugins.cockroachdb.v1.MappedColumns mappedColumns = 10;
     */
    mappedColumns = [];
    /**
     * @generated from field: plugins.cockroachdb.v1.SuperblocksMetadata superblocksMetadata = 11;
     */
    superblocksMetadata;
    /**
     * @generated from field: optional string insertedRows = 12;
     */
    insertedRows;
    /**
     * @generated from field: optional string deletedRows = 13;
     */
    deletedRows;
    /**
     * @generated from field: optional string schema = 14;
     */
    schema;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.cockroachdb.v1.Plugin";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "usePreparedSql", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 3, name: "operation", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 4, name: "useAdvancedMatching", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 5, name: "table", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 6, name: "newValues", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 7, name: "oldValues", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 8, name: "filterBy", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 9, name: "mappingMode", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 10, name: "mappedColumns", kind: "message", T: MappedColumns, repeated: true },
        { no: 11, name: "superblocksMetadata", kind: "message", T: SuperblocksMetadata },
        { no: 12, name: "insertedRows", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 13, name: "deletedRows", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 14, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin, a, b);
    }
}
exports.Plugin = Plugin;
//# sourceMappingURL=plugin_pb.map