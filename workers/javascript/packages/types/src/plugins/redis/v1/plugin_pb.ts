// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file plugins/redis/v1/plugin.proto (package plugins.redis.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { DynamicWorkflowConfiguration } from "../../common/v1/plugin_pb";

/**
 * @generated from message plugins.redis.v1.Plugin
 */
export class Plugin extends Message<Plugin> {
  /**
   * @generated from field: optional string name = 1;
   */
  name?: string;

  /**
   * @generated from field: plugins.redis.v1.Plugin.Connection connection = 2;
   */
  connection?: Plugin_Connection;

  /**
   * @generated from oneof plugins.redis.v1.Plugin.command_type
   */
  commandType: {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Raw raw = 3;
     */
    value: Plugin_Raw;
    case: "raw";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Structured structured = 4;
     */
    value: Plugin_Structured;
    case: "structured";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: optional plugins.common.v1.DynamicWorkflowConfiguration dynamic_workflow_configuration = 5;
   */
  dynamicWorkflowConfiguration?: DynamicWorkflowConfiguration;

  constructor(data?: PartialMessage<Plugin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "connection", kind: "message", T: Plugin_Connection },
    { no: 3, name: "raw", kind: "message", T: Plugin_Raw, oneof: "command_type" },
    { no: 4, name: "structured", kind: "message", T: Plugin_Structured, oneof: "command_type" },
    { no: 5, name: "dynamic_workflow_configuration", kind: "message", T: DynamicWorkflowConfiguration, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin {
    return new Plugin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin | PlainMessage<Plugin> | undefined, b: Plugin | PlainMessage<Plugin> | undefined): boolean {
    return proto3.util.equals(Plugin, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Raw
 */
export class Plugin_Raw extends Message<Plugin_Raw> {
  /**
   * @generated from oneof plugins.redis.v1.Plugin.Raw.action
   */
  action: {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Raw.Singleton singleton = 1;
     */
    value: Plugin_Raw_Singleton;
    case: "singleton";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Plugin_Raw>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Raw";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "singleton", kind: "message", T: Plugin_Raw_Singleton, oneof: "action" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Raw {
    return new Plugin_Raw().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Raw {
    return new Plugin_Raw().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Raw {
    return new Plugin_Raw().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Raw | PlainMessage<Plugin_Raw> | undefined, b: Plugin_Raw | PlainMessage<Plugin_Raw> | undefined): boolean {
    return proto3.util.equals(Plugin_Raw, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Raw.Singleton
 */
export class Plugin_Raw_Singleton extends Message<Plugin_Raw_Singleton> {
  /**
   * @generated from field: string query = 1;
   */
  query = "";

  constructor(data?: PartialMessage<Plugin_Raw_Singleton>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Raw.Singleton";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Raw_Singleton {
    return new Plugin_Raw_Singleton().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Raw_Singleton {
    return new Plugin_Raw_Singleton().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Raw_Singleton {
    return new Plugin_Raw_Singleton().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Raw_Singleton | PlainMessage<Plugin_Raw_Singleton> | undefined, b: Plugin_Raw_Singleton | PlainMessage<Plugin_Raw_Singleton> | undefined): boolean {
    return proto3.util.equals(Plugin_Raw_Singleton, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Structured
 */
export class Plugin_Structured extends Message<Plugin_Structured> {
  /**
   * @generated from oneof plugins.redis.v1.Plugin.Structured.action
   */
  action: {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Get get = 6;
     */
    value: Plugin_Get;
    case: "get";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Set set = 7;
     */
    value: Plugin_Set;
    case: "set";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Del del = 8;
     */
    value: Plugin_Del;
    case: "del";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Keys keys = 9;
     */
    value: Plugin_Keys;
    case: "keys";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Mget mget = 10;
     */
    value: Plugin_Mget;
    case: "mget";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Hget hget = 11;
     */
    value: Plugin_Hget;
    case: "hget";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Hmget hmget = 12;
     */
    value: Plugin_Hmget;
    case: "hmget";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Hgetall hgetall = 13;
     */
    value: Plugin_Hgetall;
    case: "hgetall";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Hset hset = 14;
     */
    value: Plugin_Hset;
    case: "hset";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Hsetnx hsetnx = 15;
     */
    value: Plugin_Hsetnx;
    case: "hsetnx";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Hlen hlen = 16;
     */
    value: Plugin_Hlen;
    case: "hlen";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Hdel hdel = 17;
     */
    value: Plugin_Hdel;
    case: "hdel";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Hkeys hkeys = 18;
     */
    value: Plugin_Hkeys;
    case: "hkeys";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Hvals hvals = 19;
     */
    value: Plugin_Hvals;
    case: "hvals";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Lindex lindex = 20;
     */
    value: Plugin_Lindex;
    case: "lindex";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Llen llen = 21;
     */
    value: Plugin_Llen;
    case: "llen";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Lpush lpush = 22;
     */
    value: Plugin_Lpush;
    case: "lpush";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Lrem lrem = 23;
     */
    value: Plugin_Lrem;
    case: "lrem";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Lrange lrange = 24;
     */
    value: Plugin_Lrange;
    case: "lrange";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Sadd sadd = 25;
     */
    value: Plugin_Sadd;
    case: "sadd";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Scard scard = 26;
     */
    value: Plugin_Scard;
    case: "scard";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Smembers smembers = 27;
     */
    value: Plugin_Smembers;
    case: "smembers";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Sismember sismember = 28;
     */
    value: Plugin_Sismember;
    case: "sismember";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Srandmember srandmember = 29;
     */
    value: Plugin_Srandmember;
    case: "srandmember";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Srem srem = 30;
     */
    value: Plugin_Srem;
    case: "srem";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Zadd zadd = 31;
     */
    value: Plugin_Zadd;
    case: "zadd";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Zcard zcard = 32;
     */
    value: Plugin_Zcard;
    case: "zcard";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Zcount zcount = 33;
     */
    value: Plugin_Zcount;
    case: "zcount";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Zrange zrange = 34;
     */
    value: Plugin_Zrange;
    case: "zrange";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Zrank zrank = 35;
     */
    value: Plugin_Zrank;
    case: "zrank";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Zrem zrem = 36;
     */
    value: Plugin_Zrem;
    case: "zrem";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Zscore zscore = 37;
     */
    value: Plugin_Zscore;
    case: "zscore";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Expire expire = 38;
     */
    value: Plugin_Expire;
    case: "expire";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Ttl ttl = 39;
     */
    value: Plugin_Ttl;
    case: "ttl";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Plugin_Structured>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Structured";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 6, name: "get", kind: "message", T: Plugin_Get, oneof: "action" },
    { no: 7, name: "set", kind: "message", T: Plugin_Set, oneof: "action" },
    { no: 8, name: "del", kind: "message", T: Plugin_Del, oneof: "action" },
    { no: 9, name: "keys", kind: "message", T: Plugin_Keys, oneof: "action" },
    { no: 10, name: "mget", kind: "message", T: Plugin_Mget, oneof: "action" },
    { no: 11, name: "hget", kind: "message", T: Plugin_Hget, oneof: "action" },
    { no: 12, name: "hmget", kind: "message", T: Plugin_Hmget, oneof: "action" },
    { no: 13, name: "hgetall", kind: "message", T: Plugin_Hgetall, oneof: "action" },
    { no: 14, name: "hset", kind: "message", T: Plugin_Hset, oneof: "action" },
    { no: 15, name: "hsetnx", kind: "message", T: Plugin_Hsetnx, oneof: "action" },
    { no: 16, name: "hlen", kind: "message", T: Plugin_Hlen, oneof: "action" },
    { no: 17, name: "hdel", kind: "message", T: Plugin_Hdel, oneof: "action" },
    { no: 18, name: "hkeys", kind: "message", T: Plugin_Hkeys, oneof: "action" },
    { no: 19, name: "hvals", kind: "message", T: Plugin_Hvals, oneof: "action" },
    { no: 20, name: "lindex", kind: "message", T: Plugin_Lindex, oneof: "action" },
    { no: 21, name: "llen", kind: "message", T: Plugin_Llen, oneof: "action" },
    { no: 22, name: "lpush", kind: "message", T: Plugin_Lpush, oneof: "action" },
    { no: 23, name: "lrem", kind: "message", T: Plugin_Lrem, oneof: "action" },
    { no: 24, name: "lrange", kind: "message", T: Plugin_Lrange, oneof: "action" },
    { no: 25, name: "sadd", kind: "message", T: Plugin_Sadd, oneof: "action" },
    { no: 26, name: "scard", kind: "message", T: Plugin_Scard, oneof: "action" },
    { no: 27, name: "smembers", kind: "message", T: Plugin_Smembers, oneof: "action" },
    { no: 28, name: "sismember", kind: "message", T: Plugin_Sismember, oneof: "action" },
    { no: 29, name: "srandmember", kind: "message", T: Plugin_Srandmember, oneof: "action" },
    { no: 30, name: "srem", kind: "message", T: Plugin_Srem, oneof: "action" },
    { no: 31, name: "zadd", kind: "message", T: Plugin_Zadd, oneof: "action" },
    { no: 32, name: "zcard", kind: "message", T: Plugin_Zcard, oneof: "action" },
    { no: 33, name: "zcount", kind: "message", T: Plugin_Zcount, oneof: "action" },
    { no: 34, name: "zrange", kind: "message", T: Plugin_Zrange, oneof: "action" },
    { no: 35, name: "zrank", kind: "message", T: Plugin_Zrank, oneof: "action" },
    { no: 36, name: "zrem", kind: "message", T: Plugin_Zrem, oneof: "action" },
    { no: 37, name: "zscore", kind: "message", T: Plugin_Zscore, oneof: "action" },
    { no: 38, name: "expire", kind: "message", T: Plugin_Expire, oneof: "action" },
    { no: 39, name: "ttl", kind: "message", T: Plugin_Ttl, oneof: "action" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Structured {
    return new Plugin_Structured().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Structured {
    return new Plugin_Structured().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Structured {
    return new Plugin_Structured().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Structured | PlainMessage<Plugin_Structured> | undefined, b: Plugin_Structured | PlainMessage<Plugin_Structured> | undefined): boolean {
    return proto3.util.equals(Plugin_Structured, a, b);
  }
}

/**
 * NOTE: (joey) this does not have to be a separate message right now
 * 1. this follows the "connection" pattern
 * 2. this lets us easily add shared connection fields in the future
 *
 * @generated from message plugins.redis.v1.Plugin.Connection
 */
export class Plugin_Connection extends Message<Plugin_Connection> {
  /**
   * @generated from oneof plugins.redis.v1.Plugin.Connection.connection_type
   */
  connectionType: {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Connection.Url url = 1;
     */
    value: Plugin_Connection_Url;
    case: "url";
  } | {
    /**
     * @generated from field: plugins.redis.v1.Plugin.Connection.Fields fields = 2;
     */
    value: Plugin_Connection_Fields;
    case: "fields";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Plugin_Connection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Connection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "message", T: Plugin_Connection_Url, oneof: "connection_type" },
    { no: 2, name: "fields", kind: "message", T: Plugin_Connection_Fields, oneof: "connection_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Connection {
    return new Plugin_Connection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Connection {
    return new Plugin_Connection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Connection {
    return new Plugin_Connection().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Connection | PlainMessage<Plugin_Connection> | undefined, b: Plugin_Connection | PlainMessage<Plugin_Connection> | undefined): boolean {
    return proto3.util.equals(Plugin_Connection, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Connection.Url
 */
export class Plugin_Connection_Url extends Message<Plugin_Connection_Url> {
  /**
   * @generated from field: string url_string = 1;
   */
  urlString = "";

  constructor(data?: PartialMessage<Plugin_Connection_Url>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Connection.Url";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Connection_Url {
    return new Plugin_Connection_Url().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Connection_Url {
    return new Plugin_Connection_Url().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Connection_Url {
    return new Plugin_Connection_Url().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Connection_Url | PlainMessage<Plugin_Connection_Url> | undefined, b: Plugin_Connection_Url | PlainMessage<Plugin_Connection_Url> | undefined): boolean {
    return proto3.util.equals(Plugin_Connection_Url, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Connection.Fields
 */
export class Plugin_Connection_Fields extends Message<Plugin_Connection_Fields> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  /**
   * @generated from field: int32 port = 2;
   */
  port = 0;

  /**
   * @generated from field: optional int32 database_number = 3;
   */
  databaseNumber?: number;

  /**
   * @generated from field: optional string username = 4;
   */
  username?: string;

  /**
   * @generated from field: optional string password = 5;
   */
  password?: string;

  /**
   * @generated from field: bool enable_ssl = 6;
   */
  enableSsl = false;

  constructor(data?: PartialMessage<Plugin_Connection_Fields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Connection.Fields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "database_number", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "enable_ssl", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Connection_Fields {
    return new Plugin_Connection_Fields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Connection_Fields {
    return new Plugin_Connection_Fields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Connection_Fields {
    return new Plugin_Connection_Fields().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Connection_Fields | PlainMessage<Plugin_Connection_Fields> | undefined, b: Plugin_Connection_Fields | PlainMessage<Plugin_Connection_Fields> | undefined): boolean {
    return proto3.util.equals(Plugin_Connection_Fields, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Get
 */
export class Plugin_Get extends Message<Plugin_Get> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  constructor(data?: PartialMessage<Plugin_Get>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Get";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Get {
    return new Plugin_Get().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Get {
    return new Plugin_Get().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Get {
    return new Plugin_Get().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Get | PlainMessage<Plugin_Get> | undefined, b: Plugin_Get | PlainMessage<Plugin_Get> | undefined): boolean {
    return proto3.util.equals(Plugin_Get, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Set
 */
export class Plugin_Set extends Message<Plugin_Set> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  /**
   * @generated from field: optional int32 expiration_ms = 3;
   */
  expirationMs?: number;

  constructor(data?: PartialMessage<Plugin_Set>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Set";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expiration_ms", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Set {
    return new Plugin_Set().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Set {
    return new Plugin_Set().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Set {
    return new Plugin_Set().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Set | PlainMessage<Plugin_Set> | undefined, b: Plugin_Set | PlainMessage<Plugin_Set> | undefined): boolean {
    return proto3.util.equals(Plugin_Set, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Del
 */
export class Plugin_Del extends Message<Plugin_Del> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  constructor(data?: PartialMessage<Plugin_Del>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Del";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Del {
    return new Plugin_Del().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Del {
    return new Plugin_Del().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Del {
    return new Plugin_Del().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Del | PlainMessage<Plugin_Del> | undefined, b: Plugin_Del | PlainMessage<Plugin_Del> | undefined): boolean {
    return proto3.util.equals(Plugin_Del, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Keys
 */
export class Plugin_Keys extends Message<Plugin_Keys> {
  /**
   * @generated from field: string pattern = 1;
   */
  pattern = "";

  constructor(data?: PartialMessage<Plugin_Keys>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Keys";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pattern", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Keys {
    return new Plugin_Keys().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Keys {
    return new Plugin_Keys().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Keys {
    return new Plugin_Keys().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Keys | PlainMessage<Plugin_Keys> | undefined, b: Plugin_Keys | PlainMessage<Plugin_Keys> | undefined): boolean {
    return proto3.util.equals(Plugin_Keys, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Mget
 */
export class Plugin_Mget extends Message<Plugin_Mget> {
  /**
   * comma-separated list
   *
   * @generated from field: string keys = 1;
   */
  keys = "";

  constructor(data?: PartialMessage<Plugin_Mget>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Mget";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keys", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Mget {
    return new Plugin_Mget().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Mget {
    return new Plugin_Mget().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Mget {
    return new Plugin_Mget().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Mget | PlainMessage<Plugin_Mget> | undefined, b: Plugin_Mget | PlainMessage<Plugin_Mget> | undefined): boolean {
    return proto3.util.equals(Plugin_Mget, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Hget
 */
export class Plugin_Hget extends Message<Plugin_Hget> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string field = 2;
   */
  field = "";

  constructor(data?: PartialMessage<Plugin_Hget>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Hget";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Hget {
    return new Plugin_Hget().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Hget {
    return new Plugin_Hget().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Hget {
    return new Plugin_Hget().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Hget | PlainMessage<Plugin_Hget> | undefined, b: Plugin_Hget | PlainMessage<Plugin_Hget> | undefined): boolean {
    return proto3.util.equals(Plugin_Hget, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Hmget
 */
export class Plugin_Hmget extends Message<Plugin_Hmget> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * comma-separated list
   *
   * @generated from field: string fields = 2;
   */
  fields = "";

  constructor(data?: PartialMessage<Plugin_Hmget>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Hmget";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fields", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Hmget {
    return new Plugin_Hmget().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Hmget {
    return new Plugin_Hmget().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Hmget {
    return new Plugin_Hmget().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Hmget | PlainMessage<Plugin_Hmget> | undefined, b: Plugin_Hmget | PlainMessage<Plugin_Hmget> | undefined): boolean {
    return proto3.util.equals(Plugin_Hmget, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Hgetall
 */
export class Plugin_Hgetall extends Message<Plugin_Hgetall> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  constructor(data?: PartialMessage<Plugin_Hgetall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Hgetall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Hgetall {
    return new Plugin_Hgetall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Hgetall {
    return new Plugin_Hgetall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Hgetall {
    return new Plugin_Hgetall().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Hgetall | PlainMessage<Plugin_Hgetall> | undefined, b: Plugin_Hgetall | PlainMessage<Plugin_Hgetall> | undefined): boolean {
    return proto3.util.equals(Plugin_Hgetall, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Hset
 */
export class Plugin_Hset extends Message<Plugin_Hset> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string field = 2;
   */
  field = "";

  /**
   * @generated from field: string value = 3;
   */
  value = "";

  constructor(data?: PartialMessage<Plugin_Hset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Hset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Hset {
    return new Plugin_Hset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Hset {
    return new Plugin_Hset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Hset {
    return new Plugin_Hset().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Hset | PlainMessage<Plugin_Hset> | undefined, b: Plugin_Hset | PlainMessage<Plugin_Hset> | undefined): boolean {
    return proto3.util.equals(Plugin_Hset, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Hsetnx
 */
export class Plugin_Hsetnx extends Message<Plugin_Hsetnx> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string field = 2;
   */
  field = "";

  /**
   * @generated from field: string value = 3;
   */
  value = "";

  constructor(data?: PartialMessage<Plugin_Hsetnx>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Hsetnx";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Hsetnx {
    return new Plugin_Hsetnx().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Hsetnx {
    return new Plugin_Hsetnx().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Hsetnx {
    return new Plugin_Hsetnx().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Hsetnx | PlainMessage<Plugin_Hsetnx> | undefined, b: Plugin_Hsetnx | PlainMessage<Plugin_Hsetnx> | undefined): boolean {
    return proto3.util.equals(Plugin_Hsetnx, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Hlen
 */
export class Plugin_Hlen extends Message<Plugin_Hlen> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  constructor(data?: PartialMessage<Plugin_Hlen>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Hlen";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Hlen {
    return new Plugin_Hlen().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Hlen {
    return new Plugin_Hlen().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Hlen {
    return new Plugin_Hlen().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Hlen | PlainMessage<Plugin_Hlen> | undefined, b: Plugin_Hlen | PlainMessage<Plugin_Hlen> | undefined): boolean {
    return proto3.util.equals(Plugin_Hlen, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Hdel
 */
export class Plugin_Hdel extends Message<Plugin_Hdel> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string field = 2;
   */
  field = "";

  constructor(data?: PartialMessage<Plugin_Hdel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Hdel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Hdel {
    return new Plugin_Hdel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Hdel {
    return new Plugin_Hdel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Hdel {
    return new Plugin_Hdel().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Hdel | PlainMessage<Plugin_Hdel> | undefined, b: Plugin_Hdel | PlainMessage<Plugin_Hdel> | undefined): boolean {
    return proto3.util.equals(Plugin_Hdel, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Hkeys
 */
export class Plugin_Hkeys extends Message<Plugin_Hkeys> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  constructor(data?: PartialMessage<Plugin_Hkeys>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Hkeys";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Hkeys {
    return new Plugin_Hkeys().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Hkeys {
    return new Plugin_Hkeys().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Hkeys {
    return new Plugin_Hkeys().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Hkeys | PlainMessage<Plugin_Hkeys> | undefined, b: Plugin_Hkeys | PlainMessage<Plugin_Hkeys> | undefined): boolean {
    return proto3.util.equals(Plugin_Hkeys, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Hvals
 */
export class Plugin_Hvals extends Message<Plugin_Hvals> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  constructor(data?: PartialMessage<Plugin_Hvals>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Hvals";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Hvals {
    return new Plugin_Hvals().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Hvals {
    return new Plugin_Hvals().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Hvals {
    return new Plugin_Hvals().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Hvals | PlainMessage<Plugin_Hvals> | undefined, b: Plugin_Hvals | PlainMessage<Plugin_Hvals> | undefined): boolean {
    return proto3.util.equals(Plugin_Hvals, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Lindex
 */
export class Plugin_Lindex extends Message<Plugin_Lindex> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: int32 index = 2;
   */
  index = 0;

  constructor(data?: PartialMessage<Plugin_Lindex>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Lindex";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Lindex {
    return new Plugin_Lindex().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Lindex {
    return new Plugin_Lindex().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Lindex {
    return new Plugin_Lindex().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Lindex | PlainMessage<Plugin_Lindex> | undefined, b: Plugin_Lindex | PlainMessage<Plugin_Lindex> | undefined): boolean {
    return proto3.util.equals(Plugin_Lindex, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Llen
 */
export class Plugin_Llen extends Message<Plugin_Llen> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  constructor(data?: PartialMessage<Plugin_Llen>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Llen";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Llen {
    return new Plugin_Llen().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Llen {
    return new Plugin_Llen().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Llen {
    return new Plugin_Llen().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Llen | PlainMessage<Plugin_Llen> | undefined, b: Plugin_Llen | PlainMessage<Plugin_Llen> | undefined): boolean {
    return proto3.util.equals(Plugin_Llen, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Lpush
 */
export class Plugin_Lpush extends Message<Plugin_Lpush> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<Plugin_Lpush>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Lpush";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Lpush {
    return new Plugin_Lpush().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Lpush {
    return new Plugin_Lpush().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Lpush {
    return new Plugin_Lpush().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Lpush | PlainMessage<Plugin_Lpush> | undefined, b: Plugin_Lpush | PlainMessage<Plugin_Lpush> | undefined): boolean {
    return proto3.util.equals(Plugin_Lpush, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Lrem
 */
export class Plugin_Lrem extends Message<Plugin_Lrem> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: int32 count = 2;
   */
  count = 0;

  /**
   * @generated from field: string value = 3;
   */
  value = "";

  constructor(data?: PartialMessage<Plugin_Lrem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Lrem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Lrem {
    return new Plugin_Lrem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Lrem {
    return new Plugin_Lrem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Lrem {
    return new Plugin_Lrem().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Lrem | PlainMessage<Plugin_Lrem> | undefined, b: Plugin_Lrem | PlainMessage<Plugin_Lrem> | undefined): boolean {
    return proto3.util.equals(Plugin_Lrem, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Lrange
 */
export class Plugin_Lrange extends Message<Plugin_Lrange> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: int32 start = 2;
   */
  start = 0;

  /**
   * @generated from field: int32 stop = 3;
   */
  stop = 0;

  constructor(data?: PartialMessage<Plugin_Lrange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Lrange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "stop", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Lrange {
    return new Plugin_Lrange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Lrange {
    return new Plugin_Lrange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Lrange {
    return new Plugin_Lrange().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Lrange | PlainMessage<Plugin_Lrange> | undefined, b: Plugin_Lrange | PlainMessage<Plugin_Lrange> | undefined): boolean {
    return proto3.util.equals(Plugin_Lrange, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Sadd
 */
export class Plugin_Sadd extends Message<Plugin_Sadd> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string member = 2;
   */
  member = "";

  constructor(data?: PartialMessage<Plugin_Sadd>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Sadd";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "member", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Sadd {
    return new Plugin_Sadd().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Sadd {
    return new Plugin_Sadd().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Sadd {
    return new Plugin_Sadd().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Sadd | PlainMessage<Plugin_Sadd> | undefined, b: Plugin_Sadd | PlainMessage<Plugin_Sadd> | undefined): boolean {
    return proto3.util.equals(Plugin_Sadd, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Scard
 */
export class Plugin_Scard extends Message<Plugin_Scard> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  constructor(data?: PartialMessage<Plugin_Scard>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Scard";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Scard {
    return new Plugin_Scard().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Scard {
    return new Plugin_Scard().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Scard {
    return new Plugin_Scard().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Scard | PlainMessage<Plugin_Scard> | undefined, b: Plugin_Scard | PlainMessage<Plugin_Scard> | undefined): boolean {
    return proto3.util.equals(Plugin_Scard, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Smembers
 */
export class Plugin_Smembers extends Message<Plugin_Smembers> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  constructor(data?: PartialMessage<Plugin_Smembers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Smembers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Smembers {
    return new Plugin_Smembers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Smembers {
    return new Plugin_Smembers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Smembers {
    return new Plugin_Smembers().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Smembers | PlainMessage<Plugin_Smembers> | undefined, b: Plugin_Smembers | PlainMessage<Plugin_Smembers> | undefined): boolean {
    return proto3.util.equals(Plugin_Smembers, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Sismember
 */
export class Plugin_Sismember extends Message<Plugin_Sismember> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string member = 2;
   */
  member = "";

  constructor(data?: PartialMessage<Plugin_Sismember>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Sismember";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "member", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Sismember {
    return new Plugin_Sismember().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Sismember {
    return new Plugin_Sismember().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Sismember {
    return new Plugin_Sismember().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Sismember | PlainMessage<Plugin_Sismember> | undefined, b: Plugin_Sismember | PlainMessage<Plugin_Sismember> | undefined): boolean {
    return proto3.util.equals(Plugin_Sismember, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Srandmember
 */
export class Plugin_Srandmember extends Message<Plugin_Srandmember> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: optional int32 count = 2;
   */
  count?: number;

  constructor(data?: PartialMessage<Plugin_Srandmember>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Srandmember";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Srandmember {
    return new Plugin_Srandmember().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Srandmember {
    return new Plugin_Srandmember().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Srandmember {
    return new Plugin_Srandmember().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Srandmember | PlainMessage<Plugin_Srandmember> | undefined, b: Plugin_Srandmember | PlainMessage<Plugin_Srandmember> | undefined): boolean {
    return proto3.util.equals(Plugin_Srandmember, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Srem
 */
export class Plugin_Srem extends Message<Plugin_Srem> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string member = 2;
   */
  member = "";

  constructor(data?: PartialMessage<Plugin_Srem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Srem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "member", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Srem {
    return new Plugin_Srem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Srem {
    return new Plugin_Srem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Srem {
    return new Plugin_Srem().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Srem | PlainMessage<Plugin_Srem> | undefined, b: Plugin_Srem | PlainMessage<Plugin_Srem> | undefined): boolean {
    return proto3.util.equals(Plugin_Srem, a, b);
  }
}

/**
 * TODO: (joey) support options as well: https://redis.io/commands/zadd/
 *
 * @generated from message plugins.redis.v1.Plugin.Zadd
 */
export class Plugin_Zadd extends Message<Plugin_Zadd> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: double score = 2;
   */
  score = 0;

  /**
   * @generated from field: string member = 3;
   */
  member = "";

  constructor(data?: PartialMessage<Plugin_Zadd>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Zadd";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "score", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "member", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Zadd {
    return new Plugin_Zadd().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Zadd {
    return new Plugin_Zadd().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Zadd {
    return new Plugin_Zadd().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Zadd | PlainMessage<Plugin_Zadd> | undefined, b: Plugin_Zadd | PlainMessage<Plugin_Zadd> | undefined): boolean {
    return proto3.util.equals(Plugin_Zadd, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Zcard
 */
export class Plugin_Zcard extends Message<Plugin_Zcard> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  constructor(data?: PartialMessage<Plugin_Zcard>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Zcard";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Zcard {
    return new Plugin_Zcard().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Zcard {
    return new Plugin_Zcard().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Zcard {
    return new Plugin_Zcard().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Zcard | PlainMessage<Plugin_Zcard> | undefined, b: Plugin_Zcard | PlainMessage<Plugin_Zcard> | undefined): boolean {
    return proto3.util.equals(Plugin_Zcard, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Zcount
 */
export class Plugin_Zcount extends Message<Plugin_Zcount> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: double min = 2;
   */
  min = 0;

  /**
   * @generated from field: double max = 3;
   */
  max = 0;

  constructor(data?: PartialMessage<Plugin_Zcount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Zcount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "min", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "max", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Zcount {
    return new Plugin_Zcount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Zcount {
    return new Plugin_Zcount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Zcount {
    return new Plugin_Zcount().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Zcount | PlainMessage<Plugin_Zcount> | undefined, b: Plugin_Zcount | PlainMessage<Plugin_Zcount> | undefined): boolean {
    return proto3.util.equals(Plugin_Zcount, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Zrange
 */
export class Plugin_Zrange extends Message<Plugin_Zrange> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: int32 start = 2;
   */
  start = 0;

  /**
   * @generated from field: int32 stop = 3;
   */
  stop = 0;

  constructor(data?: PartialMessage<Plugin_Zrange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Zrange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "stop", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Zrange {
    return new Plugin_Zrange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Zrange {
    return new Plugin_Zrange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Zrange {
    return new Plugin_Zrange().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Zrange | PlainMessage<Plugin_Zrange> | undefined, b: Plugin_Zrange | PlainMessage<Plugin_Zrange> | undefined): boolean {
    return proto3.util.equals(Plugin_Zrange, a, b);
  }
}

/**
 * TODO: (joey) add optional withscore
 *
 * @generated from message plugins.redis.v1.Plugin.Zrank
 */
export class Plugin_Zrank extends Message<Plugin_Zrank> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string member = 2;
   */
  member = "";

  constructor(data?: PartialMessage<Plugin_Zrank>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Zrank";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "member", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Zrank {
    return new Plugin_Zrank().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Zrank {
    return new Plugin_Zrank().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Zrank {
    return new Plugin_Zrank().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Zrank | PlainMessage<Plugin_Zrank> | undefined, b: Plugin_Zrank | PlainMessage<Plugin_Zrank> | undefined): boolean {
    return proto3.util.equals(Plugin_Zrank, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Zrem
 */
export class Plugin_Zrem extends Message<Plugin_Zrem> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string member = 2;
   */
  member = "";

  constructor(data?: PartialMessage<Plugin_Zrem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Zrem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "member", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Zrem {
    return new Plugin_Zrem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Zrem {
    return new Plugin_Zrem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Zrem {
    return new Plugin_Zrem().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Zrem | PlainMessage<Plugin_Zrem> | undefined, b: Plugin_Zrem | PlainMessage<Plugin_Zrem> | undefined): boolean {
    return proto3.util.equals(Plugin_Zrem, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Zscore
 */
export class Plugin_Zscore extends Message<Plugin_Zscore> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string member = 2;
   */
  member = "";

  constructor(data?: PartialMessage<Plugin_Zscore>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Zscore";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "member", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Zscore {
    return new Plugin_Zscore().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Zscore {
    return new Plugin_Zscore().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Zscore {
    return new Plugin_Zscore().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Zscore | PlainMessage<Plugin_Zscore> | undefined, b: Plugin_Zscore | PlainMessage<Plugin_Zscore> | undefined): boolean {
    return proto3.util.equals(Plugin_Zscore, a, b);
  }
}

/**
 * @generated from message plugins.redis.v1.Plugin.Expire
 */
export class Plugin_Expire extends Message<Plugin_Expire> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: int32 seconds = 2;
   */
  seconds = 0;

  /**
   * @generated from field: optional plugins.redis.v1.Plugin.Expire.Option option = 3;
   */
  option?: Plugin_Expire_Option;

  constructor(data?: PartialMessage<Plugin_Expire>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Expire";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "seconds", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "option", kind: "enum", T: proto3.getEnumType(Plugin_Expire_Option), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Expire {
    return new Plugin_Expire().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Expire {
    return new Plugin_Expire().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Expire {
    return new Plugin_Expire().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Expire | PlainMessage<Plugin_Expire> | undefined, b: Plugin_Expire | PlainMessage<Plugin_Expire> | undefined): boolean {
    return proto3.util.equals(Plugin_Expire, a, b);
  }
}

/**
 * @generated from enum plugins.redis.v1.Plugin.Expire.Option
 */
export enum Plugin_Expire_Option {
  /**
   * @generated from enum value: OPTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: OPTION_NX = 1;
   */
  NX = 1,

  /**
   * @generated from enum value: OPTION_XX = 2;
   */
  XX = 2,

  /**
   * @generated from enum value: OPTION_GT = 3;
   */
  GT = 3,

  /**
   * @generated from enum value: OPTION_LT = 4;
   */
  LT = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(Plugin_Expire_Option)
proto3.util.setEnumType(Plugin_Expire_Option, "plugins.redis.v1.Plugin.Expire.Option", [
  { no: 0, name: "OPTION_UNSPECIFIED" },
  { no: 1, name: "OPTION_NX" },
  { no: 2, name: "OPTION_XX" },
  { no: 3, name: "OPTION_GT" },
  { no: 4, name: "OPTION_LT" },
]);

/**
 * @generated from message plugins.redis.v1.Plugin.Ttl
 */
export class Plugin_Ttl extends Message<Plugin_Ttl> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  constructor(data?: PartialMessage<Plugin_Ttl>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.redis.v1.Plugin.Ttl";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Ttl {
    return new Plugin_Ttl().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Ttl {
    return new Plugin_Ttl().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Ttl {
    return new Plugin_Ttl().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Ttl | PlainMessage<Plugin_Ttl> | undefined, b: Plugin_Ttl | PlainMessage<Plugin_Ttl> | undefined): boolean {
    return proto3.util.equals(Plugin_Ttl, a, b);
  }
}

