// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file plugins/couchbase/v1/plugin.proto (package plugins.couchbase.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { DynamicWorkflowConfiguration, SQLExecution, SSHConfiguration } from "../../common/v1/plugin_pb";

/**
 * @generated from message plugins.couchbase.v1.Plugin
 */
export class Plugin extends Message<Plugin> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: plugins.couchbase.v1.Plugin.CouchbaseConnection connection = 2;
   */
  connection?: Plugin_CouchbaseConnection;

  /**
   * TODO (jason4012) we should unify the interface
   * so that endpoint doesn't have to be always be set here for SSH tunneling
   *
   * @generated from field: plugins.couchbase.v1.Plugin.CouchbaseEndpoint endpoint = 3;
   */
  endpoint?: Plugin_CouchbaseEndpoint;

  /**
   * @generated from field: optional plugins.common.v1.DynamicWorkflowConfiguration dynamic_workflow_configuration = 4;
   */
  dynamicWorkflowConfiguration?: DynamicWorkflowConfiguration;

  /**
   * @generated from field: plugins.common.v1.SSHConfiguration tunnel = 5;
   */
  tunnel?: SSHConfiguration;

  /**
   * @generated from oneof plugins.couchbase.v1.Plugin.couchbase_action
   */
  couchbaseAction: {
    /**
     * @generated from field: plugins.common.v1.SQLExecution run_sql = 6;
     */
    value: SQLExecution;
    case: "runSql";
  } | {
    /**
     * @generated from field: plugins.couchbase.v1.Plugin.CouchbaseInsert insert = 7;
     */
    value: Plugin_CouchbaseInsert;
    case: "insert";
  } | {
    /**
     * @generated from field: plugins.couchbase.v1.Plugin.CouchbaseGet get = 8;
     */
    value: Plugin_CouchbaseGet;
    case: "get";
  } | {
    /**
     * @generated from field: plugins.couchbase.v1.Plugin.CouchbaseRemove remove = 9;
     */
    value: Plugin_CouchbaseRemove;
    case: "remove";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Plugin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.couchbase.v1.Plugin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connection", kind: "message", T: Plugin_CouchbaseConnection },
    { no: 3, name: "endpoint", kind: "message", T: Plugin_CouchbaseEndpoint },
    { no: 4, name: "dynamic_workflow_configuration", kind: "message", T: DynamicWorkflowConfiguration, opt: true },
    { no: 5, name: "tunnel", kind: "message", T: SSHConfiguration },
    { no: 6, name: "run_sql", kind: "message", T: SQLExecution, oneof: "couchbase_action" },
    { no: 7, name: "insert", kind: "message", T: Plugin_CouchbaseInsert, oneof: "couchbase_action" },
    { no: 8, name: "get", kind: "message", T: Plugin_CouchbaseGet, oneof: "couchbase_action" },
    { no: 9, name: "remove", kind: "message", T: Plugin_CouchbaseRemove, oneof: "couchbase_action" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin {
    return new Plugin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin | PlainMessage<Plugin> | undefined, b: Plugin | PlainMessage<Plugin> | undefined): boolean {
    return proto3.util.equals(Plugin, a, b);
  }
}

/**
 * @generated from message plugins.couchbase.v1.Plugin.CouchbaseEndpoint
 */
export class Plugin_CouchbaseEndpoint extends Message<Plugin_CouchbaseEndpoint> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  /**
   * @generated from field: int32 port = 2;
   */
  port = 0;

  constructor(data?: PartialMessage<Plugin_CouchbaseEndpoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.couchbase.v1.Plugin.CouchbaseEndpoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_CouchbaseEndpoint {
    return new Plugin_CouchbaseEndpoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_CouchbaseEndpoint {
    return new Plugin_CouchbaseEndpoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_CouchbaseEndpoint {
    return new Plugin_CouchbaseEndpoint().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_CouchbaseEndpoint | PlainMessage<Plugin_CouchbaseEndpoint> | undefined, b: Plugin_CouchbaseEndpoint | PlainMessage<Plugin_CouchbaseEndpoint> | undefined): boolean {
    return proto3.util.equals(Plugin_CouchbaseEndpoint, a, b);
  }
}

/**
 * @generated from message plugins.couchbase.v1.Plugin.CouchbaseIdentifier
 */
export class Plugin_CouchbaseIdentifier extends Message<Plugin_CouchbaseIdentifier> {
  /**
   * @generated from field: string scope = 1;
   */
  scope = "";

  /**
   * @generated from field: string collection = 2;
   */
  collection = "";

  constructor(data?: PartialMessage<Plugin_CouchbaseIdentifier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.couchbase.v1.Plugin.CouchbaseIdentifier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "scope", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "collection", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_CouchbaseIdentifier {
    return new Plugin_CouchbaseIdentifier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_CouchbaseIdentifier {
    return new Plugin_CouchbaseIdentifier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_CouchbaseIdentifier {
    return new Plugin_CouchbaseIdentifier().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_CouchbaseIdentifier | PlainMessage<Plugin_CouchbaseIdentifier> | undefined, b: Plugin_CouchbaseIdentifier | PlainMessage<Plugin_CouchbaseIdentifier> | undefined): boolean {
    return proto3.util.equals(Plugin_CouchbaseIdentifier, a, b);
  }
}

/**
 * @generated from message plugins.couchbase.v1.Plugin.CouchbaseConnection
 */
export class Plugin_CouchbaseConnection extends Message<Plugin_CouchbaseConnection> {
  /**
   * @generated from field: string user = 2;
   */
  user = "";

  /**
   * @generated from field: string password = 3;
   */
  password = "";

  /**
   * @generated from field: string bucket = 4;
   */
  bucket = "";

  /**
   * @generated from field: bool use_tls = 5;
   */
  useTls = false;

  /**
   * @generated from field: optional string url = 6;
   */
  url?: string;

  constructor(data?: PartialMessage<Plugin_CouchbaseConnection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.couchbase.v1.Plugin.CouchbaseConnection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "use_tls", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_CouchbaseConnection {
    return new Plugin_CouchbaseConnection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_CouchbaseConnection {
    return new Plugin_CouchbaseConnection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_CouchbaseConnection {
    return new Plugin_CouchbaseConnection().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_CouchbaseConnection | PlainMessage<Plugin_CouchbaseConnection> | undefined, b: Plugin_CouchbaseConnection | PlainMessage<Plugin_CouchbaseConnection> | undefined): boolean {
    return proto3.util.equals(Plugin_CouchbaseConnection, a, b);
  }
}

/**
 * @generated from message plugins.couchbase.v1.Plugin.CouchbaseInsert
 */
export class Plugin_CouchbaseInsert extends Message<Plugin_CouchbaseInsert> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  /**
   * @generated from field: plugins.couchbase.v1.Plugin.CouchbaseIdentifier identifier = 3;
   */
  identifier?: Plugin_CouchbaseIdentifier;

  constructor(data?: PartialMessage<Plugin_CouchbaseInsert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.couchbase.v1.Plugin.CouchbaseInsert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "identifier", kind: "message", T: Plugin_CouchbaseIdentifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_CouchbaseInsert {
    return new Plugin_CouchbaseInsert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_CouchbaseInsert {
    return new Plugin_CouchbaseInsert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_CouchbaseInsert {
    return new Plugin_CouchbaseInsert().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_CouchbaseInsert | PlainMessage<Plugin_CouchbaseInsert> | undefined, b: Plugin_CouchbaseInsert | PlainMessage<Plugin_CouchbaseInsert> | undefined): boolean {
    return proto3.util.equals(Plugin_CouchbaseInsert, a, b);
  }
}

/**
 * @generated from message plugins.couchbase.v1.Plugin.CouchbaseGet
 */
export class Plugin_CouchbaseGet extends Message<Plugin_CouchbaseGet> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: plugins.couchbase.v1.Plugin.CouchbaseIdentifier identifier = 2;
   */
  identifier?: Plugin_CouchbaseIdentifier;

  constructor(data?: PartialMessage<Plugin_CouchbaseGet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.couchbase.v1.Plugin.CouchbaseGet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "identifier", kind: "message", T: Plugin_CouchbaseIdentifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_CouchbaseGet {
    return new Plugin_CouchbaseGet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_CouchbaseGet {
    return new Plugin_CouchbaseGet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_CouchbaseGet {
    return new Plugin_CouchbaseGet().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_CouchbaseGet | PlainMessage<Plugin_CouchbaseGet> | undefined, b: Plugin_CouchbaseGet | PlainMessage<Plugin_CouchbaseGet> | undefined): boolean {
    return proto3.util.equals(Plugin_CouchbaseGet, a, b);
  }
}

/**
 * @generated from message plugins.couchbase.v1.Plugin.CouchbaseRemove
 */
export class Plugin_CouchbaseRemove extends Message<Plugin_CouchbaseRemove> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: plugins.couchbase.v1.Plugin.CouchbaseIdentifier identifier = 2;
   */
  identifier?: Plugin_CouchbaseIdentifier;

  constructor(data?: PartialMessage<Plugin_CouchbaseRemove>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.couchbase.v1.Plugin.CouchbaseRemove";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "identifier", kind: "message", T: Plugin_CouchbaseIdentifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_CouchbaseRemove {
    return new Plugin_CouchbaseRemove().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_CouchbaseRemove {
    return new Plugin_CouchbaseRemove().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_CouchbaseRemove {
    return new Plugin_CouchbaseRemove().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_CouchbaseRemove | PlainMessage<Plugin_CouchbaseRemove> | undefined, b: Plugin_CouchbaseRemove | PlainMessage<Plugin_CouchbaseRemove> | undefined): boolean {
    return proto3.util.equals(Plugin_CouchbaseRemove, a, b);
  }
}

