// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file plugins/email/v1/plugin.proto (package plugins.email.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message plugins.email.v1.SuperblocksMetadata
 */
export class SuperblocksMetadata extends Message<SuperblocksMetadata> {
  /**
   * @generated from field: string pluginVersion = 1;
   */
  pluginVersion = "";

  constructor(data?: PartialMessage<SuperblocksMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.email.v1.SuperblocksMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pluginVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuperblocksMetadata {
    return new SuperblocksMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuperblocksMetadata {
    return new SuperblocksMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuperblocksMetadata {
    return new SuperblocksMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: SuperblocksMetadata | PlainMessage<SuperblocksMetadata> | undefined, b: SuperblocksMetadata | PlainMessage<SuperblocksMetadata> | undefined): boolean {
    return proto3.util.equals(SuperblocksMetadata, a, b);
  }
}

/**
 * @generated from message plugins.email.v1.Plugin
 */
export class Plugin extends Message<Plugin> {
  /**
   * @generated from field: string emailFrom = 1;
   */
  emailFrom = "";

  /**
   * @generated from field: string emailTo = 2;
   */
  emailTo = "";

  /**
   * @generated from field: string emailCc = 3;
   */
  emailCc = "";

  /**
   * @generated from field: string emailBcc = 4;
   */
  emailBcc = "";

  /**
   * @generated from field: string emailSubject = 5;
   */
  emailSubject = "";

  /**
   * @generated from field: string emailBody = 6;
   */
  emailBody = "";

  /**
   * @generated from field: string emailAttachments = 7;
   */
  emailAttachments = "";

  /**
   * @generated from field: plugins.email.v1.SuperblocksMetadata superblocksMetadata = 8;
   */
  superblocksMetadata?: SuperblocksMetadata;

  constructor(data?: PartialMessage<Plugin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.email.v1.Plugin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "emailFrom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "emailTo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "emailCc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "emailBcc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "emailSubject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "emailBody", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "emailAttachments", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "superblocksMetadata", kind: "message", T: SuperblocksMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin {
    return new Plugin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin | PlainMessage<Plugin> | undefined, b: Plugin | PlainMessage<Plugin> | undefined): boolean {
    return proto3.util.equals(Plugin, a, b);
  }
}

