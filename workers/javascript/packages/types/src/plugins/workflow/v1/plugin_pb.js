"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file plugins/workflow/v1/plugin.proto (package plugins.workflow.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plugin = exports.Tuple = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const plugin_pb_1 = require("../../../common/v1/plugin_pb");
/**
 * @generated from message plugins.workflow.v1.Tuple
 */
class Tuple extends protobuf_1.Message {
    /**
     * @generated from field: string key = 1;
     */
    key = "";
    /**
     * @generated from field: string value = 2;
     */
    value = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.workflow.v1.Tuple";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Tuple().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Tuple().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Tuple().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Tuple, a, b);
    }
}
exports.Tuple = Tuple;
/**
 * @generated from message plugins.workflow.v1.Plugin
 */
class Plugin extends protobuf_1.Message {
    /**
     * @generated from field: string workflow = 1;
     */
    workflow = "";
    /**
     * @generated from field: map<string, common.v1.Property> custom = 2;
     */
    custom = {};
    /**
     * @generated from field: map<string, common.v1.Property> queryParams = 3;
     */
    queryParams = {};
    /**
     * @generated from field: common.v1.SuperblocksMetadata superblocksMetadata = 12;
     */
    superblocksMetadata;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "plugins.workflow.v1.Plugin";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "workflow", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "custom", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: plugin_pb_1.Property } },
        { no: 3, name: "queryParams", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: plugin_pb_1.Property } },
        { no: 12, name: "superblocksMetadata", kind: "message", T: plugin_pb_1.SuperblocksMetadata },
    ]);
    static fromBinary(bytes, options) {
        return new Plugin().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Plugin().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Plugin().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Plugin, a, b);
    }
}
exports.Plugin = Plugin;
//# sourceMappingURL=plugin_pb.map