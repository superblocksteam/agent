// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file plugins/gcs/v1/plugin.proto (package plugins.gcs.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message plugins.gcs.v1.SuperblocksMetadata
 */
export class SuperblocksMetadata extends Message<SuperblocksMetadata> {
  /**
   * @generated from field: string pluginVersion = 1;
   */
  pluginVersion = "";

  constructor(data?: PartialMessage<SuperblocksMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.gcs.v1.SuperblocksMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pluginVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuperblocksMetadata {
    return new SuperblocksMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuperblocksMetadata {
    return new SuperblocksMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuperblocksMetadata {
    return new SuperblocksMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: SuperblocksMetadata | PlainMessage<SuperblocksMetadata> | undefined, b: SuperblocksMetadata | PlainMessage<SuperblocksMetadata> | undefined): boolean {
    return proto3.util.equals(SuperblocksMetadata, a, b);
  }
}

/**
 * @generated from message plugins.gcs.v1.Property
 */
export class Property extends Message<Property> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: int32 value = 2;
   */
  value = 0;

  /**
   * @generated from field: bool editable = 3;
   */
  editable = false;

  /**
   * @generated from field: bool internal = 4;
   */
  internal = false;

  /**
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * @generated from field: bool mandatory = 6;
   */
  mandatory = false;

  /**
   * @generated from field: string type = 7;
   */
  type = "";

  /**
   * @generated from field: string defaultValue = 8;
   */
  defaultValue = "";

  /**
   * @generated from field: string minRange = 9;
   */
  minRange = "";

  /**
   * @generated from field: string maxRange = 10;
   */
  maxRange = "";

  /**
   * @generated from field: repeated string valueOptions = 11;
   */
  valueOptions: string[] = [];

  constructor(data?: PartialMessage<Property>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.gcs.v1.Property";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "editable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "internal", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "mandatory", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "defaultValue", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "minRange", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "maxRange", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "valueOptions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Property {
    return new Property().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Property {
    return new Property().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Property {
    return new Property().fromJsonString(jsonString, options);
  }

  static equals(a: Property | PlainMessage<Property> | undefined, b: Property | PlainMessage<Property> | undefined): boolean {
    return proto3.util.equals(Property, a, b);
  }
}

/**
 * @generated from message plugins.gcs.v1.Custom
 */
export class Custom extends Message<Custom> {
  /**
   * @generated from field: plugins.gcs.v1.Property presignedExpiration = 1;
   */
  presignedExpiration?: Property;

  constructor(data?: PartialMessage<Custom>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.gcs.v1.Custom";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "presignedExpiration", kind: "message", T: Property },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Custom {
    return new Custom().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Custom {
    return new Custom().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Custom {
    return new Custom().fromJsonString(jsonString, options);
  }

  static equals(a: Custom | PlainMessage<Custom> | undefined, b: Custom | PlainMessage<Custom> | undefined): boolean {
    return proto3.util.equals(Custom, a, b);
  }
}

/**
 * @generated from message plugins.gcs.v1.Plugin
 */
export class Plugin extends Message<Plugin> {
  /**
   * @generated from field: string resource = 1;
   */
  resource = "";

  /**
   * @generated from field: string resourceType = 2;
   */
  resourceType = "";

  /**
   * @generated from field: string action = 3;
   */
  action = "";

  /**
   * @generated from field: string path = 4;
   */
  path = "";

  /**
   * @generated from field: string prefix = 5;
   */
  prefix = "";

  /**
   * @generated from field: string body = 6;
   */
  body = "";

  /**
   * @generated from field: string fileObjects = 7;
   */
  fileObjects = "";

  /**
   * @generated from field: string responseType = 8;
   */
  responseType = "";

  /**
   * @generated from field: plugins.gcs.v1.Custom custom = 9;
   */
  custom?: Custom;

  /**
   * @generated from field: plugins.gcs.v1.SuperblocksMetadata superblocksMetadata = 10;
   */
  superblocksMetadata?: SuperblocksMetadata;

  constructor(data?: PartialMessage<Plugin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.gcs.v1.Plugin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resourceType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "fileObjects", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "responseType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "custom", kind: "message", T: Custom },
    { no: 10, name: "superblocksMetadata", kind: "message", T: SuperblocksMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin {
    return new Plugin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin | PlainMessage<Plugin> | undefined, b: Plugin | PlainMessage<Plugin> | undefined): boolean {
    return proto3.util.equals(Plugin, a, b);
  }
}

