// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file plugins/athena/v1/plugin.proto (package plugins.athena.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { AWSConfig, DynamicWorkflowConfiguration, SQLExecution } from "../../common/v1/plugin_pb";

/**
 * @generated from message plugins.athena.v1.Connection
 */
export class Connection extends Message<Connection> {
  /**
   * @generated from field: optional string workgroup_name = 1;
   */
  workgroupName?: string;

  /**
   * @generated from field: bool override_s3_output_location = 2;
   */
  overrideS3OutputLocation = false;

  /**
   * @generated from field: optional string s3_output_location = 3;
   */
  s3OutputLocation?: string;

  /**
   * @generated from field: optional plugins.athena.v1.Connection.DateFolderType s3_output_location_suffix = 4;
   */
  s3OutputLocationSuffix?: Connection_DateFolderType;

  /**
   * @generated from field: string database_name = 5;
   */
  databaseName = "";

  /**
   * @generated from field: plugins.common.v1.AWSConfig aws_config = 6;
   */
  awsConfig?: AWSConfig;

  constructor(data?: PartialMessage<Connection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.athena.v1.Connection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workgroup_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "override_s3_output_location", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "s3_output_location", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "s3_output_location_suffix", kind: "enum", T: proto3.getEnumType(Connection_DateFolderType), opt: true },
    { no: 5, name: "database_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "aws_config", kind: "message", T: AWSConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Connection {
    return new Connection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Connection {
    return new Connection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Connection {
    return new Connection().fromJsonString(jsonString, options);
  }

  static equals(a: Connection | PlainMessage<Connection> | undefined, b: Connection | PlainMessage<Connection> | undefined): boolean {
    return proto3.util.equals(Connection, a, b);
  }
}

/**
 * @generated from enum plugins.athena.v1.Connection.DateFolderType
 */
export enum Connection_DateFolderType {
  /**
   * @generated from enum value: DATE_FOLDER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DATE_FOLDER_TYPE_YYYY = 1;
   */
  YYYY = 1,

  /**
   * @generated from enum value: DATE_FOLDER_TYPE_YYYYMM = 2;
   */
  YYYYMM = 2,

  /**
   * @generated from enum value: DATE_FOLDER_TYPE_YYYYMMDD = 3;
   */
  YYYYMMDD = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Connection_DateFolderType)
proto3.util.setEnumType(Connection_DateFolderType, "plugins.athena.v1.Connection.DateFolderType", [
  { no: 0, name: "DATE_FOLDER_TYPE_UNSPECIFIED" },
  { no: 1, name: "DATE_FOLDER_TYPE_YYYY" },
  { no: 2, name: "DATE_FOLDER_TYPE_YYYYMM" },
  { no: 3, name: "DATE_FOLDER_TYPE_YYYYMMDD" },
]);

/**
 * @generated from message plugins.athena.v1.Plugin
 */
export class Plugin extends Message<Plugin> {
  /**
   * @generated from field: optional string name = 1;
   */
  name?: string;

  /**
   * @generated from field: plugins.athena.v1.Connection connection = 2;
   */
  connection?: Connection;

  /**
   * @generated from field: plugins.common.v1.SQLExecution run_sql = 3;
   */
  runSql?: SQLExecution;

  /**
   * @generated from field: optional plugins.common.v1.DynamicWorkflowConfiguration dynamic_workflow_configuration = 4;
   */
  dynamicWorkflowConfiguration?: DynamicWorkflowConfiguration;

  constructor(data?: PartialMessage<Plugin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.athena.v1.Plugin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "connection", kind: "message", T: Connection },
    { no: 3, name: "run_sql", kind: "message", T: SQLExecution },
    { no: 4, name: "dynamic_workflow_configuration", kind: "message", T: DynamicWorkflowConfiguration, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin {
    return new Plugin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin | PlainMessage<Plugin> | undefined, b: Plugin | PlainMessage<Plugin> | undefined): boolean {
    return proto3.util.equals(Plugin, a, b);
  }
}

