// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file plugins/mssql/v1/plugin.proto (package plugins.mssql.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message plugins.mssql.v1.MappedColumns
 */
export class MappedColumns extends Message<MappedColumns> {
  /**
   * @generated from field: string json = 1;
   */
  json = "";

  /**
   * @generated from field: string sql = 2;
   */
  sql = "";

  constructor(data?: PartialMessage<MappedColumns>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.mssql.v1.MappedColumns";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MappedColumns {
    return new MappedColumns().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MappedColumns {
    return new MappedColumns().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MappedColumns {
    return new MappedColumns().fromJsonString(jsonString, options);
  }

  static equals(a: MappedColumns | PlainMessage<MappedColumns> | undefined, b: MappedColumns | PlainMessage<MappedColumns> | undefined): boolean {
    return proto3.util.equals(MappedColumns, a, b);
  }
}

/**
 * @generated from message plugins.mssql.v1.Tuple
 */
export class Tuple extends Message<Tuple> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: google.protobuf.Any value = 2;
   */
  value?: Any;

  constructor(data?: PartialMessage<Tuple>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.mssql.v1.Tuple";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tuple {
    return new Tuple().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tuple {
    return new Tuple().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tuple {
    return new Tuple().fromJsonString(jsonString, options);
  }

  static equals(a: Tuple | PlainMessage<Tuple> | undefined, b: Tuple | PlainMessage<Tuple> | undefined): boolean {
    return proto3.util.equals(Tuple, a, b);
  }
}

/**
 * @generated from message plugins.mssql.v1.SuperblocksMetadata
 */
export class SuperblocksMetadata extends Message<SuperblocksMetadata> {
  /**
   * @generated from field: string pluginVersion = 1;
   */
  pluginVersion = "";

  constructor(data?: PartialMessage<SuperblocksMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.mssql.v1.SuperblocksMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pluginVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuperblocksMetadata {
    return new SuperblocksMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuperblocksMetadata {
    return new SuperblocksMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuperblocksMetadata {
    return new SuperblocksMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: SuperblocksMetadata | PlainMessage<SuperblocksMetadata> | undefined, b: SuperblocksMetadata | PlainMessage<SuperblocksMetadata> | undefined): boolean {
    return proto3.util.equals(SuperblocksMetadata, a, b);
  }
}

/**
 * @generated from message plugins.mssql.v1.Plugin
 */
export class Plugin extends Message<Plugin> {
  /**
   * @generated from field: string body = 1;
   */
  body = "";

  /**
   * @generated from field: bool usePreparedSql = 2;
   */
  usePreparedSql = false;

  /**
   * @generated from field: optional string operation = 3;
   */
  operation?: string;

  /**
   * @generated from field: optional string useAdvancedMatching = 4;
   */
  useAdvancedMatching?: string;

  /**
   * @generated from field: optional string table = 5;
   */
  table?: string;

  /**
   * @generated from field: optional string newValues = 6;
   */
  newValues?: string;

  /**
   * @generated from field: optional string oldValues = 7;
   */
  oldValues?: string;

  /**
   * @generated from field: repeated string filterBy = 8;
   */
  filterBy: string[] = [];

  /**
   * @generated from field: optional string mappingMode = 9;
   */
  mappingMode?: string;

  /**
   * @generated from field: repeated plugins.mssql.v1.MappedColumns mappedColumns = 10;
   */
  mappedColumns: MappedColumns[] = [];

  /**
   * @generated from field: plugins.mssql.v1.SuperblocksMetadata superblocksMetadata = 11;
   */
  superblocksMetadata?: SuperblocksMetadata;

  /**
   * @generated from field: optional string insertedRows = 12;
   */
  insertedRows?: string;

  /**
   * @generated from field: optional string deletedRows = 13;
   */
  deletedRows?: string;

  /**
   * @generated from field: optional string schema = 14;
   */
  schema?: string;

  constructor(data?: PartialMessage<Plugin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.mssql.v1.Plugin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "usePreparedSql", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "operation", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "useAdvancedMatching", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "table", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "newValues", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "oldValues", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "filterBy", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "mappingMode", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "mappedColumns", kind: "message", T: MappedColumns, repeated: true },
    { no: 11, name: "superblocksMetadata", kind: "message", T: SuperblocksMetadata },
    { no: 12, name: "insertedRows", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 13, name: "deletedRows", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 14, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin {
    return new Plugin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin | PlainMessage<Plugin> | undefined, b: Plugin | PlainMessage<Plugin> | undefined): boolean {
    return proto3.util.equals(Plugin, a, b);
  }
}

