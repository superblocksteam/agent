// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file plugins/oracledb/v1/plugin.proto (package plugins.oracledb.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { DynamicWorkflowConfiguration, SQLBulkEdit, SQLExecution, SQLOperation } from "../../common/v1/plugin_pb";

/**
 * @generated from message plugins.oracledb.v1.Plugin
 */
export class Plugin extends Message<Plugin> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: plugins.oracledb.v1.Plugin.OracleDbConnection connection = 2;
   */
  connection?: Plugin_OracleDbConnection;

  /**
   * @generated from field: optional plugins.common.v1.DynamicWorkflowConfiguration dynamic_workflow_configuration = 3;
   */
  dynamicWorkflowConfiguration?: DynamicWorkflowConfiguration;

  /**
   * @generated from field: plugins.common.v1.SQLExecution run_sql = 4;
   */
  runSql?: SQLExecution;

  /**
   * @generated from field: plugins.common.v1.SQLBulkEdit bulk_edit = 5;
   */
  bulkEdit?: SQLBulkEdit;

  /**
   * @generated from field: plugins.common.v1.SQLOperation operation = 6;
   */
  operation = SQLOperation.SQL_OPERATION_UNSPECIFIED;

  constructor(data?: PartialMessage<Plugin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.oracledb.v1.Plugin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connection", kind: "message", T: Plugin_OracleDbConnection },
    { no: 3, name: "dynamic_workflow_configuration", kind: "message", T: DynamicWorkflowConfiguration, opt: true },
    { no: 4, name: "run_sql", kind: "message", T: SQLExecution },
    { no: 5, name: "bulk_edit", kind: "message", T: SQLBulkEdit },
    { no: 6, name: "operation", kind: "enum", T: proto3.getEnumType(SQLOperation) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin {
    return new Plugin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin | PlainMessage<Plugin> | undefined, b: Plugin | PlainMessage<Plugin> | undefined): boolean {
    return proto3.util.equals(Plugin, a, b);
  }
}

/**
 * @generated from message plugins.oracledb.v1.Plugin.OracleDbConnection
 */
export class Plugin_OracleDbConnection extends Message<Plugin_OracleDbConnection> {
  /**
   * @generated from field: string host_url = 1;
   */
  hostUrl = "";

  /**
   * @generated from field: int32 port = 2;
   */
  port = 0;

  /**
   * @generated from field: string user = 3;
   */
  user = "";

  /**
   * @generated from field: string password = 4;
   */
  password = "";

  /**
   * @generated from field: string database_service = 5;
   */
  databaseService = "";

  /**
   * @generated from field: bool use_tcps = 6;
   */
  useTcps = false;

  /**
   * @generated from field: string connection_type = 7;
   */
  connectionType = "";

  /**
   * @generated from field: string connection_url = 8;
   */
  connectionUrl = "";

  constructor(data?: PartialMessage<Plugin_OracleDbConnection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.oracledb.v1.Plugin.OracleDbConnection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "database_service", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "use_tcps", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "connection_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "connection_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_OracleDbConnection {
    return new Plugin_OracleDbConnection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_OracleDbConnection {
    return new Plugin_OracleDbConnection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_OracleDbConnection {
    return new Plugin_OracleDbConnection().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_OracleDbConnection | PlainMessage<Plugin_OracleDbConnection> | undefined, b: Plugin_OracleDbConnection | PlainMessage<Plugin_OracleDbConnection> | undefined): boolean {
    return proto3.util.equals(Plugin_OracleDbConnection, a, b);
  }
}

