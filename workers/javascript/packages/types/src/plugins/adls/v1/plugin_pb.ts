// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file plugins/adls/v1/plugin.proto (package plugins.adls.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { DynamicWorkflowConfiguration } from "../../common/v1/plugin_pb";
import { Azure } from "../../common/v1/auth_pb";

/**
 * @generated from message plugins.adls.v1.Plugin
 */
export class Plugin extends Message<Plugin> {
  /**
   * @generated from field: optional string name = 1;
   */
  name?: string;

  /**
   * @generated from field: optional plugins.common.v1.DynamicWorkflowConfiguration dynamic_workflow_configuration = 2;
   */
  dynamicWorkflowConfiguration?: DynamicWorkflowConfiguration;

  /**
   * @generated from field: plugins.adls.v1.Plugin.AdlsConnection connection = 3;
   */
  connection?: Plugin_AdlsConnection;

  /**
   * @generated from oneof plugins.adls.v1.Plugin.adls_action
   */
  adlsAction: {
    /**
     * @generated from field: plugins.adls.v1.Plugin.CreateContainer create_container = 4;
     */
    value: Plugin_CreateContainer;
    case: "createContainer";
  } | {
    /**
     * @generated from field: plugins.adls.v1.Plugin.CreateDirectory create_directory = 5;
     */
    value: Plugin_CreateDirectory;
    case: "createDirectory";
  } | {
    /**
     * @generated from field: plugins.adls.v1.Plugin.RenameDirectory rename_directory = 6;
     */
    value: Plugin_RenameDirectory;
    case: "renameDirectory";
  } | {
    /**
     * @generated from field: plugins.adls.v1.Plugin.DeleteDirectory delete_directory = 7;
     */
    value: Plugin_DeleteDirectory;
    case: "deleteDirectory";
  } | {
    /**
     * @generated from field: plugins.adls.v1.Plugin.ListDirectoryContents list_directory_contents = 8;
     */
    value: Plugin_ListDirectoryContents;
    case: "listDirectoryContents";
  } | {
    /**
     * @generated from field: plugins.adls.v1.Plugin.UploadFile upload_file = 9;
     */
    value: Plugin_UploadFile;
    case: "uploadFile";
  } | {
    /**
     * @generated from field: plugins.adls.v1.Plugin.DownloadFile download_file = 10;
     */
    value: Plugin_DownloadFile;
    case: "downloadFile";
  } | {
    /**
     * @generated from field: plugins.adls.v1.Plugin.DeleteFile delete_file = 11;
     */
    value: Plugin_DeleteFile;
    case: "deleteFile";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Plugin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.adls.v1.Plugin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "dynamic_workflow_configuration", kind: "message", T: DynamicWorkflowConfiguration, opt: true },
    { no: 3, name: "connection", kind: "message", T: Plugin_AdlsConnection },
    { no: 4, name: "create_container", kind: "message", T: Plugin_CreateContainer, oneof: "adls_action" },
    { no: 5, name: "create_directory", kind: "message", T: Plugin_CreateDirectory, oneof: "adls_action" },
    { no: 6, name: "rename_directory", kind: "message", T: Plugin_RenameDirectory, oneof: "adls_action" },
    { no: 7, name: "delete_directory", kind: "message", T: Plugin_DeleteDirectory, oneof: "adls_action" },
    { no: 8, name: "list_directory_contents", kind: "message", T: Plugin_ListDirectoryContents, oneof: "adls_action" },
    { no: 9, name: "upload_file", kind: "message", T: Plugin_UploadFile, oneof: "adls_action" },
    { no: 10, name: "download_file", kind: "message", T: Plugin_DownloadFile, oneof: "adls_action" },
    { no: 11, name: "delete_file", kind: "message", T: Plugin_DeleteFile, oneof: "adls_action" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin {
    return new Plugin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin | PlainMessage<Plugin> | undefined, b: Plugin | PlainMessage<Plugin> | undefined): boolean {
    return proto3.util.equals(Plugin, a, b);
  }
}

/**
 * We need to repeat that it's Adls because of the schema checker that's built
 * based off of these types. It errors out when there is a duplicate type
 * name.
 *
 * @generated from message plugins.adls.v1.Plugin.AdlsConnection
 */
export class Plugin_AdlsConnection extends Message<Plugin_AdlsConnection> {
  /**
   * @generated from field: string account_name = 1;
   */
  accountName = "";

  /**
   * @generated from field: string tenant = 2;
   */
  tenant = "";

  /**
   * @generated from field: plugins.common.v1.Azure auth = 3;
   */
  auth?: Azure;

  constructor(data?: PartialMessage<Plugin_AdlsConnection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.adls.v1.Plugin.AdlsConnection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tenant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "auth", kind: "message", T: Azure },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_AdlsConnection {
    return new Plugin_AdlsConnection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_AdlsConnection {
    return new Plugin_AdlsConnection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_AdlsConnection {
    return new Plugin_AdlsConnection().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_AdlsConnection | PlainMessage<Plugin_AdlsConnection> | undefined, b: Plugin_AdlsConnection | PlainMessage<Plugin_AdlsConnection> | undefined): boolean {
    return proto3.util.equals(Plugin_AdlsConnection, a, b);
  }
}

/**
 * Actions
 *
 * @generated from message plugins.adls.v1.Plugin.CreateContainer
 */
export class Plugin_CreateContainer extends Message<Plugin_CreateContainer> {
  /**
   * @generated from field: string file_system = 2;
   */
  fileSystem = "";

  constructor(data?: PartialMessage<Plugin_CreateContainer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.adls.v1.Plugin.CreateContainer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "file_system", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_CreateContainer {
    return new Plugin_CreateContainer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_CreateContainer {
    return new Plugin_CreateContainer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_CreateContainer {
    return new Plugin_CreateContainer().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_CreateContainer | PlainMessage<Plugin_CreateContainer> | undefined, b: Plugin_CreateContainer | PlainMessage<Plugin_CreateContainer> | undefined): boolean {
    return proto3.util.equals(Plugin_CreateContainer, a, b);
  }
}

/**
 * @generated from message plugins.adls.v1.Plugin.CreateDirectory
 */
export class Plugin_CreateDirectory extends Message<Plugin_CreateDirectory> {
  /**
   * @generated from field: string file_system = 1;
   */
  fileSystem = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<Plugin_CreateDirectory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.adls.v1.Plugin.CreateDirectory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_system", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_CreateDirectory {
    return new Plugin_CreateDirectory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_CreateDirectory {
    return new Plugin_CreateDirectory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_CreateDirectory {
    return new Plugin_CreateDirectory().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_CreateDirectory | PlainMessage<Plugin_CreateDirectory> | undefined, b: Plugin_CreateDirectory | PlainMessage<Plugin_CreateDirectory> | undefined): boolean {
    return proto3.util.equals(Plugin_CreateDirectory, a, b);
  }
}

/**
 * @generated from message plugins.adls.v1.Plugin.RenameDirectory
 */
export class Plugin_RenameDirectory extends Message<Plugin_RenameDirectory> {
  /**
   * @generated from field: string file_system = 1;
   */
  fileSystem = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * @generated from field: string new_path = 3;
   */
  newPath = "";

  constructor(data?: PartialMessage<Plugin_RenameDirectory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.adls.v1.Plugin.RenameDirectory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_system", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_RenameDirectory {
    return new Plugin_RenameDirectory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_RenameDirectory {
    return new Plugin_RenameDirectory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_RenameDirectory {
    return new Plugin_RenameDirectory().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_RenameDirectory | PlainMessage<Plugin_RenameDirectory> | undefined, b: Plugin_RenameDirectory | PlainMessage<Plugin_RenameDirectory> | undefined): boolean {
    return proto3.util.equals(Plugin_RenameDirectory, a, b);
  }
}

/**
 * @generated from message plugins.adls.v1.Plugin.DeleteDirectory
 */
export class Plugin_DeleteDirectory extends Message<Plugin_DeleteDirectory> {
  /**
   * @generated from field: string file_system = 1;
   */
  fileSystem = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<Plugin_DeleteDirectory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.adls.v1.Plugin.DeleteDirectory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_system", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_DeleteDirectory {
    return new Plugin_DeleteDirectory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_DeleteDirectory {
    return new Plugin_DeleteDirectory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_DeleteDirectory {
    return new Plugin_DeleteDirectory().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_DeleteDirectory | PlainMessage<Plugin_DeleteDirectory> | undefined, b: Plugin_DeleteDirectory | PlainMessage<Plugin_DeleteDirectory> | undefined): boolean {
    return proto3.util.equals(Plugin_DeleteDirectory, a, b);
  }
}

/**
 * @generated from message plugins.adls.v1.Plugin.ListDirectoryContents
 */
export class Plugin_ListDirectoryContents extends Message<Plugin_ListDirectoryContents> {
  /**
   * @generated from field: string file_system = 1;
   */
  fileSystem = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<Plugin_ListDirectoryContents>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.adls.v1.Plugin.ListDirectoryContents";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_system", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_ListDirectoryContents {
    return new Plugin_ListDirectoryContents().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_ListDirectoryContents {
    return new Plugin_ListDirectoryContents().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_ListDirectoryContents {
    return new Plugin_ListDirectoryContents().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_ListDirectoryContents | PlainMessage<Plugin_ListDirectoryContents> | undefined, b: Plugin_ListDirectoryContents | PlainMessage<Plugin_ListDirectoryContents> | undefined): boolean {
    return proto3.util.equals(Plugin_ListDirectoryContents, a, b);
  }
}

/**
 * @generated from message plugins.adls.v1.Plugin.UploadFile
 */
export class Plugin_UploadFile extends Message<Plugin_UploadFile> {
  /**
   * @generated from field: string file_system = 1;
   */
  fileSystem = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * @generated from field: string content = 3;
   */
  content = "";

  constructor(data?: PartialMessage<Plugin_UploadFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.adls.v1.Plugin.UploadFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_system", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_UploadFile {
    return new Plugin_UploadFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_UploadFile {
    return new Plugin_UploadFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_UploadFile {
    return new Plugin_UploadFile().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_UploadFile | PlainMessage<Plugin_UploadFile> | undefined, b: Plugin_UploadFile | PlainMessage<Plugin_UploadFile> | undefined): boolean {
    return proto3.util.equals(Plugin_UploadFile, a, b);
  }
}

/**
 * @generated from message plugins.adls.v1.Plugin.DownloadFile
 */
export class Plugin_DownloadFile extends Message<Plugin_DownloadFile> {
  /**
   * @generated from field: string file_system = 1;
   */
  fileSystem = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<Plugin_DownloadFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.adls.v1.Plugin.DownloadFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_system", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_DownloadFile {
    return new Plugin_DownloadFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_DownloadFile {
    return new Plugin_DownloadFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_DownloadFile {
    return new Plugin_DownloadFile().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_DownloadFile | PlainMessage<Plugin_DownloadFile> | undefined, b: Plugin_DownloadFile | PlainMessage<Plugin_DownloadFile> | undefined): boolean {
    return proto3.util.equals(Plugin_DownloadFile, a, b);
  }
}

/**
 * @generated from message plugins.adls.v1.Plugin.DeleteFile
 */
export class Plugin_DeleteFile extends Message<Plugin_DeleteFile> {
  /**
   * @generated from field: string file_system = 1;
   */
  fileSystem = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<Plugin_DeleteFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.adls.v1.Plugin.DeleteFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_system", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_DeleteFile {
    return new Plugin_DeleteFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_DeleteFile {
    return new Plugin_DeleteFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_DeleteFile {
    return new Plugin_DeleteFile().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_DeleteFile | PlainMessage<Plugin_DeleteFile> | undefined, b: Plugin_DeleteFile | PlainMessage<Plugin_DeleteFile> | undefined): boolean {
    return proto3.util.equals(Plugin_DeleteFile, a, b);
  }
}

/**
 * @generated from message plugins.adls.v1.Plugin.Metadata
 */
export class Plugin_Metadata extends Message<Plugin_Metadata> {
  /**
   * @generated from field: repeated string file_systems = 1;
   */
  fileSystems: string[] = [];

  constructor(data?: PartialMessage<Plugin_Metadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "plugins.adls.v1.Plugin.Metadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_systems", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin_Metadata {
    return new Plugin_Metadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin_Metadata {
    return new Plugin_Metadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin_Metadata {
    return new Plugin_Metadata().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin_Metadata | PlainMessage<Plugin_Metadata> | undefined, b: Plugin_Metadata | PlainMessage<Plugin_Metadata> | undefined): boolean {
    return proto3.util.equals(Plugin_Metadata, a, b);
  }
}

