"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file store/v1/store.proto (package store.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stores = exports.Pair = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const secrets_pb_1 = require("../../secrets/v1/secrets_pb");
/**
 * @generated from message store.v1.Pair
 */
class Pair extends protobuf_1.Message {
    /**
     * @generated from field: string key = 1;
     */
    key = "";
    /**
     * @generated from field: google.protobuf.Value value = 2;
     */
    value;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "store.v1.Pair";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "value", kind: "message", T: protobuf_1.Value },
    ]);
    static fromBinary(bytes, options) {
        return new Pair().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Pair().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Pair().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Pair, a, b);
    }
}
exports.Pair = Pair;
/**
 * @generated from message store.v1.Stores
 */
class Stores extends protobuf_1.Message {
    /**
     * @generated from field: repeated secrets.v1.Store secrets = 1;
     */
    secrets = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "store.v1.Stores";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "secrets", kind: "message", T: secrets_pb_1.Store, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new Stores().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Stores().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Stores().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Stores, a, b);
    }
}
exports.Stores = Stores;
//# sourceMappingURL=store_pb.map