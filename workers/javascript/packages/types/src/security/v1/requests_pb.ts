// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file security/v1/requests.proto (package security.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Resource } from "./service_pb";

/**
 * GET api/v1/keyrotations
 *
 * @generated from enum security.v1.KeyRotationStatus
 */
export enum KeyRotationStatus {
  /**
   * @generated from enum value: KEY_ROTATION_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: KEY_ROTATION_STATUS_IN_PROGRESS = 1;
   */
  IN_PROGRESS = 1,

  /**
   * @generated from enum value: KEY_ROTATION_STATUS_COMPLETED = 2;
   */
  COMPLETED = 2,

  /**
   * @generated from enum value: KEY_ROTATION_STATUS_FAILED = 3;
   */
  FAILED = 3,

  /**
   * @generated from enum value: KEY_ROTATION_STATUS_CANCELED = 4;
   */
  CANCELED = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(KeyRotationStatus)
proto3.util.setEnumType(KeyRotationStatus, "security.v1.KeyRotationStatus", [
  { no: 0, name: "KEY_ROTATION_STATUS_UNSPECIFIED" },
  { no: 1, name: "KEY_ROTATION_STATUS_IN_PROGRESS" },
  { no: 2, name: "KEY_ROTATION_STATUS_COMPLETED" },
  { no: 3, name: "KEY_ROTATION_STATUS_FAILED" },
  { no: 4, name: "KEY_ROTATION_STATUS_CANCELED" },
]);

/**
 * POST api/v1/keyrotations/claim-resources
 *
 * @generated from message security.v1.ResourcesToResignRequest
 */
export class ResourcesToResignRequest extends Message<ResourcesToResignRequest> {
  /**
   * Unique name for the caller for locking purposes
   *
   * @generated from field: string claimed_by = 1;
   */
  claimedBy = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  constructor(data?: PartialMessage<ResourcesToResignRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "security.v1.ResourcesToResignRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "claimed_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourcesToResignRequest {
    return new ResourcesToResignRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourcesToResignRequest {
    return new ResourcesToResignRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourcesToResignRequest {
    return new ResourcesToResignRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResourcesToResignRequest | PlainMessage<ResourcesToResignRequest> | undefined, b: ResourcesToResignRequest | PlainMessage<ResourcesToResignRequest> | undefined): boolean {
    return proto3.util.equals(ResourcesToResignRequest, a, b);
  }
}

/**
 * @generated from message security.v1.ResourcesToResignResponse
 */
export class ResourcesToResignResponse extends Message<ResourcesToResignResponse> {
  /**
   * @generated from field: repeated security.v1.Resource resources = 1;
   */
  resources: Resource[] = [];

  constructor(data?: PartialMessage<ResourcesToResignResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "security.v1.ResourcesToResignResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resources", kind: "message", T: Resource, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourcesToResignResponse {
    return new ResourcesToResignResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourcesToResignResponse {
    return new ResourcesToResignResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourcesToResignResponse {
    return new ResourcesToResignResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResourcesToResignResponse | PlainMessage<ResourcesToResignResponse> | undefined, b: ResourcesToResignResponse | PlainMessage<ResourcesToResignResponse> | undefined): boolean {
    return proto3.util.equals(ResourcesToResignResponse, a, b);
  }
}

/**
 * @generated from message security.v1.KeyRotation
 */
export class KeyRotation extends Message<KeyRotation> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: security.v1.KeyRotationStatus status = 2;
   */
  status = KeyRotationStatus.UNSPECIFIED;

  /**
   * @generated from field: int32 resources_completed = 3;
   */
  resourcesCompleted = 0;

  /**
   * @generated from field: int32 resources_total = 4;
   */
  resourcesTotal = 0;

  /**
   * @generated from field: string signing_key_id = 5;
   */
  signingKeyId = "";

  /**
   * @generated from field: google.protobuf.Timestamp created = 6;
   */
  created?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated = 7;
   */
  updated?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp completed = 8;
   */
  completed?: Timestamp;

  constructor(data?: PartialMessage<KeyRotation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "security.v1.KeyRotation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(KeyRotationStatus) },
    { no: 3, name: "resources_completed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "resources_total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "signing_key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "created", kind: "message", T: Timestamp },
    { no: 7, name: "updated", kind: "message", T: Timestamp },
    { no: 8, name: "completed", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeyRotation {
    return new KeyRotation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeyRotation {
    return new KeyRotation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeyRotation {
    return new KeyRotation().fromJsonString(jsonString, options);
  }

  static equals(a: KeyRotation | PlainMessage<KeyRotation> | undefined, b: KeyRotation | PlainMessage<KeyRotation> | undefined): boolean {
    return proto3.util.equals(KeyRotation, a, b);
  }
}

/**
 * @generated from message security.v1.KeyRotationsResponse
 */
export class KeyRotationsResponse extends Message<KeyRotationsResponse> {
  /**
   * @generated from field: repeated security.v1.KeyRotation key_rotations = 1;
   */
  keyRotations: KeyRotation[] = [];

  constructor(data?: PartialMessage<KeyRotationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "security.v1.KeyRotationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key_rotations", kind: "message", T: KeyRotation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeyRotationsResponse {
    return new KeyRotationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeyRotationsResponse {
    return new KeyRotationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeyRotationsResponse {
    return new KeyRotationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: KeyRotationsResponse | PlainMessage<KeyRotationsResponse> | undefined, b: KeyRotationsResponse | PlainMessage<KeyRotationsResponse> | undefined): boolean {
    return proto3.util.equals(KeyRotationsResponse, a, b);
  }
}

