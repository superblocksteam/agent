// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file event/v2/service.proto (package event.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { CloudEvent } from "./cloudevent_pb";

/**
 * @generated from message event.v2.SendRequest
 */
export class SendRequest extends Message<SendRequest> {
  /**
   * @generated from field: event.v2.CloudEvent event = 1;
   */
  event?: CloudEvent;

  /**
   * @generated from field: string destination = 2;
   */
  destination = "";

  constructor(data?: PartialMessage<SendRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "event.v2.SendRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "message", T: CloudEvent },
    { no: 2, name: "destination", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendRequest {
    return new SendRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendRequest {
    return new SendRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendRequest {
    return new SendRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendRequest | PlainMessage<SendRequest> | undefined, b: SendRequest | PlainMessage<SendRequest> | undefined): boolean {
    return proto3.util.equals(SendRequest, a, b);
  }
}

