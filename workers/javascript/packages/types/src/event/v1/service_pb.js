"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file event/v1/service.proto (package event.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.IngestEventResponse_ErrorWrapper = exports.IngestEventResponse = exports.IngestEventRequest = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * @generated from message event.v1.IngestEventRequest
 */
class IngestEventRequest extends protobuf_1.Message {
    /**
     * @generated from field: repeated bytes events = 1;
     */
    events = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "event.v1.IngestEventRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "events", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new IngestEventRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IngestEventRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IngestEventRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(IngestEventRequest, a, b);
    }
}
exports.IngestEventRequest = IngestEventRequest;
/**
 * @generated from message event.v1.IngestEventResponse
 */
class IngestEventResponse extends protobuf_1.Message {
    /**
     * @generated from field: int32 success = 1;
     */
    success = 0;
    /**
     * @generated from field: repeated event.v1.IngestEventResponse.ErrorWrapper errors = 2;
     */
    errors = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "event.v1.IngestEventResponse";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "success", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 2, name: "errors", kind: "message", T: IngestEventResponse_ErrorWrapper, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new IngestEventResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IngestEventResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IngestEventResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(IngestEventResponse, a, b);
    }
}
exports.IngestEventResponse = IngestEventResponse;
/**
 * @generated from message event.v1.IngestEventResponse.ErrorWrapper
 */
class IngestEventResponse_ErrorWrapper extends protobuf_1.Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string error = 2;
     */
    error = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "event.v1.IngestEventResponse.ErrorWrapper";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new IngestEventResponse_ErrorWrapper().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IngestEventResponse_ErrorWrapper().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IngestEventResponse_ErrorWrapper().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(IngestEventResponse_ErrorWrapper, a, b);
    }
}
exports.IngestEventResponse_ErrorWrapper = IngestEventResponse_ErrorWrapper;
//# sourceMappingURL=service_pb.map