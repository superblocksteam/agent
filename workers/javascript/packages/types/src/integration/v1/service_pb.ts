// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file integration/v1/service.proto (package integration.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct } from "@bufbuild/protobuf";
import { Profile } from "../../common/v1/common_pb";

/**
 * @generated from enum integration.v1.Kind
 */
export enum Kind {
  /**
   * @generated from enum value: KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: KIND_PLUGIN = 1;
   */
  PLUGIN = 1,

  /**
   * @generated from enum value: KIND_SECRET = 2;
   */
  SECRET = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Kind)
proto3.util.setEnumType(Kind, "integration.v1.Kind", [
  { no: 0, name: "KIND_UNSPECIFIED" },
  { no: 1, name: "KIND_PLUGIN" },
  { no: 2, name: "KIND_SECRET" },
]);

/**
 * @generated from message integration.v1.GetIntegrationResponse
 */
export class GetIntegrationResponse extends Message<GetIntegrationResponse> {
  /**
   * @generated from field: integration.v1.Integration data = 1;
   */
  data?: Integration;

  constructor(data?: PartialMessage<GetIntegrationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "integration.v1.GetIntegrationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Integration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIntegrationResponse {
    return new GetIntegrationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIntegrationResponse {
    return new GetIntegrationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIntegrationResponse {
    return new GetIntegrationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetIntegrationResponse | PlainMessage<GetIntegrationResponse> | undefined, b: GetIntegrationResponse | PlainMessage<GetIntegrationResponse> | undefined): boolean {
    return proto3.util.equals(GetIntegrationResponse, a, b);
  }
}

/**
 * @generated from message integration.v1.GetIntegrationsRequest
 */
export class GetIntegrationsRequest extends Message<GetIntegrationsRequest> {
  /**
   * @generated from field: optional common.v1.Profile profile = 1;
   */
  profile?: Profile;

  /**
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  /**
   * @generated from field: optional integration.v1.Kind kind = 3;
   */
  kind?: Kind;

  /**
   * @generated from field: optional string slug = 4;
   */
  slug?: string;

  constructor(data?: PartialMessage<GetIntegrationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "integration.v1.GetIntegrationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profile", kind: "message", T: Profile, opt: true },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "kind", kind: "enum", T: proto3.getEnumType(Kind), opt: true },
    { no: 4, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIntegrationsRequest {
    return new GetIntegrationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIntegrationsRequest {
    return new GetIntegrationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIntegrationsRequest {
    return new GetIntegrationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetIntegrationsRequest | PlainMessage<GetIntegrationsRequest> | undefined, b: GetIntegrationsRequest | PlainMessage<GetIntegrationsRequest> | undefined): boolean {
    return proto3.util.equals(GetIntegrationsRequest, a, b);
  }
}

/**
 * @generated from message integration.v1.GetIntegrationsResponse
 */
export class GetIntegrationsResponse extends Message<GetIntegrationsResponse> {
  /**
   * @generated from field: repeated integration.v1.Integration data = 1;
   */
  data: Integration[] = [];

  constructor(data?: PartialMessage<GetIntegrationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "integration.v1.GetIntegrationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Integration, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIntegrationsResponse {
    return new GetIntegrationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIntegrationsResponse {
    return new GetIntegrationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIntegrationsResponse {
    return new GetIntegrationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetIntegrationsResponse | PlainMessage<GetIntegrationsResponse> | undefined, b: GetIntegrationsResponse | PlainMessage<GetIntegrationsResponse> | undefined): boolean {
    return proto3.util.equals(GetIntegrationsResponse, a, b);
  }
}

/**
 * @generated from message integration.v1.Configuration
 */
export class Configuration extends Message<Configuration> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string created = 2;
   */
  created = "";

  /**
   * @generated from field: string integration_id = 3;
   */
  integrationId = "";

  /**
   * @generated from field: google.protobuf.Struct configuration = 4;
   */
  configuration?: Struct;

  /**
   * @generated from field: bool is_default = 5;
   */
  isDefault = false;

  /**
   * @generated from field: repeated string profile_ids = 6;
   */
  profileIds: string[] = [];

  constructor(data?: PartialMessage<Configuration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "integration.v1.Configuration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "integration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "configuration", kind: "message", T: Struct },
    { no: 5, name: "is_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "profile_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Configuration {
    return new Configuration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Configuration {
    return new Configuration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Configuration {
    return new Configuration().fromJsonString(jsonString, options);
  }

  static equals(a: Configuration | PlainMessage<Configuration> | undefined, b: Configuration | PlainMessage<Configuration> | undefined): boolean {
    return proto3.util.equals(Configuration, a, b);
  }
}

/**
 * @generated from message integration.v1.Integration
 */
export class Integration extends Message<Integration> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string created = 2;
   */
  created = "";

  /**
   * @generated from field: string updated = 3;
   */
  updated = "";

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: string plugin_id = 5;
   */
  pluginId = "";

  /**
   * @generated from field: string organization_id = 6;
   */
  organizationId = "";

  /**
   * @generated from field: string demo_integration_id = 7;
   */
  demoIntegrationId = "";

  /**
   * @generated from field: repeated integration.v1.Configuration configurations = 8;
   */
  configurations: Configuration[] = [];

  /**
   * @generated from field: bool is_user_configured = 9;
   */
  isUserConfigured = false;

  /**
   * @generated from field: string slug = 10;
   */
  slug = "";

  constructor(data?: PartialMessage<Integration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "integration.v1.Integration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "updated", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "plugin_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "demo_integration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "configurations", kind: "message", T: Configuration, repeated: true },
    { no: 9, name: "is_user_configured", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Integration {
    return new Integration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Integration {
    return new Integration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Integration {
    return new Integration().fromJsonString(jsonString, options);
  }

  static equals(a: Integration | PlainMessage<Integration> | undefined, b: Integration | PlainMessage<Integration> | undefined): boolean {
    return proto3.util.equals(Integration, a, b);
  }
}

