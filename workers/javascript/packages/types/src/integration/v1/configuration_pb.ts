// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file integration/v1/configuration.proto (package integration.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct } from "@bufbuild/protobuf";
import { Profile } from "../../api/v1/service_pb";
import { Error } from "../../common/v1/errors_pb";

/**
 * @generated from message integration.v1.GetConfigurationsRequest
 */
export class GetConfigurationsRequest extends Message<GetConfigurationsRequest> {
  /**
   * @generated from field: api.v1.Profile profile = 1;
   */
  profile?: Profile;

  /**
   * @generated from field: repeated string integration_ids = 2;
   */
  integrationIds: string[] = [];

  constructor(data?: PartialMessage<GetConfigurationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "integration.v1.GetConfigurationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profile", kind: "message", T: Profile },
    { no: 2, name: "integration_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConfigurationsRequest {
    return new GetConfigurationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConfigurationsRequest {
    return new GetConfigurationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConfigurationsRequest {
    return new GetConfigurationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetConfigurationsRequest | PlainMessage<GetConfigurationsRequest> | undefined, b: GetConfigurationsRequest | PlainMessage<GetConfigurationsRequest> | undefined): boolean {
    return proto3.util.equals(GetConfigurationsRequest, a, b);
  }
}

/**
 * @generated from message integration.v1.GetConfigurationsResponse
 */
export class GetConfigurationsResponse extends Message<GetConfigurationsResponse> {
  /**
   * @generated from field: map<string, google.protobuf.Struct> configurations = 1;
   */
  configurations: { [key: string]: Struct } = {};

  /**
   * @generated from field: common.v1.Error error = 2;
   */
  error?: Error;

  constructor(data?: PartialMessage<GetConfigurationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "integration.v1.GetConfigurationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "configurations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Struct} },
    { no: 2, name: "error", kind: "message", T: Error },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConfigurationsResponse {
    return new GetConfigurationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConfigurationsResponse {
    return new GetConfigurationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConfigurationsResponse {
    return new GetConfigurationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetConfigurationsResponse | PlainMessage<GetConfigurationsResponse> | undefined, b: GetConfigurationsResponse | PlainMessage<GetConfigurationsResponse> | undefined): boolean {
    return proto3.util.equals(GetConfigurationsResponse, a, b);
  }
}

