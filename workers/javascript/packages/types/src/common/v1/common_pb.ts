// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file common/v1/common.proto (package common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum common.v1.UserType
 */
export enum UserType {
  /**
   * @generated from enum value: USER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: USER_TYPE_SUPERBLOCKS = 1;
   */
  SUPERBLOCKS = 1,

  /**
   * @generated from enum value: USER_TYPE_EXTERNAL = 2;
   */
  EXTERNAL = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(UserType)
proto3.util.setEnumType(UserType, "common.v1.UserType", [
  { no: 0, name: "USER_TYPE_UNSPECIFIED" },
  { no: 1, name: "USER_TYPE_SUPERBLOCKS" },
  { no: 2, name: "USER_TYPE_EXTERNAL" },
]);

/**
 * @generated from message common.v1.Timestamps
 */
export class Timestamps extends Message<Timestamps> {
  /**
   * @generated from field: google.protobuf.Timestamp created = 1;
   */
  created?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated = 2;
   */
  updated?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp deactivated = 3;
   */
  deactivated?: Timestamp;

  constructor(data?: PartialMessage<Timestamps>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "common.v1.Timestamps";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "created", kind: "message", T: Timestamp },
    { no: 2, name: "updated", kind: "message", T: Timestamp },
    { no: 3, name: "deactivated", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Timestamps {
    return new Timestamps().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Timestamps {
    return new Timestamps().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Timestamps {
    return new Timestamps().fromJsonString(jsonString, options);
  }

  static equals(a: Timestamps | PlainMessage<Timestamps> | undefined, b: Timestamps | PlainMessage<Timestamps> | undefined): boolean {
    return proto3.util.equals(Timestamps, a, b);
  }
}

/**
 * @generated from message common.v1.Metadata
 */
export class Metadata extends Message<Metadata> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string organization = 4;
   */
  organization = "";

  /**
   * @generated from field: optional string folder = 5;
   */
  folder?: string;

  /**
   * @generated from field: common.v1.Timestamps timestamps = 6;
   */
  timestamps?: Timestamps;

  /**
   * @generated from field: optional string version = 7;
   */
  version?: string;

  /**
   * @generated from field: map<string, string> tags = 8;
   */
  tags: { [key: string]: string } = {};

  /**
   * @generated from field: optional string type = 9;
   */
  type?: string;

  constructor(data?: PartialMessage<Metadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "common.v1.Metadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "folder", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "timestamps", kind: "message", T: Timestamps },
    { no: 7, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "tags", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 9, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata {
    return new Metadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJsonString(jsonString, options);
  }

  static equals(a: Metadata | PlainMessage<Metadata> | undefined, b: Metadata | PlainMessage<Metadata> | undefined): boolean {
    return proto3.util.equals(Metadata, a, b);
  }
}

/**
 * @generated from message common.v1.Profile
 */
export class Profile extends Message<Profile> {
  /**
   * @generated from field: optional string id = 1;
   */
  id?: string;

  /**
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   *
   * DEPRECATED
   *
   * @generated from field: optional string environment = 3;
   */
  environment?: string;

  constructor(data?: PartialMessage<Profile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "common.v1.Profile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "environment", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Profile {
    return new Profile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Profile {
    return new Profile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Profile {
    return new Profile().fromJsonString(jsonString, options);
  }

  static equals(a: Profile | PlainMessage<Profile> | undefined, b: Profile | PlainMessage<Profile> | undefined): boolean {
    return proto3.util.equals(Profile, a, b);
  }
}

