"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file common/v1/api.proto (package common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.Link = exports.Links = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * @generated from message common.v1.Links
 */
class Links extends protobuf_1.Message {
    /**
     * @generated from field: map<string, common.v1.Link> links = 1;
     */
    links = {};
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "common.v1.Links";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "links", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: Link } },
    ]);
    static fromBinary(bytes, options) {
        return new Links().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Links().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Links().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Links, a, b);
    }
}
exports.Links = Links;
/**
 * @generated from message common.v1.Link
 */
class Link extends protobuf_1.Message {
    /**
     * @generated from field: string url = 1;
     */
    url = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "common.v1.Link";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Link().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Link().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Link().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Link, a, b);
    }
}
exports.Link = Link;
//# sourceMappingURL=api_pb.map