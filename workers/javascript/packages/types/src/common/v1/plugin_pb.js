"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file common/v1/plugin.proto (package common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileMetadata = exports.HttpParameters = exports.SuperblocksMetadata = exports.Property = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * @generated from message common.v1.Property
 */
class Property extends protobuf_1.Message {
    /**
     * @generated from field: optional string key = 1;
     */
    key;
    /**
     * @generated from field: optional string value = 2;
     */
    value;
    /**
     * @generated from field: optional bool editable = 3;
     */
    editable;
    /**
     * @generated from field: optional bool internal = 4;
     */
    internal;
    /**
     * @generated from field: optional string description = 5;
     */
    description;
    /**
     * @generated from field: optional bool mandatory = 6;
     */
    mandatory;
    /**
     * @generated from field: optional string type = 7;
     */
    type;
    /**
     * @generated from field: optional string defaultValue = 8;
     */
    defaultValue;
    /**
     * @generated from field: optional string minRange = 9;
     */
    minRange;
    /**
     * @generated from field: optional string maxRange = 10;
     */
    maxRange;
    /**
     * @generated from field: repeated string valueOptions = 11;
     */
    valueOptions = [];
    /**
     * system properties are ones injected by the system
     *
     * @generated from field: optional bool system = 12;
     */
    system;
    /**
     * @generated from field: optional common.v1.FileMetadata file = 13;
     */
    file;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "common.v1.Property";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 3, name: "editable", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
        { no: 4, name: "internal", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
        { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 6, name: "mandatory", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
        { no: 7, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 8, name: "defaultValue", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 9, name: "minRange", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 10, name: "maxRange", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
        { no: 11, name: "valueOptions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 12, name: "system", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
        { no: 13, name: "file", kind: "message", T: FileMetadata, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Property().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Property().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Property().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Property, a, b);
    }
}
exports.Property = Property;
/**
 * @generated from message common.v1.SuperblocksMetadata
 */
class SuperblocksMetadata extends protobuf_1.Message {
    /**
     * @generated from field: string pluginVersion = 1;
     */
    pluginVersion = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "common.v1.SuperblocksMetadata";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "pluginVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new SuperblocksMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SuperblocksMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SuperblocksMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SuperblocksMetadata, a, b);
    }
}
exports.SuperblocksMetadata = SuperblocksMetadata;
/**
 * @generated from message common.v1.HttpParameters
 */
class HttpParameters extends protobuf_1.Message {
    /**
     * NOTE(frank): I originally was using `google.protobuf.Value`.bool
     * However, we actually take these in as a string. If it's json,
     * it will be passed in as an escaped value. I don't think this is
     * the right way to do this as for API inputs, we take those in as
     * real encoded JSON.
     *
     * @generated from field: map<string, google.protobuf.Value> query = 1;
     */
    query = {};
    /**
     * @generated from field: map<string, google.protobuf.Value> body = 2;
     */
    body = {};
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "common.v1.HttpParameters";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "query", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: protobuf_1.Value } },
        { no: 2, name: "body", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: protobuf_1.Value } },
    ]);
    static fromBinary(bytes, options) {
        return new HttpParameters().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HttpParameters().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HttpParameters().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(HttpParameters, a, b);
    }
}
exports.HttpParameters = HttpParameters;
/**
 * @generated from message common.v1.FileMetadata
 */
class FileMetadata extends protobuf_1.Message {
    /**
     * @generated from field: string filename = 1;
     */
    filename = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "common.v1.FileMetadata";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new FileMetadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FileMetadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FileMetadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FileMetadata, a, b);
    }
}
exports.FileMetadata = FileMetadata;
//# sourceMappingURL=plugin_pb.map