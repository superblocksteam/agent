// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file common/v1/plugin.proto (package common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Value } from "@bufbuild/protobuf";

/**
 * @generated from message common.v1.Property
 */
export class Property extends Message<Property> {
  /**
   * @generated from field: optional string key = 1;
   */
  key?: string;

  /**
   * @generated from field: optional string value = 2;
   */
  value?: string;

  /**
   * @generated from field: optional bool editable = 3;
   */
  editable?: boolean;

  /**
   * @generated from field: optional bool internal = 4;
   */
  internal?: boolean;

  /**
   * @generated from field: optional string description = 5;
   */
  description?: string;

  /**
   * @generated from field: optional bool mandatory = 6;
   */
  mandatory?: boolean;

  /**
   * @generated from field: optional string type = 7;
   */
  type?: string;

  /**
   * @generated from field: optional string defaultValue = 8;
   */
  defaultValue?: string;

  /**
   * @generated from field: optional string minRange = 9;
   */
  minRange?: string;

  /**
   * @generated from field: optional string maxRange = 10;
   */
  maxRange?: string;

  /**
   * @generated from field: repeated string valueOptions = 11;
   */
  valueOptions: string[] = [];

  /**
   * system properties are ones injected by the system
   *
   * @generated from field: optional bool system = 12;
   */
  system?: boolean;

  /**
   * @generated from field: optional common.v1.FileMetadata file = 13;
   */
  file?: FileMetadata;

  constructor(data?: PartialMessage<Property>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "common.v1.Property";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "editable", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "internal", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "mandatory", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 7, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "defaultValue", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "minRange", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "maxRange", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 11, name: "valueOptions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "system", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 13, name: "file", kind: "message", T: FileMetadata, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Property {
    return new Property().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Property {
    return new Property().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Property {
    return new Property().fromJsonString(jsonString, options);
  }

  static equals(a: Property | PlainMessage<Property> | undefined, b: Property | PlainMessage<Property> | undefined): boolean {
    return proto3.util.equals(Property, a, b);
  }
}

/**
 * @generated from message common.v1.SuperblocksMetadata
 */
export class SuperblocksMetadata extends Message<SuperblocksMetadata> {
  /**
   * @generated from field: string pluginVersion = 1;
   */
  pluginVersion = "";

  constructor(data?: PartialMessage<SuperblocksMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "common.v1.SuperblocksMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pluginVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuperblocksMetadata {
    return new SuperblocksMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuperblocksMetadata {
    return new SuperblocksMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuperblocksMetadata {
    return new SuperblocksMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: SuperblocksMetadata | PlainMessage<SuperblocksMetadata> | undefined, b: SuperblocksMetadata | PlainMessage<SuperblocksMetadata> | undefined): boolean {
    return proto3.util.equals(SuperblocksMetadata, a, b);
  }
}

/**
 * @generated from message common.v1.HttpParameters
 */
export class HttpParameters extends Message<HttpParameters> {
  /**
   * NOTE(frank): I originally was using `google.protobuf.Value`.bool
   * However, we actually take these in as a string. If it's json,
   * it will be passed in as an escaped value. I don't think this is
   * the right way to do this as for API inputs, we take those in as
   * real encoded JSON.
   *
   * @generated from field: map<string, google.protobuf.Value> query = 1;
   */
  query: { [key: string]: Value } = {};

  /**
   * @generated from field: map<string, google.protobuf.Value> body = 2;
   */
  body: { [key: string]: Value } = {};

  constructor(data?: PartialMessage<HttpParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "common.v1.HttpParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
    { no: 2, name: "body", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HttpParameters {
    return new HttpParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HttpParameters {
    return new HttpParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HttpParameters {
    return new HttpParameters().fromJsonString(jsonString, options);
  }

  static equals(a: HttpParameters | PlainMessage<HttpParameters> | undefined, b: HttpParameters | PlainMessage<HttpParameters> | undefined): boolean {
    return proto3.util.equals(HttpParameters, a, b);
  }
}

/**
 * @generated from message common.v1.FileMetadata
 */
export class FileMetadata extends Message<FileMetadata> {
  /**
   * @generated from field: string filename = 1;
   */
  filename = "";

  constructor(data?: PartialMessage<FileMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "common.v1.FileMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileMetadata {
    return new FileMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileMetadata {
    return new FileMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileMetadata {
    return new FileMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: FileMetadata | PlainMessage<FileMetadata> | undefined, b: FileMetadata | PlainMessage<FileMetadata> | undefined): boolean {
    return proto3.util.equals(FileMetadata, a, b);
  }
}

