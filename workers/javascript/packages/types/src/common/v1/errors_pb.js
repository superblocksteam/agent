"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file common/v1/errors.proto (package common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Code = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * @generated from enum common.v1.Code
 */
var Code;
(function (Code) {
    /**
     * @generated from enum value: CODE_UNSPECIFIED = 0;
     */
    Code[Code["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from enum value: CODE_INTEGRATION_AUTHORIZATION = 1;
     */
    Code[Code["INTEGRATION_AUTHORIZATION"] = 1] = "INTEGRATION_AUTHORIZATION";
    /**
     * @generated from enum value: CODE_INTEGRATION_NETWORK = 2;
     */
    Code[Code["INTEGRATION_NETWORK"] = 2] = "INTEGRATION_NETWORK";
    /**
     * @generated from enum value: CODE_INTEGRATION_QUERY_TIMEOUT = 3;
     */
    Code[Code["INTEGRATION_QUERY_TIMEOUT"] = 3] = "INTEGRATION_QUERY_TIMEOUT";
    /**
     * @generated from enum value: CODE_INTEGRATION_SYNTAX = 4;
     */
    Code[Code["INTEGRATION_SYNTAX"] = 4] = "INTEGRATION_SYNTAX";
    /**
     * @generated from enum value: CODE_INTEGRATION_LOGIC = 5;
     */
    Code[Code["INTEGRATION_LOGIC"] = 5] = "INTEGRATION_LOGIC";
    /**
     * @generated from enum value: CODE_INTEGRATION_MISSING_REQUIRED_FIELD = 6;
     */
    Code[Code["INTEGRATION_MISSING_REQUIRED_FIELD"] = 6] = "INTEGRATION_MISSING_REQUIRED_FIELD";
    /**
     * @generated from enum value: CODE_INTEGRATION_RATE_LIMIT = 7;
     */
    Code[Code["INTEGRATION_RATE_LIMIT"] = 7] = "INTEGRATION_RATE_LIMIT";
    /**
     * @generated from enum value: CODE_INTEGRATION_USER_CANCELLED = 8;
     */
    Code[Code["INTEGRATION_USER_CANCELLED"] = 8] = "INTEGRATION_USER_CANCELLED";
    /**
     * @generated from enum value: CODE_INTEGRATION_INTERNAL = 9;
     */
    Code[Code["INTEGRATION_INTERNAL"] = 9] = "INTEGRATION_INTERNAL";
})(Code || (exports.Code = Code = {}));
// Retrieve enum metadata with: proto3.getEnumType(Code)
protobuf_1.proto3.util.setEnumType(Code, "common.v1.Code", [
    { no: 0, name: "CODE_UNSPECIFIED" },
    { no: 1, name: "CODE_INTEGRATION_AUTHORIZATION" },
    { no: 2, name: "CODE_INTEGRATION_NETWORK" },
    { no: 3, name: "CODE_INTEGRATION_QUERY_TIMEOUT" },
    { no: 4, name: "CODE_INTEGRATION_SYNTAX" },
    { no: 5, name: "CODE_INTEGRATION_LOGIC" },
    { no: 6, name: "CODE_INTEGRATION_MISSING_REQUIRED_FIELD" },
    { no: 7, name: "CODE_INTEGRATION_RATE_LIMIT" },
    { no: 8, name: "CODE_INTEGRATION_USER_CANCELLED" },
    { no: 9, name: "CODE_INTEGRATION_INTERNAL" },
]);
/**
 * @generated from message common.v1.Error
 */
class Error extends protobuf_1.Message {
    /**
     * @generated from field: string name = 1;
     */
    name = "";
    /**
     * @generated from field: string message = 2;
     */
    message = "";
    /**
     * @generated from field: bool handled = 3;
     */
    handled = false;
    /**
     * @generated from field: string block_path = 4;
     */
    blockPath = "";
    /**
     * @generated from field: string form_path = 5;
     */
    formPath = "";
    /**
     * @generated from field: common.v1.Code code = 6;
     */
    code = Code.UNSPECIFIED;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "common.v1.Error";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "handled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 4, name: "block_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "form_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 6, name: "code", kind: "enum", T: protobuf_1.proto3.getEnumType(Code) },
    ]);
    static fromBinary(bytes, options) {
        return new Error().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Error().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Error().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Error, a, b);
    }
}
exports.Error = Error;
//# sourceMappingURL=errors_pb.map