"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file common/v1/health.proto (package common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.HealthResponse = exports.Pool = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * @generated from message common.v1.Pool
 */
class Pool extends protobuf_1.Message {
    /**
     * @generated from field: optional uint32 hits = 1;
     */
    hits;
    /**
     * @generated from field: optional uint32 misses = 2;
     */
    misses;
    /**
     * @generated from field: optional uint32 timeouts = 3;
     */
    timeouts;
    /**
     * @generated from field: optional uint32 total = 4;
     */
    total;
    /**
     * @generated from field: optional uint32 idle = 5;
     */
    idle;
    /**
     * @generated from field: optional uint32 stale = 6;
     */
    stale;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "common.v1.Pool";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "hits", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
        { no: 2, name: "misses", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
        { no: 3, name: "timeouts", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
        { no: 4, name: "total", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
        { no: 5, name: "idle", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
        { no: 6, name: "stale", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Pool().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Pool().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Pool().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Pool, a, b);
    }
}
exports.Pool = Pool;
/**
 * @generated from message common.v1.HealthResponse
 */
class HealthResponse extends protobuf_1.Message {
    /**
     * @generated from field: string message = 1;
     */
    message = "";
    /**
     * @generated from field: int64 uptime = 2;
     */
    uptime = protobuf_1.protoInt64.zero;
    /**
     * @generated from field: string version = 3;
     */
    version = "";
    /**
     * @generated from field: common.v1.Pool store = 4;
     */
    store;
    /**
     * @generated from field: common.v1.Pool stream = 5;
     */
    stream;
    /**
     * @generated from field: string id = 6;
     */
    id = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "common.v1.HealthResponse";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "uptime", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "store", kind: "message", T: Pool },
        { no: 5, name: "stream", kind: "message", T: Pool },
        { no: 6, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new HealthResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new HealthResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new HealthResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(HealthResponse, a, b);
    }
}
exports.HealthResponse = HealthResponse;
//# sourceMappingURL=health_pb.map