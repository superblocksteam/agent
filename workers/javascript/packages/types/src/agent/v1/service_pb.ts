// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file agent/v1/service.proto (package agent.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { UserType } from "../../common/v1/common_pb";

/**
 * @generated from message agent.v1.RegistrationRequest
 */
export class RegistrationRequest extends Message<RegistrationRequest> {
  /**
   * @generated from field: map<string, agent.v1.VersionList> plugin_versions = 1;
   */
  pluginVersions: { [key: string]: VersionList } = {};

  /**
   * @generated from field: int32 type = 2;
   */
  type = 0;

  /**
   * @generated from field: map<string, agent.v1.TagList> tags = 3;
   */
  tags: { [key: string]: TagList } = {};

  /**
   * @generated from field: string signing_key_id = 4;
   */
  signingKeyId = "";

  /**
   * @generated from field: repeated string verification_key_ids = 5;
   */
  verificationKeyIds: string[] = [];

  constructor(data?: PartialMessage<RegistrationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "agent.v1.RegistrationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plugin_versions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: VersionList} },
    { no: 2, name: "type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "tags", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: TagList} },
    { no: 4, name: "signing_key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "verification_key_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegistrationRequest {
    return new RegistrationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegistrationRequest {
    return new RegistrationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegistrationRequest {
    return new RegistrationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegistrationRequest | PlainMessage<RegistrationRequest> | undefined, b: RegistrationRequest | PlainMessage<RegistrationRequest> | undefined): boolean {
    return proto3.util.equals(RegistrationRequest, a, b);
  }
}

/**
 * @generated from message agent.v1.RegistrationResponse
 */
export class RegistrationResponse extends Message<RegistrationResponse> {
  /**
   * @generated from field: agent.v1.RegistrationResponse.ResponseMeta response_meta = 1;
   */
  responseMeta?: RegistrationResponse_ResponseMeta;

  /**
   * @generated from field: agent.v1.RegistrationResponse.ResponseBody data = 2;
   */
  data?: RegistrationResponse_ResponseBody;

  constructor(data?: PartialMessage<RegistrationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "agent.v1.RegistrationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response_meta", kind: "message", T: RegistrationResponse_ResponseMeta },
    { no: 2, name: "data", kind: "message", T: RegistrationResponse_ResponseBody },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegistrationResponse {
    return new RegistrationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegistrationResponse {
    return new RegistrationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegistrationResponse {
    return new RegistrationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegistrationResponse | PlainMessage<RegistrationResponse> | undefined, b: RegistrationResponse | PlainMessage<RegistrationResponse> | undefined): boolean {
    return proto3.util.equals(RegistrationResponse, a, b);
  }
}

/**
 * @generated from message agent.v1.RegistrationResponse.ResponseMeta
 */
export class RegistrationResponse_ResponseMeta extends Message<RegistrationResponse_ResponseMeta> {
  /**
   * @generated from field: int32 status = 1;
   */
  status = 0;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * @generated from field: bool success = 3;
   */
  success = false;

  constructor(data?: PartialMessage<RegistrationResponse_ResponseMeta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "agent.v1.RegistrationResponse.ResponseMeta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegistrationResponse_ResponseMeta {
    return new RegistrationResponse_ResponseMeta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegistrationResponse_ResponseMeta {
    return new RegistrationResponse_ResponseMeta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegistrationResponse_ResponseMeta {
    return new RegistrationResponse_ResponseMeta().fromJsonString(jsonString, options);
  }

  static equals(a: RegistrationResponse_ResponseMeta | PlainMessage<RegistrationResponse_ResponseMeta> | undefined, b: RegistrationResponse_ResponseMeta | PlainMessage<RegistrationResponse_ResponseMeta> | undefined): boolean {
    return proto3.util.equals(RegistrationResponse_ResponseMeta, a, b);
  }
}

/**
 * @generated from message agent.v1.RegistrationResponse.ResponseBody
 */
export class RegistrationResponse_ResponseBody extends Message<RegistrationResponse_ResponseBody> {
  /**
   * @generated from field: agent.v1.RegistrationResponse.ResponseBody.Agent agent = 1;
   */
  agent?: RegistrationResponse_ResponseBody_Agent;

  /**
   * @generated from field: string billing_plan = 2;
   */
  billingPlan = "";

  /**
   * @generated from field: string organization_id = 3;
   */
  organizationId = "";

  /**
   * @generated from field: string organization_name = 4;
   */
  organizationName = "";

  constructor(data?: PartialMessage<RegistrationResponse_ResponseBody>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "agent.v1.RegistrationResponse.ResponseBody";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agent", kind: "message", T: RegistrationResponse_ResponseBody_Agent },
    { no: 2, name: "billing_plan", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegistrationResponse_ResponseBody {
    return new RegistrationResponse_ResponseBody().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegistrationResponse_ResponseBody {
    return new RegistrationResponse_ResponseBody().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegistrationResponse_ResponseBody {
    return new RegistrationResponse_ResponseBody().fromJsonString(jsonString, options);
  }

  static equals(a: RegistrationResponse_ResponseBody | PlainMessage<RegistrationResponse_ResponseBody> | undefined, b: RegistrationResponse_ResponseBody | PlainMessage<RegistrationResponse_ResponseBody> | undefined): boolean {
    return proto3.util.equals(RegistrationResponse_ResponseBody, a, b);
  }
}

/**
 * @generated from message agent.v1.RegistrationResponse.ResponseBody.Agent
 */
export class RegistrationResponse_ResponseBody_Agent extends Message<RegistrationResponse_ResponseBody_Agent> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string environment = 3;
   */
  environment = "";

  /**
   * @generated from field: string status = 4;
   */
  status = "";

  /**
   * @generated from field: string version = 5;
   */
  version = "";

  /**
   * @generated from field: string version_external = 6;
   */
  versionExternal = "";

  /**
   * @generated from field: map<string, agent.v1.VersionList> supported_plugin_versions = 7;
   */
  supportedPluginVersions: { [key: string]: VersionList } = {};

  /**
   * @generated from field: string url = 8;
   */
  url = "";

  /**
   * @generated from field: int32 type = 9;
   */
  type = 0;

  /**
   * @generated from field: google.protobuf.Timestamp updated = 10;
   */
  updated?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp created = 11;
   */
  created?: Timestamp;

  /**
   * @generated from field: map<string, agent.v1.TagList> tags = 12;
   */
  tags: { [key: string]: TagList } = {};

  constructor(data?: PartialMessage<RegistrationResponse_ResponseBody_Agent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "agent.v1.RegistrationResponse.ResponseBody.Agent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "environment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "version_external", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "supported_plugin_versions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: VersionList} },
    { no: 8, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "updated", kind: "message", T: Timestamp },
    { no: 11, name: "created", kind: "message", T: Timestamp },
    { no: 12, name: "tags", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: TagList} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegistrationResponse_ResponseBody_Agent {
    return new RegistrationResponse_ResponseBody_Agent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegistrationResponse_ResponseBody_Agent {
    return new RegistrationResponse_ResponseBody_Agent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegistrationResponse_ResponseBody_Agent {
    return new RegistrationResponse_ResponseBody_Agent().fromJsonString(jsonString, options);
  }

  static equals(a: RegistrationResponse_ResponseBody_Agent | PlainMessage<RegistrationResponse_ResponseBody_Agent> | undefined, b: RegistrationResponse_ResponseBody_Agent | PlainMessage<RegistrationResponse_ResponseBody_Agent> | undefined): boolean {
    return proto3.util.equals(RegistrationResponse_ResponseBody_Agent, a, b);
  }
}

/**
 * @generated from message agent.v1.VersionList
 */
export class VersionList extends Message<VersionList> {
  /**
   * @generated from field: repeated string versions = 1;
   */
  versions: string[] = [];

  constructor(data?: PartialMessage<VersionList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "agent.v1.VersionList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "versions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VersionList {
    return new VersionList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VersionList {
    return new VersionList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VersionList {
    return new VersionList().fromJsonString(jsonString, options);
  }

  static equals(a: VersionList | PlainMessage<VersionList> | undefined, b: VersionList | PlainMessage<VersionList> | undefined): boolean {
    return proto3.util.equals(VersionList, a, b);
  }
}

/**
 * @generated from message agent.v1.TagList
 */
export class TagList extends Message<TagList> {
  /**
   * @generated from field: repeated string tags = 1;
   */
  tags: string[] = [];

  constructor(data?: PartialMessage<TagList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "agent.v1.TagList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TagList {
    return new TagList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TagList {
    return new TagList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TagList {
    return new TagList().fromJsonString(jsonString, options);
  }

  static equals(a: TagList | PlainMessage<TagList> | undefined, b: TagList | PlainMessage<TagList> | undefined): boolean {
    return proto3.util.equals(TagList, a, b);
  }
}

/**
 * @generated from message agent.v1.AuditLogRequest
 */
export class AuditLogRequest extends Message<AuditLogRequest> {
  /**
   * @generated from field: repeated agent.v1.AuditLogRequest.AuditLog audit_logs = 1;
   */
  auditLogs: AuditLogRequest_AuditLog[] = [];

  constructor(data?: PartialMessage<AuditLogRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "agent.v1.AuditLogRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "audit_logs", kind: "message", T: AuditLogRequest_AuditLog, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditLogRequest {
    return new AuditLogRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditLogRequest {
    return new AuditLogRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditLogRequest {
    return new AuditLogRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AuditLogRequest | PlainMessage<AuditLogRequest> | undefined, b: AuditLogRequest | PlainMessage<AuditLogRequest> | undefined): boolean {
    return proto3.util.equals(AuditLogRequest, a, b);
  }
}

/**
 * @generated from message agent.v1.AuditLogRequest.AuditLog
 */
export class AuditLogRequest_AuditLog extends Message<AuditLogRequest_AuditLog> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string entity_id = 2;
   */
  entityId = "";

  /**
   * @generated from field: agent.v1.AuditLogRequest.AuditLog.AuditLogEntityType entity_type = 3;
   */
  entityType = AuditLogRequest_AuditLog_AuditLogEntityType.UNSPECIFIED;

  /**
   * @generated from field: string organization_id = 4;
   */
  organizationId = "";

  /**
   * @generated from field: bool is_deployed = 5;
   */
  isDeployed = false;

  /**
   * @generated from field: string source = 6;
   */
  source = "";

  /**
   * @generated from field: string target = 7;
   */
  target = "";

  /**
   * @generated from field: agent.v1.AuditLogRequest.AuditLog.AuditLogEventType type = 8;
   */
  type = AuditLogRequest_AuditLog_AuditLogEventType.UNSPECIFIED;

  /**
   * @generated from field: optional string agent_id = 9;
   */
  agentId?: string;

  /**
   * @generated from field: optional agent.v1.AuditLogRequest.AuditLog.ApiRunStatus status = 10;
   */
  status?: AuditLogRequest_AuditLog_ApiRunStatus;

  /**
   * @generated from field: optional string error = 11;
   */
  error?: string;

  /**
   * @generated from field: optional agent.v1.AuditLogRequest.AuditLog.ApiLocationContext api_location_context = 12;
   */
  apiLocationContext?: AuditLogRequest_AuditLog_ApiLocationContext;

  /**
   * @generated from field: agent.v1.AuditLogRequest.AuditLog.ApiTiming api_timing = 13;
   */
  apiTiming?: AuditLogRequest_AuditLog_ApiTiming;

  /**
   * @generated from field: optional common.v1.UserType user_type = 14;
   */
  userType?: UserType;

  /**
   * @generated from field: optional string targetName = 15;
   */
  targetName?: string;

  constructor(data?: PartialMessage<AuditLogRequest_AuditLog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "agent.v1.AuditLogRequest.AuditLog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "entity_type", kind: "enum", T: proto3.getEnumType(AuditLogRequest_AuditLog_AuditLogEntityType) },
    { no: 4, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "is_deployed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "type", kind: "enum", T: proto3.getEnumType(AuditLogRequest_AuditLog_AuditLogEventType) },
    { no: 9, name: "agent_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(AuditLogRequest_AuditLog_ApiRunStatus), opt: true },
    { no: 11, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 12, name: "api_location_context", kind: "message", T: AuditLogRequest_AuditLog_ApiLocationContext, opt: true },
    { no: 13, name: "api_timing", kind: "message", T: AuditLogRequest_AuditLog_ApiTiming },
    { no: 14, name: "user_type", kind: "enum", T: proto3.getEnumType(UserType), opt: true },
    { no: 15, name: "targetName", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditLogRequest_AuditLog {
    return new AuditLogRequest_AuditLog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditLogRequest_AuditLog {
    return new AuditLogRequest_AuditLog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditLogRequest_AuditLog {
    return new AuditLogRequest_AuditLog().fromJsonString(jsonString, options);
  }

  static equals(a: AuditLogRequest_AuditLog | PlainMessage<AuditLogRequest_AuditLog> | undefined, b: AuditLogRequest_AuditLog | PlainMessage<AuditLogRequest_AuditLog> | undefined): boolean {
    return proto3.util.equals(AuditLogRequest_AuditLog, a, b);
  }
}

/**
 * @generated from enum agent.v1.AuditLogRequest.AuditLog.ApiRunStatus
 */
export enum AuditLogRequest_AuditLog_ApiRunStatus {
  /**
   * @generated from enum value: API_RUN_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: API_RUN_STATUS_SUCCESS = 1;
   */
  SUCCESS = 1,

  /**
   * @generated from enum value: API_RUN_STATUS_FAILED = 2;
   */
  FAILED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AuditLogRequest_AuditLog_ApiRunStatus)
proto3.util.setEnumType(AuditLogRequest_AuditLog_ApiRunStatus, "agent.v1.AuditLogRequest.AuditLog.ApiRunStatus", [
  { no: 0, name: "API_RUN_STATUS_UNSPECIFIED" },
  { no: 1, name: "API_RUN_STATUS_SUCCESS" },
  { no: 2, name: "API_RUN_STATUS_FAILED" },
]);

/**
 * @generated from enum agent.v1.AuditLogRequest.AuditLog.AuditLogEntityType
 */
export enum AuditLogRequest_AuditLog_AuditLogEntityType {
  /**
   * @generated from enum value: AUDIT_LOG_ENTITY_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: AUDIT_LOG_ENTITY_TYPE_APPLICATION = 1;
   */
  APPLICATION = 1,

  /**
   * @generated from enum value: AUDIT_LOG_ENTITY_TYPE_WORKFLOW = 2;
   */
  WORKFLOW = 2,

  /**
   * @generated from enum value: AUDIT_LOG_ENTITY_TYPE_SCHEDULED_JOB = 3;
   */
  SCHEDULED_JOB = 3,

  /**
   * @generated from enum value: AUDIT_LOG_ENTITY_TYPE_STEP = 4;
   */
  STEP = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(AuditLogRequest_AuditLog_AuditLogEntityType)
proto3.util.setEnumType(AuditLogRequest_AuditLog_AuditLogEntityType, "agent.v1.AuditLogRequest.AuditLog.AuditLogEntityType", [
  { no: 0, name: "AUDIT_LOG_ENTITY_TYPE_UNSPECIFIED" },
  { no: 1, name: "AUDIT_LOG_ENTITY_TYPE_APPLICATION" },
  { no: 2, name: "AUDIT_LOG_ENTITY_TYPE_WORKFLOW" },
  { no: 3, name: "AUDIT_LOG_ENTITY_TYPE_SCHEDULED_JOB" },
  { no: 4, name: "AUDIT_LOG_ENTITY_TYPE_STEP" },
]);

/**
 * @generated from enum agent.v1.AuditLogRequest.AuditLog.AuditLogEventType
 */
export enum AuditLogRequest_AuditLog_AuditLogEventType {
  /**
   * @generated from enum value: AUDIT_LOG_EVENT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: AUDIT_LOG_EVENT_TYPE_API_RUN = 1;
   */
  API_RUN = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(AuditLogRequest_AuditLog_AuditLogEventType)
proto3.util.setEnumType(AuditLogRequest_AuditLog_AuditLogEventType, "agent.v1.AuditLogRequest.AuditLog.AuditLogEventType", [
  { no: 0, name: "AUDIT_LOG_EVENT_TYPE_UNSPECIFIED" },
  { no: 1, name: "AUDIT_LOG_EVENT_TYPE_API_RUN" },
]);

/**
 * @generated from message agent.v1.AuditLogRequest.AuditLog.ApiLocationContext
 */
export class AuditLogRequest_AuditLog_ApiLocationContext extends Message<AuditLogRequest_AuditLog_ApiLocationContext> {
  /**
   * @generated from field: string application_id = 1;
   */
  applicationId = "";

  constructor(data?: PartialMessage<AuditLogRequest_AuditLog_ApiLocationContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "agent.v1.AuditLogRequest.AuditLog.ApiLocationContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "application_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditLogRequest_AuditLog_ApiLocationContext {
    return new AuditLogRequest_AuditLog_ApiLocationContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditLogRequest_AuditLog_ApiLocationContext {
    return new AuditLogRequest_AuditLog_ApiLocationContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditLogRequest_AuditLog_ApiLocationContext {
    return new AuditLogRequest_AuditLog_ApiLocationContext().fromJsonString(jsonString, options);
  }

  static equals(a: AuditLogRequest_AuditLog_ApiLocationContext | PlainMessage<AuditLogRequest_AuditLog_ApiLocationContext> | undefined, b: AuditLogRequest_AuditLog_ApiLocationContext | PlainMessage<AuditLogRequest_AuditLog_ApiLocationContext> | undefined): boolean {
    return proto3.util.equals(AuditLogRequest_AuditLog_ApiLocationContext, a, b);
  }
}

/**
 * @generated from message agent.v1.AuditLogRequest.AuditLog.ApiTiming
 */
export class AuditLogRequest_AuditLog_ApiTiming extends Message<AuditLogRequest_AuditLog_ApiTiming> {
  /**
   * @generated from field: int64 start = 1;
   */
  start = protoInt64.zero;

  /**
   * @generated from field: optional int64 end = 2;
   */
  end?: bigint;

  constructor(data?: PartialMessage<AuditLogRequest_AuditLog_ApiTiming>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "agent.v1.AuditLogRequest.AuditLog.ApiTiming";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "end", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditLogRequest_AuditLog_ApiTiming {
    return new AuditLogRequest_AuditLog_ApiTiming().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditLogRequest_AuditLog_ApiTiming {
    return new AuditLogRequest_AuditLog_ApiTiming().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditLogRequest_AuditLog_ApiTiming {
    return new AuditLogRequest_AuditLog_ApiTiming().fromJsonString(jsonString, options);
  }

  static equals(a: AuditLogRequest_AuditLog_ApiTiming | PlainMessage<AuditLogRequest_AuditLog_ApiTiming> | undefined, b: AuditLogRequest_AuditLog_ApiTiming | PlainMessage<AuditLogRequest_AuditLog_ApiTiming> | undefined): boolean {
    return proto3.util.equals(AuditLogRequest_AuditLog_ApiTiming, a, b);
  }
}

