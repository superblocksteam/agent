// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file transport/v1/transport.proto (package transport.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64, Struct } from "@bufbuild/protobuf";
import { Variables_Mode, Variables_Type } from "../../api/v1/blocks_pb";
import { Error } from "../../common/v1/errors_pb";
import { Definition, MetadataResponse_BucketMetadata, MetadataResponse_DatabaseSchemaMetadata } from "../../api/v1/service_pb";
import { Metadata } from "../../plugins/kafka/v1/plugin_pb";
import { Plugin_Metadata } from "../../plugins/cosmosdb/v1/plugin_pb";
import { Plugin_Metadata as Plugin_Metadata$1 } from "../../plugins/adls/v1/plugin_pb";
import { Api } from "../../api/v1/api_pb";
import { Stores } from "../../store/v1/store_pb";

/**
 * @generated from message transport.v1.Performance
 */
export class Performance extends Message<Performance> {
  /**
   * @generated from field: bool error = 1;
   */
  error = false;

  /**
   * @generated from field: transport.v1.Performance.Observable plugin_execution = 2;
   */
  pluginExecution?: Performance_Observable;

  /**
   * @generated from field: transport.v1.Performance.Observable queue_request = 3;
   */
  queueRequest?: Performance_Observable;

  /**
   * @generated from field: transport.v1.Performance.Observable queue_response = 4;
   */
  queueResponse?: Performance_Observable;

  /**
   * @generated from field: transport.v1.Performance.Observable kv_store_fetch = 5;
   */
  kvStoreFetch?: Performance_Observable;

  /**
   * @generated from field: transport.v1.Performance.Observable kv_store_push = 6;
   */
  kvStorePush?: Performance_Observable;

  /**
   * @generated from field: transport.v1.Performance.Observable total = 7;
   */
  total?: Performance_Observable;

  constructor(data?: PartialMessage<Performance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "transport.v1.Performance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "plugin_execution", kind: "message", T: Performance_Observable },
    { no: 3, name: "queue_request", kind: "message", T: Performance_Observable },
    { no: 4, name: "queue_response", kind: "message", T: Performance_Observable },
    { no: 5, name: "kv_store_fetch", kind: "message", T: Performance_Observable },
    { no: 6, name: "kv_store_push", kind: "message", T: Performance_Observable },
    { no: 7, name: "total", kind: "message", T: Performance_Observable },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Performance {
    return new Performance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Performance {
    return new Performance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Performance {
    return new Performance().fromJsonString(jsonString, options);
  }

  static equals(a: Performance | PlainMessage<Performance> | undefined, b: Performance | PlainMessage<Performance> | undefined): boolean {
    return proto3.util.equals(Performance, a, b);
  }
}

/**
 * @generated from message transport.v1.Performance.Observable
 */
export class Performance_Observable extends Message<Performance_Observable> {
  /**
   * @generated from field: double start = 1;
   */
  start = 0;

  /**
   * @generated from field: double end = 2;
   */
  end = 0;

  /**
   * @generated from field: double value = 3;
   */
  value = 0;

  /**
   * @generated from field: double bytes = 4;
   */
  bytes = 0;

  /**
   * @generated from field: double estimate = 5;
   */
  estimate = 0;

  constructor(data?: PartialMessage<Performance_Observable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "transport.v1.Performance.Observable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "end", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "bytes", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "estimate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Performance_Observable {
    return new Performance_Observable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Performance_Observable {
    return new Performance_Observable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Performance_Observable {
    return new Performance_Observable().fromJsonString(jsonString, options);
  }

  static equals(a: Performance_Observable | PlainMessage<Performance_Observable> | undefined, b: Performance_Observable | PlainMessage<Performance_Observable> | undefined): boolean {
    return proto3.util.equals(Performance_Observable, a, b);
  }
}

/**
 * @generated from message transport.v1.Variable
 */
export class Variable extends Message<Variable> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: api.v1.Variables.Type type = 2;
   */
  type = Variables_Type.UNSPECIFIED;

  /**
   * @generated from field: api.v1.Variables.Mode mode = 3;
   */
  mode = Variables_Mode.UNSPECIFIED;

  constructor(data?: PartialMessage<Variable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "transport.v1.Variable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(Variables_Type) },
    { no: 3, name: "mode", kind: "enum", T: proto3.getEnumType(Variables_Mode) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Variable {
    return new Variable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Variable {
    return new Variable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Variable {
    return new Variable().fromJsonString(jsonString, options);
  }

  static equals(a: Variable | PlainMessage<Variable> | undefined, b: Variable | PlainMessage<Variable> | undefined): boolean {
    return proto3.util.equals(Variable, a, b);
  }
}

/**
 * @generated from message transport.v1.Observability
 */
export class Observability extends Message<Observability> {
  /**
   * @generated from field: string trace_id = 1;
   */
  traceId = "";

  /**
   * @generated from field: string span_id = 2;
   */
  spanId = "";

  /**
   * @generated from field: map<string, string> baggage = 3;
   */
  baggage: { [key: string]: string } = {};

  /**
   * @generated from field: bytes trace_flags = 4;
   */
  traceFlags = new Uint8Array(0);

  constructor(data?: PartialMessage<Observability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "transport.v1.Observability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "span_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "baggage", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "trace_flags", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Observability {
    return new Observability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Observability {
    return new Observability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Observability {
    return new Observability().fromJsonString(jsonString, options);
  }

  static equals(a: Observability | PlainMessage<Observability> | undefined, b: Observability | PlainMessage<Observability> | undefined): boolean {
    return proto3.util.equals(Observability, a, b);
  }
}

/**
 * NOTE(frank): Gross. I'm not spending any time trying to make this look pretty
 * because it needs to be re-done at some point after control flow. This is a raw
 * port of the existing interface.
 *
 * @generated from message transport.v1.Request
 */
export class Request extends Message<Request> {
  /**
   * @generated from field: string inbox = 1;
   */
  inbox = "";

  /**
   * @generated from field: transport.v1.Request.Data data = 2;
   */
  data?: Request_Data;

  /**
   * @generated from field: string topic = 3;
   */
  topic = "";

  constructor(data?: PartialMessage<Request>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "transport.v1.Request";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "inbox", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "message", T: Request_Data },
    { no: 3, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Request {
    return new Request().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Request {
    return new Request().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Request {
    return new Request().fromJsonString(jsonString, options);
  }

  static equals(a: Request | PlainMessage<Request> | undefined, b: Request | PlainMessage<Request> | undefined): boolean {
    return proto3.util.equals(Request, a, b);
  }
}

/**
 * @generated from message transport.v1.Request.Data
 */
export class Request_Data extends Message<Request_Data> {
  /**
   * @generated from field: transport.v1.Request.Data.Pinned pinned = 1;
   */
  pinned?: Request_Data_Pinned;

  /**
   * @generated from field: transport.v1.Request.Data.Data data = 2;
   */
  data?: Request_Data_Data;

  constructor(data?: PartialMessage<Request_Data>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "transport.v1.Request.Data";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pinned", kind: "message", T: Request_Data_Pinned },
    { no: 2, name: "data", kind: "message", T: Request_Data_Data },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Request_Data {
    return new Request_Data().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Request_Data {
    return new Request_Data().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Request_Data {
    return new Request_Data().fromJsonString(jsonString, options);
  }

  static equals(a: Request_Data | PlainMessage<Request_Data> | undefined, b: Request_Data | PlainMessage<Request_Data> | undefined): boolean {
    return proto3.util.equals(Request_Data, a, b);
  }
}

/**
 * @generated from message transport.v1.Request.Data.Pinned
 */
export class Request_Data_Pinned extends Message<Request_Data_Pinned> {
  /**
   * @generated from field: string bucket = 1;
   */
  bucket = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string version = 3;
   */
  version = "";

  /**
   * @generated from field: string event = 4;
   */
  event = "";

  /**
   * Deprecated, use observability instead
   *
   * @generated from field: map<string, string> carrier = 5 [deprecated = true];
   * @deprecated
   */
  carrier: { [key: string]: string } = {};

  /**
   * @generated from field: transport.v1.Observability observability = 6;
   */
  observability?: Observability;

  constructor(data?: PartialMessage<Request_Data_Pinned>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "transport.v1.Request.Data.Pinned";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "event", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "carrier", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "observability", kind: "message", T: Observability },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Request_Data_Pinned {
    return new Request_Data_Pinned().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Request_Data_Pinned {
    return new Request_Data_Pinned().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Request_Data_Pinned {
    return new Request_Data_Pinned().fromJsonString(jsonString, options);
  }

  static equals(a: Request_Data_Pinned | PlainMessage<Request_Data_Pinned> | undefined, b: Request_Data_Pinned | PlainMessage<Request_Data_Pinned> | undefined): boolean {
    return proto3.util.equals(Request_Data_Pinned, a, b);
  }
}

/**
 * @generated from message transport.v1.Request.Data.Data
 */
export class Request_Data_Data extends Message<Request_Data_Data> {
  /**
   * @generated from field: transport.v1.Request.Data.Data.Props props = 1;
   */
  props?: Request_Data_Data_Props;

  /**
   * d_config stands for datasource configuration - necessary to match the fields used
   * in the existing worker interface
   *
   * @generated from field: optional google.protobuf.Struct d_config = 2;
   */
  dConfig?: Struct;

  /**
   * @generated from field: optional google.protobuf.Struct a_config = 3;
   */
  aConfig?: Struct;

  /**
   * @generated from field: transport.v1.Request.Data.Data.Quota quotas = 4;
   */
  quotas?: Request_Data_Data_Quota;

  constructor(data?: PartialMessage<Request_Data_Data>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "transport.v1.Request.Data.Data";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "props", kind: "message", T: Request_Data_Data_Props },
    { no: 2, name: "d_config", kind: "message", T: Struct, opt: true },
    { no: 3, name: "a_config", kind: "message", T: Struct, opt: true },
    { no: 4, name: "quotas", kind: "message", T: Request_Data_Data_Quota },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Request_Data_Data {
    return new Request_Data_Data().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Request_Data_Data {
    return new Request_Data_Data().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Request_Data_Data {
    return new Request_Data_Data().fromJsonString(jsonString, options);
  }

  static equals(a: Request_Data_Data | PlainMessage<Request_Data_Data> | undefined, b: Request_Data_Data | PlainMessage<Request_Data_Data> | undefined): boolean {
    return proto3.util.equals(Request_Data_Data, a, b);
  }
}

/**
 * @generated from message transport.v1.Request.Data.Data.Props
 */
export class Request_Data_Data_Props extends Message<Request_Data_Data_Props> {
  /**
   * @generated from field: google.protobuf.Struct action_configuration = 1;
   */
  actionConfiguration?: Struct;

  /**
   * @generated from field: google.protobuf.Struct datasource_configuration = 2;
   */
  datasourceConfiguration?: Struct;

  /**
   * @generated from field: google.protobuf.Struct redacted_datasource_configuration = 3;
   */
  redactedDatasourceConfiguration?: Struct;

  /**
   * @generated from field: string execution_id = 4;
   */
  executionId = "";

  /**
   * @generated from field: string step_name = 5;
   */
  stepName = "";

  /**
   * @generated from field: string environment = 6;
   */
  environment = "";

  /**
   * DEPRECATED
   *
   * @generated from field: repeated transport.v1.Request.Data.Data.Props.Binding binding_keys = 7;
   */
  bindingKeys: Request_Data_Data_Props_Binding[] = [];

  /**
   * @generated from field: map<string, transport.v1.Variable> variables = 8;
   */
  variables: { [key: string]: Variable } = {};

  /**
   * @generated from field: string fileServerUrl = 9 [json_name = "$fileServerUrl"];
   */
  fileServerUrl = "";

  /**
   * @generated from field: repeated transport.v1.Request.Data.Data.Props.File files = 10;
   */
  files: Request_Data_Data_Props_File[] = [];

  /**
   * If true, the worker will render the action configuration.
   *
   * @generated from field: bool render = 11;
   */
  render = false;

  /**
   * @generated from field: string version = 12;
   */
  version = "";

  constructor(data?: PartialMessage<Request_Data_Data_Props>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "transport.v1.Request.Data.Data.Props";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "action_configuration", kind: "message", T: Struct },
    { no: 2, name: "datasource_configuration", kind: "message", T: Struct },
    { no: 3, name: "redacted_datasource_configuration", kind: "message", T: Struct },
    { no: 4, name: "execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "step_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "environment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "binding_keys", kind: "message", T: Request_Data_Data_Props_Binding, repeated: true },
    { no: 8, name: "variables", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Variable} },
    { no: 9, name: "fileServerUrl", jsonName: "$fileServerUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "files", kind: "message", T: Request_Data_Data_Props_File, repeated: true },
    { no: 11, name: "render", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Request_Data_Data_Props {
    return new Request_Data_Data_Props().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Request_Data_Data_Props {
    return new Request_Data_Data_Props().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Request_Data_Data_Props {
    return new Request_Data_Data_Props().fromJsonString(jsonString, options);
  }

  static equals(a: Request_Data_Data_Props | PlainMessage<Request_Data_Data_Props> | undefined, b: Request_Data_Data_Props | PlainMessage<Request_Data_Data_Props> | undefined): boolean {
    return proto3.util.equals(Request_Data_Data_Props, a, b);
  }
}

/**
 * @generated from message transport.v1.Request.Data.Data.Props.Binding
 */
export class Request_Data_Data_Props_Binding extends Message<Request_Data_Data_Props_Binding> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  constructor(data?: PartialMessage<Request_Data_Data_Props_Binding>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "transport.v1.Request.Data.Data.Props.Binding";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Request_Data_Data_Props_Binding {
    return new Request_Data_Data_Props_Binding().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Request_Data_Data_Props_Binding {
    return new Request_Data_Data_Props_Binding().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Request_Data_Data_Props_Binding {
    return new Request_Data_Data_Props_Binding().fromJsonString(jsonString, options);
  }

  static equals(a: Request_Data_Data_Props_Binding | PlainMessage<Request_Data_Data_Props_Binding> | undefined, b: Request_Data_Data_Props_Binding | PlainMessage<Request_Data_Data_Props_Binding> | undefined): boolean {
    return proto3.util.equals(Request_Data_Data_Props_Binding, a, b);
  }
}

/**
 * @generated from message transport.v1.Request.Data.Data.Props.File
 */
export class Request_Data_Data_Props_File extends Message<Request_Data_Data_Props_File> {
  /**
   * @generated from field: string fieldname = 1;
   */
  fieldname = "";

  /**
   * @generated from field: string originalname = 2;
   */
  originalname = "";

  /**
   * @generated from field: string encoding = 3;
   */
  encoding = "";

  /**
   * @generated from field: string mimetype = 4;
   */
  mimetype = "";

  /**
   * @generated from field: int64 size = 5;
   */
  size = protoInt64.zero;

  /**
   * @generated from field: string destination = 6;
   */
  destination = "";

  /**
   * @generated from field: string filename = 7;
   */
  filename = "";

  /**
   * @generated from field: string path = 8;
   */
  path = "";

  /**
   * @generated from field: bytes buffer = 9;
   */
  buffer = new Uint8Array(0);

  constructor(data?: PartialMessage<Request_Data_Data_Props_File>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "transport.v1.Request.Data.Data.Props.File";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fieldname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "originalname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "encoding", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "mimetype", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "destination", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "buffer", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Request_Data_Data_Props_File {
    return new Request_Data_Data_Props_File().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Request_Data_Data_Props_File {
    return new Request_Data_Data_Props_File().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Request_Data_Data_Props_File {
    return new Request_Data_Data_Props_File().fromJsonString(jsonString, options);
  }

  static equals(a: Request_Data_Data_Props_File | PlainMessage<Request_Data_Data_Props_File> | undefined, b: Request_Data_Data_Props_File | PlainMessage<Request_Data_Data_Props_File> | undefined): boolean {
    return proto3.util.equals(Request_Data_Data_Props_File, a, b);
  }
}

/**
 * @generated from message transport.v1.Request.Data.Data.Quota
 */
export class Request_Data_Data_Quota extends Message<Request_Data_Data_Quota> {
  /**
   * @generated from field: int32 size = 1;
   */
  size = 0;

  /**
   * @generated from field: int32 duration = 2;
   */
  duration = 0;

  constructor(data?: PartialMessage<Request_Data_Data_Quota>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "transport.v1.Request.Data.Data.Quota";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "duration", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Request_Data_Data_Quota {
    return new Request_Data_Data_Quota().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Request_Data_Data_Quota {
    return new Request_Data_Data_Quota().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Request_Data_Data_Quota {
    return new Request_Data_Data_Quota().fromJsonString(jsonString, options);
  }

  static equals(a: Request_Data_Data_Quota | PlainMessage<Request_Data_Data_Quota> | undefined, b: Request_Data_Data_Quota | PlainMessage<Request_Data_Data_Quota> | undefined): boolean {
    return proto3.util.equals(Request_Data_Data_Quota, a, b);
  }
}

/**
 * NOTE(frank): We don't have control over this type. We have
 * to work with the existing controller <-> worker interface.
 * Usually it's not a best practice to inline nested structs
 * like this but I think it's okay in this case.
 *
 * @generated from message transport.v1.Response
 */
export class Response extends Message<Response> {
  /**
   * @generated from field: transport.v1.Response.Data data = 1;
   */
  data?: Response_Data;

  /**
   * @generated from field: common.v1.Error pinned = 2;
   */
  pinned?: Error;

  constructor(data?: PartialMessage<Response>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "transport.v1.Response";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Response_Data },
    { no: 2, name: "pinned", kind: "message", T: Error },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Response {
    return new Response().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Response {
    return new Response().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Response {
    return new Response().fromJsonString(jsonString, options);
  }

  static equals(a: Response | PlainMessage<Response> | undefined, b: Response | PlainMessage<Response> | undefined): boolean {
    return proto3.util.equals(Response, a, b);
  }
}

/**
 * @generated from message transport.v1.Response.Data
 */
export class Response_Data extends Message<Response_Data> {
  /**
   * @generated from field: transport.v1.Performance pinned = 1;
   */
  pinned?: Performance;

  /**
   * @generated from field: transport.v1.Response.Data.Data data = 2;
   */
  data?: Response_Data_Data;

  constructor(data?: PartialMessage<Response_Data>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "transport.v1.Response.Data";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pinned", kind: "message", T: Performance },
    { no: 2, name: "data", kind: "message", T: Response_Data_Data },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Response_Data {
    return new Response_Data().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Response_Data {
    return new Response_Data().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Response_Data {
    return new Response_Data().fromJsonString(jsonString, options);
  }

  static equals(a: Response_Data | PlainMessage<Response_Data> | undefined, b: Response_Data | PlainMessage<Response_Data> | undefined): boolean {
    return proto3.util.equals(Response_Data, a, b);
  }
}

/**
 * @generated from message transport.v1.Response.Data.Data
 */
export class Response_Data_Data extends Message<Response_Data_Data> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: common.v1.Error err = 2;
   */
  err?: Error;

  /**
   * Metadata response fields - necessary to match fields used in the existing worker interface
   * https://github.com/superblocksteam/superblocks/blob/f75d3a80745253458865b66a885cb7f8eb258229/packages/shared/src/types/datasource/metadata/index.ts#L6-L9
   *
   * @generated from field: optional api.v1.MetadataResponse.DatabaseSchemaMetadata db_schema = 3;
   */
  dbSchema?: MetadataResponse_DatabaseSchemaMetadata;

  /**
   * @generated from field: repeated api.v1.MetadataResponse.BucketMetadata buckets = 4;
   */
  buckets: MetadataResponse_BucketMetadata[] = [];

  /**
   * NOTE(frank): I think we'll need a transport/v2 for this but ideally
   * we don't have duplcate types like this.
   *
   * @generated from field: optional plugins.kafka.v1.Metadata kafka = 5;
   */
  kafka?: Metadata;

  /**
   * @generated from field: optional plugins.cosmosdb.v1.Plugin.Metadata cosmosdb = 6;
   */
  cosmosdb?: Plugin_Metadata;

  /**
   * @generated from field: optional plugins.adls.v1.Plugin.Metadata adls = 7;
   */
  adls?: Plugin_Metadata$1;

  /**
   * @generated from field: optional google.protobuf.Any dynamodb = 8;
   */
  dynamodb?: Any;

  /**
   * @generated from field: optional string g_sheets_next_page_token = 9;
   */
  gSheetsNextPageToken?: string;

  constructor(data?: PartialMessage<Response_Data_Data>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "transport.v1.Response.Data.Data";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "err", kind: "message", T: Error },
    { no: 3, name: "db_schema", kind: "message", T: MetadataResponse_DatabaseSchemaMetadata, opt: true },
    { no: 4, name: "buckets", kind: "message", T: MetadataResponse_BucketMetadata, repeated: true },
    { no: 5, name: "kafka", kind: "message", T: Metadata, opt: true },
    { no: 6, name: "cosmosdb", kind: "message", T: Plugin_Metadata, opt: true },
    { no: 7, name: "adls", kind: "message", T: Plugin_Metadata$1, opt: true },
    { no: 8, name: "dynamodb", kind: "message", T: Any, opt: true },
    { no: 9, name: "g_sheets_next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Response_Data_Data {
    return new Response_Data_Data().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Response_Data_Data {
    return new Response_Data_Data().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Response_Data_Data {
    return new Response_Data_Data().fromJsonString(jsonString, options);
  }

  static equals(a: Response_Data_Data | PlainMessage<Response_Data_Data> | undefined, b: Response_Data_Data | PlainMessage<Response_Data_Data> | undefined): boolean {
    return proto3.util.equals(Response_Data_Data, a, b);
  }
}

/**
 * DEPRECATED: use api.v1.Definition instead
 *
 * @generated from message transport.v1.Fetch
 */
export class Fetch extends Message<Fetch> {
  /**
   * @generated from field: api.v1.Api api = 1;
   */
  api?: Api;

  /**
   * @generated from field: map<string, google.protobuf.Struct> integrations = 2;
   */
  integrations: { [key: string]: Struct } = {};

  /**
   * @generated from field: transport.v1.Fetch.Metadata metadata = 3;
   */
  metadata?: Fetch_Metadata;

  /**
   * @generated from field: store.v1.Stores stores = 4;
   */
  stores?: Stores;

  constructor(data?: PartialMessage<Fetch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "transport.v1.Fetch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "api", kind: "message", T: Api },
    { no: 2, name: "integrations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Struct} },
    { no: 3, name: "metadata", kind: "message", T: Fetch_Metadata },
    { no: 4, name: "stores", kind: "message", T: Stores },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Fetch {
    return new Fetch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Fetch {
    return new Fetch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Fetch {
    return new Fetch().fromJsonString(jsonString, options);
  }

  static equals(a: Fetch | PlainMessage<Fetch> | undefined, b: Fetch | PlainMessage<Fetch> | undefined): boolean {
    return proto3.util.equals(Fetch, a, b);
  }
}

/**
 * @generated from message transport.v1.Fetch.Metadata
 */
export class Fetch_Metadata extends Message<Fetch_Metadata> {
  /**
   * This is the email
   *
   * @generated from field: string requester = 1;
   */
  requester = "";

  /**
   * Because profile isn't a required execution parameter, the default will be different per org.
   *
   * @generated from field: string profile = 2;
   */
  profile = "";

  /**
   * @generated from field: string organization_plan = 3;
   */
  organizationPlan = "";

  constructor(data?: PartialMessage<Fetch_Metadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "transport.v1.Fetch.Metadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requester", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "profile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "organization_plan", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Fetch_Metadata {
    return new Fetch_Metadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Fetch_Metadata {
    return new Fetch_Metadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Fetch_Metadata {
    return new Fetch_Metadata().fromJsonString(jsonString, options);
  }

  static equals(a: Fetch_Metadata | PlainMessage<Fetch_Metadata> | undefined, b: Fetch_Metadata | PlainMessage<Fetch_Metadata> | undefined): boolean {
    return proto3.util.equals(Fetch_Metadata, a, b);
  }
}

/**
 * @generated from message transport.v1.FetchScheduleJobResp
 */
export class FetchScheduleJobResp extends Message<FetchScheduleJobResp> {
  /**
   * @generated from field: repeated api.v1.Definition apis = 1;
   */
  apis: Definition[] = [];

  constructor(data?: PartialMessage<FetchScheduleJobResp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "transport.v1.FetchScheduleJobResp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apis", kind: "message", T: Definition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchScheduleJobResp {
    return new FetchScheduleJobResp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchScheduleJobResp {
    return new FetchScheduleJobResp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchScheduleJobResp {
    return new FetchScheduleJobResp().fromJsonString(jsonString, options);
  }

  static equals(a: FetchScheduleJobResp | PlainMessage<FetchScheduleJobResp> | undefined, b: FetchScheduleJobResp | PlainMessage<FetchScheduleJobResp> | undefined): boolean {
    return proto3.util.equals(FetchScheduleJobResp, a, b);
  }
}

