"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file transport/v1/transport.proto (package transport.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.FetchScheduleJobResp = exports.Fetch_Metadata = exports.Fetch = exports.Response_Data_Data = exports.Response_Data = exports.Response = exports.Request_Data_Data_Quota = exports.Request_Data_Data_Props_File = exports.Request_Data_Data_Props_Binding = exports.Request_Data_Data_Props = exports.Request_Data_Data = exports.Request_Data_Pinned = exports.Request_Data = exports.Request = exports.Observability = exports.Variable = exports.Performance_Observable = exports.Performance = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const blocks_pb_1 = require("../../api/v1/blocks_pb");
const errors_pb_1 = require("../../common/v1/errors_pb");
const service_pb_1 = require("../../api/v1/service_pb");
const plugin_pb_1 = require("../../plugins/kafka/v1/plugin_pb");
const plugin_pb_2 = require("../../plugins/cosmosdb/v1/plugin_pb");
const plugin_pb_3 = require("../../plugins/adls/v1/plugin_pb");
const api_pb_1 = require("../../api/v1/api_pb");
const store_pb_1 = require("../../store/v1/store_pb");
/**
 * @generated from message transport.v1.Performance
 */
class Performance extends protobuf_1.Message {
    /**
     * @generated from field: bool error = 1;
     */
    error = false;
    /**
     * @generated from field: transport.v1.Performance.Observable plugin_execution = 2;
     */
    pluginExecution;
    /**
     * @generated from field: transport.v1.Performance.Observable queue_request = 3;
     */
    queueRequest;
    /**
     * @generated from field: transport.v1.Performance.Observable queue_response = 4;
     */
    queueResponse;
    /**
     * @generated from field: transport.v1.Performance.Observable kv_store_fetch = 5;
     */
    kvStoreFetch;
    /**
     * @generated from field: transport.v1.Performance.Observable kv_store_push = 6;
     */
    kvStorePush;
    /**
     * @generated from field: transport.v1.Performance.Observable total = 7;
     */
    total;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "transport.v1.Performance";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "error", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "plugin_execution", kind: "message", T: Performance_Observable },
        { no: 3, name: "queue_request", kind: "message", T: Performance_Observable },
        { no: 4, name: "queue_response", kind: "message", T: Performance_Observable },
        { no: 5, name: "kv_store_fetch", kind: "message", T: Performance_Observable },
        { no: 6, name: "kv_store_push", kind: "message", T: Performance_Observable },
        { no: 7, name: "total", kind: "message", T: Performance_Observable },
    ]);
    static fromBinary(bytes, options) {
        return new Performance().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Performance().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Performance().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Performance, a, b);
    }
}
exports.Performance = Performance;
/**
 * @generated from message transport.v1.Performance.Observable
 */
class Performance_Observable extends protobuf_1.Message {
    /**
     * @generated from field: double start = 1;
     */
    start = 0;
    /**
     * @generated from field: double end = 2;
     */
    end = 0;
    /**
     * @generated from field: double value = 3;
     */
    value = 0;
    /**
     * @generated from field: double bytes = 4;
     */
    bytes = 0;
    /**
     * @generated from field: double estimate = 5;
     */
    estimate = 0;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "transport.v1.Performance.Observable";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "start", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
        { no: 2, name: "end", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
        { no: 3, name: "value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
        { no: 4, name: "bytes", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
        { no: 5, name: "estimate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    ]);
    static fromBinary(bytes, options) {
        return new Performance_Observable().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Performance_Observable().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Performance_Observable().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Performance_Observable, a, b);
    }
}
exports.Performance_Observable = Performance_Observable;
/**
 * @generated from message transport.v1.Variable
 */
class Variable extends protobuf_1.Message {
    /**
     * @generated from field: string key = 1;
     */
    key = "";
    /**
     * @generated from field: api.v1.Variables.Type type = 2;
     */
    type = blocks_pb_1.Variables_Type.UNSPECIFIED;
    /**
     * @generated from field: api.v1.Variables.Mode mode = 3;
     */
    mode = blocks_pb_1.Variables_Mode.UNSPECIFIED;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "transport.v1.Variable";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "type", kind: "enum", T: protobuf_1.proto3.getEnumType(blocks_pb_1.Variables_Type) },
        { no: 3, name: "mode", kind: "enum", T: protobuf_1.proto3.getEnumType(blocks_pb_1.Variables_Mode) },
    ]);
    static fromBinary(bytes, options) {
        return new Variable().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Variable().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Variable().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Variable, a, b);
    }
}
exports.Variable = Variable;
/**
 * @generated from message transport.v1.Observability
 */
class Observability extends protobuf_1.Message {
    /**
     * @generated from field: string trace_id = 1;
     */
    traceId = "";
    /**
     * @generated from field: string span_id = 2;
     */
    spanId = "";
    /**
     * @generated from field: map<string, string> baggage = 3;
     */
    baggage = {};
    /**
     * @generated from field: bytes trace_flags = 4;
     */
    traceFlags = new Uint8Array(0);
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "transport.v1.Observability";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "trace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "span_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "baggage", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
        { no: 4, name: "trace_flags", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    ]);
    static fromBinary(bytes, options) {
        return new Observability().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Observability().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Observability().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Observability, a, b);
    }
}
exports.Observability = Observability;
/**
 * NOTE(frank): Gross. I'm not spending any time trying to make this look pretty
 * because it needs to be re-done at some point after control flow. This is a raw
 * port of the existing interface.
 *
 * @generated from message transport.v1.Request
 */
class Request extends protobuf_1.Message {
    /**
     * @generated from field: string inbox = 1;
     */
    inbox = "";
    /**
     * @generated from field: transport.v1.Request.Data data = 2;
     */
    data;
    /**
     * @generated from field: string topic = 3;
     */
    topic = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "transport.v1.Request";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "inbox", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "data", kind: "message", T: Request_Data },
        { no: 3, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Request().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Request().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Request().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Request, a, b);
    }
}
exports.Request = Request;
/**
 * @generated from message transport.v1.Request.Data
 */
class Request_Data extends protobuf_1.Message {
    /**
     * @generated from field: transport.v1.Request.Data.Pinned pinned = 1;
     */
    pinned;
    /**
     * @generated from field: transport.v1.Request.Data.Data data = 2;
     */
    data;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "transport.v1.Request.Data";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "pinned", kind: "message", T: Request_Data_Pinned },
        { no: 2, name: "data", kind: "message", T: Request_Data_Data },
    ]);
    static fromBinary(bytes, options) {
        return new Request_Data().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Request_Data().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Request_Data().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Request_Data, a, b);
    }
}
exports.Request_Data = Request_Data;
/**
 * @generated from message transport.v1.Request.Data.Pinned
 */
class Request_Data_Pinned extends protobuf_1.Message {
    /**
     * @generated from field: string bucket = 1;
     */
    bucket = "";
    /**
     * @generated from field: string name = 2;
     */
    name = "";
    /**
     * @generated from field: string version = 3;
     */
    version = "";
    /**
     * @generated from field: string event = 4;
     */
    event = "";
    /**
     * Deprecated, use observability instead
     *
     * @generated from field: map<string, string> carrier = 5 [deprecated = true];
     * @deprecated
     */
    carrier = {};
    /**
     * @generated from field: transport.v1.Observability observability = 6;
     */
    observability;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "transport.v1.Request.Data.Pinned";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "bucket", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "event", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "carrier", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
        { no: 6, name: "observability", kind: "message", T: Observability },
    ]);
    static fromBinary(bytes, options) {
        return new Request_Data_Pinned().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Request_Data_Pinned().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Request_Data_Pinned().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Request_Data_Pinned, a, b);
    }
}
exports.Request_Data_Pinned = Request_Data_Pinned;
/**
 * @generated from message transport.v1.Request.Data.Data
 */
class Request_Data_Data extends protobuf_1.Message {
    /**
     * @generated from field: transport.v1.Request.Data.Data.Props props = 1;
     */
    props;
    /**
     * d_config stands for datasource configuration - necessary to match the fields used
     * in the existing worker interface
     *
     * @generated from field: optional google.protobuf.Struct d_config = 2;
     */
    dConfig;
    /**
     * @generated from field: optional google.protobuf.Struct a_config = 3;
     */
    aConfig;
    /**
     * @generated from field: transport.v1.Request.Data.Data.Quota quotas = 4;
     */
    quotas;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "transport.v1.Request.Data.Data";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "props", kind: "message", T: Request_Data_Data_Props },
        { no: 2, name: "d_config", kind: "message", T: protobuf_1.Struct, opt: true },
        { no: 3, name: "a_config", kind: "message", T: protobuf_1.Struct, opt: true },
        { no: 4, name: "quotas", kind: "message", T: Request_Data_Data_Quota },
    ]);
    static fromBinary(bytes, options) {
        return new Request_Data_Data().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Request_Data_Data().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Request_Data_Data().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Request_Data_Data, a, b);
    }
}
exports.Request_Data_Data = Request_Data_Data;
/**
 * @generated from message transport.v1.Request.Data.Data.Props
 */
class Request_Data_Data_Props extends protobuf_1.Message {
    /**
     * @generated from field: google.protobuf.Struct action_configuration = 1;
     */
    actionConfiguration;
    /**
     * @generated from field: google.protobuf.Struct datasource_configuration = 2;
     */
    datasourceConfiguration;
    /**
     * @generated from field: google.protobuf.Struct redacted_datasource_configuration = 3;
     */
    redactedDatasourceConfiguration;
    /**
     * @generated from field: string execution_id = 4;
     */
    executionId = "";
    /**
     * @generated from field: string step_name = 5;
     */
    stepName = "";
    /**
     * @generated from field: string environment = 6;
     */
    environment = "";
    /**
     * DEPRECATED
     *
     * @generated from field: repeated transport.v1.Request.Data.Data.Props.Binding binding_keys = 7;
     */
    bindingKeys = [];
    /**
     * @generated from field: map<string, transport.v1.Variable> variables = 8;
     */
    variables = {};
    /**
     * @generated from field: string fileServerUrl = 9 [json_name = "$fileServerUrl"];
     */
    fileServerUrl = "";
    /**
     * @generated from field: repeated transport.v1.Request.Data.Data.Props.File files = 10;
     */
    files = [];
    /**
     * If true, the worker will render the action configuration.
     *
     * @generated from field: bool render = 11;
     */
    render = false;
    /**
     * @generated from field: string version = 12;
     */
    version = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "transport.v1.Request.Data.Data.Props";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "action_configuration", kind: "message", T: protobuf_1.Struct },
        { no: 2, name: "datasource_configuration", kind: "message", T: protobuf_1.Struct },
        { no: 3, name: "redacted_datasource_configuration", kind: "message", T: protobuf_1.Struct },
        { no: 4, name: "execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "step_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 6, name: "environment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 7, name: "binding_keys", kind: "message", T: Request_Data_Data_Props_Binding, repeated: true },
        { no: 8, name: "variables", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: Variable } },
        { no: 9, name: "fileServerUrl", jsonName: "$fileServerUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 10, name: "files", kind: "message", T: Request_Data_Data_Props_File, repeated: true },
        { no: 11, name: "render", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 12, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Request_Data_Data_Props().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Request_Data_Data_Props().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Request_Data_Data_Props().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Request_Data_Data_Props, a, b);
    }
}
exports.Request_Data_Data_Props = Request_Data_Data_Props;
/**
 * @generated from message transport.v1.Request.Data.Data.Props.Binding
 */
class Request_Data_Data_Props_Binding extends protobuf_1.Message {
    /**
     * @generated from field: string key = 1;
     */
    key = "";
    /**
     * @generated from field: string type = 2;
     */
    type = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "transport.v1.Request.Data.Data.Props.Binding";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Request_Data_Data_Props_Binding().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Request_Data_Data_Props_Binding().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Request_Data_Data_Props_Binding().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Request_Data_Data_Props_Binding, a, b);
    }
}
exports.Request_Data_Data_Props_Binding = Request_Data_Data_Props_Binding;
/**
 * @generated from message transport.v1.Request.Data.Data.Props.File
 */
class Request_Data_Data_Props_File extends protobuf_1.Message {
    /**
     * @generated from field: string fieldname = 1;
     */
    fieldname = "";
    /**
     * @generated from field: string originalname = 2;
     */
    originalname = "";
    /**
     * @generated from field: string encoding = 3;
     */
    encoding = "";
    /**
     * @generated from field: string mimetype = 4;
     */
    mimetype = "";
    /**
     * @generated from field: int64 size = 5;
     */
    size = protobuf_1.protoInt64.zero;
    /**
     * @generated from field: string destination = 6;
     */
    destination = "";
    /**
     * @generated from field: string filename = 7;
     */
    filename = "";
    /**
     * @generated from field: string path = 8;
     */
    path = "";
    /**
     * @generated from field: bytes buffer = 9;
     */
    buffer = new Uint8Array(0);
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "transport.v1.Request.Data.Data.Props.File";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "fieldname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "originalname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "encoding", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "mimetype", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 6, name: "destination", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 7, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 8, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 9, name: "buffer", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    ]);
    static fromBinary(bytes, options) {
        return new Request_Data_Data_Props_File().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Request_Data_Data_Props_File().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Request_Data_Data_Props_File().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Request_Data_Data_Props_File, a, b);
    }
}
exports.Request_Data_Data_Props_File = Request_Data_Data_Props_File;
/**
 * @generated from message transport.v1.Request.Data.Data.Quota
 */
class Request_Data_Data_Quota extends protobuf_1.Message {
    /**
     * @generated from field: int32 size = 1;
     */
    size = 0;
    /**
     * @generated from field: int32 duration = 2;
     */
    duration = 0;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "transport.v1.Request.Data.Data.Quota";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
        { no: 2, name: "duration", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    ]);
    static fromBinary(bytes, options) {
        return new Request_Data_Data_Quota().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Request_Data_Data_Quota().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Request_Data_Data_Quota().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Request_Data_Data_Quota, a, b);
    }
}
exports.Request_Data_Data_Quota = Request_Data_Data_Quota;
/**
 * NOTE(frank): We don't have control over this type. We have
 * to work with the existing controller <-> worker interface.
 * Usually it's not a best practice to inline nested structs
 * like this but I think it's okay in this case.
 *
 * @generated from message transport.v1.Response
 */
class Response extends protobuf_1.Message {
    /**
     * @generated from field: transport.v1.Response.Data data = 1;
     */
    data;
    /**
     * @generated from field: common.v1.Error pinned = 2;
     */
    pinned;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "transport.v1.Response";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "data", kind: "message", T: Response_Data },
        { no: 2, name: "pinned", kind: "message", T: errors_pb_1.Error },
    ]);
    static fromBinary(bytes, options) {
        return new Response().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Response().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Response().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Response, a, b);
    }
}
exports.Response = Response;
/**
 * @generated from message transport.v1.Response.Data
 */
class Response_Data extends protobuf_1.Message {
    /**
     * @generated from field: transport.v1.Performance pinned = 1;
     */
    pinned;
    /**
     * @generated from field: transport.v1.Response.Data.Data data = 2;
     */
    data;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "transport.v1.Response.Data";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "pinned", kind: "message", T: Performance },
        { no: 2, name: "data", kind: "message", T: Response_Data_Data },
    ]);
    static fromBinary(bytes, options) {
        return new Response_Data().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Response_Data().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Response_Data().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Response_Data, a, b);
    }
}
exports.Response_Data = Response_Data;
/**
 * @generated from message transport.v1.Response.Data.Data
 */
class Response_Data_Data extends protobuf_1.Message {
    /**
     * @generated from field: string key = 1;
     */
    key = "";
    /**
     * @generated from field: common.v1.Error err = 2;
     */
    err;
    /**
     * Metadata response fields - necessary to match fields used in the existing worker interface
     * https://github.com/superblocksteam/superblocks/blob/f75d3a80745253458865b66a885cb7f8eb258229/packages/shared/src/types/datasource/metadata/index.ts#L6-L9
     *
     * @generated from field: optional api.v1.MetadataResponse.DatabaseSchemaMetadata db_schema = 3;
     */
    dbSchema;
    /**
     * @generated from field: repeated api.v1.MetadataResponse.BucketMetadata buckets = 4;
     */
    buckets = [];
    /**
     * NOTE(frank): I think we'll need a transport/v2 for this but ideally
     * we don't have duplcate types like this.
     *
     * @generated from field: optional plugins.kafka.v1.Metadata kafka = 5;
     */
    kafka;
    /**
     * @generated from field: optional plugins.cosmosdb.v1.Plugin.Metadata cosmosdb = 6;
     */
    cosmosdb;
    /**
     * @generated from field: optional plugins.adls.v1.Plugin.Metadata adls = 7;
     */
    adls;
    /**
     * @generated from field: optional google.protobuf.Any dynamodb = 8;
     */
    dynamodb;
    /**
     * @generated from field: optional string g_sheets_next_page_token = 9;
     */
    gSheetsNextPageToken;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "transport.v1.Response.Data.Data";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "err", kind: "message", T: errors_pb_1.Error },
        { no: 3, name: "db_schema", kind: "message", T: service_pb_1.MetadataResponse_DatabaseSchemaMetadata, opt: true },
        { no: 4, name: "buckets", kind: "message", T: service_pb_1.MetadataResponse_BucketMetadata, repeated: true },
        { no: 5, name: "kafka", kind: "message", T: plugin_pb_1.Metadata, opt: true },
        { no: 6, name: "cosmosdb", kind: "message", T: plugin_pb_2.Plugin_Metadata, opt: true },
        { no: 7, name: "adls", kind: "message", T: plugin_pb_3.Plugin_Metadata, opt: true },
        { no: 8, name: "dynamodb", kind: "message", T: protobuf_1.Any, opt: true },
        { no: 9, name: "g_sheets_next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    ]);
    static fromBinary(bytes, options) {
        return new Response_Data_Data().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Response_Data_Data().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Response_Data_Data().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Response_Data_Data, a, b);
    }
}
exports.Response_Data_Data = Response_Data_Data;
/**
 * DEPRECATED: use api.v1.Definition instead
 *
 * @generated from message transport.v1.Fetch
 */
class Fetch extends protobuf_1.Message {
    /**
     * @generated from field: api.v1.Api api = 1;
     */
    api;
    /**
     * @generated from field: map<string, google.protobuf.Struct> integrations = 2;
     */
    integrations = {};
    /**
     * @generated from field: transport.v1.Fetch.Metadata metadata = 3;
     */
    metadata;
    /**
     * @generated from field: store.v1.Stores stores = 4;
     */
    stores;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "transport.v1.Fetch";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "api", kind: "message", T: api_pb_1.Api },
        { no: 2, name: "integrations", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "message", T: protobuf_1.Struct } },
        { no: 3, name: "metadata", kind: "message", T: Fetch_Metadata },
        { no: 4, name: "stores", kind: "message", T: store_pb_1.Stores },
    ]);
    static fromBinary(bytes, options) {
        return new Fetch().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Fetch().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Fetch().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Fetch, a, b);
    }
}
exports.Fetch = Fetch;
/**
 * @generated from message transport.v1.Fetch.Metadata
 */
class Fetch_Metadata extends protobuf_1.Message {
    /**
     * This is the email
     *
     * @generated from field: string requester = 1;
     */
    requester = "";
    /**
     * Because profile isn't a required execution parameter, the default will be different per org.
     *
     * @generated from field: string profile = 2;
     */
    profile = "";
    /**
     * @generated from field: string organization_plan = 3;
     */
    organizationPlan = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "transport.v1.Fetch.Metadata";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "requester", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "profile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "organization_plan", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Fetch_Metadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Fetch_Metadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Fetch_Metadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Fetch_Metadata, a, b);
    }
}
exports.Fetch_Metadata = Fetch_Metadata;
/**
 * @generated from message transport.v1.FetchScheduleJobResp
 */
class FetchScheduleJobResp extends protobuf_1.Message {
    /**
     * @generated from field: repeated api.v1.Definition apis = 1;
     */
    apis = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "transport.v1.FetchScheduleJobResp";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "apis", kind: "message", T: service_pb_1.Definition, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new FetchScheduleJobResp().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FetchScheduleJobResp().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FetchScheduleJobResp().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FetchScheduleJobResp, a, b);
    }
}
exports.FetchScheduleJobResp = FetchScheduleJobResp;
//# sourceMappingURL=transport_pb.map