// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file secrets/v1/secrets.proto (package secrets.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { AkeylessAuth, AwsAuth, GcpAuth } from "../../plugins/common/v1/auth_pb";
import { Metadata } from "../../common/v1/common_pb";

/**
 * @generated from message secrets.v1.AwsSecretsManager
 */
export class AwsSecretsManager extends Message<AwsSecretsManager> {
  /**
   * @generated from field: plugins.common.v1.AwsAuth auth = 1;
   */
  auth?: AwsAuth;

  /**
   * @generated from field: optional string prefix = 2;
   */
  prefix?: string;

  constructor(data?: PartialMessage<AwsSecretsManager>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "secrets.v1.AwsSecretsManager";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auth", kind: "message", T: AwsAuth },
    { no: 2, name: "prefix", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AwsSecretsManager {
    return new AwsSecretsManager().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AwsSecretsManager {
    return new AwsSecretsManager().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AwsSecretsManager {
    return new AwsSecretsManager().fromJsonString(jsonString, options);
  }

  static equals(a: AwsSecretsManager | PlainMessage<AwsSecretsManager> | undefined, b: AwsSecretsManager | PlainMessage<AwsSecretsManager> | undefined): boolean {
    return proto3.util.equals(AwsSecretsManager, a, b);
  }
}

/**
 * @generated from message secrets.v1.GcpSecretManager
 */
export class GcpSecretManager extends Message<GcpSecretManager> {
  /**
   * @generated from field: plugins.common.v1.GcpAuth auth = 1;
   */
  auth?: GcpAuth;

  /**
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  constructor(data?: PartialMessage<GcpSecretManager>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "secrets.v1.GcpSecretManager";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auth", kind: "message", T: GcpAuth },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GcpSecretManager {
    return new GcpSecretManager().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GcpSecretManager {
    return new GcpSecretManager().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GcpSecretManager {
    return new GcpSecretManager().fromJsonString(jsonString, options);
  }

  static equals(a: GcpSecretManager | PlainMessage<GcpSecretManager> | undefined, b: GcpSecretManager | PlainMessage<GcpSecretManager> | undefined): boolean {
    return proto3.util.equals(GcpSecretManager, a, b);
  }
}

/**
 * @generated from message secrets.v1.AkeylessSecretsManager
 */
export class AkeylessSecretsManager extends Message<AkeylessSecretsManager> {
  /**
   * @generated from field: plugins.common.v1.AkeylessAuth auth = 1;
   */
  auth?: AkeylessAuth;

  /**
   * @generated from field: optional string host = 2;
   */
  host?: string;

  /**
   * @generated from field: optional string prefix = 3;
   */
  prefix?: string;

  constructor(data?: PartialMessage<AkeylessSecretsManager>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "secrets.v1.AkeylessSecretsManager";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auth", kind: "message", T: AkeylessAuth },
    { no: 2, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "prefix", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AkeylessSecretsManager {
    return new AkeylessSecretsManager().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AkeylessSecretsManager {
    return new AkeylessSecretsManager().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AkeylessSecretsManager {
    return new AkeylessSecretsManager().fromJsonString(jsonString, options);
  }

  static equals(a: AkeylessSecretsManager | PlainMessage<AkeylessSecretsManager> | undefined, b: AkeylessSecretsManager | PlainMessage<AkeylessSecretsManager> | undefined): boolean {
    return proto3.util.equals(AkeylessSecretsManager, a, b);
  }
}

/**
 * @generated from message secrets.v1.HashicorpVault
 */
export class HashicorpVault extends Message<HashicorpVault> {
  /**
   * @generated from field: secrets.v1.HashicorpVault.Auth auth = 1;
   */
  auth?: HashicorpVault_Auth;

  /**
   * The location of the vault server.
   *
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * The path to the vault
   *
   * @generated from field: optional string path = 3;
   */
  path?: string;

  /**
   * The Hashicorp Vault namespace.
   *
   * @generated from field: optional string namespace = 4;
   */
  namespace?: string;

  /**
   * The engine version.
   *
   * @generated from field: secrets.v1.HashicorpVault.Version version = 5;
   */
  version = HashicorpVault_Version.UNSPECIFIED;

  /**
   * the path to the secrets
   *
   * @generated from field: optional string secrets_path = 6;
   */
  secretsPath?: string;

  constructor(data?: PartialMessage<HashicorpVault>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "secrets.v1.HashicorpVault";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auth", kind: "message", T: HashicorpVault_Auth },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "version", kind: "enum", T: proto3.getEnumType(HashicorpVault_Version) },
    { no: 6, name: "secrets_path", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HashicorpVault {
    return new HashicorpVault().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HashicorpVault {
    return new HashicorpVault().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HashicorpVault {
    return new HashicorpVault().fromJsonString(jsonString, options);
  }

  static equals(a: HashicorpVault | PlainMessage<HashicorpVault> | undefined, b: HashicorpVault | PlainMessage<HashicorpVault> | undefined): boolean {
    return proto3.util.equals(HashicorpVault, a, b);
  }
}

/**
 * @generated from enum secrets.v1.HashicorpVault.Version
 */
export enum HashicorpVault_Version {
  /**
   * @generated from enum value: VERSION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: VERSION_V1 = 1;
   */
  V1 = 1,

  /**
   * @generated from enum value: VERSION_V2 = 2;
   */
  V2 = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(HashicorpVault_Version)
proto3.util.setEnumType(HashicorpVault_Version, "secrets.v1.HashicorpVault.Version", [
  { no: 0, name: "VERSION_UNSPECIFIED" },
  { no: 1, name: "VERSION_V1" },
  { no: 2, name: "VERSION_V2" },
]);

/**
 * @generated from message secrets.v1.HashicorpVault.Auth
 */
export class HashicorpVault_Auth extends Message<HashicorpVault_Auth> {
  /**
   * @generated from oneof secrets.v1.HashicorpVault.Auth.config
   */
  config: {
    /**
     * @generated from field: string token = 1;
     */
    value: string;
    case: "token";
  } | {
    /**
     * @generated from field: secrets.v1.HashicorpVault.Auth.AppRole app_role = 2;
     */
    value: HashicorpVault_Auth_AppRole;
    case: "appRole";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<HashicorpVault_Auth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "secrets.v1.HashicorpVault.Auth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "config" },
    { no: 2, name: "app_role", kind: "message", T: HashicorpVault_Auth_AppRole, oneof: "config" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HashicorpVault_Auth {
    return new HashicorpVault_Auth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HashicorpVault_Auth {
    return new HashicorpVault_Auth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HashicorpVault_Auth {
    return new HashicorpVault_Auth().fromJsonString(jsonString, options);
  }

  static equals(a: HashicorpVault_Auth | PlainMessage<HashicorpVault_Auth> | undefined, b: HashicorpVault_Auth | PlainMessage<HashicorpVault_Auth> | undefined): boolean {
    return proto3.util.equals(HashicorpVault_Auth, a, b);
  }
}

/**
 * @generated from message secrets.v1.HashicorpVault.Auth.AppRole
 */
export class HashicorpVault_Auth_AppRole extends Message<HashicorpVault_Auth_AppRole> {
  /**
   * @generated from field: string role_id = 1;
   */
  roleId = "";

  /**
   * @generated from field: string secret_id = 2;
   */
  secretId = "";

  constructor(data?: PartialMessage<HashicorpVault_Auth_AppRole>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "secrets.v1.HashicorpVault.Auth.AppRole";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "secret_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HashicorpVault_Auth_AppRole {
    return new HashicorpVault_Auth_AppRole().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HashicorpVault_Auth_AppRole {
    return new HashicorpVault_Auth_AppRole().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HashicorpVault_Auth_AppRole {
    return new HashicorpVault_Auth_AppRole().fromJsonString(jsonString, options);
  }

  static equals(a: HashicorpVault_Auth_AppRole | PlainMessage<HashicorpVault_Auth_AppRole> | undefined, b: HashicorpVault_Auth_AppRole | PlainMessage<HashicorpVault_Auth_AppRole> | undefined): boolean {
    return proto3.util.equals(HashicorpVault_Auth_AppRole, a, b);
  }
}

/**
 * @generated from message secrets.v1.MockStore
 */
export class MockStore extends Message<MockStore> {
  /**
   * @generated from field: map<string, string> data = 1;
   */
  data: { [key: string]: string } = {};

  constructor(data?: PartialMessage<MockStore>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "secrets.v1.MockStore";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MockStore {
    return new MockStore().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MockStore {
    return new MockStore().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MockStore {
    return new MockStore().fromJsonString(jsonString, options);
  }

  static equals(a: MockStore | PlainMessage<MockStore> | undefined, b: MockStore | PlainMessage<MockStore> | undefined): boolean {
    return proto3.util.equals(MockStore, a, b);
  }
}

/**
 * @generated from message secrets.v1.Provider
 */
export class Provider extends Message<Provider> {
  /**
   * @generated from oneof secrets.v1.Provider.config
   */
  config: {
    /**
     * @generated from field: secrets.v1.MockStore mock = 1;
     */
    value: MockStore;
    case: "mock";
  } | {
    /**
     * @generated from field: secrets.v1.AkeylessSecretsManager akeyless_secrets_manager = 2;
     */
    value: AkeylessSecretsManager;
    case: "akeylessSecretsManager";
  } | {
    /**
     * @generated from field: secrets.v1.AwsSecretsManager aws_secrets_manager = 3;
     */
    value: AwsSecretsManager;
    case: "awsSecretsManager";
  } | {
    /**
     * @generated from field: secrets.v1.GcpSecretManager gcp_secret_manager = 4;
     */
    value: GcpSecretManager;
    case: "gcpSecretManager";
  } | {
    /**
     * @generated from field: secrets.v1.HashicorpVault hashicorp_vault = 5;
     */
    value: HashicorpVault;
    case: "hashicorpVault";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Provider>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "secrets.v1.Provider";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mock", kind: "message", T: MockStore, oneof: "config" },
    { no: 2, name: "akeyless_secrets_manager", kind: "message", T: AkeylessSecretsManager, oneof: "config" },
    { no: 3, name: "aws_secrets_manager", kind: "message", T: AwsSecretsManager, oneof: "config" },
    { no: 4, name: "gcp_secret_manager", kind: "message", T: GcpSecretManager, oneof: "config" },
    { no: 5, name: "hashicorp_vault", kind: "message", T: HashicorpVault, oneof: "config" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Provider {
    return new Provider().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Provider {
    return new Provider().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Provider {
    return new Provider().fromJsonString(jsonString, options);
  }

  static equals(a: Provider | PlainMessage<Provider> | undefined, b: Provider | PlainMessage<Provider> | undefined): boolean {
    return proto3.util.equals(Provider, a, b);
  }
}

/**
 * @generated from message secrets.v1.Store
 */
export class Store extends Message<Store> {
  /**
   * @generated from field: common.v1.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * @generated from field: secrets.v1.Provider provider = 2;
   */
  provider?: Provider;

  /**
   * @generated from field: optional int32 ttl = 3;
   */
  ttl?: number;

  /**
   * @generated from field: string configuration_id = 4;
   */
  configurationId = "";

  /**
   * @generated from field: bool cache = 5;
   */
  cache = false;

  constructor(data?: PartialMessage<Store>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "secrets.v1.Store";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "provider", kind: "message", T: Provider },
    { no: 3, name: "ttl", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "configuration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "cache", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Store {
    return new Store().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Store {
    return new Store().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Store {
    return new Store().fromJsonString(jsonString, options);
  }

  static equals(a: Store | PlainMessage<Store> | undefined, b: Store | PlainMessage<Store> | undefined): boolean {
    return proto3.util.equals(Store, a, b);
  }
}

/**
 * Details represents the details of a secret.
 * It does not contain the value.
 *
 * @generated from message secrets.v1.Details
 */
export class Details extends Message<Details> {
  /**
   * i.e. "foo"
   *
   * @generated from field: string alias = 1;
   */
  alias = "";

  /**
   * i.e. "/projects/my-project/secrets/foo/versions/1"
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Details>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "secrets.v1.Details";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alias", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Details {
    return new Details().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Details {
    return new Details().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Details {
    return new Details().fromJsonString(jsonString, options);
  }

  static equals(a: Details | PlainMessage<Details> | undefined, b: Details | PlainMessage<Details> | undefined): boolean {
    return proto3.util.equals(Details, a, b);
  }
}

/**
 * @generated from message secrets.v1.Invalidation
 */
export class Invalidation extends Message<Invalidation> {
  /**
   * @generated from field: string alias = 1;
   */
  alias = "";

  /**
   * @generated from field: string configuration_id = 2;
   */
  configurationId = "";

  /**
   * @generated from field: string store = 3;
   */
  store = "";

  constructor(data?: PartialMessage<Invalidation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "secrets.v1.Invalidation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alias", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "configuration_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "store", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Invalidation {
    return new Invalidation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Invalidation {
    return new Invalidation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Invalidation {
    return new Invalidation().fromJsonString(jsonString, options);
  }

  static equals(a: Invalidation | PlainMessage<Invalidation> | undefined, b: Invalidation | PlainMessage<Invalidation> | undefined): boolean {
    return proto3.util.equals(Invalidation, a, b);
  }
}

