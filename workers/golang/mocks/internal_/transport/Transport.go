// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"
	slog "log/slog"

	mock "github.com/stretchr/testify/mock"
)

// Transport is an autogenerated mock type for the Transport type
type Transport struct {
	mock.Mock
}

type Transport_Expecter struct {
	mock *mock.Mock
}

func (_m *Transport) EXPECT() *Transport_Expecter {
	return &Transport_Expecter{mock: &_m.Mock}
}

// Alive provides a mock function with given fields:
func (_m *Transport) Alive() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Alive")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Transport_Alive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Alive'
type Transport_Alive_Call struct {
	*mock.Call
}

// Alive is a helper method to define mock.On call
func (_e *Transport_Expecter) Alive() *Transport_Alive_Call {
	return &Transport_Alive_Call{Call: _e.mock.On("Alive")}
}

func (_c *Transport_Alive_Call) Run(run func()) *Transport_Alive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Transport_Alive_Call) Return(_a0 bool) *Transport_Alive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Transport_Alive_Call) RunAndReturn(run func() bool) *Transport_Alive_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields: _a0
func (_m *Transport) Close(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transport_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Transport_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Transport_Expecter) Close(_a0 interface{}) *Transport_Close_Call {
	return &Transport_Close_Call{Call: _e.mock.On("Close", _a0)}
}

func (_c *Transport_Close_Call) Run(run func(_a0 context.Context)) *Transport_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Transport_Close_Call) Return(_a0 error) *Transport_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Transport_Close_Call) RunAndReturn(run func(context.Context) error) *Transport_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Fields provides a mock function with given fields:
func (_m *Transport) Fields() []slog.Attr {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fields")
	}

	var r0 []slog.Attr
	if rf, ok := ret.Get(0).(func() []slog.Attr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]slog.Attr)
		}
	}

	return r0
}

// Transport_Fields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fields'
type Transport_Fields_Call struct {
	*mock.Call
}

// Fields is a helper method to define mock.On call
func (_e *Transport_Expecter) Fields() *Transport_Fields_Call {
	return &Transport_Fields_Call{Call: _e.mock.On("Fields")}
}

func (_c *Transport_Fields_Call) Run(run func()) *Transport_Fields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Transport_Fields_Call) Return(_a0 []slog.Attr) *Transport_Fields_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Transport_Fields_Call) RunAndReturn(run func() []slog.Attr) *Transport_Fields_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *Transport) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Transport_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Transport_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Transport_Expecter) Name() *Transport_Name_Call {
	return &Transport_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Transport_Name_Call) Run(run func()) *Transport_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Transport_Name_Call) Return(_a0 string) *Transport_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Transport_Name_Call) RunAndReturn(run func() string) *Transport_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: _a0
func (_m *Transport) Run(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transport_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type Transport_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Transport_Expecter) Run(_a0 interface{}) *Transport_Run_Call {
	return &Transport_Run_Call{Call: _e.mock.On("Run", _a0)}
}

func (_c *Transport_Run_Call) Run(run func(_a0 context.Context)) *Transport_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Transport_Run_Call) Return(_a0 error) *Transport_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Transport_Run_Call) RunAndReturn(run func(context.Context) error) *Transport_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransport creates a new instance of Transport. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransport(t interface {
	mock.TestingT
	Cleanup(func())
}) *Transport {
	mock := &Transport{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
