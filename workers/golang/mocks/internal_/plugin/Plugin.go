// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	apiv1 "github.com/superblocksteam/agent/types/gen/go/api/v1"

	mock "github.com/stretchr/testify/mock"

	structpb "google.golang.org/protobuf/types/known/structpb"

	v1 "github.com/superblocksteam/agent/types/gen/go/transport/v1"
)

// Plugin is an autogenerated mock type for the Plugin type
type Plugin struct {
	mock.Mock
}

type Plugin_Expecter struct {
	mock *mock.Mock
}

func (_m *Plugin) EXPECT() *Plugin_Expecter {
	return &Plugin_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, requestProps
func (_m *Plugin) Execute(ctx context.Context, requestProps *v1.Request_Data_Data_Props) (*apiv1.Output, error) {
	ret := _m.Called(ctx, requestProps)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *apiv1.Output
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Request_Data_Data_Props) (*apiv1.Output, error)); ok {
		return rf(ctx, requestProps)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Request_Data_Data_Props) *apiv1.Output); ok {
		r0 = rf(ctx, requestProps)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiv1.Output)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.Request_Data_Data_Props) error); ok {
		r1 = rf(ctx, requestProps)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Plugin_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type Plugin_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - requestProps *v1.Request_Data_Data_Props
func (_e *Plugin_Expecter) Execute(ctx interface{}, requestProps interface{}) *Plugin_Execute_Call {
	return &Plugin_Execute_Call{Call: _e.mock.On("Execute", ctx, requestProps)}
}

func (_c *Plugin_Execute_Call) Run(run func(ctx context.Context, requestProps *v1.Request_Data_Data_Props)) *Plugin_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Request_Data_Data_Props))
	})
	return _c
}

func (_c *Plugin_Execute_Call) Return(_a0 *apiv1.Output, _a1 error) *Plugin_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Plugin_Execute_Call) RunAndReturn(run func(context.Context, *v1.Request_Data_Data_Props) (*apiv1.Output, error)) *Plugin_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// Metadata provides a mock function with given fields: ctx, datasourceConfig, actionConfig
func (_m *Plugin) Metadata(ctx context.Context, datasourceConfig *structpb.Struct, actionConfig *structpb.Struct) (*v1.Response_Data_Data, error) {
	ret := _m.Called(ctx, datasourceConfig, actionConfig)

	if len(ret) == 0 {
		panic("no return value specified for Metadata")
	}

	var r0 *v1.Response_Data_Data
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *structpb.Struct, *structpb.Struct) (*v1.Response_Data_Data, error)); ok {
		return rf(ctx, datasourceConfig, actionConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *structpb.Struct, *structpb.Struct) *v1.Response_Data_Data); ok {
		r0 = rf(ctx, datasourceConfig, actionConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Response_Data_Data)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *structpb.Struct, *structpb.Struct) error); ok {
		r1 = rf(ctx, datasourceConfig, actionConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Plugin_Metadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Metadata'
type Plugin_Metadata_Call struct {
	*mock.Call
}

// Metadata is a helper method to define mock.On call
//   - ctx context.Context
//   - datasourceConfig *structpb.Struct
//   - actionConfig *structpb.Struct
func (_e *Plugin_Expecter) Metadata(ctx interface{}, datasourceConfig interface{}, actionConfig interface{}) *Plugin_Metadata_Call {
	return &Plugin_Metadata_Call{Call: _e.mock.On("Metadata", ctx, datasourceConfig, actionConfig)}
}

func (_c *Plugin_Metadata_Call) Run(run func(ctx context.Context, datasourceConfig *structpb.Struct, actionConfig *structpb.Struct)) *Plugin_Metadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*structpb.Struct), args[2].(*structpb.Struct))
	})
	return _c
}

func (_c *Plugin_Metadata_Call) Return(_a0 *v1.Response_Data_Data, _a1 error) *Plugin_Metadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Plugin_Metadata_Call) RunAndReturn(run func(context.Context, *structpb.Struct, *structpb.Struct) (*v1.Response_Data_Data, error)) *Plugin_Metadata_Call {
	_c.Call.Return(run)
	return _c
}

// PreDelete provides a mock function with given fields: ctx, datasourceConfig
func (_m *Plugin) PreDelete(ctx context.Context, datasourceConfig *structpb.Struct) error {
	ret := _m.Called(ctx, datasourceConfig)

	if len(ret) == 0 {
		panic("no return value specified for PreDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *structpb.Struct) error); ok {
		r0 = rf(ctx, datasourceConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Plugin_PreDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreDelete'
type Plugin_PreDelete_Call struct {
	*mock.Call
}

// PreDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - datasourceConfig *structpb.Struct
func (_e *Plugin_Expecter) PreDelete(ctx interface{}, datasourceConfig interface{}) *Plugin_PreDelete_Call {
	return &Plugin_PreDelete_Call{Call: _e.mock.On("PreDelete", ctx, datasourceConfig)}
}

func (_c *Plugin_PreDelete_Call) Run(run func(ctx context.Context, datasourceConfig *structpb.Struct)) *Plugin_PreDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*structpb.Struct))
	})
	return _c
}

func (_c *Plugin_PreDelete_Call) Return(_a0 error) *Plugin_PreDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Plugin_PreDelete_Call) RunAndReturn(run func(context.Context, *structpb.Struct) error) *Plugin_PreDelete_Call {
	_c.Call.Return(run)
	return _c
}

// Stream provides a mock function with given fields: ctx, requestProps, send, until
func (_m *Plugin) Stream(ctx context.Context, requestProps *v1.Request_Data_Data_Props, send func(interface{}), until func()) error {
	ret := _m.Called(ctx, requestProps, send, until)

	if len(ret) == 0 {
		panic("no return value specified for Stream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Request_Data_Data_Props, func(interface{}), func()) error); ok {
		r0 = rf(ctx, requestProps, send, until)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Plugin_Stream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stream'
type Plugin_Stream_Call struct {
	*mock.Call
}

// Stream is a helper method to define mock.On call
//   - ctx context.Context
//   - requestProps *v1.Request_Data_Data_Props
//   - send func(interface{})
//   - until func()
func (_e *Plugin_Expecter) Stream(ctx interface{}, requestProps interface{}, send interface{}, until interface{}) *Plugin_Stream_Call {
	return &Plugin_Stream_Call{Call: _e.mock.On("Stream", ctx, requestProps, send, until)}
}

func (_c *Plugin_Stream_Call) Run(run func(ctx context.Context, requestProps *v1.Request_Data_Data_Props, send func(interface{}), until func())) *Plugin_Stream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Request_Data_Data_Props), args[2].(func(interface{})), args[3].(func()))
	})
	return _c
}

func (_c *Plugin_Stream_Call) Return(_a0 error) *Plugin_Stream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Plugin_Stream_Call) RunAndReturn(run func(context.Context, *v1.Request_Data_Data_Props, func(interface{}), func()) error) *Plugin_Stream_Call {
	_c.Call.Return(run)
	return _c
}

// Test provides a mock function with given fields: ctx, datasourceConfig
func (_m *Plugin) Test(ctx context.Context, datasourceConfig *structpb.Struct) error {
	ret := _m.Called(ctx, datasourceConfig)

	if len(ret) == 0 {
		panic("no return value specified for Test")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *structpb.Struct) error); ok {
		r0 = rf(ctx, datasourceConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Plugin_Test_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Test'
type Plugin_Test_Call struct {
	*mock.Call
}

// Test is a helper method to define mock.On call
//   - ctx context.Context
//   - datasourceConfig *structpb.Struct
func (_e *Plugin_Expecter) Test(ctx interface{}, datasourceConfig interface{}) *Plugin_Test_Call {
	return &Plugin_Test_Call{Call: _e.mock.On("Test", ctx, datasourceConfig)}
}

func (_c *Plugin_Test_Call) Run(run func(ctx context.Context, datasourceConfig *structpb.Struct)) *Plugin_Test_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*structpb.Struct))
	})
	return _c
}

func (_c *Plugin_Test_Call) Return(_a0 error) *Plugin_Test_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Plugin_Test_Call) RunAndReturn(run func(context.Context, *structpb.Struct) error) *Plugin_Test_Call {
	_c.Call.Return(run)
	return _c
}

// NewPlugin creates a new instance of Plugin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlugin(t interface {
	mock.TestingT
	Cleanup(func())
}) *Plugin {
	mock := &Plugin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
